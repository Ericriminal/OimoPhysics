// Generated by Haxe 4.2.2
(function ($global) { "use strict";
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.now = function() {
	return Date.now();
};
Math.__name__ = true;
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var demo_common_Control = function(keyText,description,keyCode,onAction) {
	this.keyText = keyText;
	this.description = description;
	this.keyCode = keyCode;
	this.onAction = onAction;
};
demo_common_Control.__name__ = true;
demo_common_Control.prototype = {
	__class__: demo_common_Control
};
var demo_common_DemoBase = function(demoName) {
	this.demoName = demoName;
	this.count = 0;
};
demo_common_DemoBase.__name__ = true;
demo_common_DemoBase.prototype = {
	initControls: function(controls) {
	}
	,init: function(world,renderer,input,viewInfo) {
		this.world = world;
		this.renderer = renderer;
		this.input = input;
		this.viewInfo = viewInfo;
		var eye_x = 0;
		var eye_y = 5;
		var eye_z = 10;
		oimo_common_Vec3.numCreations++;
		oimo_common_Vec3.numCreations++;
		var up_x = 0;
		var up_y = 1;
		var up_z = 0;
		oimo_common_Vec3.numCreations++;
		var _this = renderer.viewMat;
		var zx = eye_x - 0;
		var zy = eye_y - 0;
		var zz = eye_z - 0;
		var tmp = 1 / Math.sqrt(zx * zx + zy * zy + zz * zz);
		zx *= tmp;
		zy *= tmp;
		zz *= tmp;
		var xx = up_y * zz - up_z * zy;
		var xy = up_z * zx - up_x * zz;
		var xz = up_x * zy - up_y * zx;
		tmp = 1 / Math.sqrt(xx * xx + xy * xy + xz * xz);
		xx *= tmp;
		xy *= tmp;
		xz *= tmp;
		var yx = zy * xz - zz * xy;
		var yy = zz * xx - zx * xz;
		var yz = zx * xy - zy * xx;
		_this.e00 = xx;
		_this.e01 = xy;
		_this.e02 = xz;
		_this.e03 = -(xx * eye_x + xy * eye_y + xz * eye_z);
		_this.e10 = yx;
		_this.e11 = yy;
		_this.e12 = yz;
		_this.e13 = -(yx * eye_x + yy * eye_y + yz * eye_z);
		_this.e20 = zx;
		_this.e21 = zy;
		_this.e22 = zz;
		_this.e23 = -(zx * eye_x + zy * eye_y + zz * eye_z);
		_this.e30 = 0;
		_this.e31 = 0;
		_this.e32 = 0;
		_this.e33 = 1;
		var rigidBodyConfig = new oimo_dynamics_rigidbody_RigidBodyConfig();
		rigidBodyConfig.type = oimo_dynamics_rigidbody_RigidBodyType.STATIC;
		this.mouseJointDummyBody = new oimo_dynamics_rigidbody_RigidBody(rigidBodyConfig);
		this.mouseJoint = null;
		this.dt = 0.016666666666666666;
	}
	,teleportRigidBodies: function(thresholdY,toY,rangeX,rangeZ) {
		var rb = this.world._rigidBodyList;
		var v_x = 0;
		var v_y = 0;
		var v_z = 0;
		oimo_common_Vec3.numCreations++;
		var v_x1 = 0;
		var v_y1 = 0;
		var v_z1 = 0;
		oimo_common_Vec3.numCreations++;
		while(rb != null) {
			v_x = rb._transform._positionX;
			v_y = rb._transform._positionY;
			v_z = rb._transform._positionZ;
			if(v_y < thresholdY) {
				v_y = toY;
				v_x = (-1 + Math.random() * 2) * rangeX;
				v_z = (-1 + Math.random() * 2) * rangeZ;
				rb._transform._positionX = v_x;
				rb._transform._positionY = toY;
				rb._transform._positionZ = v_z;
				var dst = rb._ptransform;
				var src = rb._transform;
				dst._positionX = src._positionX;
				dst._positionY = src._positionY;
				dst._positionZ = src._positionZ;
				dst._rotation00 = src._rotation00;
				dst._rotation01 = src._rotation01;
				dst._rotation02 = src._rotation02;
				dst._rotation10 = src._rotation10;
				dst._rotation11 = src._rotation11;
				dst._rotation12 = src._rotation12;
				dst._rotation20 = src._rotation20;
				dst._rotation21 = src._rotation21;
				dst._rotation22 = src._rotation22;
				var s = rb._shapeList;
				while(s != null) {
					var n = s._next;
					var tf1 = rb._ptransform;
					var tf2 = rb._transform;
					var dst1 = s._ptransform;
					var src1 = s._localTransform;
					var __tmp__00;
					var __tmp__01;
					var __tmp__02;
					var __tmp__10;
					var __tmp__11;
					var __tmp__12;
					var __tmp__20;
					var __tmp__21;
					var __tmp__22;
					__tmp__00 = tf1._rotation00 * src1._rotation00 + tf1._rotation01 * src1._rotation10 + tf1._rotation02 * src1._rotation20;
					__tmp__01 = tf1._rotation00 * src1._rotation01 + tf1._rotation01 * src1._rotation11 + tf1._rotation02 * src1._rotation21;
					__tmp__02 = tf1._rotation00 * src1._rotation02 + tf1._rotation01 * src1._rotation12 + tf1._rotation02 * src1._rotation22;
					__tmp__10 = tf1._rotation10 * src1._rotation00 + tf1._rotation11 * src1._rotation10 + tf1._rotation12 * src1._rotation20;
					__tmp__11 = tf1._rotation10 * src1._rotation01 + tf1._rotation11 * src1._rotation11 + tf1._rotation12 * src1._rotation21;
					__tmp__12 = tf1._rotation10 * src1._rotation02 + tf1._rotation11 * src1._rotation12 + tf1._rotation12 * src1._rotation22;
					__tmp__20 = tf1._rotation20 * src1._rotation00 + tf1._rotation21 * src1._rotation10 + tf1._rotation22 * src1._rotation20;
					__tmp__21 = tf1._rotation20 * src1._rotation01 + tf1._rotation21 * src1._rotation11 + tf1._rotation22 * src1._rotation21;
					__tmp__22 = tf1._rotation20 * src1._rotation02 + tf1._rotation21 * src1._rotation12 + tf1._rotation22 * src1._rotation22;
					dst1._rotation00 = __tmp__00;
					dst1._rotation01 = __tmp__01;
					dst1._rotation02 = __tmp__02;
					dst1._rotation10 = __tmp__10;
					dst1._rotation11 = __tmp__11;
					dst1._rotation12 = __tmp__12;
					dst1._rotation20 = __tmp__20;
					dst1._rotation21 = __tmp__21;
					dst1._rotation22 = __tmp__22;
					var __tmp__X;
					var __tmp__Y;
					var __tmp__Z;
					__tmp__X = tf1._rotation00 * src1._positionX + tf1._rotation01 * src1._positionY + tf1._rotation02 * src1._positionZ;
					__tmp__Y = tf1._rotation10 * src1._positionX + tf1._rotation11 * src1._positionY + tf1._rotation12 * src1._positionZ;
					__tmp__Z = tf1._rotation20 * src1._positionX + tf1._rotation21 * src1._positionY + tf1._rotation22 * src1._positionZ;
					dst1._positionX = __tmp__X;
					dst1._positionY = __tmp__Y;
					dst1._positionZ = __tmp__Z;
					dst1._positionX += tf1._positionX;
					dst1._positionY += tf1._positionY;
					dst1._positionZ += tf1._positionZ;
					var dst2 = s._transform;
					var src11 = s._localTransform;
					var __tmp__001;
					var __tmp__011;
					var __tmp__021;
					var __tmp__101;
					var __tmp__111;
					var __tmp__121;
					var __tmp__201;
					var __tmp__211;
					var __tmp__221;
					__tmp__001 = tf2._rotation00 * src11._rotation00 + tf2._rotation01 * src11._rotation10 + tf2._rotation02 * src11._rotation20;
					__tmp__011 = tf2._rotation00 * src11._rotation01 + tf2._rotation01 * src11._rotation11 + tf2._rotation02 * src11._rotation21;
					__tmp__021 = tf2._rotation00 * src11._rotation02 + tf2._rotation01 * src11._rotation12 + tf2._rotation02 * src11._rotation22;
					__tmp__101 = tf2._rotation10 * src11._rotation00 + tf2._rotation11 * src11._rotation10 + tf2._rotation12 * src11._rotation20;
					__tmp__111 = tf2._rotation10 * src11._rotation01 + tf2._rotation11 * src11._rotation11 + tf2._rotation12 * src11._rotation21;
					__tmp__121 = tf2._rotation10 * src11._rotation02 + tf2._rotation11 * src11._rotation12 + tf2._rotation12 * src11._rotation22;
					__tmp__201 = tf2._rotation20 * src11._rotation00 + tf2._rotation21 * src11._rotation10 + tf2._rotation22 * src11._rotation20;
					__tmp__211 = tf2._rotation20 * src11._rotation01 + tf2._rotation21 * src11._rotation11 + tf2._rotation22 * src11._rotation21;
					__tmp__221 = tf2._rotation20 * src11._rotation02 + tf2._rotation21 * src11._rotation12 + tf2._rotation22 * src11._rotation22;
					dst2._rotation00 = __tmp__001;
					dst2._rotation01 = __tmp__011;
					dst2._rotation02 = __tmp__021;
					dst2._rotation10 = __tmp__101;
					dst2._rotation11 = __tmp__111;
					dst2._rotation12 = __tmp__121;
					dst2._rotation20 = __tmp__201;
					dst2._rotation21 = __tmp__211;
					dst2._rotation22 = __tmp__221;
					var __tmp__X1;
					var __tmp__Y1;
					var __tmp__Z1;
					__tmp__X1 = tf2._rotation00 * src11._positionX + tf2._rotation01 * src11._positionY + tf2._rotation02 * src11._positionZ;
					__tmp__Y1 = tf2._rotation10 * src11._positionX + tf2._rotation11 * src11._positionY + tf2._rotation12 * src11._positionZ;
					__tmp__Z1 = tf2._rotation20 * src11._positionX + tf2._rotation21 * src11._positionY + tf2._rotation22 * src11._positionZ;
					dst2._positionX = __tmp__X1;
					dst2._positionY = __tmp__Y1;
					dst2._positionZ = __tmp__Z1;
					dst2._positionX += tf2._positionX;
					dst2._positionY += tf2._positionY;
					dst2._positionZ += tf2._positionZ;
					var minX;
					var minY;
					var minZ;
					var maxX;
					var maxY;
					var maxZ;
					s._geom._computeAabb(s._aabb,s._ptransform);
					minX = s._aabb._minX;
					minY = s._aabb._minY;
					minZ = s._aabb._minZ;
					maxX = s._aabb._maxX;
					maxY = s._aabb._maxY;
					maxZ = s._aabb._maxZ;
					s._geom._computeAabb(s._aabb,s._transform);
					s._aabb._minX = minX < s._aabb._minX ? minX : s._aabb._minX;
					s._aabb._minY = minY < s._aabb._minY ? minY : s._aabb._minY;
					s._aabb._minZ = minZ < s._aabb._minZ ? minZ : s._aabb._minZ;
					s._aabb._maxX = maxX > s._aabb._maxX ? maxX : s._aabb._maxX;
					s._aabb._maxY = maxY > s._aabb._maxY ? maxY : s._aabb._maxY;
					s._aabb._maxZ = maxZ > s._aabb._maxZ ? maxZ : s._aabb._maxZ;
					if(s._proxy != null) {
						var dX;
						var dY;
						var dZ;
						dX = s._transform._positionX - s._ptransform._positionX;
						dY = s._transform._positionY - s._ptransform._positionY;
						dZ = s._transform._positionZ - s._ptransform._positionZ;
						var v = s.displacement;
						v.x = dX;
						v.y = dY;
						v.z = dZ;
						s._rigidBody._world._broadPhase.moveProxy(s._proxy,s._aabb,s.displacement);
					}
					s = n;
				}
				rb._sleeping = false;
				rb._sleepTime = 0;
				if(rb._type == 1) {
					rb._velX = 0;
					rb._velY = 0;
					rb._velZ = 0;
				} else {
					rb._velX = v_x1;
					rb._velY = v_y1;
					rb._velZ = v_z1;
				}
				rb._sleeping = false;
				rb._sleepTime = 0;
			}
			rb = rb._next;
		}
	}
	,update: function() {
		this.count++;
		this.updateMouseJoint();
	}
	,drawAdditionalObjects: function(debugDraw) {
	}
	,updateMouseJoint: function() {
		var _this = this.renderer;
		var cameraPos = new oimo_common_Vec3(-(_this.viewMat.e00 * _this.viewMat.e03 + _this.viewMat.e10 * _this.viewMat.e13 + _this.viewMat.e20 * _this.viewMat.e23),-(_this.viewMat.e01 * _this.viewMat.e03 + _this.viewMat.e11 * _this.viewMat.e13 + _this.viewMat.e21 * _this.viewMat.e23),-(_this.viewMat.e02 * _this.viewMat.e03 + _this.viewMat.e12 * _this.viewMat.e13 + _this.viewMat.e22 * _this.viewMat.e23));
		var x = (this.input.mouseX / this.viewInfo.width - 0.5) * this.viewInfo.screenWidth;
		var y = (0.5 - this.input.mouseY / this.viewInfo.height) * this.viewInfo.screenHeight;
		var z = -this.viewInfo.screenDistance;
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var _this_x = x;
		var _this_y = y;
		var _this_z = z;
		oimo_common_Vec3.numCreations++;
		var _this = this.renderer.viewMat;
		var e00 = _this.e00;
		var e01 = _this.e01;
		var e02 = _this.e02;
		var e03 = _this.e03;
		var e10 = _this.e10;
		var e11 = _this.e11;
		var e12 = _this.e12;
		var e13 = _this.e13;
		var e20 = _this.e20;
		var e21 = _this.e21;
		var e22 = _this.e22;
		var e23 = _this.e23;
		var e30 = _this.e30;
		var e31 = _this.e31;
		var e32 = _this.e32;
		var e33 = _this.e33;
		if(e33 == null) {
			e33 = 1;
		}
		if(e32 == null) {
			e32 = 0;
		}
		if(e31 == null) {
			e31 = 0;
		}
		if(e30 == null) {
			e30 = 0;
		}
		if(e23 == null) {
			e23 = 0;
		}
		if(e22 == null) {
			e22 = 1;
		}
		if(e21 == null) {
			e21 = 0;
		}
		if(e20 == null) {
			e20 = 0;
		}
		if(e13 == null) {
			e13 = 0;
		}
		if(e12 == null) {
			e12 = 0;
		}
		if(e11 == null) {
			e11 = 1;
		}
		if(e10 == null) {
			e10 = 0;
		}
		if(e03 == null) {
			e03 = 0;
		}
		if(e02 == null) {
			e02 = 0;
		}
		if(e01 == null) {
			e01 = 0;
		}
		if(e00 == null) {
			e00 = 1;
		}
		var viewMat_e00 = e00;
		var viewMat_e01 = e01;
		var viewMat_e02 = e02;
		var viewMat_e03 = e03;
		var viewMat_e10 = e10;
		var viewMat_e11 = e11;
		var viewMat_e12 = e12;
		var viewMat_e13 = e13;
		var viewMat_e20 = e20;
		var viewMat_e21 = e21;
		var viewMat_e22 = e22;
		var viewMat_e23 = e23;
		var viewMat_e30 = e30;
		var viewMat_e31 = e31;
		var viewMat_e32 = e32;
		oimo_common_Mat4.numCreations++;
		var e00 = viewMat_e00;
		var e01 = viewMat_e10;
		var e02 = viewMat_e20;
		var e10 = viewMat_e01;
		var e11 = viewMat_e11;
		var e12 = viewMat_e21;
		var e20 = viewMat_e02;
		var e21 = viewMat_e12;
		var e22 = viewMat_e22;
		var e30 = viewMat_e03;
		var e31 = viewMat_e13;
		var e32 = viewMat_e23;
		viewMat_e00 = e00;
		viewMat_e01 = e01;
		viewMat_e02 = e02;
		viewMat_e03 = viewMat_e30;
		viewMat_e10 = e10;
		viewMat_e11 = e11;
		viewMat_e12 = e12;
		viewMat_e13 = viewMat_e31;
		viewMat_e20 = e20;
		viewMat_e21 = e21;
		viewMat_e22 = e22;
		viewMat_e23 = viewMat_e32;
		viewMat_e30 = e30;
		viewMat_e31 = e31;
		viewMat_e32 = e32;
		viewMat_e03 = 0;
		viewMat_e13 = 0;
		viewMat_e23 = 0;
		var x = _this_x * e00 + _this_y * e01 + _this_z * e02 + viewMat_e03;
		var y = _this_x * e10 + _this_y * e11 + _this_z * e12 + viewMat_e13;
		var z = _this_x * e20 + _this_y * e21 + _this_z * e22 + viewMat_e23;
		_this_x = x;
		_this_y = y;
		_this_z = z;
		var invLen = Math.sqrt(x * x + y * y + z * z);
		if(invLen > 0) {
			invLen = 1 / invLen;
		}
		var x1 = x * invLen;
		var y1 = y * invLen;
		var z1 = z * invLen;
		_this_x = x1;
		_this_y = y1;
		_this_z = z1;
		if(this.mouseJoint != null) {
			if(this.input.mouseL) {
				var _this = this.mouseJointDummyBody;
				var s = this.grabbingDistance;
				var x = x1 * s;
				var y = y1 * s;
				var z = z1 * s;
				if(z == null) {
					z = 0;
				}
				if(y == null) {
					y = 0;
				}
				if(x == null) {
					x = 0;
				}
				oimo_common_Vec3.numCreations++;
				var x2 = cameraPos.x + x;
				var y2 = cameraPos.y + y;
				var z2 = cameraPos.z + z;
				if(z2 == null) {
					z2 = 0;
				}
				if(y2 == null) {
					y2 = 0;
				}
				if(x2 == null) {
					x2 = 0;
				}
				oimo_common_Vec3.numCreations++;
				_this._transform._positionX = x2;
				_this._transform._positionY = y2;
				_this._transform._positionZ = z2;
				var dst = _this._ptransform;
				var src = _this._transform;
				dst._positionX = src._positionX;
				dst._positionY = src._positionY;
				dst._positionZ = src._positionZ;
				dst._rotation00 = src._rotation00;
				dst._rotation01 = src._rotation01;
				dst._rotation02 = src._rotation02;
				dst._rotation10 = src._rotation10;
				dst._rotation11 = src._rotation11;
				dst._rotation12 = src._rotation12;
				dst._rotation20 = src._rotation20;
				dst._rotation21 = src._rotation21;
				dst._rotation22 = src._rotation22;
				var s = _this._shapeList;
				while(s != null) {
					var n = s._next;
					var tf1 = _this._ptransform;
					var tf2 = _this._transform;
					var dst = s._ptransform;
					var src1 = s._localTransform;
					var __tmp__00;
					var __tmp__01;
					var __tmp__02;
					var __tmp__10;
					var __tmp__11;
					var __tmp__12;
					var __tmp__20;
					var __tmp__21;
					var __tmp__22;
					__tmp__00 = tf1._rotation00 * src1._rotation00 + tf1._rotation01 * src1._rotation10 + tf1._rotation02 * src1._rotation20;
					__tmp__01 = tf1._rotation00 * src1._rotation01 + tf1._rotation01 * src1._rotation11 + tf1._rotation02 * src1._rotation21;
					__tmp__02 = tf1._rotation00 * src1._rotation02 + tf1._rotation01 * src1._rotation12 + tf1._rotation02 * src1._rotation22;
					__tmp__10 = tf1._rotation10 * src1._rotation00 + tf1._rotation11 * src1._rotation10 + tf1._rotation12 * src1._rotation20;
					__tmp__11 = tf1._rotation10 * src1._rotation01 + tf1._rotation11 * src1._rotation11 + tf1._rotation12 * src1._rotation21;
					__tmp__12 = tf1._rotation10 * src1._rotation02 + tf1._rotation11 * src1._rotation12 + tf1._rotation12 * src1._rotation22;
					__tmp__20 = tf1._rotation20 * src1._rotation00 + tf1._rotation21 * src1._rotation10 + tf1._rotation22 * src1._rotation20;
					__tmp__21 = tf1._rotation20 * src1._rotation01 + tf1._rotation21 * src1._rotation11 + tf1._rotation22 * src1._rotation21;
					__tmp__22 = tf1._rotation20 * src1._rotation02 + tf1._rotation21 * src1._rotation12 + tf1._rotation22 * src1._rotation22;
					dst._rotation00 = __tmp__00;
					dst._rotation01 = __tmp__01;
					dst._rotation02 = __tmp__02;
					dst._rotation10 = __tmp__10;
					dst._rotation11 = __tmp__11;
					dst._rotation12 = __tmp__12;
					dst._rotation20 = __tmp__20;
					dst._rotation21 = __tmp__21;
					dst._rotation22 = __tmp__22;
					var __tmp__X;
					var __tmp__Y;
					var __tmp__Z;
					__tmp__X = tf1._rotation00 * src1._positionX + tf1._rotation01 * src1._positionY + tf1._rotation02 * src1._positionZ;
					__tmp__Y = tf1._rotation10 * src1._positionX + tf1._rotation11 * src1._positionY + tf1._rotation12 * src1._positionZ;
					__tmp__Z = tf1._rotation20 * src1._positionX + tf1._rotation21 * src1._positionY + tf1._rotation22 * src1._positionZ;
					dst._positionX = __tmp__X;
					dst._positionY = __tmp__Y;
					dst._positionZ = __tmp__Z;
					dst._positionX += tf1._positionX;
					dst._positionY += tf1._positionY;
					dst._positionZ += tf1._positionZ;
					var dst1 = s._transform;
					var src11 = s._localTransform;
					var __tmp__001;
					var __tmp__011;
					var __tmp__021;
					var __tmp__101;
					var __tmp__111;
					var __tmp__121;
					var __tmp__201;
					var __tmp__211;
					var __tmp__221;
					__tmp__001 = tf2._rotation00 * src11._rotation00 + tf2._rotation01 * src11._rotation10 + tf2._rotation02 * src11._rotation20;
					__tmp__011 = tf2._rotation00 * src11._rotation01 + tf2._rotation01 * src11._rotation11 + tf2._rotation02 * src11._rotation21;
					__tmp__021 = tf2._rotation00 * src11._rotation02 + tf2._rotation01 * src11._rotation12 + tf2._rotation02 * src11._rotation22;
					__tmp__101 = tf2._rotation10 * src11._rotation00 + tf2._rotation11 * src11._rotation10 + tf2._rotation12 * src11._rotation20;
					__tmp__111 = tf2._rotation10 * src11._rotation01 + tf2._rotation11 * src11._rotation11 + tf2._rotation12 * src11._rotation21;
					__tmp__121 = tf2._rotation10 * src11._rotation02 + tf2._rotation11 * src11._rotation12 + tf2._rotation12 * src11._rotation22;
					__tmp__201 = tf2._rotation20 * src11._rotation00 + tf2._rotation21 * src11._rotation10 + tf2._rotation22 * src11._rotation20;
					__tmp__211 = tf2._rotation20 * src11._rotation01 + tf2._rotation21 * src11._rotation11 + tf2._rotation22 * src11._rotation21;
					__tmp__221 = tf2._rotation20 * src11._rotation02 + tf2._rotation21 * src11._rotation12 + tf2._rotation22 * src11._rotation22;
					dst1._rotation00 = __tmp__001;
					dst1._rotation01 = __tmp__011;
					dst1._rotation02 = __tmp__021;
					dst1._rotation10 = __tmp__101;
					dst1._rotation11 = __tmp__111;
					dst1._rotation12 = __tmp__121;
					dst1._rotation20 = __tmp__201;
					dst1._rotation21 = __tmp__211;
					dst1._rotation22 = __tmp__221;
					var __tmp__X1;
					var __tmp__Y1;
					var __tmp__Z1;
					__tmp__X1 = tf2._rotation00 * src11._positionX + tf2._rotation01 * src11._positionY + tf2._rotation02 * src11._positionZ;
					__tmp__Y1 = tf2._rotation10 * src11._positionX + tf2._rotation11 * src11._positionY + tf2._rotation12 * src11._positionZ;
					__tmp__Z1 = tf2._rotation20 * src11._positionX + tf2._rotation21 * src11._positionY + tf2._rotation22 * src11._positionZ;
					dst1._positionX = __tmp__X1;
					dst1._positionY = __tmp__Y1;
					dst1._positionZ = __tmp__Z1;
					dst1._positionX += tf2._positionX;
					dst1._positionY += tf2._positionY;
					dst1._positionZ += tf2._positionZ;
					var minX;
					var minY;
					var minZ;
					var maxX;
					var maxY;
					var maxZ;
					s._geom._computeAabb(s._aabb,s._ptransform);
					minX = s._aabb._minX;
					minY = s._aabb._minY;
					minZ = s._aabb._minZ;
					maxX = s._aabb._maxX;
					maxY = s._aabb._maxY;
					maxZ = s._aabb._maxZ;
					s._geom._computeAabb(s._aabb,s._transform);
					s._aabb._minX = minX < s._aabb._minX ? minX : s._aabb._minX;
					s._aabb._minY = minY < s._aabb._minY ? minY : s._aabb._minY;
					s._aabb._minZ = minZ < s._aabb._minZ ? minZ : s._aabb._minZ;
					s._aabb._maxX = maxX > s._aabb._maxX ? maxX : s._aabb._maxX;
					s._aabb._maxY = maxY > s._aabb._maxY ? maxY : s._aabb._maxY;
					s._aabb._maxZ = maxZ > s._aabb._maxZ ? maxZ : s._aabb._maxZ;
					if(s._proxy != null) {
						var dX;
						var dY;
						var dZ;
						dX = s._transform._positionX - s._ptransform._positionX;
						dY = s._transform._positionY - s._ptransform._positionY;
						dZ = s._transform._positionZ - s._ptransform._positionZ;
						var v = s.displacement;
						v.x = dX;
						v.y = dY;
						v.z = dZ;
						s._rigidBody._world._broadPhase.moveProxy(s._proxy,s._aabb,s.displacement);
					}
					s = n;
				}
				_this._sleeping = false;
				_this._sleepTime = 0;
				var _this = this.mouseJoint._b1;
				_this._sleeping = false;
				_this._sleepTime = 0;
				var _this = this.mouseJoint._b2;
				_this._sleeping = false;
				_this._sleepTime = 0;
			} else {
				this.world.removeJoint(this.mouseJoint);
				this.mouseJoint = null;
			}
		} else if(this.input.mouseL && !this.input.pmouseL) {
			var x = x1 * 500;
			var y = y1 * 500;
			var z = z1 * 500;
			if(z == null) {
				z = 0;
			}
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			oimo_common_Vec3.numCreations++;
			var end = new oimo_common_Vec3(cameraPos.x + x,cameraPos.y + y,cameraPos.z + z);
			var closest = new oimo_dynamics_callback_RayCastClosest();
			this.world.rayCast(cameraPos,end,closest);
			if(!closest.hit) {
				return;
			}
			var body = closest.shape._rigidBody;
			var position = closest.position;
			if(body == null || body._type != oimo_dynamics_rigidbody_RigidBodyType.DYNAMIC) {
				return;
			}
			var jc = new oimo_dynamics_constraint_joint_SphericalJointConfig();
			jc.springDamper.frequency = 4.0;
			jc.springDamper.dampingRatio = 1;
			jc.rigidBody1 = body;
			jc.rigidBody2 = this.mouseJointDummyBody;
			jc.allowCollision = false;
			var v_x = 0;
			var v_y = 0;
			var v_z = 0;
			oimo_common_Vec3.numCreations++;
			v_x = body._transform._positionX;
			v_y = body._transform._positionY;
			v_z = body._transform._positionZ;
			jc.localAnchor1 = new oimo_common_Vec3(position.x - v_x,position.y - v_y,position.z - v_z);
			var _this = jc.localAnchor1;
			var m_e00 = 1;
			var m_e01 = 0;
			var m_e02 = 0;
			var m_e10 = 0;
			var m_e11 = 1;
			var m_e12 = 0;
			var m_e20 = 0;
			var m_e21 = 0;
			var m_e22 = 1;
			oimo_common_Mat3.numCreations++;
			m_e00 = body._transform._rotation00;
			m_e01 = body._transform._rotation01;
			m_e02 = body._transform._rotation02;
			m_e10 = body._transform._rotation10;
			m_e11 = body._transform._rotation11;
			m_e12 = body._transform._rotation12;
			m_e20 = body._transform._rotation20;
			m_e21 = body._transform._rotation21;
			m_e22 = body._transform._rotation22;
			var e00 = m_e00;
			var e01 = m_e10;
			var e02 = m_e20;
			var e10 = m_e01;
			var e11 = m_e11;
			var e12 = m_e21;
			var e20 = m_e02;
			var e21 = m_e12;
			var e22 = m_e22;
			m_e00 = e00;
			m_e01 = e01;
			m_e02 = e02;
			m_e10 = e10;
			m_e11 = e11;
			m_e12 = e12;
			m_e20 = e20;
			m_e21 = e21;
			m_e22 = e22;
			var y = _this.x * e10 + _this.y * e11 + _this.z * e12;
			var z = _this.x * e20 + _this.y * e21 + _this.z * e22;
			_this.x = _this.x * e00 + _this.y * e01 + _this.z * e02;
			_this.y = y;
			_this.z = z;
			jc.localAnchor2.zero();
			var _this = this.mouseJointDummyBody;
			_this._transform._positionX = position.x;
			_this._transform._positionY = position.y;
			_this._transform._positionZ = position.z;
			var dst = _this._ptransform;
			var src = _this._transform;
			dst._positionX = src._positionX;
			dst._positionY = src._positionY;
			dst._positionZ = src._positionZ;
			dst._rotation00 = src._rotation00;
			dst._rotation01 = src._rotation01;
			dst._rotation02 = src._rotation02;
			dst._rotation10 = src._rotation10;
			dst._rotation11 = src._rotation11;
			dst._rotation12 = src._rotation12;
			dst._rotation20 = src._rotation20;
			dst._rotation21 = src._rotation21;
			dst._rotation22 = src._rotation22;
			var s = _this._shapeList;
			while(s != null) {
				var n = s._next;
				var tf1 = _this._ptransform;
				var tf2 = _this._transform;
				var dst = s._ptransform;
				var src1 = s._localTransform;
				var __tmp__00;
				var __tmp__01;
				var __tmp__02;
				var __tmp__10;
				var __tmp__11;
				var __tmp__12;
				var __tmp__20;
				var __tmp__21;
				var __tmp__22;
				__tmp__00 = tf1._rotation00 * src1._rotation00 + tf1._rotation01 * src1._rotation10 + tf1._rotation02 * src1._rotation20;
				__tmp__01 = tf1._rotation00 * src1._rotation01 + tf1._rotation01 * src1._rotation11 + tf1._rotation02 * src1._rotation21;
				__tmp__02 = tf1._rotation00 * src1._rotation02 + tf1._rotation01 * src1._rotation12 + tf1._rotation02 * src1._rotation22;
				__tmp__10 = tf1._rotation10 * src1._rotation00 + tf1._rotation11 * src1._rotation10 + tf1._rotation12 * src1._rotation20;
				__tmp__11 = tf1._rotation10 * src1._rotation01 + tf1._rotation11 * src1._rotation11 + tf1._rotation12 * src1._rotation21;
				__tmp__12 = tf1._rotation10 * src1._rotation02 + tf1._rotation11 * src1._rotation12 + tf1._rotation12 * src1._rotation22;
				__tmp__20 = tf1._rotation20 * src1._rotation00 + tf1._rotation21 * src1._rotation10 + tf1._rotation22 * src1._rotation20;
				__tmp__21 = tf1._rotation20 * src1._rotation01 + tf1._rotation21 * src1._rotation11 + tf1._rotation22 * src1._rotation21;
				__tmp__22 = tf1._rotation20 * src1._rotation02 + tf1._rotation21 * src1._rotation12 + tf1._rotation22 * src1._rotation22;
				dst._rotation00 = __tmp__00;
				dst._rotation01 = __tmp__01;
				dst._rotation02 = __tmp__02;
				dst._rotation10 = __tmp__10;
				dst._rotation11 = __tmp__11;
				dst._rotation12 = __tmp__12;
				dst._rotation20 = __tmp__20;
				dst._rotation21 = __tmp__21;
				dst._rotation22 = __tmp__22;
				var __tmp__X;
				var __tmp__Y;
				var __tmp__Z;
				__tmp__X = tf1._rotation00 * src1._positionX + tf1._rotation01 * src1._positionY + tf1._rotation02 * src1._positionZ;
				__tmp__Y = tf1._rotation10 * src1._positionX + tf1._rotation11 * src1._positionY + tf1._rotation12 * src1._positionZ;
				__tmp__Z = tf1._rotation20 * src1._positionX + tf1._rotation21 * src1._positionY + tf1._rotation22 * src1._positionZ;
				dst._positionX = __tmp__X;
				dst._positionY = __tmp__Y;
				dst._positionZ = __tmp__Z;
				dst._positionX += tf1._positionX;
				dst._positionY += tf1._positionY;
				dst._positionZ += tf1._positionZ;
				var dst1 = s._transform;
				var src11 = s._localTransform;
				var __tmp__001;
				var __tmp__011;
				var __tmp__021;
				var __tmp__101;
				var __tmp__111;
				var __tmp__121;
				var __tmp__201;
				var __tmp__211;
				var __tmp__221;
				__tmp__001 = tf2._rotation00 * src11._rotation00 + tf2._rotation01 * src11._rotation10 + tf2._rotation02 * src11._rotation20;
				__tmp__011 = tf2._rotation00 * src11._rotation01 + tf2._rotation01 * src11._rotation11 + tf2._rotation02 * src11._rotation21;
				__tmp__021 = tf2._rotation00 * src11._rotation02 + tf2._rotation01 * src11._rotation12 + tf2._rotation02 * src11._rotation22;
				__tmp__101 = tf2._rotation10 * src11._rotation00 + tf2._rotation11 * src11._rotation10 + tf2._rotation12 * src11._rotation20;
				__tmp__111 = tf2._rotation10 * src11._rotation01 + tf2._rotation11 * src11._rotation11 + tf2._rotation12 * src11._rotation21;
				__tmp__121 = tf2._rotation10 * src11._rotation02 + tf2._rotation11 * src11._rotation12 + tf2._rotation12 * src11._rotation22;
				__tmp__201 = tf2._rotation20 * src11._rotation00 + tf2._rotation21 * src11._rotation10 + tf2._rotation22 * src11._rotation20;
				__tmp__211 = tf2._rotation20 * src11._rotation01 + tf2._rotation21 * src11._rotation11 + tf2._rotation22 * src11._rotation21;
				__tmp__221 = tf2._rotation20 * src11._rotation02 + tf2._rotation21 * src11._rotation12 + tf2._rotation22 * src11._rotation22;
				dst1._rotation00 = __tmp__001;
				dst1._rotation01 = __tmp__011;
				dst1._rotation02 = __tmp__021;
				dst1._rotation10 = __tmp__101;
				dst1._rotation11 = __tmp__111;
				dst1._rotation12 = __tmp__121;
				dst1._rotation20 = __tmp__201;
				dst1._rotation21 = __tmp__211;
				dst1._rotation22 = __tmp__221;
				var __tmp__X1;
				var __tmp__Y1;
				var __tmp__Z1;
				__tmp__X1 = tf2._rotation00 * src11._positionX + tf2._rotation01 * src11._positionY + tf2._rotation02 * src11._positionZ;
				__tmp__Y1 = tf2._rotation10 * src11._positionX + tf2._rotation11 * src11._positionY + tf2._rotation12 * src11._positionZ;
				__tmp__Z1 = tf2._rotation20 * src11._positionX + tf2._rotation21 * src11._positionY + tf2._rotation22 * src11._positionZ;
				dst1._positionX = __tmp__X1;
				dst1._positionY = __tmp__Y1;
				dst1._positionZ = __tmp__Z1;
				dst1._positionX += tf2._positionX;
				dst1._positionY += tf2._positionY;
				dst1._positionZ += tf2._positionZ;
				var minX;
				var minY;
				var minZ;
				var maxX;
				var maxY;
				var maxZ;
				s._geom._computeAabb(s._aabb,s._ptransform);
				minX = s._aabb._minX;
				minY = s._aabb._minY;
				minZ = s._aabb._minZ;
				maxX = s._aabb._maxX;
				maxY = s._aabb._maxY;
				maxZ = s._aabb._maxZ;
				s._geom._computeAabb(s._aabb,s._transform);
				s._aabb._minX = minX < s._aabb._minX ? minX : s._aabb._minX;
				s._aabb._minY = minY < s._aabb._minY ? minY : s._aabb._minY;
				s._aabb._minZ = minZ < s._aabb._minZ ? minZ : s._aabb._minZ;
				s._aabb._maxX = maxX > s._aabb._maxX ? maxX : s._aabb._maxX;
				s._aabb._maxY = maxY > s._aabb._maxY ? maxY : s._aabb._maxY;
				s._aabb._maxZ = maxZ > s._aabb._maxZ ? maxZ : s._aabb._maxZ;
				if(s._proxy != null) {
					var dX;
					var dY;
					var dZ;
					dX = s._transform._positionX - s._ptransform._positionX;
					dY = s._transform._positionY - s._ptransform._positionY;
					dZ = s._transform._positionZ - s._ptransform._positionZ;
					var v = s.displacement;
					v.x = dX;
					v.y = dY;
					v.z = dZ;
					s._rigidBody._world._broadPhase.moveProxy(s._proxy,s._aabb,s.displacement);
				}
				s = n;
			}
			_this._sleeping = false;
			_this._sleepTime = 0;
			this.mouseJoint = new oimo_dynamics_constraint_joint_SphericalJoint(jc);
			this.world.addJoint(this.mouseJoint);
			var x = position.x - cameraPos.x;
			var y = position.y - cameraPos.y;
			var z = position.z - cameraPos.z;
			if(z == null) {
				z = 0;
			}
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var _this_x = x;
			var _this_y = y;
			var _this_z = z;
			oimo_common_Vec3.numCreations++;
			this.grabbingDistance = Math.sqrt(_this_x * _this_x + _this_y * _this_y + _this_z * _this_z);
		}
	}
	,draw: function() {
		this.renderer.draw(this);
	}
	,additionalInfo: function() {
		return "";
	}
	,__class__: demo_common_DemoBase
};
var demo_common_DemoMain = function(width,height) {
	this.width = width;
	this.height = height;
	this.input = new demo_common_UserInput();
	this.viewInfo = new demo_common_ViewInfo();
	this.nmouseX = 0;
	this.nmouseY = 0;
	this.fpsTime = HxOverrides.now() / 1000;
	this.fpsCount = 0;
	this.fps = 0;
	this.pause = false;
	this.singleStep = false;
	this.nkeyboard = new Array(demo_common_UserInput.KEYBOARD_LENGTH);
	var _g = 0;
	var _g1 = demo_common_UserInput.KEYBOARD_LENGTH;
	while(_g < _g1) this.nkeyboard[_g++] = false;
	this.text = "";
	this.createDemos();
};
demo_common_DemoMain.__name__ = true;
demo_common_DemoMain.prototype = {
	createDemos: function() {
		this.demos = [new demo_core_BasicDemo(),new demo_core_CompoundShapesDemo(),new demo_core_FrictionsAndRestitutions(),new demo_core_CollisionFilteringDemo(),new demo_core_ConvexHullDemo(),new demo_core_VerticalStackingDemo(),new demo_core_LimitRotationDemo(),new demo_core_BroadPhaseStressDemo(),new demo_core_BridgeDemo(),new demo_core_SpringsDemo(),new demo_core_JointsDemo(),new demo_core_BreakableJointDemo(),new demo_core_RagdollDemo(),new demo_core_FallingRagdollDemo(),new demo_core_VariableTimeStepDemo(),new demo_core_GearsDemo(),new demo_core_RayCastingDemo(),new demo_core_ConvexCastingDemo()];
		this.currentDemoIndex = 0;
		this.currentDemo = this.demos[0];
	}
	,init: function(graphics) {
		this.g = graphics;
		this.renderer = new demo_common_DemoRenderer(null,this.g);
		var aspectRatio = this.width / this.height;
		var fovY = Math.max(1.0471975511965967,Math.atan(Math.tan(0.52359877559829837) / aspectRatio) * 2);
		var _this = this.renderer.projMat;
		var h = 1 / Math.tan(fovY * 0.5);
		_this.e00 = h / aspectRatio;
		_this.e01 = 0;
		_this.e02 = 0;
		_this.e03 = 0;
		_this.e10 = 0;
		_this.e11 = h;
		_this.e12 = 0;
		_this.e13 = 0;
		_this.e20 = 0;
		_this.e21 = 0;
		_this.e22 = -1.000100010001;
		_this.e23 = -0.1000100010001;
		_this.e30 = 0;
		_this.e31 = 0;
		_this.e32 = -1;
		_this.e33 = 0;
		this.viewInfo.width = this.width;
		this.viewInfo.height = this.height;
		this.viewInfo.screenDistance = 1;
		this.viewInfo.screenHeight = 2 * Math.tan(fovY * 0.5);
		this.viewInfo.screenWidth = this.viewInfo.screenHeight * aspectRatio;
		this.initDemo();
	}
	,initDemo: function() {
		this.world = new oimo_dynamics_World();
		this.renderer.w = this.world;
		this.renderer.g.getDebugDraw().style = new oimo_dynamics_common_DebugDrawStyle();
		this.initControls();
		this.currentDemo.init(this.world,this.renderer,this.input,this.viewInfo);
		this.count = 0;
	}
	,initControls: function() {
		var _gthis = this;
		var dd = this.g.getDebugDraw();
		this.controls = [];
		this.controls = this.controls.concat([new demo_common_Control("Q",function() {
			return "previous demo";
		},HxOverrides.cca("Q",0),function() {
			_gthis.changeDemo(-1);
		}),new demo_common_Control("E",function() {
			return "next demo";
		},HxOverrides.cca("E",0),function() {
			_gthis.changeDemo(1);
		}),new demo_common_Control("ENTER",function() {
			if(_gthis.pause) {
				return "resume";
			} else {
				return "pause";
			}
		},demo_common_UserInput.KEYCODE_ENTER,function() {
			_gthis.pause = !_gthis.pause;
		}),new demo_common_Control("P",function() {
			if(_gthis.pause) {
				return "compute single step";
			} else {
				return "---";
			}
		},HxOverrides.cca("P",0),function() {
			if(_gthis.pause) {
				_gthis.singleStep = true;
			}
		}),new demo_common_Control("W",function() {
			return (dd.wireframe ? "solid" : "wireframe") + " mode";
		},HxOverrides.cca("W",0),function() {
			dd.wireframe = !dd.wireframe;
		}),new demo_common_Control("L",function() {
			return (oimo_common_Setting.disableSleeping ? "enable" : "disable") + " sleeping";
		},HxOverrides.cca("L",0),function() {
			oimo_common_Setting.disableSleeping = !oimo_common_Setting.disableSleeping;
		}),new demo_common_Control("R",function() {
			return (dd.drawPairs ? "hide" : "draw") + " pairs";
		},HxOverrides.cca("R",0),function() {
			dd.drawPairs = !dd.drawPairs;
		}),new demo_common_Control("V",function() {
			return (dd.drawAabbs ? "hide" : "draw") + " AABBs";
		},HxOverrides.cca("V",0),function() {
			dd.drawAabbs = !dd.drawAabbs;
		}),new demo_common_Control("B",function() {
			return (dd.drawBases ? "hide" : "draw") + " bases";
		},HxOverrides.cca("B",0),function() {
			dd.drawBases = !dd.drawBases;
		}),new demo_common_Control("C",function() {
			return (dd.drawContacts ? "hide" : "draw") + " contacts";
		},HxOverrides.cca("C",0),function() {
			dd.drawContacts = !dd.drawContacts;
		}),new demo_common_Control("J",function() {
			return (dd.drawJoints ? "hide" : "draw") + " joints";
		},HxOverrides.cca("J",0),function() {
			dd.drawJoints = !dd.drawJoints;
		}),new demo_common_Control("K",function() {
			return (dd.drawJointLimits ? "hide" : "draw") + " joint limits";
		},HxOverrides.cca("K",0),function() {
			dd.drawJointLimits = !dd.drawJointLimits;
		}),new demo_common_Control("A",function() {
			return (dd.drawContactBases ? "hide" : "draw") + " contact bases";
		},HxOverrides.cca("A",0),function() {
			dd.drawContactBases = !dd.drawContactBases;
		}),new demo_common_Control("T",function() {
			return (dd.drawBvh ? "hide" : "draw") + " AABB tree";
		},HxOverrides.cca("T",0),function() {
			dd.drawBvh = !dd.drawBvh;
		}),new demo_common_Control("S",function() {
			return (dd.drawShapes ? "hide" : "draw") + " shapes";
		},HxOverrides.cca("S",0),function() {
			dd.drawShapes = !dd.drawShapes;
		})]);
		this.currentDemo.initControls(this.controls);
	}
	,loop: function() {
		this.count++;
		this.input.pmouseX = this.input.mouseX;
		this.input.pmouseY = this.input.mouseY;
		this.input.pmouseL = this.input.mouseL;
		this.input.pmouseR = this.input.mouseR;
		this.input.mouseX = this.nmouseX;
		this.input.mouseY = this.nmouseY;
		this.input.mouseL = this.nmouseL;
		this.input.mouseR = this.nmouseR;
		var _g = 0;
		var _g1 = demo_common_UserInput.KEYBOARD_LENGTH;
		while(_g < _g1) {
			var i = _g++;
			this.input.pkeyboard[i] = this.input.keyboard[i];
			this.input.keyboard[i] = this.nkeyboard[i];
		}
		this.control();
		this.currentDemo.update();
		if(!this.pause || this.singleStep) {
			this.world.step(this.currentDemo.dt);
			this.singleStep = false;
		}
		var drawBegin = HxOverrides.now() / 1000;
		this.currentDemo.draw();
		var drawTime = (HxOverrides.now() / 1000 - drawBegin) * 1000;
		var currentTime = HxOverrides.now() / 1000;
		this.fpsCount++;
		if(this.fpsTime + 1 < currentTime) {
			this.fps = this.fpsCount;
			this.fpsTime += 1;
			this.fpsCount = 0;
		}
		this.text = "" + this.currentDemo.demoName + " - " + (this.pause ? "Paused" : "Running") + "\n" + "------------\n" + "Profile\n" + ("  Rigid Bodies  : " + this.world._numRigidBodies + "\n") + ("  Joints        : " + this.world._numJoints + "\n") + ("  Shapes        : " + this.world._numShapes + "\n") + ("  Pairs         : " + this.world._contactManager._numContacts + "\n") + "------------\n" + "Performance\n" + ("  Broad Phase  : " + Math.round(oimo_dynamics_common_Performance.broadPhaseCollisionTime) + "ms\n") + ("  Narrow Phase : " + Math.round(oimo_dynamics_common_Performance.narrowPhaseCollisionTime) + "ms\n") + ("  Dynamics     : " + Math.round(oimo_dynamics_common_Performance.dynamicsTime) + "ms\n") + ("  Physics Total: " + Math.round(oimo_dynamics_common_Performance.totalTime) + "ms\n") + ("  Rendering    : " + Math.round(drawTime) + "ms\n") + ("  Actual FPS   : " + this.fps + "\n") + "------------\n" + "Control\n" + ("" + this.createKeyDescriptions("  ")) + "------------\n" + "Misc. Info\n" + ("" + this.additionalInfo()) + "\n";
		oimo_common_Vec3.numCreations = 0;
		oimo_common_Mat3.numCreations = 0;
		oimo_common_Quat.numCreations = 0;
	}
	,createKeyDescriptions: function(prefix) {
		var res = "";
		var _g = 0;
		var _g1 = this.controls;
		while(_g < _g1.length) {
			var control = _g1[_g];
			++_g;
			res += "" + prefix + control.keyText + ": " + control.description() + "\n";
		}
		return res;
	}
	,additionalInfo: function() {
		return this.currentDemo.additionalInfo();
	}
	,control: function() {
		var _g = 0;
		var _g1 = this.controls;
		while(_g < _g1.length) {
			var control = _g1[_g];
			++_g;
			if(this.input.isKeyPressed(null,control.keyCode)) {
				control.onAction();
			}
		}
	}
	,changeDemo: function(offset) {
		var num = this.demos.length;
		this.currentDemoIndex = ((this.currentDemoIndex + offset) % num + num) % num;
		this.currentDemo = this.demos[this.currentDemoIndex];
		this.initDemo();
	}
	,mouseMoved: function(x,y) {
		this.nmouseX = x;
		this.nmouseY = y;
	}
	,mouseLPressed: function() {
		this.nmouseL = true;
	}
	,mouseRPressed: function() {
		this.nmouseR = true;
	}
	,mouseLReleased: function() {
		this.nmouseL = false;
	}
	,mouseRReleased: function() {
		this.nmouseR = false;
	}
	,keyPressed: function(keyCode) {
		if(keyCode < 0 || keyCode >= demo_common_UserInput.KEYBOARD_LENGTH) {
			return;
		}
		this.nkeyboard[keyCode] = true;
	}
	,keyReleased: function(keyCode) {
		if(keyCode < 0 || keyCode >= demo_common_UserInput.KEYBOARD_LENGTH) {
			return;
		}
		this.nkeyboard[keyCode] = false;
	}
	,action: function(index) {
		if(index >= 0 && index < this.controls.length) {
			this.controls[index].onAction();
		}
	}
	,__class__: demo_common_DemoMain
};
var demo_common_DemoRenderer = function(world,graphics) {
	this.w = world;
	this.g = graphics;
	this.bgColor = new oimo_common_Vec3(0.1,0.1,0.1);
	this.viewMat = new oimo_common_Mat4();
	this.projMat = new oimo_common_Mat4();
};
demo_common_DemoRenderer.__name__ = true;
demo_common_DemoRenderer.prototype = {
	setWorld: function(world) {
		this.w = world;
	}
	,setGraphics: function(graphics) {
		this.g = graphics;
	}
	,getGraphics: function() {
		return this.g;
	}
	,draw: function(test) {
		this.g.setViewMatrix(this.viewMat);
		this.g.setProjectionMatrix(this.projMat);
		this.g.begin(this.bgColor);
		this.w._debugDraw = this.g.getDebugDraw();
		this.w.debugDraw();
		test.drawAdditionalObjects(this.g.getDebugDraw());
		this.g.end();
	}
	,camera: function(eye,at,up) {
		var _this = this.viewMat;
		var eyeX = eye.x;
		var eyeY = eye.y;
		var eyeZ = eye.z;
		var upX = up.x;
		var upY = up.y;
		var upZ = up.z;
		var zx = eyeX - at.x;
		var zy = eyeY - at.y;
		var zz = eyeZ - at.z;
		var tmp = 1 / Math.sqrt(zx * zx + zy * zy + zz * zz);
		zx *= tmp;
		zy *= tmp;
		zz *= tmp;
		var xx = upY * zz - upZ * zy;
		var xy = upZ * zx - upX * zz;
		var xz = upX * zy - upY * zx;
		tmp = 1 / Math.sqrt(xx * xx + xy * xy + xz * xz);
		xx *= tmp;
		xy *= tmp;
		xz *= tmp;
		var yx = zy * xz - zz * xy;
		var yy = zz * xx - zx * xz;
		var yz = zx * xy - zy * xx;
		_this.e00 = xx;
		_this.e01 = xy;
		_this.e02 = xz;
		_this.e03 = -(xx * eyeX + xy * eyeY + xz * eyeZ);
		_this.e10 = yx;
		_this.e11 = yy;
		_this.e12 = yz;
		_this.e13 = -(yx * eyeX + yy * eyeY + yz * eyeZ);
		_this.e20 = zx;
		_this.e21 = zy;
		_this.e22 = zz;
		_this.e23 = -(zx * eyeX + zy * eyeY + zz * eyeZ);
		_this.e30 = 0;
		_this.e31 = 0;
		_this.e32 = 0;
		_this.e33 = 1;
	}
	,getViewMatrix: function() {
		var _this = this.viewMat;
		return new oimo_common_Mat4(_this.e00,_this.e01,_this.e02,_this.e03,_this.e10,_this.e11,_this.e12,_this.e13,_this.e20,_this.e21,_this.e22,_this.e23,_this.e30,_this.e31,_this.e32,_this.e33);
	}
	,getCameraPosition: function() {
		return new oimo_common_Vec3(-(this.viewMat.e00 * this.viewMat.e03 + this.viewMat.e10 * this.viewMat.e13 + this.viewMat.e20 * this.viewMat.e23),-(this.viewMat.e01 * this.viewMat.e03 + this.viewMat.e11 * this.viewMat.e13 + this.viewMat.e21 * this.viewMat.e23),-(this.viewMat.e02 * this.viewMat.e03 + this.viewMat.e12 * this.viewMat.e13 + this.viewMat.e22 * this.viewMat.e23));
	}
	,perspective: function(fovY,aspect) {
		var _this = this.projMat;
		var h = 1 / Math.tan(fovY * 0.5);
		_this.e00 = h / aspect;
		_this.e01 = 0;
		_this.e02 = 0;
		_this.e03 = 0;
		_this.e10 = 0;
		_this.e11 = h;
		_this.e12 = 0;
		_this.e13 = 0;
		_this.e20 = 0;
		_this.e21 = 0;
		_this.e22 = -1.000100010001;
		_this.e23 = -0.1000100010001;
		_this.e30 = 0;
		_this.e31 = 0;
		_this.e32 = -1;
		_this.e33 = 0;
	}
	,getProjectionMatrix: function() {
		var _this = this.projMat;
		return new oimo_common_Mat4(_this.e00,_this.e01,_this.e02,_this.e03,_this.e10,_this.e11,_this.e12,_this.e13,_this.e20,_this.e21,_this.e22,_this.e23,_this.e30,_this.e31,_this.e32,_this.e33);
	}
	,__class__: demo_common_DemoRenderer
};
var demo_common_IDemoGraphics = function() { };
demo_common_IDemoGraphics.__name__ = true;
demo_common_IDemoGraphics.__isInterface__ = true;
demo_common_IDemoGraphics.prototype = {
	__class__: demo_common_IDemoGraphics
};
var demo_common_OimoUtil = function() { };
demo_common_OimoUtil.__name__ = true;
demo_common_OimoUtil.addRagdollJoint = function(w,rb1,rb2,anchor,twistAxis,swingAxis,swingSd,maxSwing1Deg,maxSwing2Deg,twistSd,twistLm) {
	if(maxSwing2Deg == null) {
		maxSwing2Deg = 180;
	}
	if(maxSwing1Deg == null) {
		maxSwing1Deg = 180;
	}
	var jc = new oimo_dynamics_constraint_joint_RagdollJointConfig();
	jc.init(rb1,rb2,anchor,twistAxis,swingAxis);
	if(twistSd != null) {
		jc.twistSpringDamper = twistSd;
	}
	if(twistLm != null) {
		jc.twistLimitMotor = twistLm;
	}
	if(swingSd != null) {
		jc.swingSpringDamper = swingSd;
	}
	jc.maxSwingAngle1 = maxSwing1Deg * 0.017453292519943278;
	jc.maxSwingAngle2 = maxSwing2Deg * 0.017453292519943278;
	var j = new oimo_dynamics_constraint_joint_RagdollJoint(jc);
	w.addJoint(j);
	return j;
};
demo_common_OimoUtil.addUniversalJoint = function(w,rb1,rb2,anchor,axis1,axis2,sd1,lm1,sd2,lm2) {
	var jc = new oimo_dynamics_constraint_joint_UniversalJointConfig();
	jc.init(rb1,rb2,anchor,axis1,axis2);
	if(sd1 != null) {
		jc.springDamper1 = sd1;
	}
	if(lm1 != null) {
		jc.limitMotor1 = lm1;
	}
	if(sd2 != null) {
		jc.springDamper2 = sd2;
	}
	if(lm2 != null) {
		jc.limitMotor2 = lm2;
	}
	var j = new oimo_dynamics_constraint_joint_UniversalJoint(jc);
	w.addJoint(j);
	return j;
};
demo_common_OimoUtil.addGenericJoint = function(w,rb1,rb2,anchor,basis1,basis2,translSds,translLms,rotSds,rotLms) {
	var jc = new oimo_dynamics_constraint_joint_GenericJointConfig();
	jc.init(rb1,rb2,anchor,basis1,basis2);
	if(translSds != null && translSds[0] != null) {
		jc.translationalSpringDampers[0] = translSds[0];
	}
	if(translLms != null && translLms[0] != null) {
		jc.translationalLimitMotors[0] = translLms[0];
	}
	if(rotSds != null && rotSds[0] != null) {
		jc.rotationalSpringDampers[0] = rotSds[0];
	}
	if(rotLms != null && rotLms[0] != null) {
		jc.rotationalLimitMotors[0] = rotLms[0];
	}
	if(translSds != null && translSds[1] != null) {
		jc.translationalSpringDampers[1] = translSds[1];
	}
	if(translLms != null && translLms[1] != null) {
		jc.translationalLimitMotors[1] = translLms[1];
	}
	if(rotSds != null && rotSds[1] != null) {
		jc.rotationalSpringDampers[1] = rotSds[1];
	}
	if(rotLms != null && rotLms[1] != null) {
		jc.rotationalLimitMotors[1] = rotLms[1];
	}
	if(translSds != null && translSds[2] != null) {
		jc.translationalSpringDampers[2] = translSds[2];
	}
	if(translLms != null && translLms[2] != null) {
		jc.translationalLimitMotors[2] = translLms[2];
	}
	if(rotSds != null && rotSds[2] != null) {
		jc.rotationalSpringDampers[2] = rotSds[2];
	}
	if(rotLms != null && rotLms[2] != null) {
		jc.rotationalLimitMotors[2] = rotLms[2];
	}
	var j = new oimo_dynamics_constraint_joint_GenericJoint(jc);
	w.addJoint(j);
	return j;
};
demo_common_OimoUtil.addPrismaticJoint = function(w,rb1,rb2,anchor,axis,sd,lm) {
	var jc = new oimo_dynamics_constraint_joint_PrismaticJointConfig();
	jc.init(rb1,rb2,anchor,axis);
	if(sd != null) {
		jc.springDamper = sd;
	}
	if(lm != null) {
		jc.limitMotor = lm;
	}
	var j = new oimo_dynamics_constraint_joint_PrismaticJoint(jc);
	w.addJoint(j);
	return j;
};
demo_common_OimoUtil.addRevoluteJoint = function(w,rb1,rb2,anchor,axis,sd,lm) {
	var jc = new oimo_dynamics_constraint_joint_RevoluteJointConfig();
	jc.init(rb1,rb2,anchor,axis);
	if(sd != null) {
		jc.springDamper = sd;
	}
	if(lm != null) {
		jc.limitMotor = lm;
	}
	var j = new oimo_dynamics_constraint_joint_RevoluteJoint(jc);
	w.addJoint(j);
	return j;
};
demo_common_OimoUtil.addCylindricalJoint = function(w,rb1,rb2,anchor,axis,rotSd,rotLm,traSd,traLm) {
	var jc = new oimo_dynamics_constraint_joint_CylindricalJointConfig();
	jc.init(rb1,rb2,anchor,axis);
	if(rotSd != null) {
		jc.rotationalSpringDamper = rotSd;
	}
	if(rotLm != null) {
		jc.rotationalLimitMotor = rotLm;
	}
	if(traSd != null) {
		jc.translationalSpringDamper = traSd;
	}
	if(traLm != null) {
		jc.translationalLimitMotor = traLm;
	}
	var j = new oimo_dynamics_constraint_joint_CylindricalJoint(jc);
	w.addJoint(j);
	return j;
};
demo_common_OimoUtil.addSphericalJoint = function(w,rb1,rb2,anchor) {
	var jc = new oimo_dynamics_constraint_joint_SphericalJointConfig();
	jc.init(rb1,rb2,anchor);
	var j = new oimo_dynamics_constraint_joint_SphericalJoint(jc);
	w.addJoint(j);
	return j;
};
demo_common_OimoUtil.addSphere = function(w,center,radius,wall) {
	return demo_common_OimoUtil.addRigidBody(w,center,new oimo_collision_geometry_SphereGeometry(radius),wall);
};
demo_common_OimoUtil.addBox = function(w,center,halfExtents,wall) {
	return demo_common_OimoUtil.addRigidBody(w,center,new oimo_collision_geometry_BoxGeometry(halfExtents),wall);
};
demo_common_OimoUtil.addCylinder = function(w,center,radius,halfHeight,wall) {
	return demo_common_OimoUtil.addRigidBody(w,center,new oimo_collision_geometry_CylinderGeometry(radius,halfHeight),wall);
};
demo_common_OimoUtil.addCone = function(w,center,radius,halfHeight,wall) {
	return demo_common_OimoUtil.addRigidBody(w,center,new oimo_collision_geometry_ConeGeometry(radius,halfHeight),wall);
};
demo_common_OimoUtil.addCapsule = function(w,center,radius,halfHeight,wall) {
	return demo_common_OimoUtil.addRigidBody(w,center,new oimo_collision_geometry_CapsuleGeometry(radius,halfHeight),wall);
};
demo_common_OimoUtil.addRigidBody = function(w,center,geom,wall) {
	var shapec = new oimo_dynamics_rigidbody_ShapeConfig();
	shapec.geometry = geom;
	var bodyc = new oimo_dynamics_rigidbody_RigidBodyConfig();
	bodyc.type = wall ? oimo_dynamics_rigidbody_RigidBodyType.STATIC : oimo_dynamics_rigidbody_RigidBodyType.DYNAMIC;
	bodyc.position = center;
	var body = new oimo_dynamics_rigidbody_RigidBody(bodyc);
	body.addShape(new oimo_dynamics_rigidbody_Shape(shapec));
	w.addRigidBody(body);
	return body;
};
demo_common_OimoUtil.addRagdoll = function(w,pos) {
	oimo_common_Vec3.numCreations++;
	var head = demo_common_OimoUtil.addCapsule(w,new oimo_common_Vec3(pos.x + 0,pos.y + 1.0499999999999998,pos.z + 0),0.12,0.03,false);
	oimo_common_Vec3.numCreations++;
	var body1 = demo_common_OimoUtil.addCapsule(w,new oimo_common_Vec3(pos.x + 0,pos.y + 0.52499999999999991,pos.z + 0),0.2,0.175,false);
	oimo_common_Vec3.numCreations++;
	var body2 = demo_common_OimoUtil.addCapsule(w,new oimo_common_Vec3(pos.x + 0,pos.y + 0.175,pos.z + 0),0.2,0.175,false);
	oimo_common_Vec3.numCreations++;
	var legL1 = demo_common_OimoUtil.addCapsule(w,new oimo_common_Vec3(pos.x + (-0.15),pos.y + (-0.4),pos.z + 0),0.1,0.25,false);
	oimo_common_Vec3.numCreations++;
	var legL2 = demo_common_OimoUtil.addCapsule(w,new oimo_common_Vec3(pos.x + (-0.15),pos.y + (-0.9),pos.z + 0),0.1,0.25,false);
	oimo_common_Vec3.numCreations++;
	var legR1 = demo_common_OimoUtil.addCapsule(w,new oimo_common_Vec3(pos.x + 0.15,pos.y + (-0.4),pos.z + 0),0.1,0.25,false);
	oimo_common_Vec3.numCreations++;
	var legR2 = demo_common_OimoUtil.addCapsule(w,new oimo_common_Vec3(pos.x + 0.15,pos.y + (-0.9),pos.z + 0),0.1,0.25,false);
	oimo_common_Vec3.numCreations++;
	var armL1 = demo_common_OimoUtil.addCapsule(w,new oimo_common_Vec3(pos.x + (-0.375),pos.y + 0.7,pos.z + 0),0.075,0.175,false);
	oimo_common_Vec3.numCreations++;
	var armL2 = demo_common_OimoUtil.addCapsule(w,new oimo_common_Vec3(pos.x + (-0.72500000000000009),pos.y + 0.7,pos.z + 0),0.075,0.175,false);
	oimo_common_Vec3.numCreations++;
	var armR1 = demo_common_OimoUtil.addCapsule(w,new oimo_common_Vec3(pos.x + 0.375,pos.y + 0.7,pos.z + 0),0.075,0.175,false);
	oimo_common_Vec3.numCreations++;
	var armR2 = demo_common_OimoUtil.addCapsule(w,new oimo_common_Vec3(pos.x + 0.72500000000000009,pos.y + 0.7,pos.z + 0),0.075,0.175,false);
	var m_e00 = 1;
	var m_e01 = 0;
	var m_e02 = 0;
	var m_e10 = 0;
	var m_e11 = 1;
	var m_e12 = 0;
	var m_e20 = 0;
	var m_e21 = 0;
	var m_e22 = 1;
	oimo_common_Mat3.numCreations++;
	var s = Math.sin(1.570796326794895);
	var c = Math.cos(1.570796326794895);
	var c1 = 1 - c;
	var r00 = 0 * c1 + c;
	var r01 = 0 * c1 - s;
	var r02 = 0 * c1 + 0 * s;
	var r10 = 0 * c1 + s;
	var r11 = 0 * c1 + c;
	var r12 = 0 * c1 - 0 * s;
	var r20 = 0 * c1 - 0 * s;
	var r21 = 0 * c1 + 0 * s;
	var r22 = c1 + c;
	var e00 = m_e00 * r00 + m_e01 * r10 + m_e02 * r20;
	var e01 = m_e00 * r01 + m_e01 * r11 + m_e02 * r21;
	var e02 = m_e00 * r02 + m_e01 * r12 + m_e02 * r22;
	var e10 = m_e10 * r00 + m_e11 * r10 + m_e12 * r20;
	var e11 = m_e10 * r01 + m_e11 * r11 + m_e12 * r21;
	var e12 = m_e10 * r02 + m_e11 * r12 + m_e12 * r22;
	var e20 = m_e20 * r00 + m_e21 * r10 + m_e22 * r20;
	var e21 = m_e20 * r01 + m_e21 * r11 + m_e22 * r21;
	var e22 = m_e20 * r02 + m_e21 * r12 + m_e22 * r22;
	m_e00 = e00;
	m_e01 = e01;
	m_e02 = e02;
	m_e10 = e10;
	m_e11 = e11;
	m_e12 = e12;
	m_e20 = e20;
	m_e21 = e21;
	m_e22 = e22;
	armL1._transform._rotation00 = e00;
	armL1._transform._rotation01 = e01;
	armL1._transform._rotation02 = e02;
	armL1._transform._rotation10 = e10;
	armL1._transform._rotation11 = e11;
	armL1._transform._rotation12 = e12;
	armL1._transform._rotation20 = e20;
	armL1._transform._rotation21 = e21;
	armL1._transform._rotation22 = e22;
	var __tmp__00;
	var __tmp__01;
	var __tmp__02;
	var __tmp__10;
	var __tmp__11;
	var __tmp__12;
	var __tmp__20;
	var __tmp__21;
	var __tmp__22;
	__tmp__00 = armL1._transform._rotation00 * armL1._invLocalInertia00 + armL1._transform._rotation01 * armL1._invLocalInertia10 + armL1._transform._rotation02 * armL1._invLocalInertia20;
	__tmp__01 = armL1._transform._rotation00 * armL1._invLocalInertia01 + armL1._transform._rotation01 * armL1._invLocalInertia11 + armL1._transform._rotation02 * armL1._invLocalInertia21;
	__tmp__02 = armL1._transform._rotation00 * armL1._invLocalInertia02 + armL1._transform._rotation01 * armL1._invLocalInertia12 + armL1._transform._rotation02 * armL1._invLocalInertia22;
	__tmp__10 = armL1._transform._rotation10 * armL1._invLocalInertia00 + armL1._transform._rotation11 * armL1._invLocalInertia10 + armL1._transform._rotation12 * armL1._invLocalInertia20;
	__tmp__11 = armL1._transform._rotation10 * armL1._invLocalInertia01 + armL1._transform._rotation11 * armL1._invLocalInertia11 + armL1._transform._rotation12 * armL1._invLocalInertia21;
	__tmp__12 = armL1._transform._rotation10 * armL1._invLocalInertia02 + armL1._transform._rotation11 * armL1._invLocalInertia12 + armL1._transform._rotation12 * armL1._invLocalInertia22;
	__tmp__20 = armL1._transform._rotation20 * armL1._invLocalInertia00 + armL1._transform._rotation21 * armL1._invLocalInertia10 + armL1._transform._rotation22 * armL1._invLocalInertia20;
	__tmp__21 = armL1._transform._rotation20 * armL1._invLocalInertia01 + armL1._transform._rotation21 * armL1._invLocalInertia11 + armL1._transform._rotation22 * armL1._invLocalInertia21;
	__tmp__22 = armL1._transform._rotation20 * armL1._invLocalInertia02 + armL1._transform._rotation21 * armL1._invLocalInertia12 + armL1._transform._rotation22 * armL1._invLocalInertia22;
	armL1._invInertia00 = __tmp__00;
	armL1._invInertia01 = __tmp__01;
	armL1._invInertia02 = __tmp__02;
	armL1._invInertia10 = __tmp__10;
	armL1._invInertia11 = __tmp__11;
	armL1._invInertia12 = __tmp__12;
	armL1._invInertia20 = __tmp__20;
	armL1._invInertia21 = __tmp__21;
	armL1._invInertia22 = __tmp__22;
	var __tmp__00;
	var __tmp__01;
	var __tmp__02;
	var __tmp__10;
	var __tmp__11;
	var __tmp__12;
	var __tmp__20;
	var __tmp__21;
	var __tmp__22;
	__tmp__00 = armL1._invInertia00 * armL1._transform._rotation00 + armL1._invInertia01 * armL1._transform._rotation01 + armL1._invInertia02 * armL1._transform._rotation02;
	__tmp__01 = armL1._invInertia00 * armL1._transform._rotation10 + armL1._invInertia01 * armL1._transform._rotation11 + armL1._invInertia02 * armL1._transform._rotation12;
	__tmp__02 = armL1._invInertia00 * armL1._transform._rotation20 + armL1._invInertia01 * armL1._transform._rotation21 + armL1._invInertia02 * armL1._transform._rotation22;
	__tmp__10 = armL1._invInertia10 * armL1._transform._rotation00 + armL1._invInertia11 * armL1._transform._rotation01 + armL1._invInertia12 * armL1._transform._rotation02;
	__tmp__11 = armL1._invInertia10 * armL1._transform._rotation10 + armL1._invInertia11 * armL1._transform._rotation11 + armL1._invInertia12 * armL1._transform._rotation12;
	__tmp__12 = armL1._invInertia10 * armL1._transform._rotation20 + armL1._invInertia11 * armL1._transform._rotation21 + armL1._invInertia12 * armL1._transform._rotation22;
	__tmp__20 = armL1._invInertia20 * armL1._transform._rotation00 + armL1._invInertia21 * armL1._transform._rotation01 + armL1._invInertia22 * armL1._transform._rotation02;
	__tmp__21 = armL1._invInertia20 * armL1._transform._rotation10 + armL1._invInertia21 * armL1._transform._rotation11 + armL1._invInertia22 * armL1._transform._rotation12;
	__tmp__22 = armL1._invInertia20 * armL1._transform._rotation20 + armL1._invInertia21 * armL1._transform._rotation21 + armL1._invInertia22 * armL1._transform._rotation22;
	armL1._invInertia00 = __tmp__00;
	armL1._invInertia01 = __tmp__01;
	armL1._invInertia02 = __tmp__02;
	armL1._invInertia10 = __tmp__10;
	armL1._invInertia11 = __tmp__11;
	armL1._invInertia12 = __tmp__12;
	armL1._invInertia20 = __tmp__20;
	armL1._invInertia21 = __tmp__21;
	armL1._invInertia22 = __tmp__22;
	armL1._invInertia00 *= armL1._rotFactor.x;
	armL1._invInertia01 *= armL1._rotFactor.x;
	armL1._invInertia02 *= armL1._rotFactor.x;
	armL1._invInertia10 *= armL1._rotFactor.y;
	armL1._invInertia11 *= armL1._rotFactor.y;
	armL1._invInertia12 *= armL1._rotFactor.y;
	armL1._invInertia20 *= armL1._rotFactor.z;
	armL1._invInertia21 *= armL1._rotFactor.z;
	armL1._invInertia22 *= armL1._rotFactor.z;
	var dst = armL1._ptransform;
	var src = armL1._transform;
	dst._positionX = src._positionX;
	dst._positionY = src._positionY;
	dst._positionZ = src._positionZ;
	dst._rotation00 = src._rotation00;
	dst._rotation01 = src._rotation01;
	dst._rotation02 = src._rotation02;
	dst._rotation10 = src._rotation10;
	dst._rotation11 = src._rotation11;
	dst._rotation12 = src._rotation12;
	dst._rotation20 = src._rotation20;
	dst._rotation21 = src._rotation21;
	dst._rotation22 = src._rotation22;
	var s = armL1._shapeList;
	while(s != null) {
		var n = s._next;
		var tf1 = armL1._ptransform;
		var tf2 = armL1._transform;
		var dst = s._ptransform;
		var src1 = s._localTransform;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = tf1._rotation00 * src1._rotation00 + tf1._rotation01 * src1._rotation10 + tf1._rotation02 * src1._rotation20;
		__tmp__01 = tf1._rotation00 * src1._rotation01 + tf1._rotation01 * src1._rotation11 + tf1._rotation02 * src1._rotation21;
		__tmp__02 = tf1._rotation00 * src1._rotation02 + tf1._rotation01 * src1._rotation12 + tf1._rotation02 * src1._rotation22;
		__tmp__10 = tf1._rotation10 * src1._rotation00 + tf1._rotation11 * src1._rotation10 + tf1._rotation12 * src1._rotation20;
		__tmp__11 = tf1._rotation10 * src1._rotation01 + tf1._rotation11 * src1._rotation11 + tf1._rotation12 * src1._rotation21;
		__tmp__12 = tf1._rotation10 * src1._rotation02 + tf1._rotation11 * src1._rotation12 + tf1._rotation12 * src1._rotation22;
		__tmp__20 = tf1._rotation20 * src1._rotation00 + tf1._rotation21 * src1._rotation10 + tf1._rotation22 * src1._rotation20;
		__tmp__21 = tf1._rotation20 * src1._rotation01 + tf1._rotation21 * src1._rotation11 + tf1._rotation22 * src1._rotation21;
		__tmp__22 = tf1._rotation20 * src1._rotation02 + tf1._rotation21 * src1._rotation12 + tf1._rotation22 * src1._rotation22;
		dst._rotation00 = __tmp__00;
		dst._rotation01 = __tmp__01;
		dst._rotation02 = __tmp__02;
		dst._rotation10 = __tmp__10;
		dst._rotation11 = __tmp__11;
		dst._rotation12 = __tmp__12;
		dst._rotation20 = __tmp__20;
		dst._rotation21 = __tmp__21;
		dst._rotation22 = __tmp__22;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = tf1._rotation00 * src1._positionX + tf1._rotation01 * src1._positionY + tf1._rotation02 * src1._positionZ;
		__tmp__Y = tf1._rotation10 * src1._positionX + tf1._rotation11 * src1._positionY + tf1._rotation12 * src1._positionZ;
		__tmp__Z = tf1._rotation20 * src1._positionX + tf1._rotation21 * src1._positionY + tf1._rotation22 * src1._positionZ;
		dst._positionX = __tmp__X;
		dst._positionY = __tmp__Y;
		dst._positionZ = __tmp__Z;
		dst._positionX += tf1._positionX;
		dst._positionY += tf1._positionY;
		dst._positionZ += tf1._positionZ;
		var dst1 = s._transform;
		var src11 = s._localTransform;
		var __tmp__001;
		var __tmp__011;
		var __tmp__021;
		var __tmp__101;
		var __tmp__111;
		var __tmp__121;
		var __tmp__201;
		var __tmp__211;
		var __tmp__221;
		__tmp__001 = tf2._rotation00 * src11._rotation00 + tf2._rotation01 * src11._rotation10 + tf2._rotation02 * src11._rotation20;
		__tmp__011 = tf2._rotation00 * src11._rotation01 + tf2._rotation01 * src11._rotation11 + tf2._rotation02 * src11._rotation21;
		__tmp__021 = tf2._rotation00 * src11._rotation02 + tf2._rotation01 * src11._rotation12 + tf2._rotation02 * src11._rotation22;
		__tmp__101 = tf2._rotation10 * src11._rotation00 + tf2._rotation11 * src11._rotation10 + tf2._rotation12 * src11._rotation20;
		__tmp__111 = tf2._rotation10 * src11._rotation01 + tf2._rotation11 * src11._rotation11 + tf2._rotation12 * src11._rotation21;
		__tmp__121 = tf2._rotation10 * src11._rotation02 + tf2._rotation11 * src11._rotation12 + tf2._rotation12 * src11._rotation22;
		__tmp__201 = tf2._rotation20 * src11._rotation00 + tf2._rotation21 * src11._rotation10 + tf2._rotation22 * src11._rotation20;
		__tmp__211 = tf2._rotation20 * src11._rotation01 + tf2._rotation21 * src11._rotation11 + tf2._rotation22 * src11._rotation21;
		__tmp__221 = tf2._rotation20 * src11._rotation02 + tf2._rotation21 * src11._rotation12 + tf2._rotation22 * src11._rotation22;
		dst1._rotation00 = __tmp__001;
		dst1._rotation01 = __tmp__011;
		dst1._rotation02 = __tmp__021;
		dst1._rotation10 = __tmp__101;
		dst1._rotation11 = __tmp__111;
		dst1._rotation12 = __tmp__121;
		dst1._rotation20 = __tmp__201;
		dst1._rotation21 = __tmp__211;
		dst1._rotation22 = __tmp__221;
		var __tmp__X1;
		var __tmp__Y1;
		var __tmp__Z1;
		__tmp__X1 = tf2._rotation00 * src11._positionX + tf2._rotation01 * src11._positionY + tf2._rotation02 * src11._positionZ;
		__tmp__Y1 = tf2._rotation10 * src11._positionX + tf2._rotation11 * src11._positionY + tf2._rotation12 * src11._positionZ;
		__tmp__Z1 = tf2._rotation20 * src11._positionX + tf2._rotation21 * src11._positionY + tf2._rotation22 * src11._positionZ;
		dst1._positionX = __tmp__X1;
		dst1._positionY = __tmp__Y1;
		dst1._positionZ = __tmp__Z1;
		dst1._positionX += tf2._positionX;
		dst1._positionY += tf2._positionY;
		dst1._positionZ += tf2._positionZ;
		var minX;
		var minY;
		var minZ;
		var maxX;
		var maxY;
		var maxZ;
		s._geom._computeAabb(s._aabb,s._ptransform);
		minX = s._aabb._minX;
		minY = s._aabb._minY;
		minZ = s._aabb._minZ;
		maxX = s._aabb._maxX;
		maxY = s._aabb._maxY;
		maxZ = s._aabb._maxZ;
		s._geom._computeAabb(s._aabb,s._transform);
		s._aabb._minX = minX < s._aabb._minX ? minX : s._aabb._minX;
		s._aabb._minY = minY < s._aabb._minY ? minY : s._aabb._minY;
		s._aabb._minZ = minZ < s._aabb._minZ ? minZ : s._aabb._minZ;
		s._aabb._maxX = maxX > s._aabb._maxX ? maxX : s._aabb._maxX;
		s._aabb._maxY = maxY > s._aabb._maxY ? maxY : s._aabb._maxY;
		s._aabb._maxZ = maxZ > s._aabb._maxZ ? maxZ : s._aabb._maxZ;
		if(s._proxy != null) {
			var dX;
			var dY;
			var dZ;
			dX = s._transform._positionX - s._ptransform._positionX;
			dY = s._transform._positionY - s._ptransform._positionY;
			dZ = s._transform._positionZ - s._ptransform._positionZ;
			var v = s.displacement;
			v.x = dX;
			v.y = dY;
			v.z = dZ;
			s._rigidBody._world._broadPhase.moveProxy(s._proxy,s._aabb,s.displacement);
		}
		s = n;
	}
	armL1._sleeping = false;
	armL1._sleepTime = 0;
	armL2._transform._rotation00 = e00;
	armL2._transform._rotation01 = e01;
	armL2._transform._rotation02 = e02;
	armL2._transform._rotation10 = e10;
	armL2._transform._rotation11 = e11;
	armL2._transform._rotation12 = e12;
	armL2._transform._rotation20 = e20;
	armL2._transform._rotation21 = e21;
	armL2._transform._rotation22 = e22;
	var __tmp__00;
	var __tmp__01;
	var __tmp__02;
	var __tmp__10;
	var __tmp__11;
	var __tmp__12;
	var __tmp__20;
	var __tmp__21;
	var __tmp__22;
	__tmp__00 = armL2._transform._rotation00 * armL2._invLocalInertia00 + armL2._transform._rotation01 * armL2._invLocalInertia10 + armL2._transform._rotation02 * armL2._invLocalInertia20;
	__tmp__01 = armL2._transform._rotation00 * armL2._invLocalInertia01 + armL2._transform._rotation01 * armL2._invLocalInertia11 + armL2._transform._rotation02 * armL2._invLocalInertia21;
	__tmp__02 = armL2._transform._rotation00 * armL2._invLocalInertia02 + armL2._transform._rotation01 * armL2._invLocalInertia12 + armL2._transform._rotation02 * armL2._invLocalInertia22;
	__tmp__10 = armL2._transform._rotation10 * armL2._invLocalInertia00 + armL2._transform._rotation11 * armL2._invLocalInertia10 + armL2._transform._rotation12 * armL2._invLocalInertia20;
	__tmp__11 = armL2._transform._rotation10 * armL2._invLocalInertia01 + armL2._transform._rotation11 * armL2._invLocalInertia11 + armL2._transform._rotation12 * armL2._invLocalInertia21;
	__tmp__12 = armL2._transform._rotation10 * armL2._invLocalInertia02 + armL2._transform._rotation11 * armL2._invLocalInertia12 + armL2._transform._rotation12 * armL2._invLocalInertia22;
	__tmp__20 = armL2._transform._rotation20 * armL2._invLocalInertia00 + armL2._transform._rotation21 * armL2._invLocalInertia10 + armL2._transform._rotation22 * armL2._invLocalInertia20;
	__tmp__21 = armL2._transform._rotation20 * armL2._invLocalInertia01 + armL2._transform._rotation21 * armL2._invLocalInertia11 + armL2._transform._rotation22 * armL2._invLocalInertia21;
	__tmp__22 = armL2._transform._rotation20 * armL2._invLocalInertia02 + armL2._transform._rotation21 * armL2._invLocalInertia12 + armL2._transform._rotation22 * armL2._invLocalInertia22;
	armL2._invInertia00 = __tmp__00;
	armL2._invInertia01 = __tmp__01;
	armL2._invInertia02 = __tmp__02;
	armL2._invInertia10 = __tmp__10;
	armL2._invInertia11 = __tmp__11;
	armL2._invInertia12 = __tmp__12;
	armL2._invInertia20 = __tmp__20;
	armL2._invInertia21 = __tmp__21;
	armL2._invInertia22 = __tmp__22;
	var __tmp__00;
	var __tmp__01;
	var __tmp__02;
	var __tmp__10;
	var __tmp__11;
	var __tmp__12;
	var __tmp__20;
	var __tmp__21;
	var __tmp__22;
	__tmp__00 = armL2._invInertia00 * armL2._transform._rotation00 + armL2._invInertia01 * armL2._transform._rotation01 + armL2._invInertia02 * armL2._transform._rotation02;
	__tmp__01 = armL2._invInertia00 * armL2._transform._rotation10 + armL2._invInertia01 * armL2._transform._rotation11 + armL2._invInertia02 * armL2._transform._rotation12;
	__tmp__02 = armL2._invInertia00 * armL2._transform._rotation20 + armL2._invInertia01 * armL2._transform._rotation21 + armL2._invInertia02 * armL2._transform._rotation22;
	__tmp__10 = armL2._invInertia10 * armL2._transform._rotation00 + armL2._invInertia11 * armL2._transform._rotation01 + armL2._invInertia12 * armL2._transform._rotation02;
	__tmp__11 = armL2._invInertia10 * armL2._transform._rotation10 + armL2._invInertia11 * armL2._transform._rotation11 + armL2._invInertia12 * armL2._transform._rotation12;
	__tmp__12 = armL2._invInertia10 * armL2._transform._rotation20 + armL2._invInertia11 * armL2._transform._rotation21 + armL2._invInertia12 * armL2._transform._rotation22;
	__tmp__20 = armL2._invInertia20 * armL2._transform._rotation00 + armL2._invInertia21 * armL2._transform._rotation01 + armL2._invInertia22 * armL2._transform._rotation02;
	__tmp__21 = armL2._invInertia20 * armL2._transform._rotation10 + armL2._invInertia21 * armL2._transform._rotation11 + armL2._invInertia22 * armL2._transform._rotation12;
	__tmp__22 = armL2._invInertia20 * armL2._transform._rotation20 + armL2._invInertia21 * armL2._transform._rotation21 + armL2._invInertia22 * armL2._transform._rotation22;
	armL2._invInertia00 = __tmp__00;
	armL2._invInertia01 = __tmp__01;
	armL2._invInertia02 = __tmp__02;
	armL2._invInertia10 = __tmp__10;
	armL2._invInertia11 = __tmp__11;
	armL2._invInertia12 = __tmp__12;
	armL2._invInertia20 = __tmp__20;
	armL2._invInertia21 = __tmp__21;
	armL2._invInertia22 = __tmp__22;
	armL2._invInertia00 *= armL2._rotFactor.x;
	armL2._invInertia01 *= armL2._rotFactor.x;
	armL2._invInertia02 *= armL2._rotFactor.x;
	armL2._invInertia10 *= armL2._rotFactor.y;
	armL2._invInertia11 *= armL2._rotFactor.y;
	armL2._invInertia12 *= armL2._rotFactor.y;
	armL2._invInertia20 *= armL2._rotFactor.z;
	armL2._invInertia21 *= armL2._rotFactor.z;
	armL2._invInertia22 *= armL2._rotFactor.z;
	var dst = armL2._ptransform;
	var src = armL2._transform;
	dst._positionX = src._positionX;
	dst._positionY = src._positionY;
	dst._positionZ = src._positionZ;
	dst._rotation00 = src._rotation00;
	dst._rotation01 = src._rotation01;
	dst._rotation02 = src._rotation02;
	dst._rotation10 = src._rotation10;
	dst._rotation11 = src._rotation11;
	dst._rotation12 = src._rotation12;
	dst._rotation20 = src._rotation20;
	dst._rotation21 = src._rotation21;
	dst._rotation22 = src._rotation22;
	var s = armL2._shapeList;
	while(s != null) {
		var n = s._next;
		var tf1 = armL2._ptransform;
		var tf2 = armL2._transform;
		var dst = s._ptransform;
		var src1 = s._localTransform;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = tf1._rotation00 * src1._rotation00 + tf1._rotation01 * src1._rotation10 + tf1._rotation02 * src1._rotation20;
		__tmp__01 = tf1._rotation00 * src1._rotation01 + tf1._rotation01 * src1._rotation11 + tf1._rotation02 * src1._rotation21;
		__tmp__02 = tf1._rotation00 * src1._rotation02 + tf1._rotation01 * src1._rotation12 + tf1._rotation02 * src1._rotation22;
		__tmp__10 = tf1._rotation10 * src1._rotation00 + tf1._rotation11 * src1._rotation10 + tf1._rotation12 * src1._rotation20;
		__tmp__11 = tf1._rotation10 * src1._rotation01 + tf1._rotation11 * src1._rotation11 + tf1._rotation12 * src1._rotation21;
		__tmp__12 = tf1._rotation10 * src1._rotation02 + tf1._rotation11 * src1._rotation12 + tf1._rotation12 * src1._rotation22;
		__tmp__20 = tf1._rotation20 * src1._rotation00 + tf1._rotation21 * src1._rotation10 + tf1._rotation22 * src1._rotation20;
		__tmp__21 = tf1._rotation20 * src1._rotation01 + tf1._rotation21 * src1._rotation11 + tf1._rotation22 * src1._rotation21;
		__tmp__22 = tf1._rotation20 * src1._rotation02 + tf1._rotation21 * src1._rotation12 + tf1._rotation22 * src1._rotation22;
		dst._rotation00 = __tmp__00;
		dst._rotation01 = __tmp__01;
		dst._rotation02 = __tmp__02;
		dst._rotation10 = __tmp__10;
		dst._rotation11 = __tmp__11;
		dst._rotation12 = __tmp__12;
		dst._rotation20 = __tmp__20;
		dst._rotation21 = __tmp__21;
		dst._rotation22 = __tmp__22;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = tf1._rotation00 * src1._positionX + tf1._rotation01 * src1._positionY + tf1._rotation02 * src1._positionZ;
		__tmp__Y = tf1._rotation10 * src1._positionX + tf1._rotation11 * src1._positionY + tf1._rotation12 * src1._positionZ;
		__tmp__Z = tf1._rotation20 * src1._positionX + tf1._rotation21 * src1._positionY + tf1._rotation22 * src1._positionZ;
		dst._positionX = __tmp__X;
		dst._positionY = __tmp__Y;
		dst._positionZ = __tmp__Z;
		dst._positionX += tf1._positionX;
		dst._positionY += tf1._positionY;
		dst._positionZ += tf1._positionZ;
		var dst1 = s._transform;
		var src11 = s._localTransform;
		var __tmp__001;
		var __tmp__011;
		var __tmp__021;
		var __tmp__101;
		var __tmp__111;
		var __tmp__121;
		var __tmp__201;
		var __tmp__211;
		var __tmp__221;
		__tmp__001 = tf2._rotation00 * src11._rotation00 + tf2._rotation01 * src11._rotation10 + tf2._rotation02 * src11._rotation20;
		__tmp__011 = tf2._rotation00 * src11._rotation01 + tf2._rotation01 * src11._rotation11 + tf2._rotation02 * src11._rotation21;
		__tmp__021 = tf2._rotation00 * src11._rotation02 + tf2._rotation01 * src11._rotation12 + tf2._rotation02 * src11._rotation22;
		__tmp__101 = tf2._rotation10 * src11._rotation00 + tf2._rotation11 * src11._rotation10 + tf2._rotation12 * src11._rotation20;
		__tmp__111 = tf2._rotation10 * src11._rotation01 + tf2._rotation11 * src11._rotation11 + tf2._rotation12 * src11._rotation21;
		__tmp__121 = tf2._rotation10 * src11._rotation02 + tf2._rotation11 * src11._rotation12 + tf2._rotation12 * src11._rotation22;
		__tmp__201 = tf2._rotation20 * src11._rotation00 + tf2._rotation21 * src11._rotation10 + tf2._rotation22 * src11._rotation20;
		__tmp__211 = tf2._rotation20 * src11._rotation01 + tf2._rotation21 * src11._rotation11 + tf2._rotation22 * src11._rotation21;
		__tmp__221 = tf2._rotation20 * src11._rotation02 + tf2._rotation21 * src11._rotation12 + tf2._rotation22 * src11._rotation22;
		dst1._rotation00 = __tmp__001;
		dst1._rotation01 = __tmp__011;
		dst1._rotation02 = __tmp__021;
		dst1._rotation10 = __tmp__101;
		dst1._rotation11 = __tmp__111;
		dst1._rotation12 = __tmp__121;
		dst1._rotation20 = __tmp__201;
		dst1._rotation21 = __tmp__211;
		dst1._rotation22 = __tmp__221;
		var __tmp__X1;
		var __tmp__Y1;
		var __tmp__Z1;
		__tmp__X1 = tf2._rotation00 * src11._positionX + tf2._rotation01 * src11._positionY + tf2._rotation02 * src11._positionZ;
		__tmp__Y1 = tf2._rotation10 * src11._positionX + tf2._rotation11 * src11._positionY + tf2._rotation12 * src11._positionZ;
		__tmp__Z1 = tf2._rotation20 * src11._positionX + tf2._rotation21 * src11._positionY + tf2._rotation22 * src11._positionZ;
		dst1._positionX = __tmp__X1;
		dst1._positionY = __tmp__Y1;
		dst1._positionZ = __tmp__Z1;
		dst1._positionX += tf2._positionX;
		dst1._positionY += tf2._positionY;
		dst1._positionZ += tf2._positionZ;
		var minX;
		var minY;
		var minZ;
		var maxX;
		var maxY;
		var maxZ;
		s._geom._computeAabb(s._aabb,s._ptransform);
		minX = s._aabb._minX;
		minY = s._aabb._minY;
		minZ = s._aabb._minZ;
		maxX = s._aabb._maxX;
		maxY = s._aabb._maxY;
		maxZ = s._aabb._maxZ;
		s._geom._computeAabb(s._aabb,s._transform);
		s._aabb._minX = minX < s._aabb._minX ? minX : s._aabb._minX;
		s._aabb._minY = minY < s._aabb._minY ? minY : s._aabb._minY;
		s._aabb._minZ = minZ < s._aabb._minZ ? minZ : s._aabb._minZ;
		s._aabb._maxX = maxX > s._aabb._maxX ? maxX : s._aabb._maxX;
		s._aabb._maxY = maxY > s._aabb._maxY ? maxY : s._aabb._maxY;
		s._aabb._maxZ = maxZ > s._aabb._maxZ ? maxZ : s._aabb._maxZ;
		if(s._proxy != null) {
			var dX;
			var dY;
			var dZ;
			dX = s._transform._positionX - s._ptransform._positionX;
			dY = s._transform._positionY - s._ptransform._positionY;
			dZ = s._transform._positionZ - s._ptransform._positionZ;
			var v = s.displacement;
			v.x = dX;
			v.y = dY;
			v.z = dZ;
			s._rigidBody._world._broadPhase.moveProxy(s._proxy,s._aabb,s.displacement);
		}
		s = n;
	}
	armL2._sleeping = false;
	armL2._sleepTime = 0;
	armR1._transform._rotation00 = e00;
	armR1._transform._rotation01 = e01;
	armR1._transform._rotation02 = e02;
	armR1._transform._rotation10 = e10;
	armR1._transform._rotation11 = e11;
	armR1._transform._rotation12 = e12;
	armR1._transform._rotation20 = e20;
	armR1._transform._rotation21 = e21;
	armR1._transform._rotation22 = e22;
	var __tmp__00;
	var __tmp__01;
	var __tmp__02;
	var __tmp__10;
	var __tmp__11;
	var __tmp__12;
	var __tmp__20;
	var __tmp__21;
	var __tmp__22;
	__tmp__00 = armR1._transform._rotation00 * armR1._invLocalInertia00 + armR1._transform._rotation01 * armR1._invLocalInertia10 + armR1._transform._rotation02 * armR1._invLocalInertia20;
	__tmp__01 = armR1._transform._rotation00 * armR1._invLocalInertia01 + armR1._transform._rotation01 * armR1._invLocalInertia11 + armR1._transform._rotation02 * armR1._invLocalInertia21;
	__tmp__02 = armR1._transform._rotation00 * armR1._invLocalInertia02 + armR1._transform._rotation01 * armR1._invLocalInertia12 + armR1._transform._rotation02 * armR1._invLocalInertia22;
	__tmp__10 = armR1._transform._rotation10 * armR1._invLocalInertia00 + armR1._transform._rotation11 * armR1._invLocalInertia10 + armR1._transform._rotation12 * armR1._invLocalInertia20;
	__tmp__11 = armR1._transform._rotation10 * armR1._invLocalInertia01 + armR1._transform._rotation11 * armR1._invLocalInertia11 + armR1._transform._rotation12 * armR1._invLocalInertia21;
	__tmp__12 = armR1._transform._rotation10 * armR1._invLocalInertia02 + armR1._transform._rotation11 * armR1._invLocalInertia12 + armR1._transform._rotation12 * armR1._invLocalInertia22;
	__tmp__20 = armR1._transform._rotation20 * armR1._invLocalInertia00 + armR1._transform._rotation21 * armR1._invLocalInertia10 + armR1._transform._rotation22 * armR1._invLocalInertia20;
	__tmp__21 = armR1._transform._rotation20 * armR1._invLocalInertia01 + armR1._transform._rotation21 * armR1._invLocalInertia11 + armR1._transform._rotation22 * armR1._invLocalInertia21;
	__tmp__22 = armR1._transform._rotation20 * armR1._invLocalInertia02 + armR1._transform._rotation21 * armR1._invLocalInertia12 + armR1._transform._rotation22 * armR1._invLocalInertia22;
	armR1._invInertia00 = __tmp__00;
	armR1._invInertia01 = __tmp__01;
	armR1._invInertia02 = __tmp__02;
	armR1._invInertia10 = __tmp__10;
	armR1._invInertia11 = __tmp__11;
	armR1._invInertia12 = __tmp__12;
	armR1._invInertia20 = __tmp__20;
	armR1._invInertia21 = __tmp__21;
	armR1._invInertia22 = __tmp__22;
	var __tmp__00;
	var __tmp__01;
	var __tmp__02;
	var __tmp__10;
	var __tmp__11;
	var __tmp__12;
	var __tmp__20;
	var __tmp__21;
	var __tmp__22;
	__tmp__00 = armR1._invInertia00 * armR1._transform._rotation00 + armR1._invInertia01 * armR1._transform._rotation01 + armR1._invInertia02 * armR1._transform._rotation02;
	__tmp__01 = armR1._invInertia00 * armR1._transform._rotation10 + armR1._invInertia01 * armR1._transform._rotation11 + armR1._invInertia02 * armR1._transform._rotation12;
	__tmp__02 = armR1._invInertia00 * armR1._transform._rotation20 + armR1._invInertia01 * armR1._transform._rotation21 + armR1._invInertia02 * armR1._transform._rotation22;
	__tmp__10 = armR1._invInertia10 * armR1._transform._rotation00 + armR1._invInertia11 * armR1._transform._rotation01 + armR1._invInertia12 * armR1._transform._rotation02;
	__tmp__11 = armR1._invInertia10 * armR1._transform._rotation10 + armR1._invInertia11 * armR1._transform._rotation11 + armR1._invInertia12 * armR1._transform._rotation12;
	__tmp__12 = armR1._invInertia10 * armR1._transform._rotation20 + armR1._invInertia11 * armR1._transform._rotation21 + armR1._invInertia12 * armR1._transform._rotation22;
	__tmp__20 = armR1._invInertia20 * armR1._transform._rotation00 + armR1._invInertia21 * armR1._transform._rotation01 + armR1._invInertia22 * armR1._transform._rotation02;
	__tmp__21 = armR1._invInertia20 * armR1._transform._rotation10 + armR1._invInertia21 * armR1._transform._rotation11 + armR1._invInertia22 * armR1._transform._rotation12;
	__tmp__22 = armR1._invInertia20 * armR1._transform._rotation20 + armR1._invInertia21 * armR1._transform._rotation21 + armR1._invInertia22 * armR1._transform._rotation22;
	armR1._invInertia00 = __tmp__00;
	armR1._invInertia01 = __tmp__01;
	armR1._invInertia02 = __tmp__02;
	armR1._invInertia10 = __tmp__10;
	armR1._invInertia11 = __tmp__11;
	armR1._invInertia12 = __tmp__12;
	armR1._invInertia20 = __tmp__20;
	armR1._invInertia21 = __tmp__21;
	armR1._invInertia22 = __tmp__22;
	armR1._invInertia00 *= armR1._rotFactor.x;
	armR1._invInertia01 *= armR1._rotFactor.x;
	armR1._invInertia02 *= armR1._rotFactor.x;
	armR1._invInertia10 *= armR1._rotFactor.y;
	armR1._invInertia11 *= armR1._rotFactor.y;
	armR1._invInertia12 *= armR1._rotFactor.y;
	armR1._invInertia20 *= armR1._rotFactor.z;
	armR1._invInertia21 *= armR1._rotFactor.z;
	armR1._invInertia22 *= armR1._rotFactor.z;
	var dst = armR1._ptransform;
	var src = armR1._transform;
	dst._positionX = src._positionX;
	dst._positionY = src._positionY;
	dst._positionZ = src._positionZ;
	dst._rotation00 = src._rotation00;
	dst._rotation01 = src._rotation01;
	dst._rotation02 = src._rotation02;
	dst._rotation10 = src._rotation10;
	dst._rotation11 = src._rotation11;
	dst._rotation12 = src._rotation12;
	dst._rotation20 = src._rotation20;
	dst._rotation21 = src._rotation21;
	dst._rotation22 = src._rotation22;
	var s = armR1._shapeList;
	while(s != null) {
		var n = s._next;
		var tf1 = armR1._ptransform;
		var tf2 = armR1._transform;
		var dst = s._ptransform;
		var src1 = s._localTransform;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = tf1._rotation00 * src1._rotation00 + tf1._rotation01 * src1._rotation10 + tf1._rotation02 * src1._rotation20;
		__tmp__01 = tf1._rotation00 * src1._rotation01 + tf1._rotation01 * src1._rotation11 + tf1._rotation02 * src1._rotation21;
		__tmp__02 = tf1._rotation00 * src1._rotation02 + tf1._rotation01 * src1._rotation12 + tf1._rotation02 * src1._rotation22;
		__tmp__10 = tf1._rotation10 * src1._rotation00 + tf1._rotation11 * src1._rotation10 + tf1._rotation12 * src1._rotation20;
		__tmp__11 = tf1._rotation10 * src1._rotation01 + tf1._rotation11 * src1._rotation11 + tf1._rotation12 * src1._rotation21;
		__tmp__12 = tf1._rotation10 * src1._rotation02 + tf1._rotation11 * src1._rotation12 + tf1._rotation12 * src1._rotation22;
		__tmp__20 = tf1._rotation20 * src1._rotation00 + tf1._rotation21 * src1._rotation10 + tf1._rotation22 * src1._rotation20;
		__tmp__21 = tf1._rotation20 * src1._rotation01 + tf1._rotation21 * src1._rotation11 + tf1._rotation22 * src1._rotation21;
		__tmp__22 = tf1._rotation20 * src1._rotation02 + tf1._rotation21 * src1._rotation12 + tf1._rotation22 * src1._rotation22;
		dst._rotation00 = __tmp__00;
		dst._rotation01 = __tmp__01;
		dst._rotation02 = __tmp__02;
		dst._rotation10 = __tmp__10;
		dst._rotation11 = __tmp__11;
		dst._rotation12 = __tmp__12;
		dst._rotation20 = __tmp__20;
		dst._rotation21 = __tmp__21;
		dst._rotation22 = __tmp__22;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = tf1._rotation00 * src1._positionX + tf1._rotation01 * src1._positionY + tf1._rotation02 * src1._positionZ;
		__tmp__Y = tf1._rotation10 * src1._positionX + tf1._rotation11 * src1._positionY + tf1._rotation12 * src1._positionZ;
		__tmp__Z = tf1._rotation20 * src1._positionX + tf1._rotation21 * src1._positionY + tf1._rotation22 * src1._positionZ;
		dst._positionX = __tmp__X;
		dst._positionY = __tmp__Y;
		dst._positionZ = __tmp__Z;
		dst._positionX += tf1._positionX;
		dst._positionY += tf1._positionY;
		dst._positionZ += tf1._positionZ;
		var dst1 = s._transform;
		var src11 = s._localTransform;
		var __tmp__001;
		var __tmp__011;
		var __tmp__021;
		var __tmp__101;
		var __tmp__111;
		var __tmp__121;
		var __tmp__201;
		var __tmp__211;
		var __tmp__221;
		__tmp__001 = tf2._rotation00 * src11._rotation00 + tf2._rotation01 * src11._rotation10 + tf2._rotation02 * src11._rotation20;
		__tmp__011 = tf2._rotation00 * src11._rotation01 + tf2._rotation01 * src11._rotation11 + tf2._rotation02 * src11._rotation21;
		__tmp__021 = tf2._rotation00 * src11._rotation02 + tf2._rotation01 * src11._rotation12 + tf2._rotation02 * src11._rotation22;
		__tmp__101 = tf2._rotation10 * src11._rotation00 + tf2._rotation11 * src11._rotation10 + tf2._rotation12 * src11._rotation20;
		__tmp__111 = tf2._rotation10 * src11._rotation01 + tf2._rotation11 * src11._rotation11 + tf2._rotation12 * src11._rotation21;
		__tmp__121 = tf2._rotation10 * src11._rotation02 + tf2._rotation11 * src11._rotation12 + tf2._rotation12 * src11._rotation22;
		__tmp__201 = tf2._rotation20 * src11._rotation00 + tf2._rotation21 * src11._rotation10 + tf2._rotation22 * src11._rotation20;
		__tmp__211 = tf2._rotation20 * src11._rotation01 + tf2._rotation21 * src11._rotation11 + tf2._rotation22 * src11._rotation21;
		__tmp__221 = tf2._rotation20 * src11._rotation02 + tf2._rotation21 * src11._rotation12 + tf2._rotation22 * src11._rotation22;
		dst1._rotation00 = __tmp__001;
		dst1._rotation01 = __tmp__011;
		dst1._rotation02 = __tmp__021;
		dst1._rotation10 = __tmp__101;
		dst1._rotation11 = __tmp__111;
		dst1._rotation12 = __tmp__121;
		dst1._rotation20 = __tmp__201;
		dst1._rotation21 = __tmp__211;
		dst1._rotation22 = __tmp__221;
		var __tmp__X1;
		var __tmp__Y1;
		var __tmp__Z1;
		__tmp__X1 = tf2._rotation00 * src11._positionX + tf2._rotation01 * src11._positionY + tf2._rotation02 * src11._positionZ;
		__tmp__Y1 = tf2._rotation10 * src11._positionX + tf2._rotation11 * src11._positionY + tf2._rotation12 * src11._positionZ;
		__tmp__Z1 = tf2._rotation20 * src11._positionX + tf2._rotation21 * src11._positionY + tf2._rotation22 * src11._positionZ;
		dst1._positionX = __tmp__X1;
		dst1._positionY = __tmp__Y1;
		dst1._positionZ = __tmp__Z1;
		dst1._positionX += tf2._positionX;
		dst1._positionY += tf2._positionY;
		dst1._positionZ += tf2._positionZ;
		var minX;
		var minY;
		var minZ;
		var maxX;
		var maxY;
		var maxZ;
		s._geom._computeAabb(s._aabb,s._ptransform);
		minX = s._aabb._minX;
		minY = s._aabb._minY;
		minZ = s._aabb._minZ;
		maxX = s._aabb._maxX;
		maxY = s._aabb._maxY;
		maxZ = s._aabb._maxZ;
		s._geom._computeAabb(s._aabb,s._transform);
		s._aabb._minX = minX < s._aabb._minX ? minX : s._aabb._minX;
		s._aabb._minY = minY < s._aabb._minY ? minY : s._aabb._minY;
		s._aabb._minZ = minZ < s._aabb._minZ ? minZ : s._aabb._minZ;
		s._aabb._maxX = maxX > s._aabb._maxX ? maxX : s._aabb._maxX;
		s._aabb._maxY = maxY > s._aabb._maxY ? maxY : s._aabb._maxY;
		s._aabb._maxZ = maxZ > s._aabb._maxZ ? maxZ : s._aabb._maxZ;
		if(s._proxy != null) {
			var dX;
			var dY;
			var dZ;
			dX = s._transform._positionX - s._ptransform._positionX;
			dY = s._transform._positionY - s._ptransform._positionY;
			dZ = s._transform._positionZ - s._ptransform._positionZ;
			var v = s.displacement;
			v.x = dX;
			v.y = dY;
			v.z = dZ;
			s._rigidBody._world._broadPhase.moveProxy(s._proxy,s._aabb,s.displacement);
		}
		s = n;
	}
	armR1._sleeping = false;
	armR1._sleepTime = 0;
	armR2._transform._rotation00 = e00;
	armR2._transform._rotation01 = e01;
	armR2._transform._rotation02 = e02;
	armR2._transform._rotation10 = e10;
	armR2._transform._rotation11 = e11;
	armR2._transform._rotation12 = e12;
	armR2._transform._rotation20 = e20;
	armR2._transform._rotation21 = e21;
	armR2._transform._rotation22 = e22;
	var __tmp__00;
	var __tmp__01;
	var __tmp__02;
	var __tmp__10;
	var __tmp__11;
	var __tmp__12;
	var __tmp__20;
	var __tmp__21;
	var __tmp__22;
	__tmp__00 = armR2._transform._rotation00 * armR2._invLocalInertia00 + armR2._transform._rotation01 * armR2._invLocalInertia10 + armR2._transform._rotation02 * armR2._invLocalInertia20;
	__tmp__01 = armR2._transform._rotation00 * armR2._invLocalInertia01 + armR2._transform._rotation01 * armR2._invLocalInertia11 + armR2._transform._rotation02 * armR2._invLocalInertia21;
	__tmp__02 = armR2._transform._rotation00 * armR2._invLocalInertia02 + armR2._transform._rotation01 * armR2._invLocalInertia12 + armR2._transform._rotation02 * armR2._invLocalInertia22;
	__tmp__10 = armR2._transform._rotation10 * armR2._invLocalInertia00 + armR2._transform._rotation11 * armR2._invLocalInertia10 + armR2._transform._rotation12 * armR2._invLocalInertia20;
	__tmp__11 = armR2._transform._rotation10 * armR2._invLocalInertia01 + armR2._transform._rotation11 * armR2._invLocalInertia11 + armR2._transform._rotation12 * armR2._invLocalInertia21;
	__tmp__12 = armR2._transform._rotation10 * armR2._invLocalInertia02 + armR2._transform._rotation11 * armR2._invLocalInertia12 + armR2._transform._rotation12 * armR2._invLocalInertia22;
	__tmp__20 = armR2._transform._rotation20 * armR2._invLocalInertia00 + armR2._transform._rotation21 * armR2._invLocalInertia10 + armR2._transform._rotation22 * armR2._invLocalInertia20;
	__tmp__21 = armR2._transform._rotation20 * armR2._invLocalInertia01 + armR2._transform._rotation21 * armR2._invLocalInertia11 + armR2._transform._rotation22 * armR2._invLocalInertia21;
	__tmp__22 = armR2._transform._rotation20 * armR2._invLocalInertia02 + armR2._transform._rotation21 * armR2._invLocalInertia12 + armR2._transform._rotation22 * armR2._invLocalInertia22;
	armR2._invInertia00 = __tmp__00;
	armR2._invInertia01 = __tmp__01;
	armR2._invInertia02 = __tmp__02;
	armR2._invInertia10 = __tmp__10;
	armR2._invInertia11 = __tmp__11;
	armR2._invInertia12 = __tmp__12;
	armR2._invInertia20 = __tmp__20;
	armR2._invInertia21 = __tmp__21;
	armR2._invInertia22 = __tmp__22;
	var __tmp__00;
	var __tmp__01;
	var __tmp__02;
	var __tmp__10;
	var __tmp__11;
	var __tmp__12;
	var __tmp__20;
	var __tmp__21;
	var __tmp__22;
	__tmp__00 = armR2._invInertia00 * armR2._transform._rotation00 + armR2._invInertia01 * armR2._transform._rotation01 + armR2._invInertia02 * armR2._transform._rotation02;
	__tmp__01 = armR2._invInertia00 * armR2._transform._rotation10 + armR2._invInertia01 * armR2._transform._rotation11 + armR2._invInertia02 * armR2._transform._rotation12;
	__tmp__02 = armR2._invInertia00 * armR2._transform._rotation20 + armR2._invInertia01 * armR2._transform._rotation21 + armR2._invInertia02 * armR2._transform._rotation22;
	__tmp__10 = armR2._invInertia10 * armR2._transform._rotation00 + armR2._invInertia11 * armR2._transform._rotation01 + armR2._invInertia12 * armR2._transform._rotation02;
	__tmp__11 = armR2._invInertia10 * armR2._transform._rotation10 + armR2._invInertia11 * armR2._transform._rotation11 + armR2._invInertia12 * armR2._transform._rotation12;
	__tmp__12 = armR2._invInertia10 * armR2._transform._rotation20 + armR2._invInertia11 * armR2._transform._rotation21 + armR2._invInertia12 * armR2._transform._rotation22;
	__tmp__20 = armR2._invInertia20 * armR2._transform._rotation00 + armR2._invInertia21 * armR2._transform._rotation01 + armR2._invInertia22 * armR2._transform._rotation02;
	__tmp__21 = armR2._invInertia20 * armR2._transform._rotation10 + armR2._invInertia21 * armR2._transform._rotation11 + armR2._invInertia22 * armR2._transform._rotation12;
	__tmp__22 = armR2._invInertia20 * armR2._transform._rotation20 + armR2._invInertia21 * armR2._transform._rotation21 + armR2._invInertia22 * armR2._transform._rotation22;
	armR2._invInertia00 = __tmp__00;
	armR2._invInertia01 = __tmp__01;
	armR2._invInertia02 = __tmp__02;
	armR2._invInertia10 = __tmp__10;
	armR2._invInertia11 = __tmp__11;
	armR2._invInertia12 = __tmp__12;
	armR2._invInertia20 = __tmp__20;
	armR2._invInertia21 = __tmp__21;
	armR2._invInertia22 = __tmp__22;
	armR2._invInertia00 *= armR2._rotFactor.x;
	armR2._invInertia01 *= armR2._rotFactor.x;
	armR2._invInertia02 *= armR2._rotFactor.x;
	armR2._invInertia10 *= armR2._rotFactor.y;
	armR2._invInertia11 *= armR2._rotFactor.y;
	armR2._invInertia12 *= armR2._rotFactor.y;
	armR2._invInertia20 *= armR2._rotFactor.z;
	armR2._invInertia21 *= armR2._rotFactor.z;
	armR2._invInertia22 *= armR2._rotFactor.z;
	var dst = armR2._ptransform;
	var src = armR2._transform;
	dst._positionX = src._positionX;
	dst._positionY = src._positionY;
	dst._positionZ = src._positionZ;
	dst._rotation00 = src._rotation00;
	dst._rotation01 = src._rotation01;
	dst._rotation02 = src._rotation02;
	dst._rotation10 = src._rotation10;
	dst._rotation11 = src._rotation11;
	dst._rotation12 = src._rotation12;
	dst._rotation20 = src._rotation20;
	dst._rotation21 = src._rotation21;
	dst._rotation22 = src._rotation22;
	var s = armR2._shapeList;
	while(s != null) {
		var n = s._next;
		var tf1 = armR2._ptransform;
		var tf2 = armR2._transform;
		var dst = s._ptransform;
		var src1 = s._localTransform;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = tf1._rotation00 * src1._rotation00 + tf1._rotation01 * src1._rotation10 + tf1._rotation02 * src1._rotation20;
		__tmp__01 = tf1._rotation00 * src1._rotation01 + tf1._rotation01 * src1._rotation11 + tf1._rotation02 * src1._rotation21;
		__tmp__02 = tf1._rotation00 * src1._rotation02 + tf1._rotation01 * src1._rotation12 + tf1._rotation02 * src1._rotation22;
		__tmp__10 = tf1._rotation10 * src1._rotation00 + tf1._rotation11 * src1._rotation10 + tf1._rotation12 * src1._rotation20;
		__tmp__11 = tf1._rotation10 * src1._rotation01 + tf1._rotation11 * src1._rotation11 + tf1._rotation12 * src1._rotation21;
		__tmp__12 = tf1._rotation10 * src1._rotation02 + tf1._rotation11 * src1._rotation12 + tf1._rotation12 * src1._rotation22;
		__tmp__20 = tf1._rotation20 * src1._rotation00 + tf1._rotation21 * src1._rotation10 + tf1._rotation22 * src1._rotation20;
		__tmp__21 = tf1._rotation20 * src1._rotation01 + tf1._rotation21 * src1._rotation11 + tf1._rotation22 * src1._rotation21;
		__tmp__22 = tf1._rotation20 * src1._rotation02 + tf1._rotation21 * src1._rotation12 + tf1._rotation22 * src1._rotation22;
		dst._rotation00 = __tmp__00;
		dst._rotation01 = __tmp__01;
		dst._rotation02 = __tmp__02;
		dst._rotation10 = __tmp__10;
		dst._rotation11 = __tmp__11;
		dst._rotation12 = __tmp__12;
		dst._rotation20 = __tmp__20;
		dst._rotation21 = __tmp__21;
		dst._rotation22 = __tmp__22;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = tf1._rotation00 * src1._positionX + tf1._rotation01 * src1._positionY + tf1._rotation02 * src1._positionZ;
		__tmp__Y = tf1._rotation10 * src1._positionX + tf1._rotation11 * src1._positionY + tf1._rotation12 * src1._positionZ;
		__tmp__Z = tf1._rotation20 * src1._positionX + tf1._rotation21 * src1._positionY + tf1._rotation22 * src1._positionZ;
		dst._positionX = __tmp__X;
		dst._positionY = __tmp__Y;
		dst._positionZ = __tmp__Z;
		dst._positionX += tf1._positionX;
		dst._positionY += tf1._positionY;
		dst._positionZ += tf1._positionZ;
		var dst1 = s._transform;
		var src11 = s._localTransform;
		var __tmp__001;
		var __tmp__011;
		var __tmp__021;
		var __tmp__101;
		var __tmp__111;
		var __tmp__121;
		var __tmp__201;
		var __tmp__211;
		var __tmp__221;
		__tmp__001 = tf2._rotation00 * src11._rotation00 + tf2._rotation01 * src11._rotation10 + tf2._rotation02 * src11._rotation20;
		__tmp__011 = tf2._rotation00 * src11._rotation01 + tf2._rotation01 * src11._rotation11 + tf2._rotation02 * src11._rotation21;
		__tmp__021 = tf2._rotation00 * src11._rotation02 + tf2._rotation01 * src11._rotation12 + tf2._rotation02 * src11._rotation22;
		__tmp__101 = tf2._rotation10 * src11._rotation00 + tf2._rotation11 * src11._rotation10 + tf2._rotation12 * src11._rotation20;
		__tmp__111 = tf2._rotation10 * src11._rotation01 + tf2._rotation11 * src11._rotation11 + tf2._rotation12 * src11._rotation21;
		__tmp__121 = tf2._rotation10 * src11._rotation02 + tf2._rotation11 * src11._rotation12 + tf2._rotation12 * src11._rotation22;
		__tmp__201 = tf2._rotation20 * src11._rotation00 + tf2._rotation21 * src11._rotation10 + tf2._rotation22 * src11._rotation20;
		__tmp__211 = tf2._rotation20 * src11._rotation01 + tf2._rotation21 * src11._rotation11 + tf2._rotation22 * src11._rotation21;
		__tmp__221 = tf2._rotation20 * src11._rotation02 + tf2._rotation21 * src11._rotation12 + tf2._rotation22 * src11._rotation22;
		dst1._rotation00 = __tmp__001;
		dst1._rotation01 = __tmp__011;
		dst1._rotation02 = __tmp__021;
		dst1._rotation10 = __tmp__101;
		dst1._rotation11 = __tmp__111;
		dst1._rotation12 = __tmp__121;
		dst1._rotation20 = __tmp__201;
		dst1._rotation21 = __tmp__211;
		dst1._rotation22 = __tmp__221;
		var __tmp__X1;
		var __tmp__Y1;
		var __tmp__Z1;
		__tmp__X1 = tf2._rotation00 * src11._positionX + tf2._rotation01 * src11._positionY + tf2._rotation02 * src11._positionZ;
		__tmp__Y1 = tf2._rotation10 * src11._positionX + tf2._rotation11 * src11._positionY + tf2._rotation12 * src11._positionZ;
		__tmp__Z1 = tf2._rotation20 * src11._positionX + tf2._rotation21 * src11._positionY + tf2._rotation22 * src11._positionZ;
		dst1._positionX = __tmp__X1;
		dst1._positionY = __tmp__Y1;
		dst1._positionZ = __tmp__Z1;
		dst1._positionX += tf2._positionX;
		dst1._positionY += tf2._positionY;
		dst1._positionZ += tf2._positionZ;
		var minX;
		var minY;
		var minZ;
		var maxX;
		var maxY;
		var maxZ;
		s._geom._computeAabb(s._aabb,s._ptransform);
		minX = s._aabb._minX;
		minY = s._aabb._minY;
		minZ = s._aabb._minZ;
		maxX = s._aabb._maxX;
		maxY = s._aabb._maxY;
		maxZ = s._aabb._maxZ;
		s._geom._computeAabb(s._aabb,s._transform);
		s._aabb._minX = minX < s._aabb._minX ? minX : s._aabb._minX;
		s._aabb._minY = minY < s._aabb._minY ? minY : s._aabb._minY;
		s._aabb._minZ = minZ < s._aabb._minZ ? minZ : s._aabb._minZ;
		s._aabb._maxX = maxX > s._aabb._maxX ? maxX : s._aabb._maxX;
		s._aabb._maxY = maxY > s._aabb._maxY ? maxY : s._aabb._maxY;
		s._aabb._maxZ = maxZ > s._aabb._maxZ ? maxZ : s._aabb._maxZ;
		if(s._proxy != null) {
			var dX;
			var dY;
			var dZ;
			dX = s._transform._positionX - s._ptransform._positionX;
			dY = s._transform._positionY - s._ptransform._positionY;
			dZ = s._transform._positionZ - s._ptransform._positionZ;
			var v = s.displacement;
			v.x = dX;
			v.y = dY;
			v.z = dZ;
			s._rigidBody._world._broadPhase.moveProxy(s._proxy,s._aabb,s.displacement);
		}
		s = n;
	}
	armR2._sleeping = false;
	armR2._sleepTime = 0;
	var x = new oimo_common_Vec3(1,0,0);
	var y = new oimo_common_Vec3(0,1,0);
	var z = new oimo_common_Vec3(0,0,1);
	var sd = new oimo_dynamics_constraint_joint_SpringDamper();
	sd.setSpring(10,1);
	var lm180 = new oimo_dynamics_constraint_joint_RotationalLimitMotor().setLimits(-1.570796326794895,1.570796326794895);
	var lm90 = new oimo_dynamics_constraint_joint_RotationalLimitMotor().setLimits(-0.7853981633974475,0.7853981633974475);
	var lmElbow = new oimo_dynamics_constraint_joint_RotationalLimitMotor().setLimits(0.,2.7925268031909245);
	var lmKnee = new oimo_dynamics_constraint_joint_RotationalLimitMotor().setLimits(0.,2.7925268031909245);
	oimo_common_Vec3.numCreations++;
	demo_common_OimoUtil.addRagdollJoint(w,body1,head,new oimo_common_Vec3(pos.x + 0,pos.y + 0.89999999999999991,pos.z + 0),y,x,sd,90,70,sd,lm180);
	oimo_common_Vec3.numCreations++;
	demo_common_OimoUtil.addRagdollJoint(w,body1,body2,new oimo_common_Vec3(pos.x + 0,pos.y + 0.35,pos.z + 0),y,x,sd,60,45,sd,lm90);
	oimo_common_Vec3.numCreations++;
	demo_common_OimoUtil.addRagdollJoint(w,body1,armL1,new oimo_common_Vec3(pos.x + (-0.2),pos.y + 0.7,pos.z + 0),x,z,sd,90,90,sd,lm180);
	oimo_common_Vec3.numCreations++;
	demo_common_OimoUtil.addRagdollJoint(w,body1,armR1,new oimo_common_Vec3(pos.x + 0.2,pos.y + 0.7,pos.z + 0),new oimo_common_Vec3(-x.x,-x.y,-x.z),z,sd,90,90,sd,lm180);
	oimo_common_Vec3.numCreations++;
	demo_common_OimoUtil.addRevoluteJoint(w,armL1,armL2,new oimo_common_Vec3(pos.x + (-0.55),pos.y + 0.7,pos.z + 0),y,sd,lmElbow);
	oimo_common_Vec3.numCreations++;
	demo_common_OimoUtil.addRevoluteJoint(w,armR1,armR2,new oimo_common_Vec3(pos.x + 0.55,pos.y + 0.7,pos.z + 0),new oimo_common_Vec3(-y.x,-y.y,-y.z),sd,lmElbow);
	var jc = new oimo_dynamics_constraint_joint_RagdollJointConfig();
	jc.swingSpringDamper = sd;
	jc.maxSwingAngle1 = 1.570796326794895;
	jc.maxSwingAngle2 = 1.2217304763960295;
	jc.twistSpringDamper = sd;
	jc.twistLimitMotor = lm180;
	oimo_common_Vec3.numCreations++;
	jc.init(body2,legL1,new oimo_common_Vec3(pos.x + (-0.15),pos.y + (-0.15),pos.z + 0),y,x);
	jc.localTwistAxis1 = new oimo_common_Vec3(-z.x,-z.y,-z.z);
	w.addJoint(new oimo_dynamics_constraint_joint_RagdollJoint(jc));
	oimo_common_Vec3.numCreations++;
	jc.init(body2,legR1,new oimo_common_Vec3(pos.x + 0.15,pos.y + (-0.15),pos.z + 0),y,x);
	jc.localTwistAxis1 = new oimo_common_Vec3(-z.x,-z.y,-z.z);
	w.addJoint(new oimo_dynamics_constraint_joint_RagdollJoint(jc));
	oimo_common_Vec3.numCreations++;
	demo_common_OimoUtil.addRevoluteJoint(w,legL1,legL2,new oimo_common_Vec3(pos.x + (-0.15),pos.y + (-0.65),pos.z + 0),x,sd,lmKnee);
	oimo_common_Vec3.numCreations++;
	demo_common_OimoUtil.addRevoluteJoint(w,legR1,legR2,new oimo_common_Vec3(pos.x + 0.15,pos.y + (-0.65),pos.z + 0),x,sd,lmKnee);
	return body1;
};
var demo_common_UserInput = function() {
	this.pmouseX = 0;
	this.pmouseY = 0;
	this.pmouseL = false;
	this.pmouseR = false;
	this.mouseX = 0;
	this.mouseY = 0;
	this.mouseL = false;
	this.mouseR = false;
	this.pkeyboard = new Array(demo_common_UserInput.KEYBOARD_LENGTH);
	this.keyboard = new Array(demo_common_UserInput.KEYBOARD_LENGTH);
	var _g = 0;
	var _g1 = demo_common_UserInput.KEYBOARD_LENGTH;
	while(_g < _g1) {
		var i = _g++;
		this.pkeyboard[i] = false;
		this.keyboard[i] = false;
	}
};
demo_common_UserInput.__name__ = true;
demo_common_UserInput.prototype = {
	isKeyPressed: function(char,code) {
		if(code == null) {
			code = -1;
		}
		if(char != null) {
			code = HxOverrides.cca(char,0);
		}
		if(code < 0 || code >= demo_common_UserInput.KEYBOARD_LENGTH) {
			return false;
		}
		if(!this.pkeyboard[code]) {
			return this.keyboard[code];
		} else {
			return false;
		}
	}
	,__class__: demo_common_UserInput
};
var demo_common_ViewInfo = function() {
};
demo_common_ViewInfo.__name__ = true;
demo_common_ViewInfo.prototype = {
	__class__: demo_common_ViewInfo
};
var demo_core_BasicDemo = function() {
	demo_common_DemoBase.call(this,"Basic Demo");
};
demo_core_BasicDemo.__name__ = true;
demo_core_BasicDemo.__super__ = demo_common_DemoBase;
demo_core_BasicDemo.prototype = $extend(demo_common_DemoBase.prototype,{
	init: function(world,renderer,input,viewInfo) {
		demo_common_DemoBase.prototype.init.call(this,world,renderer,input,viewInfo);
		var eye_x = 0;
		var eye_y = 7;
		var eye_z = 9;
		oimo_common_Vec3.numCreations++;
		oimo_common_Vec3.numCreations++;
		var up_x = 0;
		var up_y = 1;
		var up_z = 0;
		oimo_common_Vec3.numCreations++;
		var _this = renderer.viewMat;
		var zx = eye_x - 0;
		var zy = eye_y - 2;
		var zz = eye_z - 0;
		var tmp = 1 / Math.sqrt(zx * zx + zy * zy + zz * zz);
		zx *= tmp;
		zy *= tmp;
		zz *= tmp;
		var xx = up_y * zz - up_z * zy;
		var xy = up_z * zx - up_x * zz;
		var xz = up_x * zy - up_y * zx;
		tmp = 1 / Math.sqrt(xx * xx + xy * xy + xz * xz);
		xx *= tmp;
		xy *= tmp;
		xz *= tmp;
		var yx = zy * xz - zz * xy;
		var yy = zz * xx - zx * xz;
		var yz = zx * xy - zy * xx;
		_this.e00 = xx;
		_this.e01 = xy;
		_this.e02 = xz;
		_this.e03 = -(xx * eye_x + xy * eye_y + xz * eye_z);
		_this.e10 = yx;
		_this.e11 = yy;
		_this.e12 = yz;
		_this.e13 = -(yx * eye_x + yy * eye_y + yz * eye_z);
		_this.e20 = zx;
		_this.e21 = zy;
		_this.e22 = zz;
		_this.e23 = -(zx * eye_x + zy * eye_y + zz * eye_z);
		_this.e30 = 0;
		_this.e31 = 0;
		_this.e32 = 0;
		_this.e33 = 1;
		demo_common_OimoUtil.addBox(world,new oimo_common_Vec3(0,-0.5,0),new oimo_common_Vec3(7,0.5,7),true);
		var _g = 0;
		while(_g < 5) {
			var i = _g++;
			var _g1 = -2;
			while(_g1 < 3) {
				var j = _g1++;
				var _g2 = -2;
				while(_g2 < 3) {
					var box = demo_common_OimoUtil.addBox(world,new oimo_common_Vec3(j * 0.61,0.3 + i * 0.3 * 3,_g2++ * 0.61),new oimo_common_Vec3(0.3,0.3,0.3),false);
					var x = -0.05 + Math.random() * 0.1;
					var y = -0.05 + Math.random() * 0.1;
					var z = -0.05 + Math.random() * 0.1;
					if(z == null) {
						z = 0;
					}
					if(y == null) {
						y = 0;
					}
					if(x == null) {
						x = 0;
					}
					oimo_common_Vec3.numCreations++;
					if(box._type == 1) {
						box._angVelX = 0;
						box._angVelY = 0;
						box._angVelZ = 0;
					} else {
						box._angVelX = x;
						box._angVelY = y;
						box._angVelZ = z;
					}
					box._sleeping = false;
					box._sleepTime = 0;
				}
			}
		}
	}
	,update: function() {
		demo_common_DemoBase.prototype.update.call(this);
		this.teleportRigidBodies(-20,10,5,5);
	}
	,__class__: demo_core_BasicDemo
});
var demo_core_BreakableJointDemo = function() {
	demo_common_DemoBase.call(this,"Breakable Joint");
};
demo_core_BreakableJointDemo.__name__ = true;
demo_core_BreakableJointDemo.__super__ = demo_common_DemoBase;
demo_core_BreakableJointDemo.prototype = $extend(demo_common_DemoBase.prototype,{
	init: function(world,renderer,input,viewInfo) {
		demo_common_DemoBase.prototype.init.call(this,world,renderer,input,viewInfo);
		var eye_x = 0;
		var eye_y = 7;
		var eye_z = 9;
		oimo_common_Vec3.numCreations++;
		oimo_common_Vec3.numCreations++;
		var up_x = 0;
		var up_y = 1;
		var up_z = 0;
		oimo_common_Vec3.numCreations++;
		var _this = renderer.viewMat;
		var zx = eye_x - 0;
		var zy = eye_y - 2;
		var zz = eye_z - 0;
		var tmp = 1 / Math.sqrt(zx * zx + zy * zy + zz * zz);
		zx *= tmp;
		zy *= tmp;
		zz *= tmp;
		var xx = up_y * zz - up_z * zy;
		var xy = up_z * zx - up_x * zz;
		var xz = up_x * zy - up_y * zx;
		tmp = 1 / Math.sqrt(xx * xx + xy * xy + xz * xz);
		xx *= tmp;
		xy *= tmp;
		xz *= tmp;
		var yx = zy * xz - zz * xy;
		var yy = zz * xx - zx * xz;
		var yz = zx * xy - zy * xx;
		_this.e00 = xx;
		_this.e01 = xy;
		_this.e02 = xz;
		_this.e03 = -(xx * eye_x + xy * eye_y + xz * eye_z);
		_this.e10 = yx;
		_this.e11 = yy;
		_this.e12 = yz;
		_this.e13 = -(yx * eye_x + yy * eye_y + yz * eye_z);
		_this.e20 = zx;
		_this.e21 = zy;
		_this.e22 = zz;
		_this.e23 = -(zx * eye_x + zy * eye_y + zz * eye_z);
		_this.e30 = 0;
		_this.e31 = 0;
		_this.e32 = 0;
		_this.e33 = 1;
		demo_common_OimoUtil.addBox(world,new oimo_common_Vec3(0,-0.5,0),new oimo_common_Vec3(7,0.5,7),true);
		var chain = [];
		chain.push(demo_common_OimoUtil.addSphere(world,new oimo_common_Vec3(0,6,0),0.3,true));
		var _g = 0;
		while(_g < 12) {
			var i = _g++;
			chain.push(i % 2 == 0 ? demo_common_OimoUtil.addSphere(world,new oimo_common_Vec3((i + 1) * 0.4,6,0),0.25,false) : demo_common_OimoUtil.addBox(world,new oimo_common_Vec3((i + 1) * 0.4,6,0),new oimo_common_Vec3(0.25,0.25,0.25),false));
			var _this = chain[i];
			var x = -1 + Math.random() * 2;
			var y = -1 + Math.random() * 2;
			var z = -1 + Math.random() * 2;
			if(z == null) {
				z = 0;
			}
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var v_x = x;
			var v_y = y;
			var v_z = z;
			oimo_common_Vec3.numCreations++;
			var x1 = v_x * 0.05;
			var y1 = v_y * 0.05;
			var z1 = v_z * 0.05;
			v_x = x1;
			v_y = y1;
			v_z = z1;
			if(_this._type == 1) {
				_this._velX = 0;
				_this._velY = 0;
				_this._velZ = 0;
			} else {
				_this._velX = x1;
				_this._velY = y1;
				_this._velZ = z1;
			}
			_this._sleeping = false;
			_this._sleepTime = 0;
		}
		var _g = 1;
		var _g1 = chain.length;
		while(_g < _g1) {
			var i = _g++;
			var center;
			if(i == 1) {
				var _this = chain[0];
				var v = new oimo_common_Vec3();
				v.x = _this._transform._positionX;
				v.y = _this._transform._positionY;
				v.z = _this._transform._positionZ;
				center = v;
			} else {
				var _this1 = chain[i - 1];
				var v1 = new oimo_common_Vec3();
				v1.x = _this1._transform._positionX;
				v1.y = _this1._transform._positionY;
				v1.z = _this1._transform._positionZ;
				var _this2 = chain[i];
				var v_x = 0;
				var v_y = 0;
				var v_z = 0;
				oimo_common_Vec3.numCreations++;
				v_x = _this2._transform._positionX;
				v_y = _this2._transform._positionY;
				v_z = _this2._transform._positionZ;
				v1.x += v_x;
				v1.y += v_y;
				v1.z += v_z;
				v1.x *= 0.5;
				v1.y *= 0.5;
				v1.z *= 0.5;
				center = v1;
			}
			demo_common_OimoUtil.addSphericalJoint(world,chain[i - 1],chain[i],center)._breakForce = 100;
		}
	}
	,update: function() {
		demo_common_DemoBase.prototype.update.call(this);
		this.teleportRigidBodies(-20,10,5,5);
	}
	,__class__: demo_core_BreakableJointDemo
});
var demo_core_BridgeDemo = function() {
	demo_common_DemoBase.call(this,"Bridge");
};
demo_core_BridgeDemo.__name__ = true;
demo_core_BridgeDemo.__super__ = demo_common_DemoBase;
demo_core_BridgeDemo.prototype = $extend(demo_common_DemoBase.prototype,{
	init: function(world,renderer,input,viewInfo) {
		demo_common_DemoBase.prototype.init.call(this,world,renderer,input,viewInfo);
		var eye_x = 0;
		var eye_y = 8;
		var eye_z = 12;
		oimo_common_Vec3.numCreations++;
		oimo_common_Vec3.numCreations++;
		var up_x = 0;
		var up_y = 1;
		var up_z = 0;
		oimo_common_Vec3.numCreations++;
		var _this = renderer.viewMat;
		var zx = eye_x - 0;
		var zy = eye_y - 2;
		var zz = eye_z - 0;
		var tmp = 1 / Math.sqrt(zx * zx + zy * zy + zz * zz);
		zx *= tmp;
		zy *= tmp;
		zz *= tmp;
		var xx = up_y * zz - up_z * zy;
		var xy = up_z * zx - up_x * zz;
		var xz = up_x * zy - up_y * zx;
		tmp = 1 / Math.sqrt(xx * xx + xy * xy + xz * xz);
		xx *= tmp;
		xy *= tmp;
		xz *= tmp;
		var yx = zy * xz - zz * xy;
		var yy = zz * xx - zx * xz;
		var yz = zx * xy - zy * xx;
		_this.e00 = xx;
		_this.e01 = xy;
		_this.e02 = xz;
		_this.e03 = -(xx * eye_x + xy * eye_y + xz * eye_z);
		_this.e10 = yx;
		_this.e11 = yy;
		_this.e12 = yz;
		_this.e13 = -(yx * eye_x + yy * eye_y + yz * eye_z);
		_this.e20 = zx;
		_this.e21 = zy;
		_this.e22 = zz;
		_this.e23 = -(zx * eye_x + zy * eye_y + zz * eye_z);
		_this.e30 = 0;
		_this.e31 = 0;
		_this.e32 = 0;
		_this.e33 = 1;
		var _g = 0;
		while(_g < 5) {
			++_g;
			var _this = demo_common_OimoUtil.addSphere(world,new oimo_common_Vec3(-4 + Math.random() * 8,2 + Math.random(),-1 + Math.random() * 2),0.8,false)._shapeList;
			_this._density = 0.3;
			if(_this._rigidBody != null) {
				var _this1 = _this._rigidBody;
				_this1.updateMass();
				var s = _this1._shapeList;
				while(s != null) {
					var n = s._next;
					var tf1 = _this1._ptransform;
					var tf2 = _this1._transform;
					var dst = s._ptransform;
					var src1 = s._localTransform;
					var __tmp__00;
					var __tmp__01;
					var __tmp__02;
					var __tmp__10;
					var __tmp__11;
					var __tmp__12;
					var __tmp__20;
					var __tmp__21;
					var __tmp__22;
					__tmp__00 = tf1._rotation00 * src1._rotation00 + tf1._rotation01 * src1._rotation10 + tf1._rotation02 * src1._rotation20;
					__tmp__01 = tf1._rotation00 * src1._rotation01 + tf1._rotation01 * src1._rotation11 + tf1._rotation02 * src1._rotation21;
					__tmp__02 = tf1._rotation00 * src1._rotation02 + tf1._rotation01 * src1._rotation12 + tf1._rotation02 * src1._rotation22;
					__tmp__10 = tf1._rotation10 * src1._rotation00 + tf1._rotation11 * src1._rotation10 + tf1._rotation12 * src1._rotation20;
					__tmp__11 = tf1._rotation10 * src1._rotation01 + tf1._rotation11 * src1._rotation11 + tf1._rotation12 * src1._rotation21;
					__tmp__12 = tf1._rotation10 * src1._rotation02 + tf1._rotation11 * src1._rotation12 + tf1._rotation12 * src1._rotation22;
					__tmp__20 = tf1._rotation20 * src1._rotation00 + tf1._rotation21 * src1._rotation10 + tf1._rotation22 * src1._rotation20;
					__tmp__21 = tf1._rotation20 * src1._rotation01 + tf1._rotation21 * src1._rotation11 + tf1._rotation22 * src1._rotation21;
					__tmp__22 = tf1._rotation20 * src1._rotation02 + tf1._rotation21 * src1._rotation12 + tf1._rotation22 * src1._rotation22;
					dst._rotation00 = __tmp__00;
					dst._rotation01 = __tmp__01;
					dst._rotation02 = __tmp__02;
					dst._rotation10 = __tmp__10;
					dst._rotation11 = __tmp__11;
					dst._rotation12 = __tmp__12;
					dst._rotation20 = __tmp__20;
					dst._rotation21 = __tmp__21;
					dst._rotation22 = __tmp__22;
					var __tmp__X;
					var __tmp__Y;
					var __tmp__Z;
					__tmp__X = tf1._rotation00 * src1._positionX + tf1._rotation01 * src1._positionY + tf1._rotation02 * src1._positionZ;
					__tmp__Y = tf1._rotation10 * src1._positionX + tf1._rotation11 * src1._positionY + tf1._rotation12 * src1._positionZ;
					__tmp__Z = tf1._rotation20 * src1._positionX + tf1._rotation21 * src1._positionY + tf1._rotation22 * src1._positionZ;
					dst._positionX = __tmp__X;
					dst._positionY = __tmp__Y;
					dst._positionZ = __tmp__Z;
					dst._positionX += tf1._positionX;
					dst._positionY += tf1._positionY;
					dst._positionZ += tf1._positionZ;
					var dst1 = s._transform;
					var src11 = s._localTransform;
					var __tmp__001;
					var __tmp__011;
					var __tmp__021;
					var __tmp__101;
					var __tmp__111;
					var __tmp__121;
					var __tmp__201;
					var __tmp__211;
					var __tmp__221;
					__tmp__001 = tf2._rotation00 * src11._rotation00 + tf2._rotation01 * src11._rotation10 + tf2._rotation02 * src11._rotation20;
					__tmp__011 = tf2._rotation00 * src11._rotation01 + tf2._rotation01 * src11._rotation11 + tf2._rotation02 * src11._rotation21;
					__tmp__021 = tf2._rotation00 * src11._rotation02 + tf2._rotation01 * src11._rotation12 + tf2._rotation02 * src11._rotation22;
					__tmp__101 = tf2._rotation10 * src11._rotation00 + tf2._rotation11 * src11._rotation10 + tf2._rotation12 * src11._rotation20;
					__tmp__111 = tf2._rotation10 * src11._rotation01 + tf2._rotation11 * src11._rotation11 + tf2._rotation12 * src11._rotation21;
					__tmp__121 = tf2._rotation10 * src11._rotation02 + tf2._rotation11 * src11._rotation12 + tf2._rotation12 * src11._rotation22;
					__tmp__201 = tf2._rotation20 * src11._rotation00 + tf2._rotation21 * src11._rotation10 + tf2._rotation22 * src11._rotation20;
					__tmp__211 = tf2._rotation20 * src11._rotation01 + tf2._rotation21 * src11._rotation11 + tf2._rotation22 * src11._rotation21;
					__tmp__221 = tf2._rotation20 * src11._rotation02 + tf2._rotation21 * src11._rotation12 + tf2._rotation22 * src11._rotation22;
					dst1._rotation00 = __tmp__001;
					dst1._rotation01 = __tmp__011;
					dst1._rotation02 = __tmp__021;
					dst1._rotation10 = __tmp__101;
					dst1._rotation11 = __tmp__111;
					dst1._rotation12 = __tmp__121;
					dst1._rotation20 = __tmp__201;
					dst1._rotation21 = __tmp__211;
					dst1._rotation22 = __tmp__221;
					var __tmp__X1;
					var __tmp__Y1;
					var __tmp__Z1;
					__tmp__X1 = tf2._rotation00 * src11._positionX + tf2._rotation01 * src11._positionY + tf2._rotation02 * src11._positionZ;
					__tmp__Y1 = tf2._rotation10 * src11._positionX + tf2._rotation11 * src11._positionY + tf2._rotation12 * src11._positionZ;
					__tmp__Z1 = tf2._rotation20 * src11._positionX + tf2._rotation21 * src11._positionY + tf2._rotation22 * src11._positionZ;
					dst1._positionX = __tmp__X1;
					dst1._positionY = __tmp__Y1;
					dst1._positionZ = __tmp__Z1;
					dst1._positionX += tf2._positionX;
					dst1._positionY += tf2._positionY;
					dst1._positionZ += tf2._positionZ;
					var minX;
					var minY;
					var minZ;
					var maxX;
					var maxY;
					var maxZ;
					s._geom._computeAabb(s._aabb,s._ptransform);
					minX = s._aabb._minX;
					minY = s._aabb._minY;
					minZ = s._aabb._minZ;
					maxX = s._aabb._maxX;
					maxY = s._aabb._maxY;
					maxZ = s._aabb._maxZ;
					s._geom._computeAabb(s._aabb,s._transform);
					s._aabb._minX = minX < s._aabb._minX ? minX : s._aabb._minX;
					s._aabb._minY = minY < s._aabb._minY ? minY : s._aabb._minY;
					s._aabb._minZ = minZ < s._aabb._minZ ? minZ : s._aabb._minZ;
					s._aabb._maxX = maxX > s._aabb._maxX ? maxX : s._aabb._maxX;
					s._aabb._maxY = maxY > s._aabb._maxY ? maxY : s._aabb._maxY;
					s._aabb._maxZ = maxZ > s._aabb._maxZ ? maxZ : s._aabb._maxZ;
					if(s._proxy != null) {
						var dX;
						var dY;
						var dZ;
						dX = s._transform._positionX - s._ptransform._positionX;
						dY = s._transform._positionY - s._ptransform._positionY;
						dZ = s._transform._positionZ - s._ptransform._positionZ;
						var v = s.displacement;
						v.x = dX;
						v.y = dY;
						v.z = dZ;
						s._rigidBody._world._broadPhase.moveProxy(s._proxy,s._aabb,s.displacement);
					}
					s = n;
				}
			}
			var _this2 = demo_common_OimoUtil.addBox(world,new oimo_common_Vec3(-4 + Math.random() * 8,2 + Math.random(),-1 + Math.random() * 2),new oimo_common_Vec3(0.5,0.5,0.5),false)._shapeList;
			_this2._density = 0.3;
			if(_this2._rigidBody != null) {
				var _this3 = _this2._rigidBody;
				_this3.updateMass();
				var s1 = _this3._shapeList;
				while(s1 != null) {
					var n1 = s1._next;
					var tf11 = _this3._ptransform;
					var tf21 = _this3._transform;
					var dst2 = s1._ptransform;
					var src12 = s1._localTransform;
					var __tmp__002;
					var __tmp__012;
					var __tmp__022;
					var __tmp__102;
					var __tmp__112;
					var __tmp__122;
					var __tmp__202;
					var __tmp__212;
					var __tmp__222;
					__tmp__002 = tf11._rotation00 * src12._rotation00 + tf11._rotation01 * src12._rotation10 + tf11._rotation02 * src12._rotation20;
					__tmp__012 = tf11._rotation00 * src12._rotation01 + tf11._rotation01 * src12._rotation11 + tf11._rotation02 * src12._rotation21;
					__tmp__022 = tf11._rotation00 * src12._rotation02 + tf11._rotation01 * src12._rotation12 + tf11._rotation02 * src12._rotation22;
					__tmp__102 = tf11._rotation10 * src12._rotation00 + tf11._rotation11 * src12._rotation10 + tf11._rotation12 * src12._rotation20;
					__tmp__112 = tf11._rotation10 * src12._rotation01 + tf11._rotation11 * src12._rotation11 + tf11._rotation12 * src12._rotation21;
					__tmp__122 = tf11._rotation10 * src12._rotation02 + tf11._rotation11 * src12._rotation12 + tf11._rotation12 * src12._rotation22;
					__tmp__202 = tf11._rotation20 * src12._rotation00 + tf11._rotation21 * src12._rotation10 + tf11._rotation22 * src12._rotation20;
					__tmp__212 = tf11._rotation20 * src12._rotation01 + tf11._rotation21 * src12._rotation11 + tf11._rotation22 * src12._rotation21;
					__tmp__222 = tf11._rotation20 * src12._rotation02 + tf11._rotation21 * src12._rotation12 + tf11._rotation22 * src12._rotation22;
					dst2._rotation00 = __tmp__002;
					dst2._rotation01 = __tmp__012;
					dst2._rotation02 = __tmp__022;
					dst2._rotation10 = __tmp__102;
					dst2._rotation11 = __tmp__112;
					dst2._rotation12 = __tmp__122;
					dst2._rotation20 = __tmp__202;
					dst2._rotation21 = __tmp__212;
					dst2._rotation22 = __tmp__222;
					var __tmp__X2;
					var __tmp__Y2;
					var __tmp__Z2;
					__tmp__X2 = tf11._rotation00 * src12._positionX + tf11._rotation01 * src12._positionY + tf11._rotation02 * src12._positionZ;
					__tmp__Y2 = tf11._rotation10 * src12._positionX + tf11._rotation11 * src12._positionY + tf11._rotation12 * src12._positionZ;
					__tmp__Z2 = tf11._rotation20 * src12._positionX + tf11._rotation21 * src12._positionY + tf11._rotation22 * src12._positionZ;
					dst2._positionX = __tmp__X2;
					dst2._positionY = __tmp__Y2;
					dst2._positionZ = __tmp__Z2;
					dst2._positionX += tf11._positionX;
					dst2._positionY += tf11._positionY;
					dst2._positionZ += tf11._positionZ;
					var dst3 = s1._transform;
					var src13 = s1._localTransform;
					var __tmp__003;
					var __tmp__013;
					var __tmp__023;
					var __tmp__103;
					var __tmp__113;
					var __tmp__123;
					var __tmp__203;
					var __tmp__213;
					var __tmp__223;
					__tmp__003 = tf21._rotation00 * src13._rotation00 + tf21._rotation01 * src13._rotation10 + tf21._rotation02 * src13._rotation20;
					__tmp__013 = tf21._rotation00 * src13._rotation01 + tf21._rotation01 * src13._rotation11 + tf21._rotation02 * src13._rotation21;
					__tmp__023 = tf21._rotation00 * src13._rotation02 + tf21._rotation01 * src13._rotation12 + tf21._rotation02 * src13._rotation22;
					__tmp__103 = tf21._rotation10 * src13._rotation00 + tf21._rotation11 * src13._rotation10 + tf21._rotation12 * src13._rotation20;
					__tmp__113 = tf21._rotation10 * src13._rotation01 + tf21._rotation11 * src13._rotation11 + tf21._rotation12 * src13._rotation21;
					__tmp__123 = tf21._rotation10 * src13._rotation02 + tf21._rotation11 * src13._rotation12 + tf21._rotation12 * src13._rotation22;
					__tmp__203 = tf21._rotation20 * src13._rotation00 + tf21._rotation21 * src13._rotation10 + tf21._rotation22 * src13._rotation20;
					__tmp__213 = tf21._rotation20 * src13._rotation01 + tf21._rotation21 * src13._rotation11 + tf21._rotation22 * src13._rotation21;
					__tmp__223 = tf21._rotation20 * src13._rotation02 + tf21._rotation21 * src13._rotation12 + tf21._rotation22 * src13._rotation22;
					dst3._rotation00 = __tmp__003;
					dst3._rotation01 = __tmp__013;
					dst3._rotation02 = __tmp__023;
					dst3._rotation10 = __tmp__103;
					dst3._rotation11 = __tmp__113;
					dst3._rotation12 = __tmp__123;
					dst3._rotation20 = __tmp__203;
					dst3._rotation21 = __tmp__213;
					dst3._rotation22 = __tmp__223;
					var __tmp__X3;
					var __tmp__Y3;
					var __tmp__Z3;
					__tmp__X3 = tf21._rotation00 * src13._positionX + tf21._rotation01 * src13._positionY + tf21._rotation02 * src13._positionZ;
					__tmp__Y3 = tf21._rotation10 * src13._positionX + tf21._rotation11 * src13._positionY + tf21._rotation12 * src13._positionZ;
					__tmp__Z3 = tf21._rotation20 * src13._positionX + tf21._rotation21 * src13._positionY + tf21._rotation22 * src13._positionZ;
					dst3._positionX = __tmp__X3;
					dst3._positionY = __tmp__Y3;
					dst3._positionZ = __tmp__Z3;
					dst3._positionX += tf21._positionX;
					dst3._positionY += tf21._positionY;
					dst3._positionZ += tf21._positionZ;
					var minX1;
					var minY1;
					var minZ1;
					var maxX1;
					var maxY1;
					var maxZ1;
					s1._geom._computeAabb(s1._aabb,s1._ptransform);
					minX1 = s1._aabb._minX;
					minY1 = s1._aabb._minY;
					minZ1 = s1._aabb._minZ;
					maxX1 = s1._aabb._maxX;
					maxY1 = s1._aabb._maxY;
					maxZ1 = s1._aabb._maxZ;
					s1._geom._computeAabb(s1._aabb,s1._transform);
					s1._aabb._minX = minX1 < s1._aabb._minX ? minX1 : s1._aabb._minX;
					s1._aabb._minY = minY1 < s1._aabb._minY ? minY1 : s1._aabb._minY;
					s1._aabb._minZ = minZ1 < s1._aabb._minZ ? minZ1 : s1._aabb._minZ;
					s1._aabb._maxX = maxX1 > s1._aabb._maxX ? maxX1 : s1._aabb._maxX;
					s1._aabb._maxY = maxY1 > s1._aabb._maxY ? maxY1 : s1._aabb._maxY;
					s1._aabb._maxZ = maxZ1 > s1._aabb._maxZ ? maxZ1 : s1._aabb._maxZ;
					if(s1._proxy != null) {
						var dX1;
						var dY1;
						var dZ1;
						dX1 = s1._transform._positionX - s1._ptransform._positionX;
						dY1 = s1._transform._positionY - s1._ptransform._positionY;
						dZ1 = s1._transform._positionZ - s1._ptransform._positionZ;
						var v1 = s1.displacement;
						v1.x = dX1;
						v1.y = dY1;
						v1.z = dZ1;
						s1._rigidBody._world._broadPhase.moveProxy(s1._proxy,s1._aabb,s1.displacement);
					}
					s1 = n1;
				}
			}
			var _this4 = demo_common_OimoUtil.addCone(world,new oimo_common_Vec3(-4 + Math.random() * 8,2 + Math.random(),-1 + Math.random() * 2),0.6,0.6,false)._shapeList;
			_this4._density = 0.3;
			if(_this4._rigidBody != null) {
				var _this5 = _this4._rigidBody;
				_this5.updateMass();
				var s2 = _this5._shapeList;
				while(s2 != null) {
					var n2 = s2._next;
					var tf12 = _this5._ptransform;
					var tf22 = _this5._transform;
					var dst4 = s2._ptransform;
					var src14 = s2._localTransform;
					var __tmp__004;
					var __tmp__014;
					var __tmp__024;
					var __tmp__104;
					var __tmp__114;
					var __tmp__124;
					var __tmp__204;
					var __tmp__214;
					var __tmp__224;
					__tmp__004 = tf12._rotation00 * src14._rotation00 + tf12._rotation01 * src14._rotation10 + tf12._rotation02 * src14._rotation20;
					__tmp__014 = tf12._rotation00 * src14._rotation01 + tf12._rotation01 * src14._rotation11 + tf12._rotation02 * src14._rotation21;
					__tmp__024 = tf12._rotation00 * src14._rotation02 + tf12._rotation01 * src14._rotation12 + tf12._rotation02 * src14._rotation22;
					__tmp__104 = tf12._rotation10 * src14._rotation00 + tf12._rotation11 * src14._rotation10 + tf12._rotation12 * src14._rotation20;
					__tmp__114 = tf12._rotation10 * src14._rotation01 + tf12._rotation11 * src14._rotation11 + tf12._rotation12 * src14._rotation21;
					__tmp__124 = tf12._rotation10 * src14._rotation02 + tf12._rotation11 * src14._rotation12 + tf12._rotation12 * src14._rotation22;
					__tmp__204 = tf12._rotation20 * src14._rotation00 + tf12._rotation21 * src14._rotation10 + tf12._rotation22 * src14._rotation20;
					__tmp__214 = tf12._rotation20 * src14._rotation01 + tf12._rotation21 * src14._rotation11 + tf12._rotation22 * src14._rotation21;
					__tmp__224 = tf12._rotation20 * src14._rotation02 + tf12._rotation21 * src14._rotation12 + tf12._rotation22 * src14._rotation22;
					dst4._rotation00 = __tmp__004;
					dst4._rotation01 = __tmp__014;
					dst4._rotation02 = __tmp__024;
					dst4._rotation10 = __tmp__104;
					dst4._rotation11 = __tmp__114;
					dst4._rotation12 = __tmp__124;
					dst4._rotation20 = __tmp__204;
					dst4._rotation21 = __tmp__214;
					dst4._rotation22 = __tmp__224;
					var __tmp__X4;
					var __tmp__Y4;
					var __tmp__Z4;
					__tmp__X4 = tf12._rotation00 * src14._positionX + tf12._rotation01 * src14._positionY + tf12._rotation02 * src14._positionZ;
					__tmp__Y4 = tf12._rotation10 * src14._positionX + tf12._rotation11 * src14._positionY + tf12._rotation12 * src14._positionZ;
					__tmp__Z4 = tf12._rotation20 * src14._positionX + tf12._rotation21 * src14._positionY + tf12._rotation22 * src14._positionZ;
					dst4._positionX = __tmp__X4;
					dst4._positionY = __tmp__Y4;
					dst4._positionZ = __tmp__Z4;
					dst4._positionX += tf12._positionX;
					dst4._positionY += tf12._positionY;
					dst4._positionZ += tf12._positionZ;
					var dst5 = s2._transform;
					var src15 = s2._localTransform;
					var __tmp__005;
					var __tmp__015;
					var __tmp__025;
					var __tmp__105;
					var __tmp__115;
					var __tmp__125;
					var __tmp__205;
					var __tmp__215;
					var __tmp__225;
					__tmp__005 = tf22._rotation00 * src15._rotation00 + tf22._rotation01 * src15._rotation10 + tf22._rotation02 * src15._rotation20;
					__tmp__015 = tf22._rotation00 * src15._rotation01 + tf22._rotation01 * src15._rotation11 + tf22._rotation02 * src15._rotation21;
					__tmp__025 = tf22._rotation00 * src15._rotation02 + tf22._rotation01 * src15._rotation12 + tf22._rotation02 * src15._rotation22;
					__tmp__105 = tf22._rotation10 * src15._rotation00 + tf22._rotation11 * src15._rotation10 + tf22._rotation12 * src15._rotation20;
					__tmp__115 = tf22._rotation10 * src15._rotation01 + tf22._rotation11 * src15._rotation11 + tf22._rotation12 * src15._rotation21;
					__tmp__125 = tf22._rotation10 * src15._rotation02 + tf22._rotation11 * src15._rotation12 + tf22._rotation12 * src15._rotation22;
					__tmp__205 = tf22._rotation20 * src15._rotation00 + tf22._rotation21 * src15._rotation10 + tf22._rotation22 * src15._rotation20;
					__tmp__215 = tf22._rotation20 * src15._rotation01 + tf22._rotation21 * src15._rotation11 + tf22._rotation22 * src15._rotation21;
					__tmp__225 = tf22._rotation20 * src15._rotation02 + tf22._rotation21 * src15._rotation12 + tf22._rotation22 * src15._rotation22;
					dst5._rotation00 = __tmp__005;
					dst5._rotation01 = __tmp__015;
					dst5._rotation02 = __tmp__025;
					dst5._rotation10 = __tmp__105;
					dst5._rotation11 = __tmp__115;
					dst5._rotation12 = __tmp__125;
					dst5._rotation20 = __tmp__205;
					dst5._rotation21 = __tmp__215;
					dst5._rotation22 = __tmp__225;
					var __tmp__X5;
					var __tmp__Y5;
					var __tmp__Z5;
					__tmp__X5 = tf22._rotation00 * src15._positionX + tf22._rotation01 * src15._positionY + tf22._rotation02 * src15._positionZ;
					__tmp__Y5 = tf22._rotation10 * src15._positionX + tf22._rotation11 * src15._positionY + tf22._rotation12 * src15._positionZ;
					__tmp__Z5 = tf22._rotation20 * src15._positionX + tf22._rotation21 * src15._positionY + tf22._rotation22 * src15._positionZ;
					dst5._positionX = __tmp__X5;
					dst5._positionY = __tmp__Y5;
					dst5._positionZ = __tmp__Z5;
					dst5._positionX += tf22._positionX;
					dst5._positionY += tf22._positionY;
					dst5._positionZ += tf22._positionZ;
					var minX2;
					var minY2;
					var minZ2;
					var maxX2;
					var maxY2;
					var maxZ2;
					s2._geom._computeAabb(s2._aabb,s2._ptransform);
					minX2 = s2._aabb._minX;
					minY2 = s2._aabb._minY;
					minZ2 = s2._aabb._minZ;
					maxX2 = s2._aabb._maxX;
					maxY2 = s2._aabb._maxY;
					maxZ2 = s2._aabb._maxZ;
					s2._geom._computeAabb(s2._aabb,s2._transform);
					s2._aabb._minX = minX2 < s2._aabb._minX ? minX2 : s2._aabb._minX;
					s2._aabb._minY = minY2 < s2._aabb._minY ? minY2 : s2._aabb._minY;
					s2._aabb._minZ = minZ2 < s2._aabb._minZ ? minZ2 : s2._aabb._minZ;
					s2._aabb._maxX = maxX2 > s2._aabb._maxX ? maxX2 : s2._aabb._maxX;
					s2._aabb._maxY = maxY2 > s2._aabb._maxY ? maxY2 : s2._aabb._maxY;
					s2._aabb._maxZ = maxZ2 > s2._aabb._maxZ ? maxZ2 : s2._aabb._maxZ;
					if(s2._proxy != null) {
						var dX2;
						var dY2;
						var dZ2;
						dX2 = s2._transform._positionX - s2._ptransform._positionX;
						dY2 = s2._transform._positionY - s2._ptransform._positionY;
						dZ2 = s2._transform._positionZ - s2._ptransform._positionZ;
						var v2 = s2.displacement;
						v2.x = dX2;
						v2.y = dY2;
						v2.z = dZ2;
						s2._rigidBody._world._broadPhase.moveProxy(s2._proxy,s2._aabb,s2.displacement);
					}
					s2 = n2;
				}
			}
		}
		oimo_common_Vec3.numCreations++;
		var bodies = [];
		var _g = 0;
		while(_g < 20) {
			var i = _g++;
			bodies.push(demo_common_OimoUtil.addBox(world,new oimo_common_Vec3((i - 9.5) * 0.75,0,0),new oimo_common_Vec3(0.35,0.15,1.5),i == 0 || i == 19));
		}
		var _g = 0;
		while(_g < 19) {
			var i = _g++;
			var bodies1 = bodies[i];
			var bodies2 = bodies[i + 1];
			var _this = bodies[i];
			var _this_x = 0;
			var _this_y = 0;
			var _this_z = 0;
			oimo_common_Vec3.numCreations++;
			_this_x = _this._transform._positionX;
			_this_y = _this._transform._positionY;
			_this_z = _this._transform._positionZ;
			var _this1 = bodies[i + 1];
			var v_x = 0;
			var v_y = 0;
			var v_z = 0;
			oimo_common_Vec3.numCreations++;
			v_x = _this1._transform._positionX;
			v_y = _this1._transform._positionY;
			v_z = _this1._transform._positionZ;
			var x = _this_x + v_x;
			var y = _this_y + v_y;
			var z = _this_z + v_z;
			if(z == null) {
				z = 0;
			}
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			oimo_common_Vec3.numCreations++;
			demo_common_OimoUtil.addRevoluteJoint(world,bodies1,bodies2,new oimo_common_Vec3(x * 0.5,y * 0.5,z * 0.5),new oimo_common_Vec3(0,0,1));
		}
		var _g = 0;
		while(_g < 20) {
			var i = _g++;
			var _this = bodies[i];
			var v_x = 0;
			var v_y = 0;
			var v_z = 0;
			oimo_common_Vec3.numCreations++;
			v_x = _this._transform._positionX;
			v_y = _this._transform._positionY;
			v_z = _this._transform._positionZ;
			v_x *= 0.95;
			var _this1 = bodies[i];
			_this1._transform._positionX = v_x;
			_this1._transform._positionY = v_y;
			_this1._transform._positionZ = v_z;
			var dst = _this1._ptransform;
			var src = _this1._transform;
			dst._positionX = src._positionX;
			dst._positionY = src._positionY;
			dst._positionZ = src._positionZ;
			dst._rotation00 = src._rotation00;
			dst._rotation01 = src._rotation01;
			dst._rotation02 = src._rotation02;
			dst._rotation10 = src._rotation10;
			dst._rotation11 = src._rotation11;
			dst._rotation12 = src._rotation12;
			dst._rotation20 = src._rotation20;
			dst._rotation21 = src._rotation21;
			dst._rotation22 = src._rotation22;
			var s = _this1._shapeList;
			while(s != null) {
				var n = s._next;
				var tf1 = _this1._ptransform;
				var tf2 = _this1._transform;
				var dst1 = s._ptransform;
				var src1 = s._localTransform;
				var __tmp__00;
				var __tmp__01;
				var __tmp__02;
				var __tmp__10;
				var __tmp__11;
				var __tmp__12;
				var __tmp__20;
				var __tmp__21;
				var __tmp__22;
				__tmp__00 = tf1._rotation00 * src1._rotation00 + tf1._rotation01 * src1._rotation10 + tf1._rotation02 * src1._rotation20;
				__tmp__01 = tf1._rotation00 * src1._rotation01 + tf1._rotation01 * src1._rotation11 + tf1._rotation02 * src1._rotation21;
				__tmp__02 = tf1._rotation00 * src1._rotation02 + tf1._rotation01 * src1._rotation12 + tf1._rotation02 * src1._rotation22;
				__tmp__10 = tf1._rotation10 * src1._rotation00 + tf1._rotation11 * src1._rotation10 + tf1._rotation12 * src1._rotation20;
				__tmp__11 = tf1._rotation10 * src1._rotation01 + tf1._rotation11 * src1._rotation11 + tf1._rotation12 * src1._rotation21;
				__tmp__12 = tf1._rotation10 * src1._rotation02 + tf1._rotation11 * src1._rotation12 + tf1._rotation12 * src1._rotation22;
				__tmp__20 = tf1._rotation20 * src1._rotation00 + tf1._rotation21 * src1._rotation10 + tf1._rotation22 * src1._rotation20;
				__tmp__21 = tf1._rotation20 * src1._rotation01 + tf1._rotation21 * src1._rotation11 + tf1._rotation22 * src1._rotation21;
				__tmp__22 = tf1._rotation20 * src1._rotation02 + tf1._rotation21 * src1._rotation12 + tf1._rotation22 * src1._rotation22;
				dst1._rotation00 = __tmp__00;
				dst1._rotation01 = __tmp__01;
				dst1._rotation02 = __tmp__02;
				dst1._rotation10 = __tmp__10;
				dst1._rotation11 = __tmp__11;
				dst1._rotation12 = __tmp__12;
				dst1._rotation20 = __tmp__20;
				dst1._rotation21 = __tmp__21;
				dst1._rotation22 = __tmp__22;
				var __tmp__X;
				var __tmp__Y;
				var __tmp__Z;
				__tmp__X = tf1._rotation00 * src1._positionX + tf1._rotation01 * src1._positionY + tf1._rotation02 * src1._positionZ;
				__tmp__Y = tf1._rotation10 * src1._positionX + tf1._rotation11 * src1._positionY + tf1._rotation12 * src1._positionZ;
				__tmp__Z = tf1._rotation20 * src1._positionX + tf1._rotation21 * src1._positionY + tf1._rotation22 * src1._positionZ;
				dst1._positionX = __tmp__X;
				dst1._positionY = __tmp__Y;
				dst1._positionZ = __tmp__Z;
				dst1._positionX += tf1._positionX;
				dst1._positionY += tf1._positionY;
				dst1._positionZ += tf1._positionZ;
				var dst2 = s._transform;
				var src11 = s._localTransform;
				var __tmp__001;
				var __tmp__011;
				var __tmp__021;
				var __tmp__101;
				var __tmp__111;
				var __tmp__121;
				var __tmp__201;
				var __tmp__211;
				var __tmp__221;
				__tmp__001 = tf2._rotation00 * src11._rotation00 + tf2._rotation01 * src11._rotation10 + tf2._rotation02 * src11._rotation20;
				__tmp__011 = tf2._rotation00 * src11._rotation01 + tf2._rotation01 * src11._rotation11 + tf2._rotation02 * src11._rotation21;
				__tmp__021 = tf2._rotation00 * src11._rotation02 + tf2._rotation01 * src11._rotation12 + tf2._rotation02 * src11._rotation22;
				__tmp__101 = tf2._rotation10 * src11._rotation00 + tf2._rotation11 * src11._rotation10 + tf2._rotation12 * src11._rotation20;
				__tmp__111 = tf2._rotation10 * src11._rotation01 + tf2._rotation11 * src11._rotation11 + tf2._rotation12 * src11._rotation21;
				__tmp__121 = tf2._rotation10 * src11._rotation02 + tf2._rotation11 * src11._rotation12 + tf2._rotation12 * src11._rotation22;
				__tmp__201 = tf2._rotation20 * src11._rotation00 + tf2._rotation21 * src11._rotation10 + tf2._rotation22 * src11._rotation20;
				__tmp__211 = tf2._rotation20 * src11._rotation01 + tf2._rotation21 * src11._rotation11 + tf2._rotation22 * src11._rotation21;
				__tmp__221 = tf2._rotation20 * src11._rotation02 + tf2._rotation21 * src11._rotation12 + tf2._rotation22 * src11._rotation22;
				dst2._rotation00 = __tmp__001;
				dst2._rotation01 = __tmp__011;
				dst2._rotation02 = __tmp__021;
				dst2._rotation10 = __tmp__101;
				dst2._rotation11 = __tmp__111;
				dst2._rotation12 = __tmp__121;
				dst2._rotation20 = __tmp__201;
				dst2._rotation21 = __tmp__211;
				dst2._rotation22 = __tmp__221;
				var __tmp__X1;
				var __tmp__Y1;
				var __tmp__Z1;
				__tmp__X1 = tf2._rotation00 * src11._positionX + tf2._rotation01 * src11._positionY + tf2._rotation02 * src11._positionZ;
				__tmp__Y1 = tf2._rotation10 * src11._positionX + tf2._rotation11 * src11._positionY + tf2._rotation12 * src11._positionZ;
				__tmp__Z1 = tf2._rotation20 * src11._positionX + tf2._rotation21 * src11._positionY + tf2._rotation22 * src11._positionZ;
				dst2._positionX = __tmp__X1;
				dst2._positionY = __tmp__Y1;
				dst2._positionZ = __tmp__Z1;
				dst2._positionX += tf2._positionX;
				dst2._positionY += tf2._positionY;
				dst2._positionZ += tf2._positionZ;
				var minX;
				var minY;
				var minZ;
				var maxX;
				var maxY;
				var maxZ;
				s._geom._computeAabb(s._aabb,s._ptransform);
				minX = s._aabb._minX;
				minY = s._aabb._minY;
				minZ = s._aabb._minZ;
				maxX = s._aabb._maxX;
				maxY = s._aabb._maxY;
				maxZ = s._aabb._maxZ;
				s._geom._computeAabb(s._aabb,s._transform);
				s._aabb._minX = minX < s._aabb._minX ? minX : s._aabb._minX;
				s._aabb._minY = minY < s._aabb._minY ? minY : s._aabb._minY;
				s._aabb._minZ = minZ < s._aabb._minZ ? minZ : s._aabb._minZ;
				s._aabb._maxX = maxX > s._aabb._maxX ? maxX : s._aabb._maxX;
				s._aabb._maxY = maxY > s._aabb._maxY ? maxY : s._aabb._maxY;
				s._aabb._maxZ = maxZ > s._aabb._maxZ ? maxZ : s._aabb._maxZ;
				if(s._proxy != null) {
					var dX;
					var dY;
					var dZ;
					dX = s._transform._positionX - s._ptransform._positionX;
					dY = s._transform._positionY - s._ptransform._positionY;
					dZ = s._transform._positionZ - s._ptransform._positionZ;
					var v = s.displacement;
					v.x = dX;
					v.y = dY;
					v.z = dZ;
					s._rigidBody._world._broadPhase.moveProxy(s._proxy,s._aabb,s.displacement);
				}
				s = n;
			}
			_this1._sleeping = false;
			_this1._sleepTime = 0;
		}
	}
	,update: function() {
		demo_common_DemoBase.prototype.update.call(this);
		this.teleportRigidBodies(-20,10,5,0);
	}
	,__class__: demo_core_BridgeDemo
});
var demo_core_BroadPhaseStressDemo = function() {
	this.speed = 4;
	demo_common_DemoBase.call(this,"Broad-Phase Stress Test");
};
demo_core_BroadPhaseStressDemo.__name__ = true;
demo_core_BroadPhaseStressDemo.__super__ = demo_common_DemoBase;
demo_core_BroadPhaseStressDemo.prototype = $extend(demo_common_DemoBase.prototype,{
	initControls: function(controls) {
		var _gthis = this;
		controls.push(new demo_common_Control("↑",function() {
			return "increase shapes";
		},demo_common_UserInput.KEYCODE_UP,function() {
			_gthis.increaseRigidBodies();
		}));
		controls.push(new demo_common_Control("↓",function() {
			return "decrease shapes";
		},demo_common_UserInput.KEYCODE_DOWN,function() {
			_gthis.decreaseRigidBodies();
		}));
		controls.push(new demo_common_Control("→",function() {
			return "increase speed";
		},demo_common_UserInput.KEYCODE_RIGHT,function() {
			_gthis.speed += 2;
			if(_gthis.speed > 20) {
				_gthis.speed = 20;
			}
		}));
		controls.push(new demo_common_Control("←",function() {
			return "decrease speed";
		},demo_common_UserInput.KEYCODE_LEFT,function() {
			_gthis.speed -= 2;
			if(_gthis.speed < 0) {
				_gthis.speed = 0;
			}
		}));
	}
	,max: function(a,b) {
		if(a > b) {
			return a;
		} else {
			return b;
		}
	}
	,init: function(world,renderer,input,viewInfo) {
		demo_common_DemoBase.prototype.init.call(this,world,renderer,input,viewInfo);
		var z = this.max(50,this.max(50,50)) * 3;
		if(z == null) {
			z = 0;
		}
		var eye_x = 0;
		var eye_y = 0;
		var eye_z = z;
		oimo_common_Vec3.numCreations++;
		oimo_common_Vec3.numCreations++;
		var up_x = 0;
		var up_y = 1;
		var up_z = 0;
		oimo_common_Vec3.numCreations++;
		var _this = renderer.viewMat;
		var zx = eye_x - 0;
		var zy = eye_y - 0;
		var zz = eye_z - 0;
		var tmp = 1 / Math.sqrt(zx * zx + zy * zy + zz * zz);
		zx *= tmp;
		zy *= tmp;
		zz *= tmp;
		var xx = up_y * zz - up_z * zy;
		var xy = up_z * zx - up_x * zz;
		var xz = up_x * zy - up_y * zx;
		tmp = 1 / Math.sqrt(xx * xx + xy * xy + xz * xz);
		xx *= tmp;
		xy *= tmp;
		xz *= tmp;
		var yx = zy * xz - zz * xy;
		var yy = zz * xx - zx * xz;
		var yz = zx * xy - zy * xx;
		_this.e00 = xx;
		_this.e01 = xy;
		_this.e02 = xz;
		_this.e03 = -(xx * eye_x + xy * eye_y + xz * eye_z);
		_this.e10 = yx;
		_this.e11 = yy;
		_this.e12 = yz;
		_this.e13 = -(yx * eye_x + yy * eye_y + yz * eye_z);
		_this.e20 = zx;
		_this.e21 = zy;
		_this.e22 = zz;
		_this.e23 = -(zx * eye_x + zy * eye_y + zz * eye_z);
		_this.e30 = 0;
		_this.e31 = 0;
		_this.e32 = 0;
		_this.e33 = 1;
		oimo_common_Vec3.numCreations++;
		var _this = world._gravity;
		_this.x = 0;
		_this.y = 0;
		_this.z = 0;
		this.increaseRigidBodies();
		this.increaseRigidBodies();
		this.increaseRigidBodies();
		this.increaseRigidBodies();
		this.increaseRigidBodies();
	}
	,update: function() {
		demo_common_DemoBase.prototype.update.call(this);
		var bp = this.world._broadPhase;
		this.pairTestCount = bp._testCount;
		if(((bp) instanceof oimo_collision_broadphase_bvh_BvhBroadPhase)) {
			this.treeBalance = (js_Boot.__cast(bp , oimo_collision_broadphase_bvh_BvhBroadPhase))._tree._getBalance();
		} else {
			this.treeBalance = 0;
		}
		this.reflectRigidBodies();
	}
	,additionalInfo: function() {
		return "  broad-phase test count: " + this.pairTestCount + "\n" + ("  tree balance          : " + this.treeBalance + "\n");
	}
	,increaseRigidBodies: function() {
		var _this = new oimo_common_Vec3(0.4,0.5,0.6);
		_this.x *= 0.7;
		_this.y *= 0.7;
		_this.z *= 0.7;
		var shapes = [new oimo_collision_geometry_BoxGeometry(_this),new oimo_collision_geometry_SphereGeometry(0.35)];
		var compc = new oimo_dynamics_rigidbody_ShapeConfig();
		var rigidc = new oimo_dynamics_rigidbody_RigidBodyConfig();
		var _g = 0;
		while(_g < 100) {
			++_g;
			compc.geometry = shapes[Math.random() * 2 | 0];
			compc.position.init(-1 + Math.random() * 2,-1 + Math.random() * 2,-1 + Math.random() * 2);
			var _this = compc.position;
			_this.x *= 0;
			_this.y *= 0;
			_this.z *= 0;
			rigidc.position.init(-1 + Math.random() * 2,-1 + Math.random() * 2,-1 + Math.random() * 2);
			rigidc.position.x *= 50;
			rigidc.position.y *= 50;
			rigidc.position.z *= 50;
			var body = new oimo_dynamics_rigidbody_RigidBody(rigidc);
			body.addShape(new oimo_dynamics_rigidbody_Shape(compc));
			this.moveRigidBody(body);
			this.world.addRigidBody(body);
		}
	}
	,moveRigidBody: function(b) {
		var speed = this.speed;
		var _this = new oimo_common_Vec3().init(-1 + Math.random() * 2,-1 + Math.random() * 2,-1 + Math.random() * 2);
		var invLen = Math.sqrt(_this.x * _this.x + _this.y * _this.y + _this.z * _this.z);
		if(invLen > 0) {
			invLen = 1 / invLen;
		}
		_this.x *= invLen;
		_this.y *= invLen;
		_this.z *= invLen;
		_this.x *= speed;
		_this.y *= speed;
		_this.z *= speed;
		var _this1 = new oimo_common_Vec3().init(-1 + Math.random() * 2,-1 + Math.random() * 2,-1 + Math.random() * 2);
		_this1.x *= 5;
		_this1.y *= 5;
		_this1.z *= 5;
		if(b._type == 1) {
			b._velX = 0;
			b._velY = 0;
			b._velZ = 0;
		} else {
			b._velX = _this.x;
			b._velY = _this.y;
			b._velZ = _this.z;
		}
		b._sleeping = false;
		b._sleepTime = 0;
		if(b._type == 1) {
			b._angVelX = 0;
			b._angVelY = 0;
			b._angVelZ = 0;
		} else {
			b._angVelX = _this1.x;
			b._angVelY = _this1.y;
			b._angVelZ = _this1.z;
		}
		b._sleeping = false;
		b._sleepTime = 0;
	}
	,decreaseRigidBodies: function() {
		if(100 > this.world._numRigidBodies) {
			return;
		}
		var rb = this.world._rigidBodyList;
		while(rb._next != null) rb = rb._next;
		var _g = 0;
		while(_g < 100) {
			++_g;
			var prev = rb._prev;
			this.world.removeRigidBody(rb);
			rb = prev;
		}
	}
	,reflectRigidBodies: function() {
		var rb = this.world._rigidBodyList;
		var v_x = 0;
		var v_y = 0;
		var v_z = 0;
		oimo_common_Vec3.numCreations++;
		while(rb != null) {
			v_x = rb._transform._positionX;
			v_y = rb._transform._positionY;
			v_z = rb._transform._positionZ;
			var v_x1 = 0;
			var v_y1 = 0;
			var v_z1 = 0;
			oimo_common_Vec3.numCreations++;
			v_x1 = rb._velX;
			v_y1 = rb._velY;
			v_z1 = rb._velZ;
			if(v_x < -50 || v_x > 50) {
				v_x1 *= -1;
			}
			if(v_y < -50 || v_y > 50) {
				v_y1 *= -1;
			}
			if(v_z < -50 || v_z > 50) {
				v_z1 *= -1;
			}
			if(rb._type == 1) {
				rb._velX = 0;
				rb._velY = 0;
				rb._velZ = 0;
			} else {
				rb._velX = v_x1;
				rb._velY = v_y1;
				rb._velZ = v_z1;
			}
			rb._sleeping = false;
			rb._sleepTime = 0;
			rb = rb._next;
		}
	}
	,__class__: demo_core_BroadPhaseStressDemo
});
var demo_core_CollisionFilteringDemo = function() {
	demo_common_DemoBase.call(this,"Collision Filtering");
};
demo_core_CollisionFilteringDemo.__name__ = true;
demo_core_CollisionFilteringDemo.__super__ = demo_common_DemoBase;
demo_core_CollisionFilteringDemo.prototype = $extend(demo_common_DemoBase.prototype,{
	init: function(world,renderer,input,viewInfo) {
		demo_common_DemoBase.prototype.init.call(this,world,renderer,input,viewInfo);
		var eye_x = 0;
		var eye_y = 7;
		var eye_z = 9;
		oimo_common_Vec3.numCreations++;
		oimo_common_Vec3.numCreations++;
		var up_x = 0;
		var up_y = 1;
		var up_z = 0;
		oimo_common_Vec3.numCreations++;
		var _this = renderer.viewMat;
		var zx = eye_x - 0;
		var zy = eye_y - 2;
		var zz = eye_z - 0;
		var tmp = 1 / Math.sqrt(zx * zx + zy * zy + zz * zz);
		zx *= tmp;
		zy *= tmp;
		zz *= tmp;
		var xx = up_y * zz - up_z * zy;
		var xy = up_z * zx - up_x * zz;
		var xz = up_x * zy - up_y * zx;
		tmp = 1 / Math.sqrt(xx * xx + xy * xy + xz * xz);
		xx *= tmp;
		xy *= tmp;
		xz *= tmp;
		var yx = zy * xz - zz * xy;
		var yy = zz * xx - zx * xz;
		var yz = zx * xy - zy * xx;
		_this.e00 = xx;
		_this.e01 = xy;
		_this.e02 = xz;
		_this.e03 = -(xx * eye_x + xy * eye_y + xz * eye_z);
		_this.e10 = yx;
		_this.e11 = yy;
		_this.e12 = yz;
		_this.e13 = -(yx * eye_x + yy * eye_y + yz * eye_z);
		_this.e20 = zx;
		_this.e21 = zy;
		_this.e22 = zz;
		_this.e23 = -(zx * eye_x + zy * eye_y + zz * eye_z);
		_this.e30 = 0;
		_this.e31 = 0;
		_this.e32 = 0;
		_this.e33 = 1;
		var floorShape = demo_common_OimoUtil.addBox(world,new oimo_common_Vec3(0,-0.5,0),new oimo_common_Vec3(7,0.5,7),true)._shapeList;
		floorShape._collisionGroup = 1;
		floorShape._collisionMask = 8;
		var wallShape = demo_common_OimoUtil.addBox(world,new oimo_common_Vec3(0,2,0),new oimo_common_Vec3(3,0.2,3),true)._shapeList;
		wallShape._collisionGroup = 2;
		wallShape._collisionMask = 4;
		var _g = 0;
		while(_g < 2) {
			var i = _g++;
			var _g1 = -2;
			while(_g1 < 3) {
				var j = _g1++;
				var _g2 = -2;
				while(_g2 < 3) {
					var pos = new oimo_common_Vec3(j * 0.3 * 3,3 + i * 0.3 * 3,_g2++ * 0.3 * 3);
					var x = -0.01 + Math.random() * 0.02;
					var y = -0.01 + Math.random() * 0.02;
					var z = -0.01 + Math.random() * 0.02;
					if(z == null) {
						z = 0;
					}
					if(y == null) {
						y = 0;
					}
					if(x == null) {
						x = 0;
					}
					oimo_common_Vec3.numCreations++;
					pos.x += x;
					pos.y += y;
					pos.z += z;
					var shape;
					if(i == 0) {
						shape = demo_common_OimoUtil.addSphere(world,pos,0.3,false)._shapeList;
						shape._collisionGroup = 4;
						shape._collisionMask = 14;
					} else {
						shape = demo_common_OimoUtil.addBox(world,pos,new oimo_common_Vec3(0.3,0.3,0.3),false)._shapeList;
						shape._collisionGroup = 8;
						shape._collisionMask = 13;
					}
				}
			}
		}
	}
	,update: function() {
		demo_common_DemoBase.prototype.update.call(this);
		this.teleportRigidBodies(-20,10,5,5);
	}
	,__class__: demo_core_CollisionFilteringDemo
});
var demo_core_CompoundShapesDemo = function() {
	demo_common_DemoBase.call(this,"Compound Shapes");
};
demo_core_CompoundShapesDemo.__name__ = true;
demo_core_CompoundShapesDemo.__super__ = demo_common_DemoBase;
demo_core_CompoundShapesDemo.prototype = $extend(demo_common_DemoBase.prototype,{
	init: function(world,renderer,input,viewInfo) {
		demo_common_DemoBase.prototype.init.call(this,world,renderer,input,viewInfo);
		var eye_x = 0;
		var eye_y = 7;
		var eye_z = 9;
		oimo_common_Vec3.numCreations++;
		oimo_common_Vec3.numCreations++;
		var up_x = 0;
		var up_y = 1;
		var up_z = 0;
		oimo_common_Vec3.numCreations++;
		var _this = renderer.viewMat;
		var zx = eye_x - 0;
		var zy = eye_y - 2;
		var zz = eye_z - 0;
		var tmp = 1 / Math.sqrt(zx * zx + zy * zy + zz * zz);
		zx *= tmp;
		zy *= tmp;
		zz *= tmp;
		var xx = up_y * zz - up_z * zy;
		var xy = up_z * zx - up_x * zz;
		var xz = up_x * zy - up_y * zx;
		tmp = 1 / Math.sqrt(xx * xx + xy * xy + xz * xz);
		xx *= tmp;
		xy *= tmp;
		xz *= tmp;
		var yx = zy * xz - zz * xy;
		var yy = zz * xx - zx * xz;
		var yz = zx * xy - zy * xx;
		_this.e00 = xx;
		_this.e01 = xy;
		_this.e02 = xz;
		_this.e03 = -(xx * eye_x + xy * eye_y + xz * eye_z);
		_this.e10 = yx;
		_this.e11 = yy;
		_this.e12 = yz;
		_this.e13 = -(yx * eye_x + yy * eye_y + yz * eye_z);
		_this.e20 = zx;
		_this.e21 = zy;
		_this.e22 = zz;
		_this.e23 = -(zx * eye_x + zy * eye_y + zz * eye_z);
		_this.e30 = 0;
		_this.e31 = 0;
		_this.e32 = 0;
		_this.e33 = 1;
		demo_common_OimoUtil.addBox(world,new oimo_common_Vec3(0,-0.5,0),new oimo_common_Vec3(7,0.5,7),true);
		var rc = new oimo_dynamics_rigidbody_RigidBodyConfig();
		var geom1 = new oimo_collision_geometry_BoxGeometry(new oimo_common_Vec3(0.3,0.1,0.3));
		var geom2 = new oimo_collision_geometry_BoxGeometry(new oimo_common_Vec3(0.1,0.3,0.1));
		var sc1 = new oimo_dynamics_rigidbody_ShapeConfig();
		var sc2 = new oimo_dynamics_rigidbody_ShapeConfig();
		sc1.geometry = geom1;
		sc2.geometry = geom2;
		sc1.position.init(0,0.2,0);
		sc2.position.init(0,-0.2,0);
		var _g = 0;
		while(_g < 32) {
			var _this = rc.position.init(-2,1 + _g++,0);
			var x = -0.01 + Math.random() * 0.02;
			var y = -0.01 + Math.random() * 0.02;
			var z = -0.01 + Math.random() * 0.02;
			if(z == null) {
				z = 0;
			}
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			oimo_common_Vec3.numCreations++;
			_this.x += x;
			_this.y += y;
			_this.z += z;
			var rb = new oimo_dynamics_rigidbody_RigidBody(rc);
			rb.addShape(new oimo_dynamics_rigidbody_Shape(sc1));
			rb.addShape(new oimo_dynamics_rigidbody_Shape(sc2));
			world.addRigidBody(rb);
		}
		var geom1 = new oimo_collision_geometry_ConeGeometry(0.275,0.325);
		var geom2 = new oimo_collision_geometry_BoxGeometry(new oimo_common_Vec3(0.3,0.075,0.3));
		var sc1 = new oimo_dynamics_rigidbody_ShapeConfig();
		var sc2 = new oimo_dynamics_rigidbody_ShapeConfig();
		sc1.geometry = geom1;
		sc2.geometry = geom2;
		sc1.position.init(0,0.2,0);
		sc2.position.init(0,-0.2,0);
		var _g = 0;
		while(_g < 32) {
			var _this = rc.position.init(0,1 + _g++,0);
			var x = -0.01 + Math.random() * 0.02;
			var y = -0.01 + Math.random() * 0.02;
			var z = -0.01 + Math.random() * 0.02;
			if(z == null) {
				z = 0;
			}
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			oimo_common_Vec3.numCreations++;
			_this.x += x;
			_this.y += y;
			_this.z += z;
			var rb = new oimo_dynamics_rigidbody_RigidBody(rc);
			rb.addShape(new oimo_dynamics_rigidbody_Shape(sc1));
			rb.addShape(new oimo_dynamics_rigidbody_Shape(sc2));
			world.addRigidBody(rb);
		}
		var geom1 = new oimo_collision_geometry_CylinderGeometry(0.25,0.4);
		var geom2 = new oimo_collision_geometry_BoxGeometry(new oimo_common_Vec3(0.075,0.4,0.075));
		var sc1 = new oimo_dynamics_rigidbody_ShapeConfig();
		var sc2 = new oimo_dynamics_rigidbody_ShapeConfig();
		sc1.geometry = geom1;
		sc2.geometry = geom2;
		sc1.position.init(0,0,0);
		sc2.position.init(0,-0.1,0);
		var _this = sc1.rotation;
		var s = Math.sin(1.570796326794895);
		var c = Math.cos(1.570796326794895);
		var c1 = 1 - c;
		var r00 = 0 * c1 + c;
		var r01 = 0 * c1 - s;
		var r02 = 0 * c1 + 0 * s;
		var r10 = 0 * c1 + s;
		var r11 = 0 * c1 + c;
		var r12 = 0 * c1 - 0 * s;
		var r20 = 0 * c1 - 0 * s;
		var r21 = 0 * c1 + 0 * s;
		var r22 = c1 + c;
		var e01 = _this.e00 * r01 + _this.e01 * r11 + _this.e02 * r21;
		var e02 = _this.e00 * r02 + _this.e01 * r12 + _this.e02 * r22;
		var e11 = _this.e10 * r01 + _this.e11 * r11 + _this.e12 * r21;
		var e12 = _this.e10 * r02 + _this.e11 * r12 + _this.e12 * r22;
		var e21 = _this.e20 * r01 + _this.e21 * r11 + _this.e22 * r21;
		var e22 = _this.e20 * r02 + _this.e21 * r12 + _this.e22 * r22;
		_this.e00 = _this.e00 * r00 + _this.e01 * r10 + _this.e02 * r20;
		_this.e01 = e01;
		_this.e02 = e02;
		_this.e10 = _this.e10 * r00 + _this.e11 * r10 + _this.e12 * r20;
		_this.e11 = e11;
		_this.e12 = e12;
		_this.e20 = _this.e20 * r00 + _this.e21 * r10 + _this.e22 * r20;
		_this.e21 = e21;
		_this.e22 = e22;
		var _g = 0;
		while(_g < 32) {
			var _this = rc.position.init(2,1 + _g++,0);
			var x = -0.01 + Math.random() * 0.02;
			var y = -0.01 + Math.random() * 0.02;
			var z = -0.01 + Math.random() * 0.02;
			if(z == null) {
				z = 0;
			}
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			oimo_common_Vec3.numCreations++;
			_this.x += x;
			_this.y += y;
			_this.z += z;
			var rb = new oimo_dynamics_rigidbody_RigidBody(rc);
			rb.addShape(new oimo_dynamics_rigidbody_Shape(sc1));
			rb.addShape(new oimo_dynamics_rigidbody_Shape(sc2));
			world.addRigidBody(rb);
		}
	}
	,update: function() {
		demo_common_DemoBase.prototype.update.call(this);
		this.teleportRigidBodies(-20,10,5,5);
	}
	,__class__: demo_core_CompoundShapesDemo
});
var demo_core_ConvexCastingDemo = function() {
	demo_common_DemoBase.call(this,"Convex Casting");
};
demo_core_ConvexCastingDemo.__name__ = true;
demo_core_ConvexCastingDemo.__super__ = demo_common_DemoBase;
demo_core_ConvexCastingDemo.prototype = $extend(demo_common_DemoBase.prototype,{
	init: function(world,renderer,input,viewInfo) {
		demo_common_DemoBase.prototype.init.call(this,world,renderer,input,viewInfo);
		var eye_x = 0;
		var eye_y = 7;
		var eye_z = 7;
		oimo_common_Vec3.numCreations++;
		oimo_common_Vec3.numCreations++;
		var up_x = 0;
		var up_y = 1;
		var up_z = 0;
		oimo_common_Vec3.numCreations++;
		var _this = renderer.viewMat;
		var zx = eye_x - 0;
		var zy = eye_y - 0;
		var zz = eye_z - 0;
		var tmp = 1 / Math.sqrt(zx * zx + zy * zy + zz * zz);
		zx *= tmp;
		zy *= tmp;
		zz *= tmp;
		var xx = up_y * zz - up_z * zy;
		var xy = up_z * zx - up_x * zz;
		var xz = up_x * zy - up_y * zx;
		tmp = 1 / Math.sqrt(xx * xx + xy * xy + xz * xz);
		xx *= tmp;
		xy *= tmp;
		xz *= tmp;
		var yx = zy * xz - zz * xy;
		var yy = zz * xx - zx * xz;
		var yz = zx * xy - zy * xx;
		_this.e00 = xx;
		_this.e01 = xy;
		_this.e02 = xz;
		_this.e03 = -(xx * eye_x + xy * eye_y + xz * eye_z);
		_this.e10 = yx;
		_this.e11 = yy;
		_this.e12 = yz;
		_this.e13 = -(yx * eye_x + yy * eye_y + yz * eye_z);
		_this.e20 = zx;
		_this.e21 = zy;
		_this.e22 = zz;
		_this.e23 = -(zx * eye_x + zy * eye_y + zz * eye_z);
		_this.e30 = 0;
		_this.e31 = 0;
		_this.e32 = 0;
		_this.e33 = 1;
		demo_common_OimoUtil.addBox(world,new oimo_common_Vec3(0,-0.5,0),new oimo_common_Vec3(5,0.5,5),true);
		var wid = 0.3;
		var hei = 0.3;
		var _g = 0;
		while(_g < 3) {
			var i = _g++;
			var _g1 = -2;
			while(_g1 < 3) {
				var j = _g1++;
				var _g2 = -2;
				while(_g2 < 3) {
					var k = _g2++;
					oimo_common_Setting.defaultDensity = i == 2 ? 1 : 1;
					wid = 0.2 + Math.random() * 0.2;
					hei = 0.2 + Math.random() * 0.2;
					switch(5 * Math.random() | 0) {
					case 0:
						demo_common_OimoUtil.addCylinder(world,new oimo_common_Vec3(j * 0.8 + (-0.01 + Math.random() * 0.02),0.6 + i * 0.6 * 2 * 1.002,k * 0.8 + (-0.01 + Math.random() * 0.02)),wid,hei,false);
						break;
					case 1:
						demo_common_OimoUtil.addCone(world,new oimo_common_Vec3(j * 0.8 + (-0.01 + Math.random() * 0.02),0.6 + i * 0.6 * 2 * 1.002,k * 0.8 + (-0.01 + Math.random() * 0.02)),wid,hei,false);
						break;
					case 2:
						demo_common_OimoUtil.addCapsule(world,new oimo_common_Vec3(j * 0.8 + (-0.01 + Math.random() * 0.02),0.6 + i * 0.6 * 2 * 1.002,k * 0.8 + (-0.01 + Math.random() * 0.02)),wid,hei,false);
						break;
					case 3:
						demo_common_OimoUtil.addBox(world,new oimo_common_Vec3(j * 0.8 + (-0.01 + Math.random() * 0.02),0.6 + i * 0.6 * 2 * 0.9998,k * 0.8 + (-0.01 + Math.random() * 0.02)),new oimo_common_Vec3(wid,hei,wid),false);
						break;
					case 4:
						demo_common_OimoUtil.addSphere(world,new oimo_common_Vec3(j * 0.8 + (-0.01 + Math.random() * 0.02),0.6 + i * 0.6 * 2 * 0.9998,k * 0.8 + (-0.01 + Math.random() * 0.02)),wid,false);
						break;
					}
				}
			}
		}
		this.lps = [];
		this.lps.push(new demo_core__$ConvexCastingDemo_LaserPointer(new oimo_common_Vec3(-2,4,0),world,new oimo_common_Vec3(0,1,0)));
		this.lps.push(new demo_core__$ConvexCastingDemo_LaserPointer(new oimo_common_Vec3(0,4,0),world,new oimo_common_Vec3(0,1,0)));
		this.lps.push(new demo_core__$ConvexCastingDemo_LaserPointer(new oimo_common_Vec3(2,4,0),world,new oimo_common_Vec3(0,1,0)));
	}
	,update: function() {
		demo_common_DemoBase.prototype.update.call(this);
		this.teleportRigidBodies(-20,10,5,5);
	}
	,drawAdditionalObjects: function(debugDraw) {
		var w = debugDraw.wireframe;
		debugDraw.wireframe = true;
		var _g = 0;
		var _g1 = this.lps;
		while(_g < _g1.length) _g1[_g++].draw(debugDraw);
		debugDraw.wireframe = w;
	}
	,__class__: demo_core_ConvexCastingDemo
});
var demo_core__$ConvexCastingDemo_LaserPointer = function(pos,world,color) {
	this.world = world;
	this.color = color;
	this.cb = new oimo_dynamics_callback_RayCastClosest();
	this.length = 0.4;
	var rc = new oimo_dynamics_rigidbody_RigidBodyConfig();
	rc.autoSleep = false;
	rc.angularDamping = 4.0;
	var _this = rc.position;
	_this.x = pos.x;
	_this.y = pos.y;
	_this.z = pos.z;
	this.rb = new oimo_dynamics_rigidbody_RigidBody(rc);
	var sc = new oimo_dynamics_rigidbody_ShapeConfig();
	sc.geometry = new oimo_collision_geometry_CylinderGeometry(0.4,this.length);
	this.rb.addShape(new oimo_dynamics_rigidbody_Shape(sc));
	world.addRigidBody(this.rb);
	var _this = rc.position;
	var y = this.length;
	if(y == null) {
		y = 0;
	}
	oimo_common_Vec3.numCreations++;
	_this.x += 0;
	_this.y += y;
	_this.z += 0;
	rc.type = oimo_dynamics_rigidbody_RigidBodyType.STATIC;
	var fix = new oimo_dynamics_rigidbody_RigidBody(rc);
	sc.geometry = new oimo_collision_geometry_SphereGeometry(0.1);
	fix.addShape(new oimo_dynamics_rigidbody_Shape(sc));
	world.addRigidBody(fix);
	var jc = new oimo_dynamics_constraint_joint_RagdollJointConfig();
	var tmp = this.rb;
	var _this = this.rb;
	var v = new oimo_common_Vec3();
	v.x = _this._transform._positionX;
	v.y = _this._transform._positionY;
	v.z = _this._transform._positionZ;
	var y = this.length;
	if(y == null) {
		y = 0;
	}
	oimo_common_Vec3.numCreations++;
	v.x += 0;
	v.y += y;
	v.z += 0;
	jc.init(tmp,fix,v,new oimo_common_Vec3(0,1,0),new oimo_common_Vec3(1,0,0));
	jc.twistLimitMotor.setLimits(0,0);
	jc.maxSwingAngle1 = 1.570796326794895;
	jc.maxSwingAngle2 = 1.570796326794895;
	world.addJoint(new oimo_dynamics_constraint_joint_RagdollJoint(jc));
};
demo_core__$ConvexCastingDemo_LaserPointer.__name__ = true;
demo_core__$ConvexCastingDemo_LaserPointer.prototype = {
	draw: function(debugDraw) {
		var _this = this.rb._transform;
		var tf = new oimo_common_Transform();
		tf._positionX = _this._positionX;
		tf._positionY = _this._positionY;
		tf._positionZ = _this._positionZ;
		tf._rotation00 = _this._rotation00;
		tf._rotation01 = _this._rotation01;
		tf._rotation02 = _this._rotation02;
		tf._rotation10 = _this._rotation10;
		tf._rotation11 = _this._rotation11;
		tf._rotation12 = _this._rotation12;
		tf._rotation20 = _this._rotation20;
		tf._rotation21 = _this._rotation21;
		tf._rotation22 = _this._rotation22;
		var y = -this.length;
		if(y == null) {
			y = 0;
		}
		var v_x = 0;
		var v_y = y;
		var v_z = 0;
		oimo_common_Vec3.numCreations++;
		var vX;
		var vY;
		var vZ;
		vX = v_x;
		vY = v_y;
		vZ = v_z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = tf._rotation00 * v_x + tf._rotation01 * v_y + tf._rotation02 * v_z;
		__tmp__Y = tf._rotation10 * v_x + tf._rotation11 * v_y + tf._rotation12 * v_z;
		__tmp__Z = tf._rotation20 * v_x + tf._rotation21 * v_y + tf._rotation22 * v_z;
		vX = __tmp__X;
		vY = __tmp__Y;
		vZ = __tmp__Z;
		vX += tf._positionX;
		vY += tf._positionY;
		vZ += tf._positionZ;
		var res = new oimo_common_Vec3();
		res.x = vX;
		res.y = vY;
		res.z = vZ;
		var y = -this.length - 20;
		if(y == null) {
			y = 0;
		}
		var v_x = 0;
		var v_y = y;
		var v_z = 0;
		oimo_common_Vec3.numCreations++;
		var vX = v_x;
		var vY = v_y;
		var vZ = v_z;
		var __tmp__X = tf._rotation00 * v_x + tf._rotation01 * v_y + tf._rotation02 * v_z;
		var __tmp__Y = tf._rotation10 * v_x + tf._rotation11 * v_y + tf._rotation12 * v_z;
		var __tmp__Z = tf._rotation20 * v_x + tf._rotation21 * v_y + tf._rotation22 * v_z;
		vX = __tmp__X;
		vY = __tmp__Y;
		vZ = __tmp__Z;
		vX = __tmp__X + tf._positionX;
		vY = __tmp__Y + tf._positionY;
		vZ = __tmp__Z + tf._positionZ;
		var end_x = 0;
		var end_y = 0;
		var end_z = 0;
		oimo_common_Vec3.numCreations++;
		end_x = vX;
		end_y = vY;
		end_z = vZ;
		var r = new oimo_common_Vec3(end_x - res.x,end_y - res.y,end_z - res.z);
		var convex = this.rb._shapeList._geom;
		var _this = this.cb;
		_this.shape = null;
		_this.fraction = 1;
		_this.position.zero();
		_this.normal.zero();
		_this.hit = false;
		var green = new oimo_common_Vec3(0,1,0);
		this.world.convexCast(convex,tf,r,this.cb);
		if(this.cb.hit) {
			var s = this.cb.fraction;
			var x = res.x + r.x * s;
			var y = res.y + r.y * s;
			var z = res.z + r.z * s;
			if(z == null) {
				z = 0;
			}
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			oimo_common_Vec3.numCreations++;
			var s = this.cb.fraction;
			debugDraw.line(res,new oimo_common_Vec3(res.x + r.x * s,res.y + r.y * s,res.z + r.z * s),green);
			var v_x = 0;
			var v_y = 0;
			var v_z = 0;
			oimo_common_Vec3.numCreations++;
			v_x = tf._positionX;
			v_y = tf._positionY;
			v_z = tf._positionZ;
			var s = this.cb.fraction;
			var x = v_x + r.x * s;
			var y = v_y + r.y * s;
			var z = v_z + r.z * s;
			v_x = x;
			v_y = y;
			v_z = z;
			tf._positionX = x;
			tf._positionY = y;
			tf._positionZ = z;
			debugDraw.cylinder(tf,convex._radius,convex._halfHeight,green);
			debugDraw.point(this.cb.position,green);
		}
	}
	,__class__: demo_core__$ConvexCastingDemo_LaserPointer
};
var demo_core_ConvexHullDemo = function() {
	demo_common_DemoBase.call(this,"Convex Hull");
};
demo_core_ConvexHullDemo.__name__ = true;
demo_core_ConvexHullDemo.__super__ = demo_common_DemoBase;
demo_core_ConvexHullDemo.prototype = $extend(demo_common_DemoBase.prototype,{
	init: function(world,renderer,input,viewInfo) {
		demo_common_DemoBase.prototype.init.call(this,world,renderer,input,viewInfo);
		var eye_x = 0;
		var eye_y = 7;
		var eye_z = 9;
		oimo_common_Vec3.numCreations++;
		oimo_common_Vec3.numCreations++;
		var up_x = 0;
		var up_y = 1;
		var up_z = 0;
		oimo_common_Vec3.numCreations++;
		var _this = renderer.viewMat;
		var zx = eye_x - 0;
		var zy = eye_y - 2;
		var zz = eye_z - 0;
		var tmp = 1 / Math.sqrt(zx * zx + zy * zy + zz * zz);
		zx *= tmp;
		zy *= tmp;
		zz *= tmp;
		var xx = up_y * zz - up_z * zy;
		var xy = up_z * zx - up_x * zz;
		var xz = up_x * zy - up_y * zx;
		tmp = 1 / Math.sqrt(xx * xx + xy * xy + xz * xz);
		xx *= tmp;
		xy *= tmp;
		xz *= tmp;
		var yx = zy * xz - zz * xy;
		var yy = zz * xx - zx * xz;
		var yz = zx * xy - zy * xx;
		_this.e00 = xx;
		_this.e01 = xy;
		_this.e02 = xz;
		_this.e03 = -(xx * eye_x + xy * eye_y + xz * eye_z);
		_this.e10 = yx;
		_this.e11 = yy;
		_this.e12 = yz;
		_this.e13 = -(yx * eye_x + yy * eye_y + yz * eye_z);
		_this.e20 = zx;
		_this.e21 = zy;
		_this.e22 = zz;
		_this.e23 = -(zx * eye_x + zy * eye_y + zz * eye_z);
		_this.e30 = 0;
		_this.e31 = 0;
		_this.e32 = 0;
		_this.e33 = 1;
		demo_common_OimoUtil.addBox(world,new oimo_common_Vec3(0,-0.5,0),new oimo_common_Vec3(7,0.5,7),true);
		var _g = 0;
		while(_g < 3) {
			var i = _g++;
			var _g1 = -1;
			while(_g1 < 2) {
				var j = _g1++;
				var _g2 = -1;
				while(_g2 < 2) {
					var center = new oimo_common_Vec3(j * 0.6 * 2,0.6 + i * 0.6 * 3.0,_g2++ * 0.6 * 2);
					var bc = new oimo_dynamics_rigidbody_RigidBodyConfig();
					var sc = new oimo_dynamics_rigidbody_ShapeConfig();
					bc.position = center;
					var _g3 = [];
					_g3.push(new oimo_common_Vec3(this.rand() * 0.6,this.rand() * 0.6,this.rand() * 0.6));
					_g3.push(new oimo_common_Vec3(this.rand() * 0.6,this.rand() * 0.6,this.rand() * 0.6));
					_g3.push(new oimo_common_Vec3(this.rand() * 0.6,this.rand() * 0.6,this.rand() * 0.6));
					_g3.push(new oimo_common_Vec3(this.rand() * 0.6,this.rand() * 0.6,this.rand() * 0.6));
					_g3.push(new oimo_common_Vec3(this.rand() * 0.6,this.rand() * 0.6,this.rand() * 0.6));
					_g3.push(new oimo_common_Vec3(this.rand() * 0.6,this.rand() * 0.6,this.rand() * 0.6));
					_g3.push(new oimo_common_Vec3(this.rand() * 0.6,this.rand() * 0.6,this.rand() * 0.6));
					_g3.push(new oimo_common_Vec3(this.rand() * 0.6,this.rand() * 0.6,this.rand() * 0.6));
					sc.geometry = new oimo_collision_geometry_ConvexHullGeometry(_g3);
					var b = new oimo_dynamics_rigidbody_RigidBody(bc);
					b.addShape(new oimo_dynamics_rigidbody_Shape(sc));
					world.addRigidBody(b);
				}
			}
		}
	}
	,rand: function() {
		var x = Math.pow(Math.random(),0.7);
		if(Math.random() < 0.5) {
			x = -x;
		}
		return x;
	}
	,update: function() {
		demo_common_DemoBase.prototype.update.call(this);
		this.teleportRigidBodies(-20,10,5,5);
	}
	,__class__: demo_core_ConvexHullDemo
});
var demo_core_FallingRagdollDemo = function() {
	demo_common_DemoBase.call(this,"Falling Ragdoll");
};
demo_core_FallingRagdollDemo.__name__ = true;
demo_core_FallingRagdollDemo.__super__ = demo_common_DemoBase;
demo_core_FallingRagdollDemo.prototype = $extend(demo_common_DemoBase.prototype,{
	init: function(world,renderer,input,viewInfo) {
		demo_common_DemoBase.prototype.init.call(this,world,renderer,input,viewInfo);
		var eye_x = 2;
		var eye_y = 7;
		var eye_z = 9;
		oimo_common_Vec3.numCreations++;
		oimo_common_Vec3.numCreations++;
		var up_x = 0;
		var up_y = 1;
		var up_z = 0;
		oimo_common_Vec3.numCreations++;
		var _this = renderer.viewMat;
		var zx = eye_x - 0;
		var zy = eye_y - 2;
		var zz = eye_z - 0;
		var tmp = 1 / Math.sqrt(zx * zx + zy * zy + zz * zz);
		zx *= tmp;
		zy *= tmp;
		zz *= tmp;
		var xx = up_y * zz - up_z * zy;
		var xy = up_z * zx - up_x * zz;
		var xz = up_x * zy - up_y * zx;
		tmp = 1 / Math.sqrt(xx * xx + xy * xy + xz * xz);
		xx *= tmp;
		xy *= tmp;
		xz *= tmp;
		var yx = zy * xz - zz * xy;
		var yy = zz * xx - zx * xz;
		var yz = zx * xy - zy * xx;
		_this.e00 = xx;
		_this.e01 = xy;
		_this.e02 = xz;
		_this.e03 = -(xx * eye_x + xy * eye_y + xz * eye_z);
		_this.e10 = yx;
		_this.e11 = yy;
		_this.e12 = yz;
		_this.e13 = -(yx * eye_x + yy * eye_y + yz * eye_z);
		_this.e20 = zx;
		_this.e21 = zy;
		_this.e22 = zz;
		_this.e23 = -(zx * eye_x + zy * eye_y + zz * eye_z);
		_this.e30 = 0;
		_this.e31 = 0;
		_this.e32 = 0;
		_this.e33 = 1;
		renderer.g.getDebugDraw().drawJointLimits = false;
		var tmp1 = oimo_common_Setting.defaultRestitution;
		var tmp2 = oimo_common_Setting.defaultFriction;
		oimo_common_Setting.defaultRestitution = 0.3;
		oimo_common_Setting.defaultFriction = 0.2;
		demo_common_OimoUtil.addBox(world,new oimo_common_Vec3(0,-0.5,0),new oimo_common_Vec3(7,0.5,7),true);
		var stairCenter_x = 0;
		var stairCenter_y = 0;
		var stairCenter_z = 0;
		oimo_common_Vec3.numCreations++;
		var _g = 0;
		while(_g < 30) {
			var i = _g++;
			if(i == 29) {
				var y = (i + 0.5) * 0.5;
				var z = -(i + 2.) * 0.6;
				if(z == null) {
					z = 0;
				}
				if(y == null) {
					y = 0;
				}
				oimo_common_Vec3.numCreations++;
				demo_common_OimoUtil.addBox(world,new oimo_common_Vec3(stairCenter_x + 0,stairCenter_y + y,stairCenter_z + z),new oimo_common_Vec3(2.,0.25,1.2),true);
			} else {
				var y1 = (i + 0.5) * 0.5;
				var z1 = -(i + 0.5) * 0.6;
				if(z1 == null) {
					z1 = 0;
				}
				if(y1 == null) {
					y1 = 0;
				}
				oimo_common_Vec3.numCreations++;
				demo_common_OimoUtil.addBox(world,new oimo_common_Vec3(stairCenter_x + 0,stairCenter_y + y1,stairCenter_z + z1),new oimo_common_Vec3(2.,0.25,0.3),true);
				var y2 = (i + 1.) * 0.5;
				var z2 = -(i + 0.5) * 0.6;
				if(z2 == null) {
					z2 = 0;
				}
				if(y2 == null) {
					y2 = 0;
				}
				oimo_common_Vec3.numCreations++;
				demo_common_OimoUtil.addBox(world,new oimo_common_Vec3(-2.,stairCenter_y + y2,stairCenter_z + z2),new oimo_common_Vec3(0.1,0.5,0.3),true);
				var y3 = (i + 1.) * 0.5;
				var z3 = -(i + 0.5) * 0.6;
				if(z3 == null) {
					z3 = 0;
				}
				if(y3 == null) {
					y3 = 0;
				}
				oimo_common_Vec3.numCreations++;
				demo_common_OimoUtil.addBox(world,new oimo_common_Vec3(2.,stairCenter_y + y3,stairCenter_z + z3),new oimo_common_Vec3(0.1,0.5,0.3),true);
			}
		}
		oimo_common_Vec3.numCreations++;
		var ragdollPos = new oimo_common_Vec3(stairCenter_x + 0,16.21,-17.7);
		this.ragdoll = demo_common_OimoUtil.addRagdoll(world,ragdollPos);
		oimo_common_Vec3.numCreations++;
		var _this = demo_common_OimoUtil.addBox(world,new oimo_common_Vec3(ragdollPos.x + 0,ragdollPos.y + 0,ragdollPos.z + (-2)),new oimo_common_Vec3(0.2,0.2,0.2),false);
		oimo_common_Vec3.numCreations++;
		if(_this._type == 1) {
			_this._velX = 0;
			_this._velY = 0;
			_this._velZ = 0;
		} else {
			_this._velX = 0;
			_this._velY = 3.5;
			_this._velZ = 4;
		}
		_this._sleeping = false;
		_this._sleepTime = 0;
		oimo_common_Setting.defaultRestitution = tmp1;
		oimo_common_Setting.defaultFriction = tmp2;
	}
	,update: function() {
		demo_common_DemoBase.prototype.update.call(this);
		if(this.ragdoll != null) {
			var _this = this.ragdoll;
			var _this_x = 0;
			var _this_y = 0;
			var _this_z = 0;
			oimo_common_Vec3.numCreations++;
			_this_x = _this._transform._positionX;
			_this_y = _this._transform._positionY;
			_this_z = _this._transform._positionZ;
			oimo_common_Vec3.numCreations++;
			var x = _this_x + 2;
			var y = _this_y + 5;
			var z = _this_z + 7;
			if(z == null) {
				z = 0;
			}
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var eye_x = x;
			var eye_y = y;
			var eye_z = z;
			oimo_common_Vec3.numCreations++;
			var _this = this.ragdoll;
			var at_x = 0;
			var at_y = 0;
			var at_z = 0;
			oimo_common_Vec3.numCreations++;
			at_x = _this._transform._positionX;
			at_y = _this._transform._positionY;
			at_z = _this._transform._positionZ;
			var up_x = 0;
			var up_y = 1;
			var up_z = 0;
			oimo_common_Vec3.numCreations++;
			var _this = this.renderer.viewMat;
			var zx = eye_x - at_x;
			var zy = eye_y - at_y;
			var zz = eye_z - at_z;
			var tmp = 1 / Math.sqrt(zx * zx + zy * zy + zz * zz);
			zx *= tmp;
			zy *= tmp;
			zz *= tmp;
			var xx = up_y * zz - up_z * zy;
			var xy = up_z * zx - up_x * zz;
			var xz = up_x * zy - up_y * zx;
			tmp = 1 / Math.sqrt(xx * xx + xy * xy + xz * xz);
			xx *= tmp;
			xy *= tmp;
			xz *= tmp;
			var yx = zy * xz - zz * xy;
			var yy = zz * xx - zx * xz;
			var yz = zx * xy - zy * xx;
			_this.e00 = xx;
			_this.e01 = xy;
			_this.e02 = xz;
			_this.e03 = -(xx * eye_x + xy * eye_y + xz * eye_z);
			_this.e10 = yx;
			_this.e11 = yy;
			_this.e12 = yz;
			_this.e13 = -(yx * eye_x + yy * eye_y + yz * eye_z);
			_this.e20 = zx;
			_this.e21 = zy;
			_this.e22 = zz;
			_this.e23 = -(zx * eye_x + zy * eye_y + zz * eye_z);
			_this.e30 = 0;
			_this.e31 = 0;
			_this.e32 = 0;
			_this.e33 = 1;
		}
	}
	,__class__: demo_core_FallingRagdollDemo
});
var demo_core_FrictionsAndRestitutions = function() {
	demo_common_DemoBase.call(this,"Frictions and Restitutions");
};
demo_core_FrictionsAndRestitutions.__name__ = true;
demo_core_FrictionsAndRestitutions.__super__ = demo_common_DemoBase;
demo_core_FrictionsAndRestitutions.prototype = $extend(demo_common_DemoBase.prototype,{
	init: function(world,renderer,input,viewInfo) {
		demo_common_DemoBase.prototype.init.call(this,world,renderer,input,viewInfo);
		var eye_x = 0;
		var eye_y = 7;
		var eye_z = 9;
		oimo_common_Vec3.numCreations++;
		oimo_common_Vec3.numCreations++;
		var up_x = 0;
		var up_y = 1;
		var up_z = 0;
		oimo_common_Vec3.numCreations++;
		var _this = renderer.viewMat;
		var zx = eye_x - 0;
		var zy = eye_y - 2;
		var zz = eye_z - 0;
		var tmp = 1 / Math.sqrt(zx * zx + zy * zy + zz * zz);
		zx *= tmp;
		zy *= tmp;
		zz *= tmp;
		var xx = up_y * zz - up_z * zy;
		var xy = up_z * zx - up_x * zz;
		var xz = up_x * zy - up_y * zx;
		tmp = 1 / Math.sqrt(xx * xx + xy * xy + xz * xz);
		xx *= tmp;
		xy *= tmp;
		xz *= tmp;
		var yx = zy * xz - zz * xy;
		var yy = zz * xx - zx * xz;
		var yz = zx * xy - zy * xx;
		_this.e00 = xx;
		_this.e01 = xy;
		_this.e02 = xz;
		_this.e03 = -(xx * eye_x + xy * eye_y + xz * eye_z);
		_this.e10 = yx;
		_this.e11 = yy;
		_this.e12 = yz;
		_this.e13 = -(yx * eye_x + yy * eye_y + yz * eye_z);
		_this.e20 = zx;
		_this.e21 = zy;
		_this.e22 = zz;
		_this.e23 = -(zx * eye_x + zy * eye_y + zz * eye_z);
		_this.e30 = 0;
		_this.e31 = 0;
		_this.e32 = 0;
		_this.e33 = 1;
		demo_common_OimoUtil.addBox(world,new oimo_common_Vec3(0,-0.5,0),new oimo_common_Vec3(7,0.5,7),true);
		var m_e00 = 1;
		var m_e01 = 0;
		var m_e02 = 0;
		var m_e10 = 0;
		var m_e11 = 1;
		var m_e12 = 0;
		var m_e20 = 0;
		var m_e21 = 0;
		var m_e22 = 1;
		oimo_common_Mat3.numCreations++;
		var s = Math.sin(0.34906585039886556);
		var c = Math.cos(0.34906585039886556);
		var c1 = 1 - c;
		var r00 = 0 * c1 + c;
		var r01 = 0 * c1 - s;
		var r02 = 0 * c1 + 0 * s;
		var r10 = 0 * c1 + s;
		var r11 = 0 * c1 + c;
		var r12 = 0 * c1 - 0 * s;
		var r20 = 0 * c1 - 0 * s;
		var r21 = 0 * c1 + 0 * s;
		var r22 = c1 + c;
		var e00 = m_e00 * r00 + m_e01 * r10 + m_e02 * r20;
		var e01 = m_e00 * r01 + m_e01 * r11 + m_e02 * r21;
		var e02 = m_e00 * r02 + m_e01 * r12 + m_e02 * r22;
		var e10 = m_e10 * r00 + m_e11 * r10 + m_e12 * r20;
		var e11 = m_e10 * r01 + m_e11 * r11 + m_e12 * r21;
		var e12 = m_e10 * r02 + m_e11 * r12 + m_e12 * r22;
		var e20 = m_e20 * r00 + m_e21 * r10 + m_e22 * r20;
		var e21 = m_e20 * r01 + m_e21 * r11 + m_e22 * r21;
		var e22 = m_e20 * r02 + m_e21 * r12 + m_e22 * r22;
		m_e00 = e00;
		m_e01 = e01;
		m_e02 = e02;
		m_e10 = e10;
		m_e11 = e11;
		m_e12 = e12;
		m_e20 = e20;
		m_e21 = e21;
		m_e22 = e22;
		var tiltedFloor = demo_common_OimoUtil.addBox(world,new oimo_common_Vec3(0,2,0),new oimo_common_Vec3(3,0.1,1),true);
		var rot00;
		var rot01;
		var rot02;
		var rot10;
		var rot11;
		var rot12;
		var rot20;
		var rot21;
		var rot22;
		rot00 = e00;
		rot01 = e01;
		rot02 = e02;
		rot10 = e10;
		rot11 = e11;
		rot12 = e12;
		rot20 = e20;
		rot21 = e21;
		rot22 = e22;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = rot00 * tiltedFloor._transform._rotation00 + rot01 * tiltedFloor._transform._rotation10 + rot02 * tiltedFloor._transform._rotation20;
		__tmp__01 = rot00 * tiltedFloor._transform._rotation01 + rot01 * tiltedFloor._transform._rotation11 + rot02 * tiltedFloor._transform._rotation21;
		__tmp__02 = rot00 * tiltedFloor._transform._rotation02 + rot01 * tiltedFloor._transform._rotation12 + rot02 * tiltedFloor._transform._rotation22;
		__tmp__10 = rot10 * tiltedFloor._transform._rotation00 + rot11 * tiltedFloor._transform._rotation10 + rot12 * tiltedFloor._transform._rotation20;
		__tmp__11 = rot10 * tiltedFloor._transform._rotation01 + rot11 * tiltedFloor._transform._rotation11 + rot12 * tiltedFloor._transform._rotation21;
		__tmp__12 = rot10 * tiltedFloor._transform._rotation02 + rot11 * tiltedFloor._transform._rotation12 + rot12 * tiltedFloor._transform._rotation22;
		__tmp__20 = rot20 * tiltedFloor._transform._rotation00 + rot21 * tiltedFloor._transform._rotation10 + rot22 * tiltedFloor._transform._rotation20;
		__tmp__21 = rot20 * tiltedFloor._transform._rotation01 + rot21 * tiltedFloor._transform._rotation11 + rot22 * tiltedFloor._transform._rotation21;
		__tmp__22 = rot20 * tiltedFloor._transform._rotation02 + rot21 * tiltedFloor._transform._rotation12 + rot22 * tiltedFloor._transform._rotation22;
		tiltedFloor._transform._rotation00 = __tmp__00;
		tiltedFloor._transform._rotation01 = __tmp__01;
		tiltedFloor._transform._rotation02 = __tmp__02;
		tiltedFloor._transform._rotation10 = __tmp__10;
		tiltedFloor._transform._rotation11 = __tmp__11;
		tiltedFloor._transform._rotation12 = __tmp__12;
		tiltedFloor._transform._rotation20 = __tmp__20;
		tiltedFloor._transform._rotation21 = __tmp__21;
		tiltedFloor._transform._rotation22 = __tmp__22;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = tiltedFloor._transform._rotation00 * tiltedFloor._invLocalInertia00 + tiltedFloor._transform._rotation01 * tiltedFloor._invLocalInertia10 + tiltedFloor._transform._rotation02 * tiltedFloor._invLocalInertia20;
		__tmp__01 = tiltedFloor._transform._rotation00 * tiltedFloor._invLocalInertia01 + tiltedFloor._transform._rotation01 * tiltedFloor._invLocalInertia11 + tiltedFloor._transform._rotation02 * tiltedFloor._invLocalInertia21;
		__tmp__02 = tiltedFloor._transform._rotation00 * tiltedFloor._invLocalInertia02 + tiltedFloor._transform._rotation01 * tiltedFloor._invLocalInertia12 + tiltedFloor._transform._rotation02 * tiltedFloor._invLocalInertia22;
		__tmp__10 = tiltedFloor._transform._rotation10 * tiltedFloor._invLocalInertia00 + tiltedFloor._transform._rotation11 * tiltedFloor._invLocalInertia10 + tiltedFloor._transform._rotation12 * tiltedFloor._invLocalInertia20;
		__tmp__11 = tiltedFloor._transform._rotation10 * tiltedFloor._invLocalInertia01 + tiltedFloor._transform._rotation11 * tiltedFloor._invLocalInertia11 + tiltedFloor._transform._rotation12 * tiltedFloor._invLocalInertia21;
		__tmp__12 = tiltedFloor._transform._rotation10 * tiltedFloor._invLocalInertia02 + tiltedFloor._transform._rotation11 * tiltedFloor._invLocalInertia12 + tiltedFloor._transform._rotation12 * tiltedFloor._invLocalInertia22;
		__tmp__20 = tiltedFloor._transform._rotation20 * tiltedFloor._invLocalInertia00 + tiltedFloor._transform._rotation21 * tiltedFloor._invLocalInertia10 + tiltedFloor._transform._rotation22 * tiltedFloor._invLocalInertia20;
		__tmp__21 = tiltedFloor._transform._rotation20 * tiltedFloor._invLocalInertia01 + tiltedFloor._transform._rotation21 * tiltedFloor._invLocalInertia11 + tiltedFloor._transform._rotation22 * tiltedFloor._invLocalInertia21;
		__tmp__22 = tiltedFloor._transform._rotation20 * tiltedFloor._invLocalInertia02 + tiltedFloor._transform._rotation21 * tiltedFloor._invLocalInertia12 + tiltedFloor._transform._rotation22 * tiltedFloor._invLocalInertia22;
		tiltedFloor._invInertia00 = __tmp__00;
		tiltedFloor._invInertia01 = __tmp__01;
		tiltedFloor._invInertia02 = __tmp__02;
		tiltedFloor._invInertia10 = __tmp__10;
		tiltedFloor._invInertia11 = __tmp__11;
		tiltedFloor._invInertia12 = __tmp__12;
		tiltedFloor._invInertia20 = __tmp__20;
		tiltedFloor._invInertia21 = __tmp__21;
		tiltedFloor._invInertia22 = __tmp__22;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = tiltedFloor._invInertia00 * tiltedFloor._transform._rotation00 + tiltedFloor._invInertia01 * tiltedFloor._transform._rotation01 + tiltedFloor._invInertia02 * tiltedFloor._transform._rotation02;
		__tmp__01 = tiltedFloor._invInertia00 * tiltedFloor._transform._rotation10 + tiltedFloor._invInertia01 * tiltedFloor._transform._rotation11 + tiltedFloor._invInertia02 * tiltedFloor._transform._rotation12;
		__tmp__02 = tiltedFloor._invInertia00 * tiltedFloor._transform._rotation20 + tiltedFloor._invInertia01 * tiltedFloor._transform._rotation21 + tiltedFloor._invInertia02 * tiltedFloor._transform._rotation22;
		__tmp__10 = tiltedFloor._invInertia10 * tiltedFloor._transform._rotation00 + tiltedFloor._invInertia11 * tiltedFloor._transform._rotation01 + tiltedFloor._invInertia12 * tiltedFloor._transform._rotation02;
		__tmp__11 = tiltedFloor._invInertia10 * tiltedFloor._transform._rotation10 + tiltedFloor._invInertia11 * tiltedFloor._transform._rotation11 + tiltedFloor._invInertia12 * tiltedFloor._transform._rotation12;
		__tmp__12 = tiltedFloor._invInertia10 * tiltedFloor._transform._rotation20 + tiltedFloor._invInertia11 * tiltedFloor._transform._rotation21 + tiltedFloor._invInertia12 * tiltedFloor._transform._rotation22;
		__tmp__20 = tiltedFloor._invInertia20 * tiltedFloor._transform._rotation00 + tiltedFloor._invInertia21 * tiltedFloor._transform._rotation01 + tiltedFloor._invInertia22 * tiltedFloor._transform._rotation02;
		__tmp__21 = tiltedFloor._invInertia20 * tiltedFloor._transform._rotation10 + tiltedFloor._invInertia21 * tiltedFloor._transform._rotation11 + tiltedFloor._invInertia22 * tiltedFloor._transform._rotation12;
		__tmp__22 = tiltedFloor._invInertia20 * tiltedFloor._transform._rotation20 + tiltedFloor._invInertia21 * tiltedFloor._transform._rotation21 + tiltedFloor._invInertia22 * tiltedFloor._transform._rotation22;
		tiltedFloor._invInertia00 = __tmp__00;
		tiltedFloor._invInertia01 = __tmp__01;
		tiltedFloor._invInertia02 = __tmp__02;
		tiltedFloor._invInertia10 = __tmp__10;
		tiltedFloor._invInertia11 = __tmp__11;
		tiltedFloor._invInertia12 = __tmp__12;
		tiltedFloor._invInertia20 = __tmp__20;
		tiltedFloor._invInertia21 = __tmp__21;
		tiltedFloor._invInertia22 = __tmp__22;
		tiltedFloor._invInertia00 *= tiltedFloor._rotFactor.x;
		tiltedFloor._invInertia01 *= tiltedFloor._rotFactor.x;
		tiltedFloor._invInertia02 *= tiltedFloor._rotFactor.x;
		tiltedFloor._invInertia10 *= tiltedFloor._rotFactor.y;
		tiltedFloor._invInertia11 *= tiltedFloor._rotFactor.y;
		tiltedFloor._invInertia12 *= tiltedFloor._rotFactor.y;
		tiltedFloor._invInertia20 *= tiltedFloor._rotFactor.z;
		tiltedFloor._invInertia21 *= tiltedFloor._rotFactor.z;
		tiltedFloor._invInertia22 *= tiltedFloor._rotFactor.z;
		var dst = tiltedFloor._ptransform;
		var src = tiltedFloor._transform;
		dst._positionX = src._positionX;
		dst._positionY = src._positionY;
		dst._positionZ = src._positionZ;
		dst._rotation00 = src._rotation00;
		dst._rotation01 = src._rotation01;
		dst._rotation02 = src._rotation02;
		dst._rotation10 = src._rotation10;
		dst._rotation11 = src._rotation11;
		dst._rotation12 = src._rotation12;
		dst._rotation20 = src._rotation20;
		dst._rotation21 = src._rotation21;
		dst._rotation22 = src._rotation22;
		var s = tiltedFloor._shapeList;
		while(s != null) {
			var n = s._next;
			var tf1 = tiltedFloor._ptransform;
			var tf2 = tiltedFloor._transform;
			var dst = s._ptransform;
			var src1 = s._localTransform;
			var __tmp__00;
			var __tmp__01;
			var __tmp__02;
			var __tmp__10;
			var __tmp__11;
			var __tmp__12;
			var __tmp__20;
			var __tmp__21;
			var __tmp__22;
			__tmp__00 = tf1._rotation00 * src1._rotation00 + tf1._rotation01 * src1._rotation10 + tf1._rotation02 * src1._rotation20;
			__tmp__01 = tf1._rotation00 * src1._rotation01 + tf1._rotation01 * src1._rotation11 + tf1._rotation02 * src1._rotation21;
			__tmp__02 = tf1._rotation00 * src1._rotation02 + tf1._rotation01 * src1._rotation12 + tf1._rotation02 * src1._rotation22;
			__tmp__10 = tf1._rotation10 * src1._rotation00 + tf1._rotation11 * src1._rotation10 + tf1._rotation12 * src1._rotation20;
			__tmp__11 = tf1._rotation10 * src1._rotation01 + tf1._rotation11 * src1._rotation11 + tf1._rotation12 * src1._rotation21;
			__tmp__12 = tf1._rotation10 * src1._rotation02 + tf1._rotation11 * src1._rotation12 + tf1._rotation12 * src1._rotation22;
			__tmp__20 = tf1._rotation20 * src1._rotation00 + tf1._rotation21 * src1._rotation10 + tf1._rotation22 * src1._rotation20;
			__tmp__21 = tf1._rotation20 * src1._rotation01 + tf1._rotation21 * src1._rotation11 + tf1._rotation22 * src1._rotation21;
			__tmp__22 = tf1._rotation20 * src1._rotation02 + tf1._rotation21 * src1._rotation12 + tf1._rotation22 * src1._rotation22;
			dst._rotation00 = __tmp__00;
			dst._rotation01 = __tmp__01;
			dst._rotation02 = __tmp__02;
			dst._rotation10 = __tmp__10;
			dst._rotation11 = __tmp__11;
			dst._rotation12 = __tmp__12;
			dst._rotation20 = __tmp__20;
			dst._rotation21 = __tmp__21;
			dst._rotation22 = __tmp__22;
			var __tmp__X;
			var __tmp__Y;
			var __tmp__Z;
			__tmp__X = tf1._rotation00 * src1._positionX + tf1._rotation01 * src1._positionY + tf1._rotation02 * src1._positionZ;
			__tmp__Y = tf1._rotation10 * src1._positionX + tf1._rotation11 * src1._positionY + tf1._rotation12 * src1._positionZ;
			__tmp__Z = tf1._rotation20 * src1._positionX + tf1._rotation21 * src1._positionY + tf1._rotation22 * src1._positionZ;
			dst._positionX = __tmp__X;
			dst._positionY = __tmp__Y;
			dst._positionZ = __tmp__Z;
			dst._positionX += tf1._positionX;
			dst._positionY += tf1._positionY;
			dst._positionZ += tf1._positionZ;
			var dst1 = s._transform;
			var src11 = s._localTransform;
			var __tmp__001;
			var __tmp__011;
			var __tmp__021;
			var __tmp__101;
			var __tmp__111;
			var __tmp__121;
			var __tmp__201;
			var __tmp__211;
			var __tmp__221;
			__tmp__001 = tf2._rotation00 * src11._rotation00 + tf2._rotation01 * src11._rotation10 + tf2._rotation02 * src11._rotation20;
			__tmp__011 = tf2._rotation00 * src11._rotation01 + tf2._rotation01 * src11._rotation11 + tf2._rotation02 * src11._rotation21;
			__tmp__021 = tf2._rotation00 * src11._rotation02 + tf2._rotation01 * src11._rotation12 + tf2._rotation02 * src11._rotation22;
			__tmp__101 = tf2._rotation10 * src11._rotation00 + tf2._rotation11 * src11._rotation10 + tf2._rotation12 * src11._rotation20;
			__tmp__111 = tf2._rotation10 * src11._rotation01 + tf2._rotation11 * src11._rotation11 + tf2._rotation12 * src11._rotation21;
			__tmp__121 = tf2._rotation10 * src11._rotation02 + tf2._rotation11 * src11._rotation12 + tf2._rotation12 * src11._rotation22;
			__tmp__201 = tf2._rotation20 * src11._rotation00 + tf2._rotation21 * src11._rotation10 + tf2._rotation22 * src11._rotation20;
			__tmp__211 = tf2._rotation20 * src11._rotation01 + tf2._rotation21 * src11._rotation11 + tf2._rotation22 * src11._rotation21;
			__tmp__221 = tf2._rotation20 * src11._rotation02 + tf2._rotation21 * src11._rotation12 + tf2._rotation22 * src11._rotation22;
			dst1._rotation00 = __tmp__001;
			dst1._rotation01 = __tmp__011;
			dst1._rotation02 = __tmp__021;
			dst1._rotation10 = __tmp__101;
			dst1._rotation11 = __tmp__111;
			dst1._rotation12 = __tmp__121;
			dst1._rotation20 = __tmp__201;
			dst1._rotation21 = __tmp__211;
			dst1._rotation22 = __tmp__221;
			var __tmp__X1;
			var __tmp__Y1;
			var __tmp__Z1;
			__tmp__X1 = tf2._rotation00 * src11._positionX + tf2._rotation01 * src11._positionY + tf2._rotation02 * src11._positionZ;
			__tmp__Y1 = tf2._rotation10 * src11._positionX + tf2._rotation11 * src11._positionY + tf2._rotation12 * src11._positionZ;
			__tmp__Z1 = tf2._rotation20 * src11._positionX + tf2._rotation21 * src11._positionY + tf2._rotation22 * src11._positionZ;
			dst1._positionX = __tmp__X1;
			dst1._positionY = __tmp__Y1;
			dst1._positionZ = __tmp__Z1;
			dst1._positionX += tf2._positionX;
			dst1._positionY += tf2._positionY;
			dst1._positionZ += tf2._positionZ;
			var minX;
			var minY;
			var minZ;
			var maxX;
			var maxY;
			var maxZ;
			s._geom._computeAabb(s._aabb,s._ptransform);
			minX = s._aabb._minX;
			minY = s._aabb._minY;
			minZ = s._aabb._minZ;
			maxX = s._aabb._maxX;
			maxY = s._aabb._maxY;
			maxZ = s._aabb._maxZ;
			s._geom._computeAabb(s._aabb,s._transform);
			s._aabb._minX = minX < s._aabb._minX ? minX : s._aabb._minX;
			s._aabb._minY = minY < s._aabb._minY ? minY : s._aabb._minY;
			s._aabb._minZ = minZ < s._aabb._minZ ? minZ : s._aabb._minZ;
			s._aabb._maxX = maxX > s._aabb._maxX ? maxX : s._aabb._maxX;
			s._aabb._maxY = maxY > s._aabb._maxY ? maxY : s._aabb._maxY;
			s._aabb._maxZ = maxZ > s._aabb._maxZ ? maxZ : s._aabb._maxZ;
			if(s._proxy != null) {
				var dX;
				var dY;
				var dZ;
				dX = s._transform._positionX - s._ptransform._positionX;
				dY = s._transform._positionY - s._ptransform._positionY;
				dZ = s._transform._positionZ - s._ptransform._positionZ;
				var v = s.displacement;
				v.x = dX;
				v.y = dY;
				v.z = dZ;
				s._rigidBody._world._broadPhase.moveProxy(s._proxy,s._aabb,s.displacement);
			}
			s = n;
		}
		tiltedFloor._sleeping = false;
		tiltedFloor._sleepTime = 0;
		tiltedFloor._shapeList._friction = 0.5;
		var _g = 0;
		while(_g < 7) {
			var i = _g++;
			var pos = new oimo_common_Vec3((i - 3) * 0.8,0,0);
			var y = pos.x * e10 + pos.y * e11 + pos.z * e12;
			var z = pos.x * e20 + pos.y * e21 + pos.z * e22;
			pos.x = pos.x * e00 + pos.y * e01 + pos.z * e02;
			pos.y = y;
			pos.z = z;
			pos.y += 2.3;
			var box = demo_common_OimoUtil.addBox(world,pos,new oimo_common_Vec3(0.2,0.2,0.2),false);
			box._shapeList._friction = i / 16;
			var rot00;
			var rot01;
			var rot02;
			var rot10;
			var rot11;
			var rot12;
			var rot20;
			var rot21;
			var rot22;
			rot00 = e00;
			rot01 = e01;
			rot02 = e02;
			rot10 = e10;
			rot11 = e11;
			rot12 = e12;
			rot20 = e20;
			rot21 = e21;
			rot22 = e22;
			var __tmp__00;
			var __tmp__01;
			var __tmp__02;
			var __tmp__10;
			var __tmp__11;
			var __tmp__12;
			var __tmp__20;
			var __tmp__21;
			var __tmp__22;
			__tmp__00 = rot00 * box._transform._rotation00 + rot01 * box._transform._rotation10 + rot02 * box._transform._rotation20;
			__tmp__01 = rot00 * box._transform._rotation01 + rot01 * box._transform._rotation11 + rot02 * box._transform._rotation21;
			__tmp__02 = rot00 * box._transform._rotation02 + rot01 * box._transform._rotation12 + rot02 * box._transform._rotation22;
			__tmp__10 = rot10 * box._transform._rotation00 + rot11 * box._transform._rotation10 + rot12 * box._transform._rotation20;
			__tmp__11 = rot10 * box._transform._rotation01 + rot11 * box._transform._rotation11 + rot12 * box._transform._rotation21;
			__tmp__12 = rot10 * box._transform._rotation02 + rot11 * box._transform._rotation12 + rot12 * box._transform._rotation22;
			__tmp__20 = rot20 * box._transform._rotation00 + rot21 * box._transform._rotation10 + rot22 * box._transform._rotation20;
			__tmp__21 = rot20 * box._transform._rotation01 + rot21 * box._transform._rotation11 + rot22 * box._transform._rotation21;
			__tmp__22 = rot20 * box._transform._rotation02 + rot21 * box._transform._rotation12 + rot22 * box._transform._rotation22;
			box._transform._rotation00 = __tmp__00;
			box._transform._rotation01 = __tmp__01;
			box._transform._rotation02 = __tmp__02;
			box._transform._rotation10 = __tmp__10;
			box._transform._rotation11 = __tmp__11;
			box._transform._rotation12 = __tmp__12;
			box._transform._rotation20 = __tmp__20;
			box._transform._rotation21 = __tmp__21;
			box._transform._rotation22 = __tmp__22;
			var __tmp__001;
			var __tmp__011;
			var __tmp__021;
			var __tmp__101;
			var __tmp__111;
			var __tmp__121;
			var __tmp__201;
			var __tmp__211;
			var __tmp__221;
			__tmp__001 = box._transform._rotation00 * box._invLocalInertia00 + box._transform._rotation01 * box._invLocalInertia10 + box._transform._rotation02 * box._invLocalInertia20;
			__tmp__011 = box._transform._rotation00 * box._invLocalInertia01 + box._transform._rotation01 * box._invLocalInertia11 + box._transform._rotation02 * box._invLocalInertia21;
			__tmp__021 = box._transform._rotation00 * box._invLocalInertia02 + box._transform._rotation01 * box._invLocalInertia12 + box._transform._rotation02 * box._invLocalInertia22;
			__tmp__101 = box._transform._rotation10 * box._invLocalInertia00 + box._transform._rotation11 * box._invLocalInertia10 + box._transform._rotation12 * box._invLocalInertia20;
			__tmp__111 = box._transform._rotation10 * box._invLocalInertia01 + box._transform._rotation11 * box._invLocalInertia11 + box._transform._rotation12 * box._invLocalInertia21;
			__tmp__121 = box._transform._rotation10 * box._invLocalInertia02 + box._transform._rotation11 * box._invLocalInertia12 + box._transform._rotation12 * box._invLocalInertia22;
			__tmp__201 = box._transform._rotation20 * box._invLocalInertia00 + box._transform._rotation21 * box._invLocalInertia10 + box._transform._rotation22 * box._invLocalInertia20;
			__tmp__211 = box._transform._rotation20 * box._invLocalInertia01 + box._transform._rotation21 * box._invLocalInertia11 + box._transform._rotation22 * box._invLocalInertia21;
			__tmp__221 = box._transform._rotation20 * box._invLocalInertia02 + box._transform._rotation21 * box._invLocalInertia12 + box._transform._rotation22 * box._invLocalInertia22;
			box._invInertia00 = __tmp__001;
			box._invInertia01 = __tmp__011;
			box._invInertia02 = __tmp__021;
			box._invInertia10 = __tmp__101;
			box._invInertia11 = __tmp__111;
			box._invInertia12 = __tmp__121;
			box._invInertia20 = __tmp__201;
			box._invInertia21 = __tmp__211;
			box._invInertia22 = __tmp__221;
			var __tmp__002;
			var __tmp__012;
			var __tmp__022;
			var __tmp__102;
			var __tmp__112;
			var __tmp__122;
			var __tmp__202;
			var __tmp__212;
			var __tmp__222;
			__tmp__002 = box._invInertia00 * box._transform._rotation00 + box._invInertia01 * box._transform._rotation01 + box._invInertia02 * box._transform._rotation02;
			__tmp__012 = box._invInertia00 * box._transform._rotation10 + box._invInertia01 * box._transform._rotation11 + box._invInertia02 * box._transform._rotation12;
			__tmp__022 = box._invInertia00 * box._transform._rotation20 + box._invInertia01 * box._transform._rotation21 + box._invInertia02 * box._transform._rotation22;
			__tmp__102 = box._invInertia10 * box._transform._rotation00 + box._invInertia11 * box._transform._rotation01 + box._invInertia12 * box._transform._rotation02;
			__tmp__112 = box._invInertia10 * box._transform._rotation10 + box._invInertia11 * box._transform._rotation11 + box._invInertia12 * box._transform._rotation12;
			__tmp__122 = box._invInertia10 * box._transform._rotation20 + box._invInertia11 * box._transform._rotation21 + box._invInertia12 * box._transform._rotation22;
			__tmp__202 = box._invInertia20 * box._transform._rotation00 + box._invInertia21 * box._transform._rotation01 + box._invInertia22 * box._transform._rotation02;
			__tmp__212 = box._invInertia20 * box._transform._rotation10 + box._invInertia21 * box._transform._rotation11 + box._invInertia22 * box._transform._rotation12;
			__tmp__222 = box._invInertia20 * box._transform._rotation20 + box._invInertia21 * box._transform._rotation21 + box._invInertia22 * box._transform._rotation22;
			box._invInertia00 = __tmp__002;
			box._invInertia01 = __tmp__012;
			box._invInertia02 = __tmp__022;
			box._invInertia10 = __tmp__102;
			box._invInertia11 = __tmp__112;
			box._invInertia12 = __tmp__122;
			box._invInertia20 = __tmp__202;
			box._invInertia21 = __tmp__212;
			box._invInertia22 = __tmp__222;
			box._invInertia00 *= box._rotFactor.x;
			box._invInertia01 *= box._rotFactor.x;
			box._invInertia02 *= box._rotFactor.x;
			box._invInertia10 *= box._rotFactor.y;
			box._invInertia11 *= box._rotFactor.y;
			box._invInertia12 *= box._rotFactor.y;
			box._invInertia20 *= box._rotFactor.z;
			box._invInertia21 *= box._rotFactor.z;
			box._invInertia22 *= box._rotFactor.z;
			var dst = box._ptransform;
			var src = box._transform;
			dst._positionX = src._positionX;
			dst._positionY = src._positionY;
			dst._positionZ = src._positionZ;
			dst._rotation00 = src._rotation00;
			dst._rotation01 = src._rotation01;
			dst._rotation02 = src._rotation02;
			dst._rotation10 = src._rotation10;
			dst._rotation11 = src._rotation11;
			dst._rotation12 = src._rotation12;
			dst._rotation20 = src._rotation20;
			dst._rotation21 = src._rotation21;
			dst._rotation22 = src._rotation22;
			var s = box._shapeList;
			while(s != null) {
				var n = s._next;
				var tf1 = box._ptransform;
				var tf2 = box._transform;
				var dst1 = s._ptransform;
				var src1 = s._localTransform;
				var __tmp__003;
				var __tmp__013;
				var __tmp__023;
				var __tmp__103;
				var __tmp__113;
				var __tmp__123;
				var __tmp__203;
				var __tmp__213;
				var __tmp__223;
				__tmp__003 = tf1._rotation00 * src1._rotation00 + tf1._rotation01 * src1._rotation10 + tf1._rotation02 * src1._rotation20;
				__tmp__013 = tf1._rotation00 * src1._rotation01 + tf1._rotation01 * src1._rotation11 + tf1._rotation02 * src1._rotation21;
				__tmp__023 = tf1._rotation00 * src1._rotation02 + tf1._rotation01 * src1._rotation12 + tf1._rotation02 * src1._rotation22;
				__tmp__103 = tf1._rotation10 * src1._rotation00 + tf1._rotation11 * src1._rotation10 + tf1._rotation12 * src1._rotation20;
				__tmp__113 = tf1._rotation10 * src1._rotation01 + tf1._rotation11 * src1._rotation11 + tf1._rotation12 * src1._rotation21;
				__tmp__123 = tf1._rotation10 * src1._rotation02 + tf1._rotation11 * src1._rotation12 + tf1._rotation12 * src1._rotation22;
				__tmp__203 = tf1._rotation20 * src1._rotation00 + tf1._rotation21 * src1._rotation10 + tf1._rotation22 * src1._rotation20;
				__tmp__213 = tf1._rotation20 * src1._rotation01 + tf1._rotation21 * src1._rotation11 + tf1._rotation22 * src1._rotation21;
				__tmp__223 = tf1._rotation20 * src1._rotation02 + tf1._rotation21 * src1._rotation12 + tf1._rotation22 * src1._rotation22;
				dst1._rotation00 = __tmp__003;
				dst1._rotation01 = __tmp__013;
				dst1._rotation02 = __tmp__023;
				dst1._rotation10 = __tmp__103;
				dst1._rotation11 = __tmp__113;
				dst1._rotation12 = __tmp__123;
				dst1._rotation20 = __tmp__203;
				dst1._rotation21 = __tmp__213;
				dst1._rotation22 = __tmp__223;
				var __tmp__X;
				var __tmp__Y;
				var __tmp__Z;
				__tmp__X = tf1._rotation00 * src1._positionX + tf1._rotation01 * src1._positionY + tf1._rotation02 * src1._positionZ;
				__tmp__Y = tf1._rotation10 * src1._positionX + tf1._rotation11 * src1._positionY + tf1._rotation12 * src1._positionZ;
				__tmp__Z = tf1._rotation20 * src1._positionX + tf1._rotation21 * src1._positionY + tf1._rotation22 * src1._positionZ;
				dst1._positionX = __tmp__X;
				dst1._positionY = __tmp__Y;
				dst1._positionZ = __tmp__Z;
				dst1._positionX += tf1._positionX;
				dst1._positionY += tf1._positionY;
				dst1._positionZ += tf1._positionZ;
				var dst2 = s._transform;
				var src11 = s._localTransform;
				var __tmp__004;
				var __tmp__014;
				var __tmp__024;
				var __tmp__104;
				var __tmp__114;
				var __tmp__124;
				var __tmp__204;
				var __tmp__214;
				var __tmp__224;
				__tmp__004 = tf2._rotation00 * src11._rotation00 + tf2._rotation01 * src11._rotation10 + tf2._rotation02 * src11._rotation20;
				__tmp__014 = tf2._rotation00 * src11._rotation01 + tf2._rotation01 * src11._rotation11 + tf2._rotation02 * src11._rotation21;
				__tmp__024 = tf2._rotation00 * src11._rotation02 + tf2._rotation01 * src11._rotation12 + tf2._rotation02 * src11._rotation22;
				__tmp__104 = tf2._rotation10 * src11._rotation00 + tf2._rotation11 * src11._rotation10 + tf2._rotation12 * src11._rotation20;
				__tmp__114 = tf2._rotation10 * src11._rotation01 + tf2._rotation11 * src11._rotation11 + tf2._rotation12 * src11._rotation21;
				__tmp__124 = tf2._rotation10 * src11._rotation02 + tf2._rotation11 * src11._rotation12 + tf2._rotation12 * src11._rotation22;
				__tmp__204 = tf2._rotation20 * src11._rotation00 + tf2._rotation21 * src11._rotation10 + tf2._rotation22 * src11._rotation20;
				__tmp__214 = tf2._rotation20 * src11._rotation01 + tf2._rotation21 * src11._rotation11 + tf2._rotation22 * src11._rotation21;
				__tmp__224 = tf2._rotation20 * src11._rotation02 + tf2._rotation21 * src11._rotation12 + tf2._rotation22 * src11._rotation22;
				dst2._rotation00 = __tmp__004;
				dst2._rotation01 = __tmp__014;
				dst2._rotation02 = __tmp__024;
				dst2._rotation10 = __tmp__104;
				dst2._rotation11 = __tmp__114;
				dst2._rotation12 = __tmp__124;
				dst2._rotation20 = __tmp__204;
				dst2._rotation21 = __tmp__214;
				dst2._rotation22 = __tmp__224;
				var __tmp__X1;
				var __tmp__Y1;
				var __tmp__Z1;
				__tmp__X1 = tf2._rotation00 * src11._positionX + tf2._rotation01 * src11._positionY + tf2._rotation02 * src11._positionZ;
				__tmp__Y1 = tf2._rotation10 * src11._positionX + tf2._rotation11 * src11._positionY + tf2._rotation12 * src11._positionZ;
				__tmp__Z1 = tf2._rotation20 * src11._positionX + tf2._rotation21 * src11._positionY + tf2._rotation22 * src11._positionZ;
				dst2._positionX = __tmp__X1;
				dst2._positionY = __tmp__Y1;
				dst2._positionZ = __tmp__Z1;
				dst2._positionX += tf2._positionX;
				dst2._positionY += tf2._positionY;
				dst2._positionZ += tf2._positionZ;
				var minX;
				var minY;
				var minZ;
				var maxX;
				var maxY;
				var maxZ;
				s._geom._computeAabb(s._aabb,s._ptransform);
				minX = s._aabb._minX;
				minY = s._aabb._minY;
				minZ = s._aabb._minZ;
				maxX = s._aabb._maxX;
				maxY = s._aabb._maxY;
				maxZ = s._aabb._maxZ;
				s._geom._computeAabb(s._aabb,s._transform);
				s._aabb._minX = minX < s._aabb._minX ? minX : s._aabb._minX;
				s._aabb._minY = minY < s._aabb._minY ? minY : s._aabb._minY;
				s._aabb._minZ = minZ < s._aabb._minZ ? minZ : s._aabb._minZ;
				s._aabb._maxX = maxX > s._aabb._maxX ? maxX : s._aabb._maxX;
				s._aabb._maxY = maxY > s._aabb._maxY ? maxY : s._aabb._maxY;
				s._aabb._maxZ = maxZ > s._aabb._maxZ ? maxZ : s._aabb._maxZ;
				if(s._proxy != null) {
					var dX;
					var dY;
					var dZ;
					dX = s._transform._positionX - s._ptransform._positionX;
					dY = s._transform._positionY - s._ptransform._positionY;
					dZ = s._transform._positionZ - s._ptransform._positionZ;
					var v = s.displacement;
					v.x = dX;
					v.y = dY;
					v.z = dZ;
					s._rigidBody._world._broadPhase.moveProxy(s._proxy,s._aabb,s.displacement);
				}
				s = n;
			}
			box._sleeping = false;
			box._sleepTime = 0;
		}
		demo_common_OimoUtil.addBox(world,new oimo_common_Vec3(0,0.1,2),new oimo_common_Vec3(3,0.1,1),true)._shapeList._restitution = 1.0;
		demo_common_OimoUtil.addSphere(world,new oimo_common_Vec3(-2.4000000000000004,3,2),0.25,false)._shapeList._restitution = 0.;
		demo_common_OimoUtil.addSphere(world,new oimo_common_Vec3(-1.6,3,2),0.25,false)._shapeList._restitution = 0.16666666666666666;
		demo_common_OimoUtil.addSphere(world,new oimo_common_Vec3(-0.8,3,2),0.25,false)._shapeList._restitution = 0.33333333333333331;
		demo_common_OimoUtil.addSphere(world,new oimo_common_Vec3(0.,3,2),0.25,false)._shapeList._restitution = 0.5;
		demo_common_OimoUtil.addSphere(world,new oimo_common_Vec3(0.8,3,2),0.25,false)._shapeList._restitution = 0.66666666666666663;
		demo_common_OimoUtil.addSphere(world,new oimo_common_Vec3(1.6,3,2),0.25,false)._shapeList._restitution = 0.83333333333333337;
		demo_common_OimoUtil.addSphere(world,new oimo_common_Vec3(2.4000000000000004,3,2),0.25,false)._shapeList._restitution = 1.;
	}
	,update: function() {
		demo_common_DemoBase.prototype.update.call(this);
		this.teleportRigidBodies(-20,10,5,5);
	}
	,__class__: demo_core_FrictionsAndRestitutions
});
var demo_core_GearsDemo = function() {
	demo_common_DemoBase.call(this,"Gears");
};
demo_core_GearsDemo.__name__ = true;
demo_core_GearsDemo.__super__ = demo_common_DemoBase;
demo_core_GearsDemo.prototype = $extend(demo_common_DemoBase.prototype,{
	init: function(world,renderer,input,viewInfo) {
		demo_common_DemoBase.prototype.init.call(this,world,renderer,input,viewInfo);
		var eye_x = 0;
		var eye_y = 6;
		var eye_z = 8;
		oimo_common_Vec3.numCreations++;
		oimo_common_Vec3.numCreations++;
		var up_x = 0;
		var up_y = 1;
		var up_z = 0;
		oimo_common_Vec3.numCreations++;
		var _this = renderer.viewMat;
		var zx = eye_x - 0;
		var zy = eye_y - 2;
		var zz = eye_z - 0;
		var tmp = 1 / Math.sqrt(zx * zx + zy * zy + zz * zz);
		zx *= tmp;
		zy *= tmp;
		zz *= tmp;
		var xx = up_y * zz - up_z * zy;
		var xy = up_z * zx - up_x * zz;
		var xz = up_x * zy - up_y * zx;
		tmp = 1 / Math.sqrt(xx * xx + xy * xy + xz * xz);
		xx *= tmp;
		xy *= tmp;
		xz *= tmp;
		var yx = zy * xz - zz * xy;
		var yy = zz * xx - zx * xz;
		var yz = zx * xy - zy * xx;
		_this.e00 = xx;
		_this.e01 = xy;
		_this.e02 = xz;
		_this.e03 = -(xx * eye_x + xy * eye_y + xz * eye_z);
		_this.e10 = yx;
		_this.e11 = yy;
		_this.e12 = yz;
		_this.e13 = -(yx * eye_x + yy * eye_y + yz * eye_z);
		_this.e20 = zx;
		_this.e21 = zy;
		_this.e22 = zz;
		_this.e23 = -(zx * eye_x + zy * eye_y + zz * eye_z);
		_this.e30 = 0;
		_this.e31 = 0;
		_this.e32 = 0;
		_this.e33 = 1;
		demo_common_OimoUtil.addBox(world,new oimo_common_Vec3(0,-0.2,0),new oimo_common_Vec3(4,0.2,1),true);
		this.createGear(new oimo_common_Vec3(1,3,0.5),1.0,0.3);
		this.createGear(new oimo_common_Vec3(3,3,0.5),1.0,0.3);
		this.createGear(new oimo_common_Vec3(-0.5,3,0),0.5,1.6);
		this.createGear(new oimo_common_Vec3(1.5,3,-0.5),1.5,0.3);
		this.createGear(new oimo_common_Vec3(-2,3,0),1.0,0.3,new oimo_dynamics_constraint_joint_RotationalLimitMotor().setMotor(3.14159265358979,50));
		this.createGear(new oimo_common_Vec3(-3.5,3,0),0.5,0.3);
		var _g = 0;
		while(_g < 20) {
			++_g;
			var _this = new oimo_common_Vec3(-1 + Math.random() * 2,-1 + Math.random() * 2,-1 + Math.random() * 2);
			_this.x *= 3;
			_this.y = _this.y;
			_this.z = _this.z;
			oimo_common_Vec3.numCreations++;
			_this.x += 0;
			_this.y += 6;
			_this.z += 0;
			demo_common_OimoUtil.addBox(world,_this,new oimo_common_Vec3(0.2,0.2,0.2),false);
		}
		var _g = 0;
		while(_g < 20) {
			++_g;
			var _this = new oimo_common_Vec3(-1 + Math.random() * 2,-1 + Math.random() * 2,-1 + Math.random() * 2);
			_this.x *= 3;
			_this.y = _this.y;
			_this.z = _this.z;
			oimo_common_Vec3.numCreations++;
			_this.x += 0;
			_this.y += 6;
			_this.z += 0;
			demo_common_OimoUtil.addSphere(world,_this,0.3,false);
		}
	}
	,createGear: function(center,radius,thickness,lm) {
		var numTeeth = Math.round(6.28318530717958 * radius / 0.4) + 1;
		if(numTeeth % 2 == 0) {
			--numTeeth;
		}
		if(numTeeth < 2) {
			numTeeth = 2;
		}
		var toothPos = new oimo_common_Vec3(radius - 0.066666666666666666,0,0);
		var toothRot = new oimo_common_Mat3();
		var dtoothRot_e00 = 1;
		var dtoothRot_e01 = 0;
		var dtoothRot_e02 = 0;
		var dtoothRot_e10 = 0;
		var dtoothRot_e11 = 1;
		var dtoothRot_e12 = 0;
		var dtoothRot_e20 = 0;
		var dtoothRot_e21 = 0;
		var dtoothRot_e22 = 1;
		oimo_common_Mat3.numCreations++;
		var rad = 6.28318530717958 / numTeeth;
		var s = Math.sin(rad);
		var c = Math.cos(rad);
		var c1 = 1 - c;
		var r00 = 0 * c1 + c;
		var r01 = 0 * c1 - 0 * s;
		var r02 = 0 * c1 + s;
		var r10 = 0 * c1 + 0 * s;
		var r11 = c1 + c;
		var r12 = 0 * c1 - 0 * s;
		var r20 = 0 * c1 - s;
		var r21 = 0 * c1 + 0 * s;
		var r22 = 0 * c1 + c;
		var e00 = dtoothRot_e00 * r00 + dtoothRot_e01 * r10 + dtoothRot_e02 * r20;
		var e01 = dtoothRot_e00 * r01 + dtoothRot_e01 * r11 + dtoothRot_e02 * r21;
		var e02 = dtoothRot_e00 * r02 + dtoothRot_e01 * r12 + dtoothRot_e02 * r22;
		var e10 = dtoothRot_e10 * r00 + dtoothRot_e11 * r10 + dtoothRot_e12 * r20;
		var e11 = dtoothRot_e10 * r01 + dtoothRot_e11 * r11 + dtoothRot_e12 * r21;
		var e12 = dtoothRot_e10 * r02 + dtoothRot_e11 * r12 + dtoothRot_e12 * r22;
		var e20 = dtoothRot_e20 * r00 + dtoothRot_e21 * r10 + dtoothRot_e22 * r20;
		var e21 = dtoothRot_e20 * r01 + dtoothRot_e21 * r11 + dtoothRot_e22 * r21;
		var e22 = dtoothRot_e20 * r02 + dtoothRot_e21 * r12 + dtoothRot_e22 * r22;
		dtoothRot_e00 = e00;
		dtoothRot_e01 = e01;
		dtoothRot_e02 = e02;
		dtoothRot_e10 = e10;
		dtoothRot_e11 = e11;
		dtoothRot_e12 = e12;
		dtoothRot_e20 = e20;
		dtoothRot_e21 = e21;
		dtoothRot_e22 = e22;
		var toothGeom = this.createGearTooth(0.13333333333333333,thickness * 0.5,0.13333333333333333);
		var toothSc = new oimo_dynamics_rigidbody_ShapeConfig();
		toothSc.restitution = 0;
		toothSc.geometry = toothGeom;
		var wheel = demo_common_OimoUtil.addCylinder(this.world,center,radius - 0.13333333333333333,thickness * 0.48,false);
		var _g = 0;
		var _g1 = numTeeth;
		while(_g < _g1) {
			++_g;
			toothSc.position = toothPos;
			toothSc.rotation = toothRot;
			wheel.addShape(new oimo_dynamics_rigidbody_Shape(toothSc));
			var y = toothPos.x * e10 + toothPos.y * e11 + toothPos.z * e12;
			var z = toothPos.x * e20 + toothPos.y * e21 + toothPos.z * e22;
			toothPos.x = toothPos.x * e00 + toothPos.y * e01 + toothPos.z * e02;
			toothPos.y = y;
			toothPos.z = z;
			var e011 = toothRot.e00 * e01 + toothRot.e01 * e11 + toothRot.e02 * e21;
			var e021 = toothRot.e00 * e02 + toothRot.e01 * e12 + toothRot.e02 * e22;
			var e111 = toothRot.e10 * e01 + toothRot.e11 * e11 + toothRot.e12 * e21;
			var e121 = toothRot.e10 * e02 + toothRot.e11 * e12 + toothRot.e12 * e22;
			var e211 = toothRot.e20 * e01 + toothRot.e21 * e11 + toothRot.e22 * e21;
			var e221 = toothRot.e20 * e02 + toothRot.e21 * e12 + toothRot.e22 * e22;
			toothRot.e00 = toothRot.e00 * e00 + toothRot.e01 * e10 + toothRot.e02 * e20;
			toothRot.e01 = e011;
			toothRot.e02 = e021;
			toothRot.e10 = toothRot.e10 * e00 + toothRot.e11 * e10 + toothRot.e12 * e20;
			toothRot.e11 = e111;
			toothRot.e12 = e121;
			toothRot.e20 = toothRot.e20 * e00 + toothRot.e21 * e10 + toothRot.e22 * e20;
			toothRot.e21 = e211;
			toothRot.e22 = e221;
		}
		var m_e00 = 1;
		var m_e01 = 0;
		var m_e02 = 0;
		var m_e10 = 0;
		var m_e11 = 1;
		var m_e12 = 0;
		var m_e20 = 0;
		var m_e21 = 0;
		var m_e22 = 1;
		oimo_common_Mat3.numCreations++;
		var s = Math.sin(1.570796326794895);
		var c = Math.cos(1.570796326794895);
		var c1 = 1 - c;
		var r00 = c1 + c;
		var r01 = 0 * c1 - 0 * s;
		var r02 = 0 * c1 + 0 * s;
		var r10 = 0 * c1 + 0 * s;
		var r11 = 0 * c1 + c;
		var r12 = 0 * c1 - s;
		var r20 = 0 * c1 - 0 * s;
		var r21 = 0 * c1 + s;
		var r22 = 0 * c1 + c;
		var e00 = m_e00 * r00 + m_e01 * r10 + m_e02 * r20;
		var e01 = m_e00 * r01 + m_e01 * r11 + m_e02 * r21;
		var e02 = m_e00 * r02 + m_e01 * r12 + m_e02 * r22;
		var e10 = m_e10 * r00 + m_e11 * r10 + m_e12 * r20;
		var e11 = m_e10 * r01 + m_e11 * r11 + m_e12 * r21;
		var e12 = m_e10 * r02 + m_e11 * r12 + m_e12 * r22;
		var e20 = m_e20 * r00 + m_e21 * r10 + m_e22 * r20;
		var e21 = m_e20 * r01 + m_e21 * r11 + m_e22 * r21;
		var e22 = m_e20 * r02 + m_e21 * r12 + m_e22 * r22;
		m_e00 = e00;
		m_e01 = e01;
		m_e02 = e02;
		m_e10 = e10;
		m_e11 = e11;
		m_e12 = e12;
		m_e20 = e20;
		m_e21 = e21;
		m_e22 = e22;
		var rot00;
		var rot01;
		var rot02;
		var rot10;
		var rot11;
		var rot12;
		var rot20;
		var rot21;
		var rot22;
		rot00 = e00;
		rot01 = e01;
		rot02 = e02;
		rot10 = e10;
		rot11 = e11;
		rot12 = e12;
		rot20 = e20;
		rot21 = e21;
		rot22 = e22;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = rot00 * wheel._transform._rotation00 + rot01 * wheel._transform._rotation10 + rot02 * wheel._transform._rotation20;
		__tmp__01 = rot00 * wheel._transform._rotation01 + rot01 * wheel._transform._rotation11 + rot02 * wheel._transform._rotation21;
		__tmp__02 = rot00 * wheel._transform._rotation02 + rot01 * wheel._transform._rotation12 + rot02 * wheel._transform._rotation22;
		__tmp__10 = rot10 * wheel._transform._rotation00 + rot11 * wheel._transform._rotation10 + rot12 * wheel._transform._rotation20;
		__tmp__11 = rot10 * wheel._transform._rotation01 + rot11 * wheel._transform._rotation11 + rot12 * wheel._transform._rotation21;
		__tmp__12 = rot10 * wheel._transform._rotation02 + rot11 * wheel._transform._rotation12 + rot12 * wheel._transform._rotation22;
		__tmp__20 = rot20 * wheel._transform._rotation00 + rot21 * wheel._transform._rotation10 + rot22 * wheel._transform._rotation20;
		__tmp__21 = rot20 * wheel._transform._rotation01 + rot21 * wheel._transform._rotation11 + rot22 * wheel._transform._rotation21;
		__tmp__22 = rot20 * wheel._transform._rotation02 + rot21 * wheel._transform._rotation12 + rot22 * wheel._transform._rotation22;
		wheel._transform._rotation00 = __tmp__00;
		wheel._transform._rotation01 = __tmp__01;
		wheel._transform._rotation02 = __tmp__02;
		wheel._transform._rotation10 = __tmp__10;
		wheel._transform._rotation11 = __tmp__11;
		wheel._transform._rotation12 = __tmp__12;
		wheel._transform._rotation20 = __tmp__20;
		wheel._transform._rotation21 = __tmp__21;
		wheel._transform._rotation22 = __tmp__22;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = wheel._transform._rotation00 * wheel._invLocalInertia00 + wheel._transform._rotation01 * wheel._invLocalInertia10 + wheel._transform._rotation02 * wheel._invLocalInertia20;
		__tmp__01 = wheel._transform._rotation00 * wheel._invLocalInertia01 + wheel._transform._rotation01 * wheel._invLocalInertia11 + wheel._transform._rotation02 * wheel._invLocalInertia21;
		__tmp__02 = wheel._transform._rotation00 * wheel._invLocalInertia02 + wheel._transform._rotation01 * wheel._invLocalInertia12 + wheel._transform._rotation02 * wheel._invLocalInertia22;
		__tmp__10 = wheel._transform._rotation10 * wheel._invLocalInertia00 + wheel._transform._rotation11 * wheel._invLocalInertia10 + wheel._transform._rotation12 * wheel._invLocalInertia20;
		__tmp__11 = wheel._transform._rotation10 * wheel._invLocalInertia01 + wheel._transform._rotation11 * wheel._invLocalInertia11 + wheel._transform._rotation12 * wheel._invLocalInertia21;
		__tmp__12 = wheel._transform._rotation10 * wheel._invLocalInertia02 + wheel._transform._rotation11 * wheel._invLocalInertia12 + wheel._transform._rotation12 * wheel._invLocalInertia22;
		__tmp__20 = wheel._transform._rotation20 * wheel._invLocalInertia00 + wheel._transform._rotation21 * wheel._invLocalInertia10 + wheel._transform._rotation22 * wheel._invLocalInertia20;
		__tmp__21 = wheel._transform._rotation20 * wheel._invLocalInertia01 + wheel._transform._rotation21 * wheel._invLocalInertia11 + wheel._transform._rotation22 * wheel._invLocalInertia21;
		__tmp__22 = wheel._transform._rotation20 * wheel._invLocalInertia02 + wheel._transform._rotation21 * wheel._invLocalInertia12 + wheel._transform._rotation22 * wheel._invLocalInertia22;
		wheel._invInertia00 = __tmp__00;
		wheel._invInertia01 = __tmp__01;
		wheel._invInertia02 = __tmp__02;
		wheel._invInertia10 = __tmp__10;
		wheel._invInertia11 = __tmp__11;
		wheel._invInertia12 = __tmp__12;
		wheel._invInertia20 = __tmp__20;
		wheel._invInertia21 = __tmp__21;
		wheel._invInertia22 = __tmp__22;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = wheel._invInertia00 * wheel._transform._rotation00 + wheel._invInertia01 * wheel._transform._rotation01 + wheel._invInertia02 * wheel._transform._rotation02;
		__tmp__01 = wheel._invInertia00 * wheel._transform._rotation10 + wheel._invInertia01 * wheel._transform._rotation11 + wheel._invInertia02 * wheel._transform._rotation12;
		__tmp__02 = wheel._invInertia00 * wheel._transform._rotation20 + wheel._invInertia01 * wheel._transform._rotation21 + wheel._invInertia02 * wheel._transform._rotation22;
		__tmp__10 = wheel._invInertia10 * wheel._transform._rotation00 + wheel._invInertia11 * wheel._transform._rotation01 + wheel._invInertia12 * wheel._transform._rotation02;
		__tmp__11 = wheel._invInertia10 * wheel._transform._rotation10 + wheel._invInertia11 * wheel._transform._rotation11 + wheel._invInertia12 * wheel._transform._rotation12;
		__tmp__12 = wheel._invInertia10 * wheel._transform._rotation20 + wheel._invInertia11 * wheel._transform._rotation21 + wheel._invInertia12 * wheel._transform._rotation22;
		__tmp__20 = wheel._invInertia20 * wheel._transform._rotation00 + wheel._invInertia21 * wheel._transform._rotation01 + wheel._invInertia22 * wheel._transform._rotation02;
		__tmp__21 = wheel._invInertia20 * wheel._transform._rotation10 + wheel._invInertia21 * wheel._transform._rotation11 + wheel._invInertia22 * wheel._transform._rotation12;
		__tmp__22 = wheel._invInertia20 * wheel._transform._rotation20 + wheel._invInertia21 * wheel._transform._rotation21 + wheel._invInertia22 * wheel._transform._rotation22;
		wheel._invInertia00 = __tmp__00;
		wheel._invInertia01 = __tmp__01;
		wheel._invInertia02 = __tmp__02;
		wheel._invInertia10 = __tmp__10;
		wheel._invInertia11 = __tmp__11;
		wheel._invInertia12 = __tmp__12;
		wheel._invInertia20 = __tmp__20;
		wheel._invInertia21 = __tmp__21;
		wheel._invInertia22 = __tmp__22;
		wheel._invInertia00 *= wheel._rotFactor.x;
		wheel._invInertia01 *= wheel._rotFactor.x;
		wheel._invInertia02 *= wheel._rotFactor.x;
		wheel._invInertia10 *= wheel._rotFactor.y;
		wheel._invInertia11 *= wheel._rotFactor.y;
		wheel._invInertia12 *= wheel._rotFactor.y;
		wheel._invInertia20 *= wheel._rotFactor.z;
		wheel._invInertia21 *= wheel._rotFactor.z;
		wheel._invInertia22 *= wheel._rotFactor.z;
		var dst = wheel._ptransform;
		var src = wheel._transform;
		dst._positionX = src._positionX;
		dst._positionY = src._positionY;
		dst._positionZ = src._positionZ;
		dst._rotation00 = src._rotation00;
		dst._rotation01 = src._rotation01;
		dst._rotation02 = src._rotation02;
		dst._rotation10 = src._rotation10;
		dst._rotation11 = src._rotation11;
		dst._rotation12 = src._rotation12;
		dst._rotation20 = src._rotation20;
		dst._rotation21 = src._rotation21;
		dst._rotation22 = src._rotation22;
		var s = wheel._shapeList;
		while(s != null) {
			var n = s._next;
			var tf1 = wheel._ptransform;
			var tf2 = wheel._transform;
			var dst = s._ptransform;
			var src1 = s._localTransform;
			var __tmp__00;
			var __tmp__01;
			var __tmp__02;
			var __tmp__10;
			var __tmp__11;
			var __tmp__12;
			var __tmp__20;
			var __tmp__21;
			var __tmp__22;
			__tmp__00 = tf1._rotation00 * src1._rotation00 + tf1._rotation01 * src1._rotation10 + tf1._rotation02 * src1._rotation20;
			__tmp__01 = tf1._rotation00 * src1._rotation01 + tf1._rotation01 * src1._rotation11 + tf1._rotation02 * src1._rotation21;
			__tmp__02 = tf1._rotation00 * src1._rotation02 + tf1._rotation01 * src1._rotation12 + tf1._rotation02 * src1._rotation22;
			__tmp__10 = tf1._rotation10 * src1._rotation00 + tf1._rotation11 * src1._rotation10 + tf1._rotation12 * src1._rotation20;
			__tmp__11 = tf1._rotation10 * src1._rotation01 + tf1._rotation11 * src1._rotation11 + tf1._rotation12 * src1._rotation21;
			__tmp__12 = tf1._rotation10 * src1._rotation02 + tf1._rotation11 * src1._rotation12 + tf1._rotation12 * src1._rotation22;
			__tmp__20 = tf1._rotation20 * src1._rotation00 + tf1._rotation21 * src1._rotation10 + tf1._rotation22 * src1._rotation20;
			__tmp__21 = tf1._rotation20 * src1._rotation01 + tf1._rotation21 * src1._rotation11 + tf1._rotation22 * src1._rotation21;
			__tmp__22 = tf1._rotation20 * src1._rotation02 + tf1._rotation21 * src1._rotation12 + tf1._rotation22 * src1._rotation22;
			dst._rotation00 = __tmp__00;
			dst._rotation01 = __tmp__01;
			dst._rotation02 = __tmp__02;
			dst._rotation10 = __tmp__10;
			dst._rotation11 = __tmp__11;
			dst._rotation12 = __tmp__12;
			dst._rotation20 = __tmp__20;
			dst._rotation21 = __tmp__21;
			dst._rotation22 = __tmp__22;
			var __tmp__X;
			var __tmp__Y;
			var __tmp__Z;
			__tmp__X = tf1._rotation00 * src1._positionX + tf1._rotation01 * src1._positionY + tf1._rotation02 * src1._positionZ;
			__tmp__Y = tf1._rotation10 * src1._positionX + tf1._rotation11 * src1._positionY + tf1._rotation12 * src1._positionZ;
			__tmp__Z = tf1._rotation20 * src1._positionX + tf1._rotation21 * src1._positionY + tf1._rotation22 * src1._positionZ;
			dst._positionX = __tmp__X;
			dst._positionY = __tmp__Y;
			dst._positionZ = __tmp__Z;
			dst._positionX += tf1._positionX;
			dst._positionY += tf1._positionY;
			dst._positionZ += tf1._positionZ;
			var dst1 = s._transform;
			var src11 = s._localTransform;
			var __tmp__001;
			var __tmp__011;
			var __tmp__021;
			var __tmp__101;
			var __tmp__111;
			var __tmp__121;
			var __tmp__201;
			var __tmp__211;
			var __tmp__221;
			__tmp__001 = tf2._rotation00 * src11._rotation00 + tf2._rotation01 * src11._rotation10 + tf2._rotation02 * src11._rotation20;
			__tmp__011 = tf2._rotation00 * src11._rotation01 + tf2._rotation01 * src11._rotation11 + tf2._rotation02 * src11._rotation21;
			__tmp__021 = tf2._rotation00 * src11._rotation02 + tf2._rotation01 * src11._rotation12 + tf2._rotation02 * src11._rotation22;
			__tmp__101 = tf2._rotation10 * src11._rotation00 + tf2._rotation11 * src11._rotation10 + tf2._rotation12 * src11._rotation20;
			__tmp__111 = tf2._rotation10 * src11._rotation01 + tf2._rotation11 * src11._rotation11 + tf2._rotation12 * src11._rotation21;
			__tmp__121 = tf2._rotation10 * src11._rotation02 + tf2._rotation11 * src11._rotation12 + tf2._rotation12 * src11._rotation22;
			__tmp__201 = tf2._rotation20 * src11._rotation00 + tf2._rotation21 * src11._rotation10 + tf2._rotation22 * src11._rotation20;
			__tmp__211 = tf2._rotation20 * src11._rotation01 + tf2._rotation21 * src11._rotation11 + tf2._rotation22 * src11._rotation21;
			__tmp__221 = tf2._rotation20 * src11._rotation02 + tf2._rotation21 * src11._rotation12 + tf2._rotation22 * src11._rotation22;
			dst1._rotation00 = __tmp__001;
			dst1._rotation01 = __tmp__011;
			dst1._rotation02 = __tmp__021;
			dst1._rotation10 = __tmp__101;
			dst1._rotation11 = __tmp__111;
			dst1._rotation12 = __tmp__121;
			dst1._rotation20 = __tmp__201;
			dst1._rotation21 = __tmp__211;
			dst1._rotation22 = __tmp__221;
			var __tmp__X1;
			var __tmp__Y1;
			var __tmp__Z1;
			__tmp__X1 = tf2._rotation00 * src11._positionX + tf2._rotation01 * src11._positionY + tf2._rotation02 * src11._positionZ;
			__tmp__Y1 = tf2._rotation10 * src11._positionX + tf2._rotation11 * src11._positionY + tf2._rotation12 * src11._positionZ;
			__tmp__Z1 = tf2._rotation20 * src11._positionX + tf2._rotation21 * src11._positionY + tf2._rotation22 * src11._positionZ;
			dst1._positionX = __tmp__X1;
			dst1._positionY = __tmp__Y1;
			dst1._positionZ = __tmp__Z1;
			dst1._positionX += tf2._positionX;
			dst1._positionY += tf2._positionY;
			dst1._positionZ += tf2._positionZ;
			var minX;
			var minY;
			var minZ;
			var maxX;
			var maxY;
			var maxZ;
			s._geom._computeAabb(s._aabb,s._ptransform);
			minX = s._aabb._minX;
			minY = s._aabb._minY;
			minZ = s._aabb._minZ;
			maxX = s._aabb._maxX;
			maxY = s._aabb._maxY;
			maxZ = s._aabb._maxZ;
			s._geom._computeAabb(s._aabb,s._transform);
			s._aabb._minX = minX < s._aabb._minX ? minX : s._aabb._minX;
			s._aabb._minY = minY < s._aabb._minY ? minY : s._aabb._minY;
			s._aabb._minZ = minZ < s._aabb._minZ ? minZ : s._aabb._minZ;
			s._aabb._maxX = maxX > s._aabb._maxX ? maxX : s._aabb._maxX;
			s._aabb._maxY = maxY > s._aabb._maxY ? maxY : s._aabb._maxY;
			s._aabb._maxZ = maxZ > s._aabb._maxZ ? maxZ : s._aabb._maxZ;
			if(s._proxy != null) {
				var dX;
				var dY;
				var dZ;
				dX = s._transform._positionX - s._ptransform._positionX;
				dY = s._transform._positionY - s._ptransform._positionY;
				dZ = s._transform._positionZ - s._ptransform._positionZ;
				var v = s.displacement;
				v.x = dX;
				v.y = dY;
				v.z = dZ;
				s._rigidBody._world._broadPhase.moveProxy(s._proxy,s._aabb,s.displacement);
			}
			s = n;
		}
		wheel._sleeping = false;
		wheel._sleepTime = 0;
		var fixture = demo_common_OimoUtil.addCylinder(this.world,center,0.1,thickness * 0.52,true);
		var m_e00 = 1;
		var m_e01 = 0;
		var m_e02 = 0;
		var m_e10 = 0;
		var m_e11 = 1;
		var m_e12 = 0;
		var m_e20 = 0;
		var m_e21 = 0;
		var m_e22 = 1;
		oimo_common_Mat3.numCreations++;
		var s = Math.sin(1.570796326794895);
		var c = Math.cos(1.570796326794895);
		var c1 = 1 - c;
		var r00 = c1 + c;
		var r01 = 0 * c1 - 0 * s;
		var r02 = 0 * c1 + 0 * s;
		var r10 = 0 * c1 + 0 * s;
		var r11 = 0 * c1 + c;
		var r12 = 0 * c1 - s;
		var r20 = 0 * c1 - 0 * s;
		var r21 = 0 * c1 + s;
		var r22 = 0 * c1 + c;
		var e00 = m_e00 * r00 + m_e01 * r10 + m_e02 * r20;
		var e01 = m_e00 * r01 + m_e01 * r11 + m_e02 * r21;
		var e02 = m_e00 * r02 + m_e01 * r12 + m_e02 * r22;
		var e10 = m_e10 * r00 + m_e11 * r10 + m_e12 * r20;
		var e11 = m_e10 * r01 + m_e11 * r11 + m_e12 * r21;
		var e12 = m_e10 * r02 + m_e11 * r12 + m_e12 * r22;
		var e20 = m_e20 * r00 + m_e21 * r10 + m_e22 * r20;
		var e21 = m_e20 * r01 + m_e21 * r11 + m_e22 * r21;
		var e22 = m_e20 * r02 + m_e21 * r12 + m_e22 * r22;
		m_e00 = e00;
		m_e01 = e01;
		m_e02 = e02;
		m_e10 = e10;
		m_e11 = e11;
		m_e12 = e12;
		m_e20 = e20;
		m_e21 = e21;
		m_e22 = e22;
		var rot00;
		var rot01;
		var rot02;
		var rot10;
		var rot11;
		var rot12;
		var rot20;
		var rot21;
		var rot22;
		rot00 = e00;
		rot01 = e01;
		rot02 = e02;
		rot10 = e10;
		rot11 = e11;
		rot12 = e12;
		rot20 = e20;
		rot21 = e21;
		rot22 = e22;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = rot00 * fixture._transform._rotation00 + rot01 * fixture._transform._rotation10 + rot02 * fixture._transform._rotation20;
		__tmp__01 = rot00 * fixture._transform._rotation01 + rot01 * fixture._transform._rotation11 + rot02 * fixture._transform._rotation21;
		__tmp__02 = rot00 * fixture._transform._rotation02 + rot01 * fixture._transform._rotation12 + rot02 * fixture._transform._rotation22;
		__tmp__10 = rot10 * fixture._transform._rotation00 + rot11 * fixture._transform._rotation10 + rot12 * fixture._transform._rotation20;
		__tmp__11 = rot10 * fixture._transform._rotation01 + rot11 * fixture._transform._rotation11 + rot12 * fixture._transform._rotation21;
		__tmp__12 = rot10 * fixture._transform._rotation02 + rot11 * fixture._transform._rotation12 + rot12 * fixture._transform._rotation22;
		__tmp__20 = rot20 * fixture._transform._rotation00 + rot21 * fixture._transform._rotation10 + rot22 * fixture._transform._rotation20;
		__tmp__21 = rot20 * fixture._transform._rotation01 + rot21 * fixture._transform._rotation11 + rot22 * fixture._transform._rotation21;
		__tmp__22 = rot20 * fixture._transform._rotation02 + rot21 * fixture._transform._rotation12 + rot22 * fixture._transform._rotation22;
		fixture._transform._rotation00 = __tmp__00;
		fixture._transform._rotation01 = __tmp__01;
		fixture._transform._rotation02 = __tmp__02;
		fixture._transform._rotation10 = __tmp__10;
		fixture._transform._rotation11 = __tmp__11;
		fixture._transform._rotation12 = __tmp__12;
		fixture._transform._rotation20 = __tmp__20;
		fixture._transform._rotation21 = __tmp__21;
		fixture._transform._rotation22 = __tmp__22;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = fixture._transform._rotation00 * fixture._invLocalInertia00 + fixture._transform._rotation01 * fixture._invLocalInertia10 + fixture._transform._rotation02 * fixture._invLocalInertia20;
		__tmp__01 = fixture._transform._rotation00 * fixture._invLocalInertia01 + fixture._transform._rotation01 * fixture._invLocalInertia11 + fixture._transform._rotation02 * fixture._invLocalInertia21;
		__tmp__02 = fixture._transform._rotation00 * fixture._invLocalInertia02 + fixture._transform._rotation01 * fixture._invLocalInertia12 + fixture._transform._rotation02 * fixture._invLocalInertia22;
		__tmp__10 = fixture._transform._rotation10 * fixture._invLocalInertia00 + fixture._transform._rotation11 * fixture._invLocalInertia10 + fixture._transform._rotation12 * fixture._invLocalInertia20;
		__tmp__11 = fixture._transform._rotation10 * fixture._invLocalInertia01 + fixture._transform._rotation11 * fixture._invLocalInertia11 + fixture._transform._rotation12 * fixture._invLocalInertia21;
		__tmp__12 = fixture._transform._rotation10 * fixture._invLocalInertia02 + fixture._transform._rotation11 * fixture._invLocalInertia12 + fixture._transform._rotation12 * fixture._invLocalInertia22;
		__tmp__20 = fixture._transform._rotation20 * fixture._invLocalInertia00 + fixture._transform._rotation21 * fixture._invLocalInertia10 + fixture._transform._rotation22 * fixture._invLocalInertia20;
		__tmp__21 = fixture._transform._rotation20 * fixture._invLocalInertia01 + fixture._transform._rotation21 * fixture._invLocalInertia11 + fixture._transform._rotation22 * fixture._invLocalInertia21;
		__tmp__22 = fixture._transform._rotation20 * fixture._invLocalInertia02 + fixture._transform._rotation21 * fixture._invLocalInertia12 + fixture._transform._rotation22 * fixture._invLocalInertia22;
		fixture._invInertia00 = __tmp__00;
		fixture._invInertia01 = __tmp__01;
		fixture._invInertia02 = __tmp__02;
		fixture._invInertia10 = __tmp__10;
		fixture._invInertia11 = __tmp__11;
		fixture._invInertia12 = __tmp__12;
		fixture._invInertia20 = __tmp__20;
		fixture._invInertia21 = __tmp__21;
		fixture._invInertia22 = __tmp__22;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = fixture._invInertia00 * fixture._transform._rotation00 + fixture._invInertia01 * fixture._transform._rotation01 + fixture._invInertia02 * fixture._transform._rotation02;
		__tmp__01 = fixture._invInertia00 * fixture._transform._rotation10 + fixture._invInertia01 * fixture._transform._rotation11 + fixture._invInertia02 * fixture._transform._rotation12;
		__tmp__02 = fixture._invInertia00 * fixture._transform._rotation20 + fixture._invInertia01 * fixture._transform._rotation21 + fixture._invInertia02 * fixture._transform._rotation22;
		__tmp__10 = fixture._invInertia10 * fixture._transform._rotation00 + fixture._invInertia11 * fixture._transform._rotation01 + fixture._invInertia12 * fixture._transform._rotation02;
		__tmp__11 = fixture._invInertia10 * fixture._transform._rotation10 + fixture._invInertia11 * fixture._transform._rotation11 + fixture._invInertia12 * fixture._transform._rotation12;
		__tmp__12 = fixture._invInertia10 * fixture._transform._rotation20 + fixture._invInertia11 * fixture._transform._rotation21 + fixture._invInertia12 * fixture._transform._rotation22;
		__tmp__20 = fixture._invInertia20 * fixture._transform._rotation00 + fixture._invInertia21 * fixture._transform._rotation01 + fixture._invInertia22 * fixture._transform._rotation02;
		__tmp__21 = fixture._invInertia20 * fixture._transform._rotation10 + fixture._invInertia21 * fixture._transform._rotation11 + fixture._invInertia22 * fixture._transform._rotation12;
		__tmp__22 = fixture._invInertia20 * fixture._transform._rotation20 + fixture._invInertia21 * fixture._transform._rotation21 + fixture._invInertia22 * fixture._transform._rotation22;
		fixture._invInertia00 = __tmp__00;
		fixture._invInertia01 = __tmp__01;
		fixture._invInertia02 = __tmp__02;
		fixture._invInertia10 = __tmp__10;
		fixture._invInertia11 = __tmp__11;
		fixture._invInertia12 = __tmp__12;
		fixture._invInertia20 = __tmp__20;
		fixture._invInertia21 = __tmp__21;
		fixture._invInertia22 = __tmp__22;
		fixture._invInertia00 *= fixture._rotFactor.x;
		fixture._invInertia01 *= fixture._rotFactor.x;
		fixture._invInertia02 *= fixture._rotFactor.x;
		fixture._invInertia10 *= fixture._rotFactor.y;
		fixture._invInertia11 *= fixture._rotFactor.y;
		fixture._invInertia12 *= fixture._rotFactor.y;
		fixture._invInertia20 *= fixture._rotFactor.z;
		fixture._invInertia21 *= fixture._rotFactor.z;
		fixture._invInertia22 *= fixture._rotFactor.z;
		var dst = fixture._ptransform;
		var src = fixture._transform;
		dst._positionX = src._positionX;
		dst._positionY = src._positionY;
		dst._positionZ = src._positionZ;
		dst._rotation00 = src._rotation00;
		dst._rotation01 = src._rotation01;
		dst._rotation02 = src._rotation02;
		dst._rotation10 = src._rotation10;
		dst._rotation11 = src._rotation11;
		dst._rotation12 = src._rotation12;
		dst._rotation20 = src._rotation20;
		dst._rotation21 = src._rotation21;
		dst._rotation22 = src._rotation22;
		var s = fixture._shapeList;
		while(s != null) {
			var n = s._next;
			var tf1 = fixture._ptransform;
			var tf2 = fixture._transform;
			var dst = s._ptransform;
			var src1 = s._localTransform;
			var __tmp__00;
			var __tmp__01;
			var __tmp__02;
			var __tmp__10;
			var __tmp__11;
			var __tmp__12;
			var __tmp__20;
			var __tmp__21;
			var __tmp__22;
			__tmp__00 = tf1._rotation00 * src1._rotation00 + tf1._rotation01 * src1._rotation10 + tf1._rotation02 * src1._rotation20;
			__tmp__01 = tf1._rotation00 * src1._rotation01 + tf1._rotation01 * src1._rotation11 + tf1._rotation02 * src1._rotation21;
			__tmp__02 = tf1._rotation00 * src1._rotation02 + tf1._rotation01 * src1._rotation12 + tf1._rotation02 * src1._rotation22;
			__tmp__10 = tf1._rotation10 * src1._rotation00 + tf1._rotation11 * src1._rotation10 + tf1._rotation12 * src1._rotation20;
			__tmp__11 = tf1._rotation10 * src1._rotation01 + tf1._rotation11 * src1._rotation11 + tf1._rotation12 * src1._rotation21;
			__tmp__12 = tf1._rotation10 * src1._rotation02 + tf1._rotation11 * src1._rotation12 + tf1._rotation12 * src1._rotation22;
			__tmp__20 = tf1._rotation20 * src1._rotation00 + tf1._rotation21 * src1._rotation10 + tf1._rotation22 * src1._rotation20;
			__tmp__21 = tf1._rotation20 * src1._rotation01 + tf1._rotation21 * src1._rotation11 + tf1._rotation22 * src1._rotation21;
			__tmp__22 = tf1._rotation20 * src1._rotation02 + tf1._rotation21 * src1._rotation12 + tf1._rotation22 * src1._rotation22;
			dst._rotation00 = __tmp__00;
			dst._rotation01 = __tmp__01;
			dst._rotation02 = __tmp__02;
			dst._rotation10 = __tmp__10;
			dst._rotation11 = __tmp__11;
			dst._rotation12 = __tmp__12;
			dst._rotation20 = __tmp__20;
			dst._rotation21 = __tmp__21;
			dst._rotation22 = __tmp__22;
			var __tmp__X;
			var __tmp__Y;
			var __tmp__Z;
			__tmp__X = tf1._rotation00 * src1._positionX + tf1._rotation01 * src1._positionY + tf1._rotation02 * src1._positionZ;
			__tmp__Y = tf1._rotation10 * src1._positionX + tf1._rotation11 * src1._positionY + tf1._rotation12 * src1._positionZ;
			__tmp__Z = tf1._rotation20 * src1._positionX + tf1._rotation21 * src1._positionY + tf1._rotation22 * src1._positionZ;
			dst._positionX = __tmp__X;
			dst._positionY = __tmp__Y;
			dst._positionZ = __tmp__Z;
			dst._positionX += tf1._positionX;
			dst._positionY += tf1._positionY;
			dst._positionZ += tf1._positionZ;
			var dst1 = s._transform;
			var src11 = s._localTransform;
			var __tmp__001;
			var __tmp__011;
			var __tmp__021;
			var __tmp__101;
			var __tmp__111;
			var __tmp__121;
			var __tmp__201;
			var __tmp__211;
			var __tmp__221;
			__tmp__001 = tf2._rotation00 * src11._rotation00 + tf2._rotation01 * src11._rotation10 + tf2._rotation02 * src11._rotation20;
			__tmp__011 = tf2._rotation00 * src11._rotation01 + tf2._rotation01 * src11._rotation11 + tf2._rotation02 * src11._rotation21;
			__tmp__021 = tf2._rotation00 * src11._rotation02 + tf2._rotation01 * src11._rotation12 + tf2._rotation02 * src11._rotation22;
			__tmp__101 = tf2._rotation10 * src11._rotation00 + tf2._rotation11 * src11._rotation10 + tf2._rotation12 * src11._rotation20;
			__tmp__111 = tf2._rotation10 * src11._rotation01 + tf2._rotation11 * src11._rotation11 + tf2._rotation12 * src11._rotation21;
			__tmp__121 = tf2._rotation10 * src11._rotation02 + tf2._rotation11 * src11._rotation12 + tf2._rotation12 * src11._rotation22;
			__tmp__201 = tf2._rotation20 * src11._rotation00 + tf2._rotation21 * src11._rotation10 + tf2._rotation22 * src11._rotation20;
			__tmp__211 = tf2._rotation20 * src11._rotation01 + tf2._rotation21 * src11._rotation11 + tf2._rotation22 * src11._rotation21;
			__tmp__221 = tf2._rotation20 * src11._rotation02 + tf2._rotation21 * src11._rotation12 + tf2._rotation22 * src11._rotation22;
			dst1._rotation00 = __tmp__001;
			dst1._rotation01 = __tmp__011;
			dst1._rotation02 = __tmp__021;
			dst1._rotation10 = __tmp__101;
			dst1._rotation11 = __tmp__111;
			dst1._rotation12 = __tmp__121;
			dst1._rotation20 = __tmp__201;
			dst1._rotation21 = __tmp__211;
			dst1._rotation22 = __tmp__221;
			var __tmp__X1;
			var __tmp__Y1;
			var __tmp__Z1;
			__tmp__X1 = tf2._rotation00 * src11._positionX + tf2._rotation01 * src11._positionY + tf2._rotation02 * src11._positionZ;
			__tmp__Y1 = tf2._rotation10 * src11._positionX + tf2._rotation11 * src11._positionY + tf2._rotation12 * src11._positionZ;
			__tmp__Z1 = tf2._rotation20 * src11._positionX + tf2._rotation21 * src11._positionY + tf2._rotation22 * src11._positionZ;
			dst1._positionX = __tmp__X1;
			dst1._positionY = __tmp__Y1;
			dst1._positionZ = __tmp__Z1;
			dst1._positionX += tf2._positionX;
			dst1._positionY += tf2._positionY;
			dst1._positionZ += tf2._positionZ;
			var minX;
			var minY;
			var minZ;
			var maxX;
			var maxY;
			var maxZ;
			s._geom._computeAabb(s._aabb,s._ptransform);
			minX = s._aabb._minX;
			minY = s._aabb._minY;
			minZ = s._aabb._minZ;
			maxX = s._aabb._maxX;
			maxY = s._aabb._maxY;
			maxZ = s._aabb._maxZ;
			s._geom._computeAabb(s._aabb,s._transform);
			s._aabb._minX = minX < s._aabb._minX ? minX : s._aabb._minX;
			s._aabb._minY = minY < s._aabb._minY ? minY : s._aabb._minY;
			s._aabb._minZ = minZ < s._aabb._minZ ? minZ : s._aabb._minZ;
			s._aabb._maxX = maxX > s._aabb._maxX ? maxX : s._aabb._maxX;
			s._aabb._maxY = maxY > s._aabb._maxY ? maxY : s._aabb._maxY;
			s._aabb._maxZ = maxZ > s._aabb._maxZ ? maxZ : s._aabb._maxZ;
			if(s._proxy != null) {
				var dX;
				var dY;
				var dZ;
				dX = s._transform._positionX - s._ptransform._positionX;
				dY = s._transform._positionY - s._ptransform._positionY;
				dZ = s._transform._positionZ - s._ptransform._positionZ;
				var v = s.displacement;
				v.x = dX;
				v.y = dY;
				v.z = dZ;
				s._rigidBody._world._broadPhase.moveProxy(s._proxy,s._aabb,s.displacement);
			}
			s = n;
		}
		fixture._sleeping = false;
		fixture._sleepTime = 0;
		demo_common_OimoUtil.addRevoluteJoint(this.world,wheel,fixture,center,new oimo_common_Vec3(0,0,1),null,lm);
	}
	,createGearTooth: function(hw,hh,hd) {
		var geom = new oimo_collision_geometry_ConvexHullGeometry([new oimo_common_Vec3(-hw,-hh,-hd),new oimo_common_Vec3(-hw,-hh,hd),new oimo_common_Vec3(-hw,hh,-hd),new oimo_common_Vec3(-hw,hh,hd),new oimo_common_Vec3(hw,-hh,-hd * 0.3),new oimo_common_Vec3(hw,-hh,hd * 0.3),new oimo_common_Vec3(hw,hh,-hd * 0.3),new oimo_common_Vec3(hw,hh,hd * 0.3)]);
		geom._gjkMargin = 0;
		return geom;
	}
	,update: function() {
		demo_common_DemoBase.prototype.update.call(this);
		this.teleportRigidBodies(-20,10,3,1);
	}
	,__class__: demo_core_GearsDemo
});
var demo_core_JointsDemo = function() {
	demo_common_DemoBase.call(this,"Joints");
};
demo_core_JointsDemo.__name__ = true;
demo_core_JointsDemo.__super__ = demo_common_DemoBase;
demo_core_JointsDemo.prototype = $extend(demo_common_DemoBase.prototype,{
	init: function(world,renderer,input,viewInfo) {
		demo_common_DemoBase.prototype.init.call(this,world,renderer,input,viewInfo);
		var eye_x = 0;
		var eye_y = 7;
		var eye_z = 9;
		oimo_common_Vec3.numCreations++;
		oimo_common_Vec3.numCreations++;
		var up_x = 0;
		var up_y = 1;
		var up_z = 0;
		oimo_common_Vec3.numCreations++;
		var _this = renderer.viewMat;
		var zx = eye_x - 0;
		var zy = eye_y - 2;
		var zz = eye_z - 0;
		var tmp = 1 / Math.sqrt(zx * zx + zy * zy + zz * zz);
		zx *= tmp;
		zy *= tmp;
		zz *= tmp;
		var xx = up_y * zz - up_z * zy;
		var xy = up_z * zx - up_x * zz;
		var xz = up_x * zy - up_y * zx;
		tmp = 1 / Math.sqrt(xx * xx + xy * xy + xz * xz);
		xx *= tmp;
		xy *= tmp;
		xz *= tmp;
		var yx = zy * xz - zz * xy;
		var yy = zz * xx - zx * xz;
		var yz = zx * xy - zy * xx;
		_this.e00 = xx;
		_this.e01 = xy;
		_this.e02 = xz;
		_this.e03 = -(xx * eye_x + xy * eye_y + xz * eye_z);
		_this.e10 = yx;
		_this.e11 = yy;
		_this.e12 = yz;
		_this.e13 = -(yx * eye_x + yy * eye_y + yz * eye_z);
		_this.e20 = zx;
		_this.e21 = zy;
		_this.e22 = zz;
		_this.e23 = -(zx * eye_x + zy * eye_y + zz * eye_z);
		_this.e30 = 0;
		_this.e31 = 0;
		_this.e32 = 0;
		_this.e33 = 1;
		demo_common_OimoUtil.addBox(world,new oimo_common_Vec3(0,-0.2,0),new oimo_common_Vec3(6,0.2,6),true);
		renderer.g.getDebugDraw().drawJointLimits = true;
		this.createBallChain(new oimo_common_Vec3(-2,5,-2),0.4,7);
		this.createHingeChain(new oimo_common_Vec3(2,5,-2),0.3,7,new oimo_common_Vec3(0,0,1));
		this.createBoard(0,4,0,new oimo_dynamics_constraint_joint_RotationalLimitMotor().setLimits(-0.7853981633974475,0.7853981633974475),new oimo_dynamics_constraint_joint_SpringDamper().setSpring(2,0.3));
		this.createBoard(0,6,0,new oimo_dynamics_constraint_joint_RotationalLimitMotor().setMotor(6.28318530717958,25.13274122871832),new oimo_dynamics_constraint_joint_SpringDamper());
		var x = 2;
		var y = 5;
		var z = 1;
		demo_common_OimoUtil.addPrismaticJoint(world,demo_common_OimoUtil.addSphere(world,new oimo_common_Vec3(x,y,z),0.1,true),demo_common_OimoUtil.addBox(world,new oimo_common_Vec3(x,y,z),new oimo_common_Vec3(0.3,0.5,0.5),false),new oimo_common_Vec3(x,y,z),new oimo_common_Vec3(1,1,0),new oimo_dynamics_constraint_joint_SpringDamper(),new oimo_dynamics_constraint_joint_TranslationalLimitMotor().setLimits(-1,1));
		var x = -2;
		var y = 5;
		var z = 1;
		demo_common_OimoUtil.addCylindricalJoint(world,demo_common_OimoUtil.addSphere(world,new oimo_common_Vec3(x,y,z),0.1,true),demo_common_OimoUtil.addBox(world,new oimo_common_Vec3(-2.31,y,z),new oimo_common_Vec3(0.3,0.5,0.5),false),new oimo_common_Vec3(x,y,z),new oimo_common_Vec3(1,0,0),new oimo_dynamics_constraint_joint_SpringDamper(),new oimo_dynamics_constraint_joint_RotationalLimitMotor().setLimits(-2,2),new oimo_dynamics_constraint_joint_SpringDamper().setSpring(4,0.7),new oimo_dynamics_constraint_joint_TranslationalLimitMotor().setLimits(-1,1));
		var x = -2;
		var z = 3;
		var b1 = demo_common_OimoUtil.addBox(world,new oimo_common_Vec3(x,4.,z),new oimo_common_Vec3(0.2,0.2,0.2),true);
		b1.setType(oimo_dynamics_rigidbody_RigidBodyType.KINEMATIC);
		oimo_common_Vec3.numCreations++;
		if(b1._type == 1) {
			b1._angVelX = 0;
			b1._angVelY = 0;
			b1._angVelZ = 0;
		} else {
			b1._angVelX = 0;
			b1._angVelY = 1.5;
			b1._angVelZ = 0;
		}
		b1._sleeping = false;
		b1._sleepTime = 0;
		demo_common_OimoUtil.addRagdollJoint(world,b1,demo_common_OimoUtil.addBox(world,new oimo_common_Vec3(x,2.,z),new oimo_common_Vec3(0.2,0.5,0.2),false),new oimo_common_Vec3(x,3,z),new oimo_common_Vec3(0,1,0),new oimo_common_Vec3(0,0,1),new oimo_dynamics_constraint_joint_SpringDamper(),40,80,new oimo_dynamics_constraint_joint_SpringDamper(),new oimo_dynamics_constraint_joint_RotationalLimitMotor().setLimits(-1.570796326794895,1.570796326794895));
		var x = 2;
		var z = 3;
		var hingeLimit1 = new oimo_dynamics_constraint_joint_RotationalLimitMotor().setLimits(-0.7853981633974475,0.7853981633974475);
		var hingeLimit2 = new oimo_dynamics_constraint_joint_RotationalLimitMotor().setLimits(-1.2566370614359161,1.2566370614359161);
		var b1 = demo_common_OimoUtil.addBox(world,new oimo_common_Vec3(x,4.,z),new oimo_common_Vec3(0.2,0.2,0.2),true);
		b1.setType(oimo_dynamics_rigidbody_RigidBodyType.KINEMATIC);
		oimo_common_Vec3.numCreations++;
		if(b1._type == 1) {
			b1._angVelX = 0;
			b1._angVelY = 0;
			b1._angVelZ = 0;
		} else {
			b1._angVelX = 0;
			b1._angVelY = 1.5;
			b1._angVelZ = 0;
		}
		b1._sleeping = false;
		b1._sleepTime = 0;
		demo_common_OimoUtil.addUniversalJoint(world,b1,demo_common_OimoUtil.addBox(world,new oimo_common_Vec3(x,2.,z),new oimo_common_Vec3(0.2,0.5,0.2),false),new oimo_common_Vec3(x,3,z),new oimo_common_Vec3(1,0,0),new oimo_common_Vec3(0,0,1),new oimo_dynamics_constraint_joint_SpringDamper(),hingeLimit1,new oimo_dynamics_constraint_joint_SpringDamper(),hingeLimit2);
		var x = 0;
		var z = 3;
		var rotXLimit = new oimo_dynamics_constraint_joint_RotationalLimitMotor().setLimits(-0.62831853071795807,0.62831853071795807);
		var rotYLimit = new oimo_dynamics_constraint_joint_RotationalLimitMotor().setLimits(-0.31415926535897903,0.31415926535897903);
		var rotZLimit = new oimo_dynamics_constraint_joint_RotationalLimitMotor().setLimits(-1.2566370614359161,1.2566370614359161);
		var translXLimit = new oimo_dynamics_constraint_joint_TranslationalLimitMotor().setLimits(-0.2,0.2);
		var translYLimit = new oimo_dynamics_constraint_joint_TranslationalLimitMotor().setLimits(-0.3,0);
		var translZLimit = new oimo_dynamics_constraint_joint_TranslationalLimitMotor().setLimits(-0.2,0.8);
		var b1 = demo_common_OimoUtil.addBox(world,new oimo_common_Vec3(x,4.,z),new oimo_common_Vec3(0.2,0.2,0.2),true);
		b1.setType(oimo_dynamics_rigidbody_RigidBodyType.KINEMATIC);
		oimo_common_Vec3.numCreations++;
		if(b1._type == 1) {
			b1._angVelX = 0;
			b1._angVelY = 0;
			b1._angVelZ = 0;
		} else {
			b1._angVelX = 0;
			b1._angVelY = 1.5;
			b1._angVelZ = 0;
		}
		b1._sleeping = false;
		b1._sleepTime = 0;
		demo_common_OimoUtil.addGenericJoint(world,b1,demo_common_OimoUtil.addBox(world,new oimo_common_Vec3(x,2.,z),new oimo_common_Vec3(0.2,0.5,0.2),false),new oimo_common_Vec3(x,3,z),new oimo_common_Mat3(),new oimo_common_Mat3(),null,[translXLimit,translYLimit,translZLimit],null,[rotXLimit,rotYLimit,rotZLimit]);
	}
	,createBoard: function(x,y,z,lm,sd) {
		var b1 = demo_common_OimoUtil.addBox(this.world,new oimo_common_Vec3(x,y,z),new oimo_common_Vec3(0.1,0.1,0.1),true);
		var b2 = demo_common_OimoUtil.addBox(this.world,new oimo_common_Vec3(x + 0.5,y,z),new oimo_common_Vec3(0.5,0.2,0.4),false);
		demo_common_OimoUtil.addRevoluteJoint(this.world,b1,b2,new oimo_common_Vec3(x,y,z),new oimo_common_Vec3(0,0,1),sd,lm);
	}
	,createBallChain: function(from,radius,num) {
		var bc = new oimo_dynamics_rigidbody_RigidBodyConfig();
		var _this = bc.position;
		_this.x = from.x;
		_this.y = from.y;
		_this.z = from.z;
		bc.type = oimo_dynamics_rigidbody_RigidBodyType.STATIC;
		var sc = new oimo_dynamics_rigidbody_ShapeConfig();
		sc.geometry = new oimo_collision_geometry_SphereGeometry(radius * 0.9);
		var b2;
		var b1 = new oimo_dynamics_rigidbody_RigidBody(bc);
		b1.addShape(new oimo_dynamics_rigidbody_Shape(sc));
		this.world.addRigidBody(b1);
		var jc = new oimo_dynamics_constraint_joint_SphericalJointConfig();
		jc.localAnchor1.init(0,0,0);
		jc.localAnchor2.init(0,-radius * 2,0);
		bc.type = oimo_dynamics_rigidbody_RigidBodyType.DYNAMIC;
		var _g = 0;
		while(_g < num) {
			if(_g++ == num - 1) {
				bc.position.x += -0.001 + Math.random() * 0.002;
				bc.position.z += -0.001 + Math.random() * 0.002;
			}
			bc.position.y += radius * 2;
			b2 = new oimo_dynamics_rigidbody_RigidBody(bc);
			b2.addShape(new oimo_dynamics_rigidbody_Shape(sc));
			this.world.addRigidBody(b2);
			jc.rigidBody1 = b1;
			jc.rigidBody2 = b2;
			this.world.addJoint(new oimo_dynamics_constraint_joint_SphericalJoint(jc));
			b1 = b2;
			jc.localAnchor1.init(0,radius,0);
			jc.localAnchor2.init(0,-radius,0);
		}
	}
	,createHingeChain: function(from,radius,num,axis) {
		var bc = new oimo_dynamics_rigidbody_RigidBodyConfig();
		var _this = bc.position;
		_this.x = from.x;
		_this.y = from.y;
		_this.z = from.z;
		bc.type = oimo_dynamics_rigidbody_RigidBodyType.STATIC;
		var cc = new oimo_dynamics_rigidbody_ShapeConfig();
		cc.geometry = new oimo_collision_geometry_BoxGeometry(new oimo_common_Vec3(radius,radius,radius));
		var b2;
		var b1 = new oimo_dynamics_rigidbody_RigidBody(bc);
		b1.addShape(new oimo_dynamics_rigidbody_Shape(cc));
		this.world.addRigidBody(b1);
		cc.geometry = new oimo_collision_geometry_BoxGeometry(new oimo_common_Vec3(radius * 0.5,radius * 0.9,radius * 0.9));
		var jc = new oimo_dynamics_constraint_joint_RevoluteJointConfig();
		jc.localAnchor1.init(0,0,0);
		jc.localAnchor2.init(0,-radius * 2,0);
		bc.type = oimo_dynamics_rigidbody_RigidBodyType.DYNAMIC;
		var _g = 0;
		while(_g < num) {
			jc.localAxis1 = axis;
			jc.localAxis2 = axis;
			if(_g++ == num - 1) {
				bc.position.x += -0.001 + Math.random() * 0.002;
				bc.position.z += -0.001 + Math.random() * 0.002;
			}
			bc.position.y += radius * 2;
			b2 = new oimo_dynamics_rigidbody_RigidBody(bc);
			b2.addShape(new oimo_dynamics_rigidbody_Shape(cc));
			this.world.addRigidBody(b2);
			jc.rigidBody1 = b1;
			jc.rigidBody2 = b2;
			this.world.addJoint(new oimo_dynamics_constraint_joint_RevoluteJoint(jc));
			b1 = b2;
			jc.localAnchor1.init(0,radius,0);
			jc.localAnchor2.init(0,-radius,0);
		}
	}
	,update: function() {
		demo_common_DemoBase.prototype.update.call(this);
	}
	,__class__: demo_core_JointsDemo
});
var demo_core_LimitRotationDemo = function() {
	demo_common_DemoBase.call(this,"Rotation Limit");
};
demo_core_LimitRotationDemo.__name__ = true;
demo_core_LimitRotationDemo.__super__ = demo_common_DemoBase;
demo_core_LimitRotationDemo.prototype = $extend(demo_common_DemoBase.prototype,{
	init: function(world,renderer,input,viewInfo) {
		demo_common_DemoBase.prototype.init.call(this,world,renderer,input,viewInfo);
		var eye_x = 0;
		var eye_y = 7;
		var eye_z = 9;
		oimo_common_Vec3.numCreations++;
		oimo_common_Vec3.numCreations++;
		var up_x = 0;
		var up_y = 1;
		var up_z = 0;
		oimo_common_Vec3.numCreations++;
		var _this = renderer.viewMat;
		var zx = eye_x - 0;
		var zy = eye_y - 2;
		var zz = eye_z - 0;
		var tmp = 1 / Math.sqrt(zx * zx + zy * zy + zz * zz);
		zx *= tmp;
		zy *= tmp;
		zz *= tmp;
		var xx = up_y * zz - up_z * zy;
		var xy = up_z * zx - up_x * zz;
		var xz = up_x * zy - up_y * zx;
		tmp = 1 / Math.sqrt(xx * xx + xy * xy + xz * xz);
		xx *= tmp;
		xy *= tmp;
		xz *= tmp;
		var yx = zy * xz - zz * xy;
		var yy = zz * xx - zx * xz;
		var yz = zx * xy - zy * xx;
		_this.e00 = xx;
		_this.e01 = xy;
		_this.e02 = xz;
		_this.e03 = -(xx * eye_x + xy * eye_y + xz * eye_z);
		_this.e10 = yx;
		_this.e11 = yy;
		_this.e12 = yz;
		_this.e13 = -(yx * eye_x + yy * eye_y + yz * eye_z);
		_this.e20 = zx;
		_this.e21 = zy;
		_this.e22 = zz;
		_this.e23 = -(zx * eye_x + zy * eye_y + zz * eye_z);
		_this.e30 = 0;
		_this.e31 = 0;
		_this.e32 = 0;
		_this.e33 = 1;
		demo_common_OimoUtil.addBox(world,new oimo_common_Vec3(0,-0.5,0),new oimo_common_Vec3(7,0.5,7),true);
		var _g = 0;
		while(_g < 5) {
			var i = _g++;
			var _g1 = -2;
			while(_g1 < 3) {
				var j = _g1++;
				var _g2 = -2;
				while(_g2 < 3) {
					var box = demo_common_OimoUtil.addBox(world,new oimo_common_Vec3(j * 0.61,0.3 + i * 0.3 * 3,_g2++ * 0.61),new oimo_common_Vec3(0.3,0.3,0.3),false);
					oimo_common_Vec3.numCreations++;
					var _this = box._rotFactor;
					_this.x = 0;
					_this.y = 0;
					_this.z = 0;
					var __tmp__00;
					var __tmp__01;
					var __tmp__02;
					var __tmp__10;
					var __tmp__11;
					var __tmp__12;
					var __tmp__20;
					var __tmp__21;
					var __tmp__22;
					__tmp__00 = box._transform._rotation00 * box._invLocalInertia00 + box._transform._rotation01 * box._invLocalInertia10 + box._transform._rotation02 * box._invLocalInertia20;
					__tmp__01 = box._transform._rotation00 * box._invLocalInertia01 + box._transform._rotation01 * box._invLocalInertia11 + box._transform._rotation02 * box._invLocalInertia21;
					__tmp__02 = box._transform._rotation00 * box._invLocalInertia02 + box._transform._rotation01 * box._invLocalInertia12 + box._transform._rotation02 * box._invLocalInertia22;
					__tmp__10 = box._transform._rotation10 * box._invLocalInertia00 + box._transform._rotation11 * box._invLocalInertia10 + box._transform._rotation12 * box._invLocalInertia20;
					__tmp__11 = box._transform._rotation10 * box._invLocalInertia01 + box._transform._rotation11 * box._invLocalInertia11 + box._transform._rotation12 * box._invLocalInertia21;
					__tmp__12 = box._transform._rotation10 * box._invLocalInertia02 + box._transform._rotation11 * box._invLocalInertia12 + box._transform._rotation12 * box._invLocalInertia22;
					__tmp__20 = box._transform._rotation20 * box._invLocalInertia00 + box._transform._rotation21 * box._invLocalInertia10 + box._transform._rotation22 * box._invLocalInertia20;
					__tmp__21 = box._transform._rotation20 * box._invLocalInertia01 + box._transform._rotation21 * box._invLocalInertia11 + box._transform._rotation22 * box._invLocalInertia21;
					__tmp__22 = box._transform._rotation20 * box._invLocalInertia02 + box._transform._rotation21 * box._invLocalInertia12 + box._transform._rotation22 * box._invLocalInertia22;
					box._invInertia00 = __tmp__00;
					box._invInertia01 = __tmp__01;
					box._invInertia02 = __tmp__02;
					box._invInertia10 = __tmp__10;
					box._invInertia11 = __tmp__11;
					box._invInertia12 = __tmp__12;
					box._invInertia20 = __tmp__20;
					box._invInertia21 = __tmp__21;
					box._invInertia22 = __tmp__22;
					var __tmp__001;
					var __tmp__011;
					var __tmp__021;
					var __tmp__101;
					var __tmp__111;
					var __tmp__121;
					var __tmp__201;
					var __tmp__211;
					var __tmp__221;
					__tmp__001 = box._invInertia00 * box._transform._rotation00 + box._invInertia01 * box._transform._rotation01 + box._invInertia02 * box._transform._rotation02;
					__tmp__011 = box._invInertia00 * box._transform._rotation10 + box._invInertia01 * box._transform._rotation11 + box._invInertia02 * box._transform._rotation12;
					__tmp__021 = box._invInertia00 * box._transform._rotation20 + box._invInertia01 * box._transform._rotation21 + box._invInertia02 * box._transform._rotation22;
					__tmp__101 = box._invInertia10 * box._transform._rotation00 + box._invInertia11 * box._transform._rotation01 + box._invInertia12 * box._transform._rotation02;
					__tmp__111 = box._invInertia10 * box._transform._rotation10 + box._invInertia11 * box._transform._rotation11 + box._invInertia12 * box._transform._rotation12;
					__tmp__121 = box._invInertia10 * box._transform._rotation20 + box._invInertia11 * box._transform._rotation21 + box._invInertia12 * box._transform._rotation22;
					__tmp__201 = box._invInertia20 * box._transform._rotation00 + box._invInertia21 * box._transform._rotation01 + box._invInertia22 * box._transform._rotation02;
					__tmp__211 = box._invInertia20 * box._transform._rotation10 + box._invInertia21 * box._transform._rotation11 + box._invInertia22 * box._transform._rotation12;
					__tmp__221 = box._invInertia20 * box._transform._rotation20 + box._invInertia21 * box._transform._rotation21 + box._invInertia22 * box._transform._rotation22;
					box._invInertia00 = __tmp__001;
					box._invInertia01 = __tmp__011;
					box._invInertia02 = __tmp__021;
					box._invInertia10 = __tmp__101;
					box._invInertia11 = __tmp__111;
					box._invInertia12 = __tmp__121;
					box._invInertia20 = __tmp__201;
					box._invInertia21 = __tmp__211;
					box._invInertia22 = __tmp__221;
					box._invInertia00 *= box._rotFactor.x;
					box._invInertia01 *= box._rotFactor.x;
					box._invInertia02 *= box._rotFactor.x;
					box._invInertia10 *= box._rotFactor.y;
					box._invInertia11 *= box._rotFactor.y;
					box._invInertia12 *= box._rotFactor.y;
					box._invInertia20 *= box._rotFactor.z;
					box._invInertia21 *= box._rotFactor.z;
					box._invInertia22 *= box._rotFactor.z;
					box._sleeping = false;
					box._sleepTime = 0;
				}
			}
		}
		var cylinder = demo_common_OimoUtil.addCylinder(world,new oimo_common_Vec3(0,8,0),1.0,0.3,false);
		var cylinderShape = cylinder._shapeList;
		var _this = cylinderShape._localTransform;
		var tf = new oimo_common_Transform();
		tf._positionX = _this._positionX;
		tf._positionY = _this._positionY;
		tf._positionZ = _this._positionZ;
		tf._rotation00 = _this._rotation00;
		tf._rotation01 = _this._rotation01;
		tf._rotation02 = _this._rotation02;
		tf._rotation10 = _this._rotation10;
		tf._rotation11 = _this._rotation11;
		tf._rotation12 = _this._rotation12;
		tf._rotation20 = _this._rotation20;
		tf._rotation21 = _this._rotation21;
		tf._rotation22 = _this._rotation22;
		var v_y = 0;
		var v_z = 0;
		oimo_common_Vec3.numCreations++;
		var rot00;
		var rot01;
		var rot02;
		var rot10;
		var rot11;
		var rot12;
		var rot20;
		var rot21;
		var rot22;
		var sx = Math.sin(1.570796326794895);
		var sy = Math.sin(v_y);
		var sz = Math.sin(v_z);
		var cx = Math.cos(1.570796326794895);
		var cy = Math.cos(v_y);
		var cz = Math.cos(v_z);
		rot00 = cy * cz;
		rot01 = -cy * sz;
		rot02 = sy;
		rot10 = cx * sz + cz * sx * sy;
		rot11 = cx * cz - sx * sy * sz;
		rot12 = -cy * sx;
		rot20 = sx * sz - cx * cz * sy;
		rot21 = cz * sx + cx * sy * sz;
		rot22 = cx * cy;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = rot00 * tf._rotation00 + rot01 * tf._rotation10 + rot02 * tf._rotation20;
		__tmp__01 = rot00 * tf._rotation01 + rot01 * tf._rotation11 + rot02 * tf._rotation21;
		__tmp__02 = rot00 * tf._rotation02 + rot01 * tf._rotation12 + rot02 * tf._rotation22;
		__tmp__10 = rot10 * tf._rotation00 + rot11 * tf._rotation10 + rot12 * tf._rotation20;
		__tmp__11 = rot10 * tf._rotation01 + rot11 * tf._rotation11 + rot12 * tf._rotation21;
		__tmp__12 = rot10 * tf._rotation02 + rot11 * tf._rotation12 + rot12 * tf._rotation22;
		__tmp__20 = rot20 * tf._rotation00 + rot21 * tf._rotation10 + rot22 * tf._rotation20;
		__tmp__21 = rot20 * tf._rotation01 + rot21 * tf._rotation11 + rot22 * tf._rotation21;
		__tmp__22 = rot20 * tf._rotation02 + rot21 * tf._rotation12 + rot22 * tf._rotation22;
		tf._rotation00 = __tmp__00;
		tf._rotation01 = __tmp__01;
		tf._rotation02 = __tmp__02;
		tf._rotation10 = __tmp__10;
		tf._rotation11 = __tmp__11;
		tf._rotation12 = __tmp__12;
		tf._rotation20 = __tmp__20;
		tf._rotation21 = __tmp__21;
		tf._rotation22 = __tmp__22;
		var _this = cylinderShape._localTransform;
		_this._positionX = tf._positionX;
		_this._positionY = tf._positionY;
		_this._positionZ = tf._positionZ;
		_this._rotation00 = tf._rotation00;
		_this._rotation01 = tf._rotation01;
		_this._rotation02 = tf._rotation02;
		_this._rotation10 = tf._rotation10;
		_this._rotation11 = tf._rotation11;
		_this._rotation12 = tf._rotation12;
		_this._rotation20 = tf._rotation20;
		_this._rotation21 = tf._rotation21;
		_this._rotation22 = tf._rotation22;
		if(cylinderShape._rigidBody != null) {
			var _this = cylinderShape._rigidBody;
			_this.updateMass();
			var s = _this._shapeList;
			while(s != null) {
				var n = s._next;
				var tf1 = _this._ptransform;
				var tf2 = _this._transform;
				var dst = s._ptransform;
				var src1 = s._localTransform;
				var __tmp__00;
				var __tmp__01;
				var __tmp__02;
				var __tmp__10;
				var __tmp__11;
				var __tmp__12;
				var __tmp__20;
				var __tmp__21;
				var __tmp__22;
				__tmp__00 = tf1._rotation00 * src1._rotation00 + tf1._rotation01 * src1._rotation10 + tf1._rotation02 * src1._rotation20;
				__tmp__01 = tf1._rotation00 * src1._rotation01 + tf1._rotation01 * src1._rotation11 + tf1._rotation02 * src1._rotation21;
				__tmp__02 = tf1._rotation00 * src1._rotation02 + tf1._rotation01 * src1._rotation12 + tf1._rotation02 * src1._rotation22;
				__tmp__10 = tf1._rotation10 * src1._rotation00 + tf1._rotation11 * src1._rotation10 + tf1._rotation12 * src1._rotation20;
				__tmp__11 = tf1._rotation10 * src1._rotation01 + tf1._rotation11 * src1._rotation11 + tf1._rotation12 * src1._rotation21;
				__tmp__12 = tf1._rotation10 * src1._rotation02 + tf1._rotation11 * src1._rotation12 + tf1._rotation12 * src1._rotation22;
				__tmp__20 = tf1._rotation20 * src1._rotation00 + tf1._rotation21 * src1._rotation10 + tf1._rotation22 * src1._rotation20;
				__tmp__21 = tf1._rotation20 * src1._rotation01 + tf1._rotation21 * src1._rotation11 + tf1._rotation22 * src1._rotation21;
				__tmp__22 = tf1._rotation20 * src1._rotation02 + tf1._rotation21 * src1._rotation12 + tf1._rotation22 * src1._rotation22;
				dst._rotation00 = __tmp__00;
				dst._rotation01 = __tmp__01;
				dst._rotation02 = __tmp__02;
				dst._rotation10 = __tmp__10;
				dst._rotation11 = __tmp__11;
				dst._rotation12 = __tmp__12;
				dst._rotation20 = __tmp__20;
				dst._rotation21 = __tmp__21;
				dst._rotation22 = __tmp__22;
				var __tmp__X;
				var __tmp__Y;
				var __tmp__Z;
				__tmp__X = tf1._rotation00 * src1._positionX + tf1._rotation01 * src1._positionY + tf1._rotation02 * src1._positionZ;
				__tmp__Y = tf1._rotation10 * src1._positionX + tf1._rotation11 * src1._positionY + tf1._rotation12 * src1._positionZ;
				__tmp__Z = tf1._rotation20 * src1._positionX + tf1._rotation21 * src1._positionY + tf1._rotation22 * src1._positionZ;
				dst._positionX = __tmp__X;
				dst._positionY = __tmp__Y;
				dst._positionZ = __tmp__Z;
				dst._positionX += tf1._positionX;
				dst._positionY += tf1._positionY;
				dst._positionZ += tf1._positionZ;
				var dst1 = s._transform;
				var src11 = s._localTransform;
				var __tmp__001;
				var __tmp__011;
				var __tmp__021;
				var __tmp__101;
				var __tmp__111;
				var __tmp__121;
				var __tmp__201;
				var __tmp__211;
				var __tmp__221;
				__tmp__001 = tf2._rotation00 * src11._rotation00 + tf2._rotation01 * src11._rotation10 + tf2._rotation02 * src11._rotation20;
				__tmp__011 = tf2._rotation00 * src11._rotation01 + tf2._rotation01 * src11._rotation11 + tf2._rotation02 * src11._rotation21;
				__tmp__021 = tf2._rotation00 * src11._rotation02 + tf2._rotation01 * src11._rotation12 + tf2._rotation02 * src11._rotation22;
				__tmp__101 = tf2._rotation10 * src11._rotation00 + tf2._rotation11 * src11._rotation10 + tf2._rotation12 * src11._rotation20;
				__tmp__111 = tf2._rotation10 * src11._rotation01 + tf2._rotation11 * src11._rotation11 + tf2._rotation12 * src11._rotation21;
				__tmp__121 = tf2._rotation10 * src11._rotation02 + tf2._rotation11 * src11._rotation12 + tf2._rotation12 * src11._rotation22;
				__tmp__201 = tf2._rotation20 * src11._rotation00 + tf2._rotation21 * src11._rotation10 + tf2._rotation22 * src11._rotation20;
				__tmp__211 = tf2._rotation20 * src11._rotation01 + tf2._rotation21 * src11._rotation11 + tf2._rotation22 * src11._rotation21;
				__tmp__221 = tf2._rotation20 * src11._rotation02 + tf2._rotation21 * src11._rotation12 + tf2._rotation22 * src11._rotation22;
				dst1._rotation00 = __tmp__001;
				dst1._rotation01 = __tmp__011;
				dst1._rotation02 = __tmp__021;
				dst1._rotation10 = __tmp__101;
				dst1._rotation11 = __tmp__111;
				dst1._rotation12 = __tmp__121;
				dst1._rotation20 = __tmp__201;
				dst1._rotation21 = __tmp__211;
				dst1._rotation22 = __tmp__221;
				var __tmp__X1;
				var __tmp__Y1;
				var __tmp__Z1;
				__tmp__X1 = tf2._rotation00 * src11._positionX + tf2._rotation01 * src11._positionY + tf2._rotation02 * src11._positionZ;
				__tmp__Y1 = tf2._rotation10 * src11._positionX + tf2._rotation11 * src11._positionY + tf2._rotation12 * src11._positionZ;
				__tmp__Z1 = tf2._rotation20 * src11._positionX + tf2._rotation21 * src11._positionY + tf2._rotation22 * src11._positionZ;
				dst1._positionX = __tmp__X1;
				dst1._positionY = __tmp__Y1;
				dst1._positionZ = __tmp__Z1;
				dst1._positionX += tf2._positionX;
				dst1._positionY += tf2._positionY;
				dst1._positionZ += tf2._positionZ;
				var minX;
				var minY;
				var minZ;
				var maxX;
				var maxY;
				var maxZ;
				s._geom._computeAabb(s._aabb,s._ptransform);
				minX = s._aabb._minX;
				minY = s._aabb._minY;
				minZ = s._aabb._minZ;
				maxX = s._aabb._maxX;
				maxY = s._aabb._maxY;
				maxZ = s._aabb._maxZ;
				s._geom._computeAabb(s._aabb,s._transform);
				s._aabb._minX = minX < s._aabb._minX ? minX : s._aabb._minX;
				s._aabb._minY = minY < s._aabb._minY ? minY : s._aabb._minY;
				s._aabb._minZ = minZ < s._aabb._minZ ? minZ : s._aabb._minZ;
				s._aabb._maxX = maxX > s._aabb._maxX ? maxX : s._aabb._maxX;
				s._aabb._maxY = maxY > s._aabb._maxY ? maxY : s._aabb._maxY;
				s._aabb._maxZ = maxZ > s._aabb._maxZ ? maxZ : s._aabb._maxZ;
				if(s._proxy != null) {
					var dX;
					var dY;
					var dZ;
					dX = s._transform._positionX - s._ptransform._positionX;
					dY = s._transform._positionY - s._ptransform._positionY;
					dZ = s._transform._positionZ - s._ptransform._positionZ;
					var v = s.displacement;
					v.x = dX;
					v.y = dY;
					v.z = dZ;
					s._rigidBody._world._broadPhase.moveProxy(s._proxy,s._aabb,s.displacement);
				}
				s = n;
			}
		}
		oimo_common_Vec3.numCreations++;
		var _this = cylinder._rotFactor;
		_this.x = 0;
		_this.y = 0;
		_this.z = 1;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = cylinder._transform._rotation00 * cylinder._invLocalInertia00 + cylinder._transform._rotation01 * cylinder._invLocalInertia10 + cylinder._transform._rotation02 * cylinder._invLocalInertia20;
		__tmp__01 = cylinder._transform._rotation00 * cylinder._invLocalInertia01 + cylinder._transform._rotation01 * cylinder._invLocalInertia11 + cylinder._transform._rotation02 * cylinder._invLocalInertia21;
		__tmp__02 = cylinder._transform._rotation00 * cylinder._invLocalInertia02 + cylinder._transform._rotation01 * cylinder._invLocalInertia12 + cylinder._transform._rotation02 * cylinder._invLocalInertia22;
		__tmp__10 = cylinder._transform._rotation10 * cylinder._invLocalInertia00 + cylinder._transform._rotation11 * cylinder._invLocalInertia10 + cylinder._transform._rotation12 * cylinder._invLocalInertia20;
		__tmp__11 = cylinder._transform._rotation10 * cylinder._invLocalInertia01 + cylinder._transform._rotation11 * cylinder._invLocalInertia11 + cylinder._transform._rotation12 * cylinder._invLocalInertia21;
		__tmp__12 = cylinder._transform._rotation10 * cylinder._invLocalInertia02 + cylinder._transform._rotation11 * cylinder._invLocalInertia12 + cylinder._transform._rotation12 * cylinder._invLocalInertia22;
		__tmp__20 = cylinder._transform._rotation20 * cylinder._invLocalInertia00 + cylinder._transform._rotation21 * cylinder._invLocalInertia10 + cylinder._transform._rotation22 * cylinder._invLocalInertia20;
		__tmp__21 = cylinder._transform._rotation20 * cylinder._invLocalInertia01 + cylinder._transform._rotation21 * cylinder._invLocalInertia11 + cylinder._transform._rotation22 * cylinder._invLocalInertia21;
		__tmp__22 = cylinder._transform._rotation20 * cylinder._invLocalInertia02 + cylinder._transform._rotation21 * cylinder._invLocalInertia12 + cylinder._transform._rotation22 * cylinder._invLocalInertia22;
		cylinder._invInertia00 = __tmp__00;
		cylinder._invInertia01 = __tmp__01;
		cylinder._invInertia02 = __tmp__02;
		cylinder._invInertia10 = __tmp__10;
		cylinder._invInertia11 = __tmp__11;
		cylinder._invInertia12 = __tmp__12;
		cylinder._invInertia20 = __tmp__20;
		cylinder._invInertia21 = __tmp__21;
		cylinder._invInertia22 = __tmp__22;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = cylinder._invInertia00 * cylinder._transform._rotation00 + cylinder._invInertia01 * cylinder._transform._rotation01 + cylinder._invInertia02 * cylinder._transform._rotation02;
		__tmp__01 = cylinder._invInertia00 * cylinder._transform._rotation10 + cylinder._invInertia01 * cylinder._transform._rotation11 + cylinder._invInertia02 * cylinder._transform._rotation12;
		__tmp__02 = cylinder._invInertia00 * cylinder._transform._rotation20 + cylinder._invInertia01 * cylinder._transform._rotation21 + cylinder._invInertia02 * cylinder._transform._rotation22;
		__tmp__10 = cylinder._invInertia10 * cylinder._transform._rotation00 + cylinder._invInertia11 * cylinder._transform._rotation01 + cylinder._invInertia12 * cylinder._transform._rotation02;
		__tmp__11 = cylinder._invInertia10 * cylinder._transform._rotation10 + cylinder._invInertia11 * cylinder._transform._rotation11 + cylinder._invInertia12 * cylinder._transform._rotation12;
		__tmp__12 = cylinder._invInertia10 * cylinder._transform._rotation20 + cylinder._invInertia11 * cylinder._transform._rotation21 + cylinder._invInertia12 * cylinder._transform._rotation22;
		__tmp__20 = cylinder._invInertia20 * cylinder._transform._rotation00 + cylinder._invInertia21 * cylinder._transform._rotation01 + cylinder._invInertia22 * cylinder._transform._rotation02;
		__tmp__21 = cylinder._invInertia20 * cylinder._transform._rotation10 + cylinder._invInertia21 * cylinder._transform._rotation11 + cylinder._invInertia22 * cylinder._transform._rotation12;
		__tmp__22 = cylinder._invInertia20 * cylinder._transform._rotation20 + cylinder._invInertia21 * cylinder._transform._rotation21 + cylinder._invInertia22 * cylinder._transform._rotation22;
		cylinder._invInertia00 = __tmp__00;
		cylinder._invInertia01 = __tmp__01;
		cylinder._invInertia02 = __tmp__02;
		cylinder._invInertia10 = __tmp__10;
		cylinder._invInertia11 = __tmp__11;
		cylinder._invInertia12 = __tmp__12;
		cylinder._invInertia20 = __tmp__20;
		cylinder._invInertia21 = __tmp__21;
		cylinder._invInertia22 = __tmp__22;
		cylinder._invInertia00 *= cylinder._rotFactor.x;
		cylinder._invInertia01 *= cylinder._rotFactor.x;
		cylinder._invInertia02 *= cylinder._rotFactor.x;
		cylinder._invInertia10 *= cylinder._rotFactor.y;
		cylinder._invInertia11 *= cylinder._rotFactor.y;
		cylinder._invInertia12 *= cylinder._rotFactor.y;
		cylinder._invInertia20 *= cylinder._rotFactor.z;
		cylinder._invInertia21 *= cylinder._rotFactor.z;
		cylinder._invInertia22 *= cylinder._rotFactor.z;
		cylinder._sleeping = false;
		cylinder._sleepTime = 0;
		this.body = cylinder;
	}
	,update: function() {
		demo_common_DemoBase.prototype.update.call(this);
		this.teleportRigidBodies(-20,10,5,5);
	}
	,__class__: demo_core_LimitRotationDemo
});
var demo_core_RagdollDemo = function() {
	demo_common_DemoBase.call(this,"Ragdolls");
};
demo_core_RagdollDemo.__name__ = true;
demo_core_RagdollDemo.__super__ = demo_common_DemoBase;
demo_core_RagdollDemo.prototype = $extend(demo_common_DemoBase.prototype,{
	init: function(world,renderer,input,viewInfo) {
		demo_common_DemoBase.prototype.init.call(this,world,renderer,input,viewInfo);
		var eye_x = 0;
		var eye_y = 5;
		var eye_z = 6;
		oimo_common_Vec3.numCreations++;
		oimo_common_Vec3.numCreations++;
		var up_x = 0;
		var up_y = 1;
		var up_z = 0;
		oimo_common_Vec3.numCreations++;
		var _this = renderer.viewMat;
		var zx = eye_x - 0;
		var zy = eye_y - 2;
		var zz = eye_z - 0;
		var tmp = 1 / Math.sqrt(zx * zx + zy * zy + zz * zz);
		zx *= tmp;
		zy *= tmp;
		zz *= tmp;
		var xx = up_y * zz - up_z * zy;
		var xy = up_z * zx - up_x * zz;
		var xz = up_x * zy - up_y * zx;
		tmp = 1 / Math.sqrt(xx * xx + xy * xy + xz * xz);
		xx *= tmp;
		xy *= tmp;
		xz *= tmp;
		var yx = zy * xz - zz * xy;
		var yy = zz * xx - zx * xz;
		var yz = zx * xy - zy * xx;
		_this.e00 = xx;
		_this.e01 = xy;
		_this.e02 = xz;
		_this.e03 = -(xx * eye_x + xy * eye_y + xz * eye_z);
		_this.e10 = yx;
		_this.e11 = yy;
		_this.e12 = yz;
		_this.e13 = -(yx * eye_x + yy * eye_y + yz * eye_z);
		_this.e20 = zx;
		_this.e21 = zy;
		_this.e22 = zz;
		_this.e23 = -(zx * eye_x + zy * eye_y + zz * eye_z);
		_this.e30 = 0;
		_this.e31 = 0;
		_this.e32 = 0;
		_this.e33 = 1;
		renderer.g.getDebugDraw().drawJointLimits = false;
		demo_common_OimoUtil.addBox(world,new oimo_common_Vec3(0,-0.2,0),new oimo_common_Vec3(6,0.2,6),true);
		var tmp = oimo_common_Setting.defaultFriction;
		oimo_common_Setting.defaultFriction = 0.5;
		demo_common_OimoUtil.addRagdoll(world,new oimo_common_Vec3(0,2,0));
		demo_common_OimoUtil.addRagdoll(world,new oimo_common_Vec3(0,4,0));
		demo_common_OimoUtil.addRagdoll(world,new oimo_common_Vec3(0,6,0));
		demo_common_OimoUtil.addRagdoll(world,new oimo_common_Vec3(0,8,0));
		demo_common_OimoUtil.addRagdoll(world,new oimo_common_Vec3(0,10,0));
		demo_common_OimoUtil.addRagdoll(world,new oimo_common_Vec3(0,12,0));
		demo_common_OimoUtil.addRagdoll(world,new oimo_common_Vec3(0,14,0));
		demo_common_OimoUtil.addRagdoll(world,new oimo_common_Vec3(0,16,0));
		demo_common_OimoUtil.addRagdoll(world,new oimo_common_Vec3(0,18,0));
		demo_common_OimoUtil.addRagdoll(world,new oimo_common_Vec3(0,20,0));
		oimo_common_Setting.defaultFriction = tmp;
	}
	,update: function() {
		demo_common_DemoBase.prototype.update.call(this);
	}
	,__class__: demo_core_RagdollDemo
});
var demo_core_RayCastingDemo = function() {
	demo_common_DemoBase.call(this,"Ray Casting");
};
demo_core_RayCastingDemo.__name__ = true;
demo_core_RayCastingDemo.__super__ = demo_common_DemoBase;
demo_core_RayCastingDemo.prototype = $extend(demo_common_DemoBase.prototype,{
	init: function(world,renderer,input,viewInfo) {
		demo_common_DemoBase.prototype.init.call(this,world,renderer,input,viewInfo);
		var eye_x = 0;
		var eye_y = 7;
		var eye_z = 7;
		oimo_common_Vec3.numCreations++;
		oimo_common_Vec3.numCreations++;
		var up_x = 0;
		var up_y = 1;
		var up_z = 0;
		oimo_common_Vec3.numCreations++;
		var _this = renderer.viewMat;
		var zx = eye_x - 0;
		var zy = eye_y - 0;
		var zz = eye_z - 0;
		var tmp = 1 / Math.sqrt(zx * zx + zy * zy + zz * zz);
		zx *= tmp;
		zy *= tmp;
		zz *= tmp;
		var xx = up_y * zz - up_z * zy;
		var xy = up_z * zx - up_x * zz;
		var xz = up_x * zy - up_y * zx;
		tmp = 1 / Math.sqrt(xx * xx + xy * xy + xz * xz);
		xx *= tmp;
		xy *= tmp;
		xz *= tmp;
		var yx = zy * xz - zz * xy;
		var yy = zz * xx - zx * xz;
		var yz = zx * xy - zy * xx;
		_this.e00 = xx;
		_this.e01 = xy;
		_this.e02 = xz;
		_this.e03 = -(xx * eye_x + xy * eye_y + xz * eye_z);
		_this.e10 = yx;
		_this.e11 = yy;
		_this.e12 = yz;
		_this.e13 = -(yx * eye_x + yy * eye_y + yz * eye_z);
		_this.e20 = zx;
		_this.e21 = zy;
		_this.e22 = zz;
		_this.e23 = -(zx * eye_x + zy * eye_y + zz * eye_z);
		_this.e30 = 0;
		_this.e31 = 0;
		_this.e32 = 0;
		_this.e33 = 1;
		demo_common_OimoUtil.addBox(world,new oimo_common_Vec3(0,-0.5,0),new oimo_common_Vec3(5,0.5,5),true);
		var wid = 0.4;
		var hei = 0.4;
		var _g = 0;
		while(_g < 3) {
			var i = _g++;
			var _g1 = -2;
			while(_g1 < 3) {
				var j = _g1++;
				var _g2 = -1;
				while(_g2 < 2) {
					var k = _g2++;
					wid = 0.3 + Math.random() * 0.10000000000000003;
					hei = 0.3 + Math.random() * 0.10000000000000003;
					switch(5 * Math.random() | 0) {
					case 0:
						demo_common_OimoUtil.addCone(world,new oimo_common_Vec3(j * 0.8 + (-0.01 + Math.random() * 0.02),0.4 + i * 0.4 * 2 * 1.002,k * 0.8 + (-0.01 + Math.random() * 0.02)),wid,hei,false);
						break;
					case 1:
						demo_common_OimoUtil.addBox(world,new oimo_common_Vec3(j * 0.8 + (-0.01 + Math.random() * 0.02),0.4 + i * 0.4 * 2 * 0.9998,k * 0.8 + (-0.01 + Math.random() * 0.02)),new oimo_common_Vec3(wid,hei,wid),false);
						break;
					case 2:
						demo_common_OimoUtil.addCylinder(world,new oimo_common_Vec3(j * 0.8 + (-0.01 + Math.random() * 0.02),0.4 + i * 0.4 * 2 * 1.002,k * 0.8 + (-0.01 + Math.random() * 0.02)),wid,hei,false);
						break;
					case 3:
						demo_common_OimoUtil.addCapsule(world,new oimo_common_Vec3(j * 0.8 + (-0.01 + Math.random() * 0.02),0.4 + i * 0.4 * 2 * 1.002,k * 0.8 + (-0.01 + Math.random() * 0.02)),wid,hei,false);
						break;
					case 4:
						demo_common_OimoUtil.addSphere(world,new oimo_common_Vec3(j * 0.8 + (-0.01 + Math.random() * 0.02),0.4 + i * 0.4 * 2 * 0.9998,k * 0.8 + (-0.01 + Math.random() * 0.02)),wid,false);
						break;
					}
				}
			}
		}
		this.lps = [];
		this.lps.push(new demo_core__$RayCastingDemo_LaserPointer(new oimo_common_Vec3(-2,4,0),world,new oimo_common_Vec3(0,1,0)));
		this.lps.push(new demo_core__$RayCastingDemo_LaserPointer(new oimo_common_Vec3(-1,4,0),world,new oimo_common_Vec3(0,1,0)));
		this.lps.push(new demo_core__$RayCastingDemo_LaserPointer(new oimo_common_Vec3(0,4,0),world,new oimo_common_Vec3(0,1,0)));
		this.lps.push(new demo_core__$RayCastingDemo_LaserPointer(new oimo_common_Vec3(1,4,0),world,new oimo_common_Vec3(0,1,0)));
		this.lps.push(new demo_core__$RayCastingDemo_LaserPointer(new oimo_common_Vec3(2,4,0),world,new oimo_common_Vec3(0,1,0)));
	}
	,update: function() {
		demo_common_DemoBase.prototype.update.call(this);
		this.teleportRigidBodies(-20,10,5,5);
	}
	,drawAdditionalObjects: function(debugDraw) {
		var _g = 0;
		var _g1 = this.lps;
		while(_g < _g1.length) _g1[_g++].draw(debugDraw);
	}
	,__class__: demo_core_RayCastingDemo
});
var demo_core__$RayCastingDemo_LaserPointer = function(pos,world,color) {
	this.w = world;
	this.color = color;
	this.cb = new oimo_dynamics_callback_RayCastClosest();
	this.length = 0.4;
	var rc = new oimo_dynamics_rigidbody_RigidBodyConfig();
	rc.autoSleep = false;
	rc.angularDamping = 4.0;
	var _this = rc.position;
	_this.x = pos.x;
	_this.y = pos.y;
	_this.z = pos.z;
	this.rb = new oimo_dynamics_rigidbody_RigidBody(rc);
	var sc = new oimo_dynamics_rigidbody_ShapeConfig();
	sc.geometry = new oimo_collision_geometry_CylinderGeometry(0.2,this.length);
	this.rb.addShape(new oimo_dynamics_rigidbody_Shape(sc));
	this.w.addRigidBody(this.rb);
	var _this = rc.position;
	var y = this.length;
	if(y == null) {
		y = 0;
	}
	oimo_common_Vec3.numCreations++;
	_this.x += 0;
	_this.y += y;
	_this.z += 0;
	rc.type = oimo_dynamics_rigidbody_RigidBodyType.STATIC;
	var fix = new oimo_dynamics_rigidbody_RigidBody(rc);
	sc.geometry = new oimo_collision_geometry_SphereGeometry(0.1);
	fix.addShape(new oimo_dynamics_rigidbody_Shape(sc));
	this.w.addRigidBody(fix);
	var jc = new oimo_dynamics_constraint_joint_RagdollJointConfig();
	var tmp = this.rb;
	var _this = this.rb;
	var v = new oimo_common_Vec3();
	v.x = _this._transform._positionX;
	v.y = _this._transform._positionY;
	v.z = _this._transform._positionZ;
	var y = this.length;
	if(y == null) {
		y = 0;
	}
	oimo_common_Vec3.numCreations++;
	v.x += 0;
	v.y += y;
	v.z += 0;
	jc.init(tmp,fix,v,new oimo_common_Vec3(0,1,0),new oimo_common_Vec3(1,0,0));
	jc.twistLimitMotor.setLimits(0,0);
	jc.maxSwingAngle1 = 1.570796326794895;
	jc.maxSwingAngle2 = 1.570796326794895;
	world.addJoint(new oimo_dynamics_constraint_joint_RagdollJoint(jc));
};
demo_core__$RayCastingDemo_LaserPointer.__name__ = true;
demo_core__$RayCastingDemo_LaserPointer.prototype = {
	draw: function(dd) {
		var _this = this.rb._transform;
		var tf = new oimo_common_Transform();
		tf._positionX = _this._positionX;
		tf._positionY = _this._positionY;
		tf._positionZ = _this._positionZ;
		tf._rotation00 = _this._rotation00;
		tf._rotation01 = _this._rotation01;
		tf._rotation02 = _this._rotation02;
		tf._rotation10 = _this._rotation10;
		tf._rotation11 = _this._rotation11;
		tf._rotation12 = _this._rotation12;
		tf._rotation20 = _this._rotation20;
		tf._rotation21 = _this._rotation21;
		tf._rotation22 = _this._rotation22;
		var y = -this.length;
		if(y == null) {
			y = 0;
		}
		var v_x = 0;
		var v_y = y;
		var v_z = 0;
		oimo_common_Vec3.numCreations++;
		var vX;
		var vY;
		var vZ;
		vX = v_x;
		vY = v_y;
		vZ = v_z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = tf._rotation00 * v_x + tf._rotation01 * v_y + tf._rotation02 * v_z;
		__tmp__Y = tf._rotation10 * v_x + tf._rotation11 * v_y + tf._rotation12 * v_z;
		__tmp__Z = tf._rotation20 * v_x + tf._rotation21 * v_y + tf._rotation22 * v_z;
		vX = __tmp__X;
		vY = __tmp__Y;
		vZ = __tmp__Z;
		vX += tf._positionX;
		vY += tf._positionY;
		vZ += tf._positionZ;
		var res = new oimo_common_Vec3();
		res.x = vX;
		res.y = vY;
		res.z = vZ;
		var begin = res;
		var y = -this.length - 20;
		if(y == null) {
			y = 0;
		}
		var v_x = 0;
		var v_y = y;
		var v_z = 0;
		oimo_common_Vec3.numCreations++;
		var vX;
		var vY;
		var vZ;
		vX = v_x;
		vY = v_y;
		vZ = v_z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = tf._rotation00 * v_x + tf._rotation01 * v_y + tf._rotation02 * v_z;
		__tmp__Y = tf._rotation10 * v_x + tf._rotation11 * v_y + tf._rotation12 * v_z;
		__tmp__Z = tf._rotation20 * v_x + tf._rotation21 * v_y + tf._rotation22 * v_z;
		vX = __tmp__X;
		vY = __tmp__Y;
		vZ = __tmp__Z;
		vX += tf._positionX;
		vY += tf._positionY;
		vZ += tf._positionZ;
		var res = new oimo_common_Vec3();
		res.x = vX;
		res.y = vY;
		res.z = vZ;
		var end = res;
		var _g = 0;
		while(_g < 3) {
			++_g;
			var _this = this.cb;
			_this.shape = null;
			_this.fraction = 1;
			_this.position.zero();
			_this.normal.zero();
			_this.hit = false;
			this.w.rayCast(begin,end,this.cb);
			if(this.cb.hit) {
				dd.line(begin,this.cb.position,this.color);
				dd.point(this.cb.position,this.color);
				var x = end.x - begin.x;
				var y = end.y - begin.y;
				var z = end.z - begin.z;
				if(z == null) {
					z = 0;
				}
				if(y == null) {
					y = 0;
				}
				if(x == null) {
					x = 0;
				}
				var _this_x = x;
				var _this_y = y;
				var _this_z = z;
				oimo_common_Vec3.numCreations++;
				var invLen = Math.sqrt(_this_x * _this_x + _this_y * _this_y + _this_z * _this_z);
				if(invLen > 0) {
					invLen = 1 / invLen;
				}
				var x1 = _this_x * invLen;
				var y1 = _this_y * invLen;
				var z1 = _this_z * invLen;
				if(z1 == null) {
					z1 = 0;
				}
				if(y1 == null) {
					y1 = 0;
				}
				if(x1 == null) {
					x1 = 0;
				}
				var dir_x = x1;
				var dir_y = y1;
				var dir_z = z1;
				oimo_common_Vec3.numCreations++;
				var v = this.cb.normal;
				var _this1 = this.cb.normal;
				var s = -2 * (_this1.x * dir_x + _this1.y * dir_y + _this1.z * dir_z);
				var x2 = dir_x + v.x * s;
				var y2 = dir_y + v.y * s;
				var z2 = dir_z + v.z * s;
				if(z2 == null) {
					z2 = 0;
				}
				if(y2 == null) {
					y2 = 0;
				}
				if(x2 == null) {
					x2 = 0;
				}
				oimo_common_Vec3.numCreations++;
				var _this2 = this.cb.position;
				var v1 = this.cb.normal;
				begin = new oimo_common_Vec3(_this2.x + v1.x * 0.01,_this2.y + v1.y * 0.01,_this2.z + v1.z * 0.01);
				var _this3 = this.cb.position;
				end = new oimo_common_Vec3(_this3.x + x2 * 20,_this3.y + y2 * 20,_this3.z + z2 * 20);
			} else {
				dd.line(begin,end,this.color);
				break;
			}
		}
	}
	,__class__: demo_core__$RayCastingDemo_LaserPointer
};
var demo_core_SpringsDemo = function() {
	demo_common_DemoBase.call(this,"Springs");
};
demo_core_SpringsDemo.__name__ = true;
demo_core_SpringsDemo.__super__ = demo_common_DemoBase;
demo_core_SpringsDemo.prototype = $extend(demo_common_DemoBase.prototype,{
	init: function(world,renderer,input,viewInfo) {
		demo_common_DemoBase.prototype.init.call(this,world,renderer,input,viewInfo);
		var eye_x = 0;
		var eye_y = 7;
		var eye_z = 9;
		oimo_common_Vec3.numCreations++;
		oimo_common_Vec3.numCreations++;
		var up_x = 0;
		var up_y = 1;
		var up_z = 0;
		oimo_common_Vec3.numCreations++;
		var _this = renderer.viewMat;
		var zx = eye_x - 0;
		var zy = eye_y - 2;
		var zz = eye_z - 0;
		var tmp = 1 / Math.sqrt(zx * zx + zy * zy + zz * zz);
		zx *= tmp;
		zy *= tmp;
		zz *= tmp;
		var xx = up_y * zz - up_z * zy;
		var xy = up_z * zx - up_x * zz;
		var xz = up_x * zy - up_y * zx;
		tmp = 1 / Math.sqrt(xx * xx + xy * xy + xz * xz);
		xx *= tmp;
		xy *= tmp;
		xz *= tmp;
		var yx = zy * xz - zz * xy;
		var yy = zz * xx - zx * xz;
		var yz = zx * xy - zy * xx;
		_this.e00 = xx;
		_this.e01 = xy;
		_this.e02 = xz;
		_this.e03 = -(xx * eye_x + xy * eye_y + xz * eye_z);
		_this.e10 = yx;
		_this.e11 = yy;
		_this.e12 = yz;
		_this.e13 = -(yx * eye_x + yy * eye_y + yz * eye_z);
		_this.e20 = zx;
		_this.e21 = zy;
		_this.e22 = zz;
		_this.e23 = -(zx * eye_x + zy * eye_y + zz * eye_z);
		_this.e30 = 0;
		_this.e31 = 0;
		_this.e32 = 0;
		_this.e33 = 1;
		var _this = new oimo_common_Vec3(-1 + Math.random() * 2,-1 + Math.random() * 2,-1 + Math.random() * 2);
		_this.x *= 2;
		_this.y *= 2;
		_this.z *= 0.1;
		oimo_common_Vec3.numCreations++;
		_this.x += 0;
		_this.y += 8;
		_this.z += 0;
		demo_common_OimoUtil.addSphere(world,_this,0.6,false);
		var _this = new oimo_common_Vec3(-1 + Math.random() * 2,-1 + Math.random() * 2,-1 + Math.random() * 2);
		_this.x *= 2;
		_this.y *= 2;
		_this.z *= 0.1;
		oimo_common_Vec3.numCreations++;
		_this.x += 0;
		_this.y += 8;
		_this.z += 0;
		demo_common_OimoUtil.addSphere(world,_this,0.6,false);
		var _this = new oimo_common_Vec3(-1 + Math.random() * 2,-1 + Math.random() * 2,-1 + Math.random() * 2);
		_this.x *= 2;
		_this.y *= 2;
		_this.z *= 0.1;
		oimo_common_Vec3.numCreations++;
		_this.x += 0;
		_this.y += 8;
		_this.z += 0;
		demo_common_OimoUtil.addSphere(world,_this,0.6,false);
		var _this = new oimo_common_Vec3(-1 + Math.random() * 2,-1 + Math.random() * 2,-1 + Math.random() * 2);
		_this.x *= 2;
		_this.y *= 2;
		_this.z *= 0.1;
		oimo_common_Vec3.numCreations++;
		_this.x += 0;
		_this.y += 8;
		_this.z += 0;
		demo_common_OimoUtil.addSphere(world,_this,0.6,false);
		var _this = new oimo_common_Vec3(-1 + Math.random() * 2,-1 + Math.random() * 2,-1 + Math.random() * 2);
		_this.x *= 2;
		_this.y *= 2;
		_this.z *= 0.1;
		oimo_common_Vec3.numCreations++;
		_this.x += 0;
		_this.y += 8;
		_this.z += 0;
		demo_common_OimoUtil.addSphere(world,_this,0.6,false);
		this.addSpringyBoard(new oimo_common_Vec3(-3,3,0),1,8);
		this.addSpringyBoard(new oimo_common_Vec3(3,3,0),-1,8);
		this.addSpringyBoard(new oimo_common_Vec3(-3,4,0),1,8);
		this.addSpringyBoard(new oimo_common_Vec3(3,4,0),-1,8);
		this.addSpringyFloor(new oimo_common_Vec3(-2,0,0));
		this.addSpringyFloor(new oimo_common_Vec3(-1,0,0));
		this.addSpringyFloor(new oimo_common_Vec3(0,0,0));
		this.addSpringyFloor(new oimo_common_Vec3(1,0,0));
		this.addSpringyFloor(new oimo_common_Vec3(2,0,0));
	}
	,addSpringyBoard: function(at,dir,num) {
		var bodies = [];
		var _g = 0;
		while(_g < num) {
			var i = _g++;
			var x = i * 0.4 * dir;
			if(x == null) {
				x = 0;
			}
			oimo_common_Vec3.numCreations++;
			bodies.push(demo_common_OimoUtil.addBox(this.world,new oimo_common_Vec3(at.x + x,at.y + 0,at.z + 0),new oimo_common_Vec3(0.2,0.1,0.4),i == 0));
		}
		var _g = 1;
		while(_g < num) {
			var i = _g++;
			var b1 = bodies[i - 1];
			var b2 = bodies[i];
			var v = new oimo_common_Vec3();
			v.x = b1._transform._positionX;
			v.y = b1._transform._positionY;
			v.z = b1._transform._positionZ;
			var v_x = 0;
			var v_y = 0;
			var v_z = 0;
			oimo_common_Vec3.numCreations++;
			v_x = b2._transform._positionX;
			v_y = b2._transform._positionY;
			v_z = b2._transform._positionZ;
			v.x += v_x;
			v.y += v_y;
			v.z += v_z;
			v.x *= 0.5;
			v.y *= 0.5;
			v.z *= 0.5;
			var axis = new oimo_common_Vec3(0,0,1);
			var springDamper = new oimo_dynamics_constraint_joint_SpringDamper().setSpring(15,0.4);
			var limitMotor = new oimo_dynamics_constraint_joint_RotationalLimitMotor().setLimits(0,0);
			demo_common_OimoUtil.addRevoluteJoint(this.world,b1,b2,v,axis,springDamper,limitMotor);
		}
	}
	,addSpringyFloor: function(at) {
		oimo_common_Vec3.numCreations++;
		var base = demo_common_OimoUtil.addBox(this.world,new oimo_common_Vec3(at.x + 0,at.y + (-2),at.z + 0),new oimo_common_Vec3(0.5,0.1,0.5),true);
		var floor = demo_common_OimoUtil.addBox(this.world,at,new oimo_common_Vec3(0.4,0.1,0.4),false);
		var v = new oimo_common_Vec3();
		v.x = floor._transform._positionX;
		v.y = floor._transform._positionY;
		v.z = floor._transform._positionZ;
		var axis = new oimo_common_Vec3(0,1,0);
		var springDamper = new oimo_dynamics_constraint_joint_SpringDamper().setSpring(3,0.2);
		var limitMotor = new oimo_dynamics_constraint_joint_TranslationalLimitMotor().setLimits(0,0);
		demo_common_OimoUtil.addPrismaticJoint(this.world,base,floor,v,axis,springDamper,limitMotor);
	}
	,update: function() {
		demo_common_DemoBase.prototype.update.call(this);
		this.teleportRigidBodies(-20,10,2,0.1);
	}
	,__class__: demo_core_SpringsDemo
});
var demo_core_VariableTimeStepDemo = function() {
	demo_common_DemoBase.call(this,"Variable Time Step");
};
demo_core_VariableTimeStepDemo.__name__ = true;
demo_core_VariableTimeStepDemo.__super__ = demo_common_DemoBase;
demo_core_VariableTimeStepDemo.prototype = $extend(demo_common_DemoBase.prototype,{
	init: function(world,renderer,input,viewInfo) {
		demo_common_DemoBase.prototype.init.call(this,world,renderer,input,viewInfo);
		var eye_x = -5;
		var eye_y = 7;
		var eye_z = 9;
		oimo_common_Vec3.numCreations++;
		oimo_common_Vec3.numCreations++;
		var up_x = 0;
		var up_y = 1;
		var up_z = 0;
		oimo_common_Vec3.numCreations++;
		var _this = renderer.viewMat;
		var zx = eye_x - 0;
		var zy = eye_y - 2;
		var zz = eye_z - 0;
		var tmp = 1 / Math.sqrt(zx * zx + zy * zy + zz * zz);
		zx *= tmp;
		zy *= tmp;
		zz *= tmp;
		var xx = up_y * zz - up_z * zy;
		var xy = up_z * zx - up_x * zz;
		var xz = up_x * zy - up_y * zx;
		tmp = 1 / Math.sqrt(xx * xx + xy * xy + xz * xz);
		xx *= tmp;
		xy *= tmp;
		xz *= tmp;
		var yx = zy * xz - zz * xy;
		var yy = zz * xx - zx * xz;
		var yz = zx * xy - zy * xx;
		_this.e00 = xx;
		_this.e01 = xy;
		_this.e02 = xz;
		_this.e03 = -(xx * eye_x + xy * eye_y + xz * eye_z);
		_this.e10 = yx;
		_this.e11 = yy;
		_this.e12 = yz;
		_this.e13 = -(yx * eye_x + yy * eye_y + yz * eye_z);
		_this.e20 = zx;
		_this.e21 = zy;
		_this.e22 = zz;
		_this.e23 = -(zx * eye_x + zy * eye_y + zz * eye_z);
		_this.e30 = 0;
		_this.e31 = 0;
		_this.e32 = 0;
		_this.e33 = 1;
		demo_common_OimoUtil.addBox(world,new oimo_common_Vec3(0,-0.5,0),new oimo_common_Vec3(5,0.5,5),true);
		var _g = 0;
		while(_g < 5) {
			var i = _g++;
			var _g1 = -1;
			while(_g1 < 2) {
				var k = _g1++;
				var _g2 = 0;
				while(_g2 < 5) {
					var j = _g2++;
					if((j + k & 1) == 0) {
						demo_common_OimoUtil.addBox(world,new oimo_common_Vec3(j * 0.3 * 2 + (-0.01 + Math.random() * 0.02),0.3 + i * 0.3 * 2.2,k * 0.3 * 2 + (-0.01 + Math.random() * 0.02)),new oimo_common_Vec3(0.3,0.3,0.3),false);
					} else {
						demo_common_OimoUtil.addCylinder(world,new oimo_common_Vec3(j * 0.3 * 2 + (-0.01 + Math.random() * 0.02),0.3 + i * 0.3 * 2.2,k * 0.3 * 2 + (-0.01 + Math.random() * 0.02)),0.3,0.3,false);
					}
				}
			}
		}
		var b = demo_common_OimoUtil.addBox(world,new oimo_common_Vec3(-4,4,-4),new oimo_common_Vec3(0.5,0.5,0.5),false);
		oimo_common_Vec3.numCreations++;
		if(b._type == 1) {
			b._velX = 0;
			b._velY = 0;
			b._velZ = 0;
		} else {
			b._velX = 5;
			b._velY = 0;
			b._velZ = 4;
		}
		b._sleeping = false;
		b._sleepTime = 0;
		oimo_common_Vec3.numCreations++;
		if(b._type == 1) {
			b._angVelX = 0;
			b._angVelY = 0;
			b._angVelZ = 0;
		} else {
			b._angVelX = 3;
			b._angVelY = 6;
			b._angVelZ = 8;
		}
		b._sleeping = false;
		b._sleepTime = 0;
		this.bullet = demo_common_OimoUtil.addCone(world,new oimo_common_Vec3(-150,3,0),0.42,0.44999999999999996,false);
		var tmp = this.bullet;
		var sc = new oimo_dynamics_rigidbody_ShapeConfig();
		oimo_common_Vec3.numCreations++;
		sc.geometry = new oimo_collision_geometry_BoxGeometry(new oimo_common_Vec3(0.12,0.3,0.12));
		sc.position.y -= 0.75;
		tmp.addShape(new oimo_dynamics_rigidbody_Shape(sc));
		var _this = this.bullet;
		var _this_e00 = 1;
		var _this_e01 = 0;
		var _this_e02 = 0;
		var _this_e10 = 0;
		var _this_e11 = 1;
		var _this_e12 = 0;
		var _this_e20 = 0;
		var _this_e21 = 0;
		var _this_e22 = 1;
		oimo_common_Mat3.numCreations++;
		var s = Math.sin(1.570796326794895);
		var c = Math.cos(1.570796326794895);
		var c1 = 1 - c;
		var r00 = 0 * c1 + c;
		var r01 = 0 * c1 - -1 * s;
		var r02 = 0 * c1 + 0 * s;
		var r10 = 0 * c1 + -1 * s;
		var r11 = 0 * c1 + c;
		var r12 = 0 * c1 - 0 * s;
		var r20 = 0 * c1 - 0 * s;
		var r21 = 0 * c1 + 0 * s;
		var r22 = c1 + c;
		var e00 = _this_e00 * r00 + _this_e01 * r10 + _this_e02 * r20;
		var e01 = _this_e00 * r01 + _this_e01 * r11 + _this_e02 * r21;
		var e02 = _this_e00 * r02 + _this_e01 * r12 + _this_e02 * r22;
		var e10 = _this_e10 * r00 + _this_e11 * r10 + _this_e12 * r20;
		var e11 = _this_e10 * r01 + _this_e11 * r11 + _this_e12 * r21;
		var e12 = _this_e10 * r02 + _this_e11 * r12 + _this_e12 * r22;
		var e20 = _this_e20 * r00 + _this_e21 * r10 + _this_e22 * r20;
		var e21 = _this_e20 * r01 + _this_e21 * r11 + _this_e22 * r21;
		var e22 = _this_e20 * r02 + _this_e21 * r12 + _this_e22 * r22;
		if(e22 == null) {
			e22 = 1;
		}
		if(e21 == null) {
			e21 = 0;
		}
		if(e20 == null) {
			e20 = 0;
		}
		if(e12 == null) {
			e12 = 0;
		}
		if(e11 == null) {
			e11 = 1;
		}
		if(e10 == null) {
			e10 = 0;
		}
		if(e02 == null) {
			e02 = 0;
		}
		if(e01 == null) {
			e01 = 0;
		}
		if(e00 == null) {
			e00 = 1;
		}
		var m_e00 = e00;
		var m_e01 = e01;
		var m_e02 = e02;
		var m_e10 = e10;
		var m_e11 = e11;
		var m_e12 = e12;
		var m_e20 = e20;
		var m_e21 = e21;
		var m_e22 = e22;
		oimo_common_Mat3.numCreations++;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = m_e00 * _this._transform._rotation00 + m_e01 * _this._transform._rotation10 + m_e02 * _this._transform._rotation20;
		__tmp__01 = m_e00 * _this._transform._rotation01 + m_e01 * _this._transform._rotation11 + m_e02 * _this._transform._rotation21;
		__tmp__02 = m_e00 * _this._transform._rotation02 + m_e01 * _this._transform._rotation12 + m_e02 * _this._transform._rotation22;
		__tmp__10 = m_e10 * _this._transform._rotation00 + m_e11 * _this._transform._rotation10 + m_e12 * _this._transform._rotation20;
		__tmp__11 = m_e10 * _this._transform._rotation01 + m_e11 * _this._transform._rotation11 + m_e12 * _this._transform._rotation21;
		__tmp__12 = m_e10 * _this._transform._rotation02 + m_e11 * _this._transform._rotation12 + m_e12 * _this._transform._rotation22;
		__tmp__20 = m_e20 * _this._transform._rotation00 + m_e21 * _this._transform._rotation10 + m_e22 * _this._transform._rotation20;
		__tmp__21 = m_e20 * _this._transform._rotation01 + m_e21 * _this._transform._rotation11 + m_e22 * _this._transform._rotation21;
		__tmp__22 = m_e20 * _this._transform._rotation02 + m_e21 * _this._transform._rotation12 + m_e22 * _this._transform._rotation22;
		_this._transform._rotation00 = __tmp__00;
		_this._transform._rotation01 = __tmp__01;
		_this._transform._rotation02 = __tmp__02;
		_this._transform._rotation10 = __tmp__10;
		_this._transform._rotation11 = __tmp__11;
		_this._transform._rotation12 = __tmp__12;
		_this._transform._rotation20 = __tmp__20;
		_this._transform._rotation21 = __tmp__21;
		_this._transform._rotation22 = __tmp__22;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = _this._transform._rotation00 * _this._invLocalInertia00 + _this._transform._rotation01 * _this._invLocalInertia10 + _this._transform._rotation02 * _this._invLocalInertia20;
		__tmp__01 = _this._transform._rotation00 * _this._invLocalInertia01 + _this._transform._rotation01 * _this._invLocalInertia11 + _this._transform._rotation02 * _this._invLocalInertia21;
		__tmp__02 = _this._transform._rotation00 * _this._invLocalInertia02 + _this._transform._rotation01 * _this._invLocalInertia12 + _this._transform._rotation02 * _this._invLocalInertia22;
		__tmp__10 = _this._transform._rotation10 * _this._invLocalInertia00 + _this._transform._rotation11 * _this._invLocalInertia10 + _this._transform._rotation12 * _this._invLocalInertia20;
		__tmp__11 = _this._transform._rotation10 * _this._invLocalInertia01 + _this._transform._rotation11 * _this._invLocalInertia11 + _this._transform._rotation12 * _this._invLocalInertia21;
		__tmp__12 = _this._transform._rotation10 * _this._invLocalInertia02 + _this._transform._rotation11 * _this._invLocalInertia12 + _this._transform._rotation12 * _this._invLocalInertia22;
		__tmp__20 = _this._transform._rotation20 * _this._invLocalInertia00 + _this._transform._rotation21 * _this._invLocalInertia10 + _this._transform._rotation22 * _this._invLocalInertia20;
		__tmp__21 = _this._transform._rotation20 * _this._invLocalInertia01 + _this._transform._rotation21 * _this._invLocalInertia11 + _this._transform._rotation22 * _this._invLocalInertia21;
		__tmp__22 = _this._transform._rotation20 * _this._invLocalInertia02 + _this._transform._rotation21 * _this._invLocalInertia12 + _this._transform._rotation22 * _this._invLocalInertia22;
		_this._invInertia00 = __tmp__00;
		_this._invInertia01 = __tmp__01;
		_this._invInertia02 = __tmp__02;
		_this._invInertia10 = __tmp__10;
		_this._invInertia11 = __tmp__11;
		_this._invInertia12 = __tmp__12;
		_this._invInertia20 = __tmp__20;
		_this._invInertia21 = __tmp__21;
		_this._invInertia22 = __tmp__22;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = _this._invInertia00 * _this._transform._rotation00 + _this._invInertia01 * _this._transform._rotation01 + _this._invInertia02 * _this._transform._rotation02;
		__tmp__01 = _this._invInertia00 * _this._transform._rotation10 + _this._invInertia01 * _this._transform._rotation11 + _this._invInertia02 * _this._transform._rotation12;
		__tmp__02 = _this._invInertia00 * _this._transform._rotation20 + _this._invInertia01 * _this._transform._rotation21 + _this._invInertia02 * _this._transform._rotation22;
		__tmp__10 = _this._invInertia10 * _this._transform._rotation00 + _this._invInertia11 * _this._transform._rotation01 + _this._invInertia12 * _this._transform._rotation02;
		__tmp__11 = _this._invInertia10 * _this._transform._rotation10 + _this._invInertia11 * _this._transform._rotation11 + _this._invInertia12 * _this._transform._rotation12;
		__tmp__12 = _this._invInertia10 * _this._transform._rotation20 + _this._invInertia11 * _this._transform._rotation21 + _this._invInertia12 * _this._transform._rotation22;
		__tmp__20 = _this._invInertia20 * _this._transform._rotation00 + _this._invInertia21 * _this._transform._rotation01 + _this._invInertia22 * _this._transform._rotation02;
		__tmp__21 = _this._invInertia20 * _this._transform._rotation10 + _this._invInertia21 * _this._transform._rotation11 + _this._invInertia22 * _this._transform._rotation12;
		__tmp__22 = _this._invInertia20 * _this._transform._rotation20 + _this._invInertia21 * _this._transform._rotation21 + _this._invInertia22 * _this._transform._rotation22;
		_this._invInertia00 = __tmp__00;
		_this._invInertia01 = __tmp__01;
		_this._invInertia02 = __tmp__02;
		_this._invInertia10 = __tmp__10;
		_this._invInertia11 = __tmp__11;
		_this._invInertia12 = __tmp__12;
		_this._invInertia20 = __tmp__20;
		_this._invInertia21 = __tmp__21;
		_this._invInertia22 = __tmp__22;
		_this._invInertia00 *= _this._rotFactor.x;
		_this._invInertia01 *= _this._rotFactor.x;
		_this._invInertia02 *= _this._rotFactor.x;
		_this._invInertia10 *= _this._rotFactor.y;
		_this._invInertia11 *= _this._rotFactor.y;
		_this._invInertia12 *= _this._rotFactor.y;
		_this._invInertia20 *= _this._rotFactor.z;
		_this._invInertia21 *= _this._rotFactor.z;
		_this._invInertia22 *= _this._rotFactor.z;
		var dst = _this._ptransform;
		var src = _this._transform;
		dst._positionX = src._positionX;
		dst._positionY = src._positionY;
		dst._positionZ = src._positionZ;
		dst._rotation00 = src._rotation00;
		dst._rotation01 = src._rotation01;
		dst._rotation02 = src._rotation02;
		dst._rotation10 = src._rotation10;
		dst._rotation11 = src._rotation11;
		dst._rotation12 = src._rotation12;
		dst._rotation20 = src._rotation20;
		dst._rotation21 = src._rotation21;
		dst._rotation22 = src._rotation22;
		var s = _this._shapeList;
		while(s != null) {
			var n = s._next;
			var tf1 = _this._ptransform;
			var tf2 = _this._transform;
			var dst = s._ptransform;
			var src1 = s._localTransform;
			var __tmp__00;
			var __tmp__01;
			var __tmp__02;
			var __tmp__10;
			var __tmp__11;
			var __tmp__12;
			var __tmp__20;
			var __tmp__21;
			var __tmp__22;
			__tmp__00 = tf1._rotation00 * src1._rotation00 + tf1._rotation01 * src1._rotation10 + tf1._rotation02 * src1._rotation20;
			__tmp__01 = tf1._rotation00 * src1._rotation01 + tf1._rotation01 * src1._rotation11 + tf1._rotation02 * src1._rotation21;
			__tmp__02 = tf1._rotation00 * src1._rotation02 + tf1._rotation01 * src1._rotation12 + tf1._rotation02 * src1._rotation22;
			__tmp__10 = tf1._rotation10 * src1._rotation00 + tf1._rotation11 * src1._rotation10 + tf1._rotation12 * src1._rotation20;
			__tmp__11 = tf1._rotation10 * src1._rotation01 + tf1._rotation11 * src1._rotation11 + tf1._rotation12 * src1._rotation21;
			__tmp__12 = tf1._rotation10 * src1._rotation02 + tf1._rotation11 * src1._rotation12 + tf1._rotation12 * src1._rotation22;
			__tmp__20 = tf1._rotation20 * src1._rotation00 + tf1._rotation21 * src1._rotation10 + tf1._rotation22 * src1._rotation20;
			__tmp__21 = tf1._rotation20 * src1._rotation01 + tf1._rotation21 * src1._rotation11 + tf1._rotation22 * src1._rotation21;
			__tmp__22 = tf1._rotation20 * src1._rotation02 + tf1._rotation21 * src1._rotation12 + tf1._rotation22 * src1._rotation22;
			dst._rotation00 = __tmp__00;
			dst._rotation01 = __tmp__01;
			dst._rotation02 = __tmp__02;
			dst._rotation10 = __tmp__10;
			dst._rotation11 = __tmp__11;
			dst._rotation12 = __tmp__12;
			dst._rotation20 = __tmp__20;
			dst._rotation21 = __tmp__21;
			dst._rotation22 = __tmp__22;
			var __tmp__X;
			var __tmp__Y;
			var __tmp__Z;
			__tmp__X = tf1._rotation00 * src1._positionX + tf1._rotation01 * src1._positionY + tf1._rotation02 * src1._positionZ;
			__tmp__Y = tf1._rotation10 * src1._positionX + tf1._rotation11 * src1._positionY + tf1._rotation12 * src1._positionZ;
			__tmp__Z = tf1._rotation20 * src1._positionX + tf1._rotation21 * src1._positionY + tf1._rotation22 * src1._positionZ;
			dst._positionX = __tmp__X;
			dst._positionY = __tmp__Y;
			dst._positionZ = __tmp__Z;
			dst._positionX += tf1._positionX;
			dst._positionY += tf1._positionY;
			dst._positionZ += tf1._positionZ;
			var dst1 = s._transform;
			var src11 = s._localTransform;
			var __tmp__001;
			var __tmp__011;
			var __tmp__021;
			var __tmp__101;
			var __tmp__111;
			var __tmp__121;
			var __tmp__201;
			var __tmp__211;
			var __tmp__221;
			__tmp__001 = tf2._rotation00 * src11._rotation00 + tf2._rotation01 * src11._rotation10 + tf2._rotation02 * src11._rotation20;
			__tmp__011 = tf2._rotation00 * src11._rotation01 + tf2._rotation01 * src11._rotation11 + tf2._rotation02 * src11._rotation21;
			__tmp__021 = tf2._rotation00 * src11._rotation02 + tf2._rotation01 * src11._rotation12 + tf2._rotation02 * src11._rotation22;
			__tmp__101 = tf2._rotation10 * src11._rotation00 + tf2._rotation11 * src11._rotation10 + tf2._rotation12 * src11._rotation20;
			__tmp__111 = tf2._rotation10 * src11._rotation01 + tf2._rotation11 * src11._rotation11 + tf2._rotation12 * src11._rotation21;
			__tmp__121 = tf2._rotation10 * src11._rotation02 + tf2._rotation11 * src11._rotation12 + tf2._rotation12 * src11._rotation22;
			__tmp__201 = tf2._rotation20 * src11._rotation00 + tf2._rotation21 * src11._rotation10 + tf2._rotation22 * src11._rotation20;
			__tmp__211 = tf2._rotation20 * src11._rotation01 + tf2._rotation21 * src11._rotation11 + tf2._rotation22 * src11._rotation21;
			__tmp__221 = tf2._rotation20 * src11._rotation02 + tf2._rotation21 * src11._rotation12 + tf2._rotation22 * src11._rotation22;
			dst1._rotation00 = __tmp__001;
			dst1._rotation01 = __tmp__011;
			dst1._rotation02 = __tmp__021;
			dst1._rotation10 = __tmp__101;
			dst1._rotation11 = __tmp__111;
			dst1._rotation12 = __tmp__121;
			dst1._rotation20 = __tmp__201;
			dst1._rotation21 = __tmp__211;
			dst1._rotation22 = __tmp__221;
			var __tmp__X1;
			var __tmp__Y1;
			var __tmp__Z1;
			__tmp__X1 = tf2._rotation00 * src11._positionX + tf2._rotation01 * src11._positionY + tf2._rotation02 * src11._positionZ;
			__tmp__Y1 = tf2._rotation10 * src11._positionX + tf2._rotation11 * src11._positionY + tf2._rotation12 * src11._positionZ;
			__tmp__Z1 = tf2._rotation20 * src11._positionX + tf2._rotation21 * src11._positionY + tf2._rotation22 * src11._positionZ;
			dst1._positionX = __tmp__X1;
			dst1._positionY = __tmp__Y1;
			dst1._positionZ = __tmp__Z1;
			dst1._positionX += tf2._positionX;
			dst1._positionY += tf2._positionY;
			dst1._positionZ += tf2._positionZ;
			var minX;
			var minY;
			var minZ;
			var maxX;
			var maxY;
			var maxZ;
			s._geom._computeAabb(s._aabb,s._ptransform);
			minX = s._aabb._minX;
			minY = s._aabb._minY;
			minZ = s._aabb._minZ;
			maxX = s._aabb._maxX;
			maxY = s._aabb._maxY;
			maxZ = s._aabb._maxZ;
			s._geom._computeAabb(s._aabb,s._transform);
			s._aabb._minX = minX < s._aabb._minX ? minX : s._aabb._minX;
			s._aabb._minY = minY < s._aabb._minY ? minY : s._aabb._minY;
			s._aabb._minZ = minZ < s._aabb._minZ ? minZ : s._aabb._minZ;
			s._aabb._maxX = maxX > s._aabb._maxX ? maxX : s._aabb._maxX;
			s._aabb._maxY = maxY > s._aabb._maxY ? maxY : s._aabb._maxY;
			s._aabb._maxZ = maxZ > s._aabb._maxZ ? maxZ : s._aabb._maxZ;
			if(s._proxy != null) {
				var dX;
				var dY;
				var dZ;
				dX = s._transform._positionX - s._ptransform._positionX;
				dY = s._transform._positionY - s._ptransform._positionY;
				dZ = s._transform._positionZ - s._ptransform._positionZ;
				var v = s.displacement;
				v.x = dX;
				v.y = dY;
				v.z = dZ;
				s._rigidBody._world._broadPhase.moveProxy(s._proxy,s._aabb,s.displacement);
			}
			s = n;
		}
		_this._sleeping = false;
		_this._sleepTime = 0;
		var _this = this.bullet._shapeList;
		_this._density = 50;
		if(_this._rigidBody != null) {
			var _this1 = _this._rigidBody;
			_this1.updateMass();
			var s = _this1._shapeList;
			while(s != null) {
				var n = s._next;
				var tf1 = _this1._ptransform;
				var tf2 = _this1._transform;
				var dst = s._ptransform;
				var src1 = s._localTransform;
				var __tmp__00;
				var __tmp__01;
				var __tmp__02;
				var __tmp__10;
				var __tmp__11;
				var __tmp__12;
				var __tmp__20;
				var __tmp__21;
				var __tmp__22;
				__tmp__00 = tf1._rotation00 * src1._rotation00 + tf1._rotation01 * src1._rotation10 + tf1._rotation02 * src1._rotation20;
				__tmp__01 = tf1._rotation00 * src1._rotation01 + tf1._rotation01 * src1._rotation11 + tf1._rotation02 * src1._rotation21;
				__tmp__02 = tf1._rotation00 * src1._rotation02 + tf1._rotation01 * src1._rotation12 + tf1._rotation02 * src1._rotation22;
				__tmp__10 = tf1._rotation10 * src1._rotation00 + tf1._rotation11 * src1._rotation10 + tf1._rotation12 * src1._rotation20;
				__tmp__11 = tf1._rotation10 * src1._rotation01 + tf1._rotation11 * src1._rotation11 + tf1._rotation12 * src1._rotation21;
				__tmp__12 = tf1._rotation10 * src1._rotation02 + tf1._rotation11 * src1._rotation12 + tf1._rotation12 * src1._rotation22;
				__tmp__20 = tf1._rotation20 * src1._rotation00 + tf1._rotation21 * src1._rotation10 + tf1._rotation22 * src1._rotation20;
				__tmp__21 = tf1._rotation20 * src1._rotation01 + tf1._rotation21 * src1._rotation11 + tf1._rotation22 * src1._rotation21;
				__tmp__22 = tf1._rotation20 * src1._rotation02 + tf1._rotation21 * src1._rotation12 + tf1._rotation22 * src1._rotation22;
				dst._rotation00 = __tmp__00;
				dst._rotation01 = __tmp__01;
				dst._rotation02 = __tmp__02;
				dst._rotation10 = __tmp__10;
				dst._rotation11 = __tmp__11;
				dst._rotation12 = __tmp__12;
				dst._rotation20 = __tmp__20;
				dst._rotation21 = __tmp__21;
				dst._rotation22 = __tmp__22;
				var __tmp__X;
				var __tmp__Y;
				var __tmp__Z;
				__tmp__X = tf1._rotation00 * src1._positionX + tf1._rotation01 * src1._positionY + tf1._rotation02 * src1._positionZ;
				__tmp__Y = tf1._rotation10 * src1._positionX + tf1._rotation11 * src1._positionY + tf1._rotation12 * src1._positionZ;
				__tmp__Z = tf1._rotation20 * src1._positionX + tf1._rotation21 * src1._positionY + tf1._rotation22 * src1._positionZ;
				dst._positionX = __tmp__X;
				dst._positionY = __tmp__Y;
				dst._positionZ = __tmp__Z;
				dst._positionX += tf1._positionX;
				dst._positionY += tf1._positionY;
				dst._positionZ += tf1._positionZ;
				var dst1 = s._transform;
				var src11 = s._localTransform;
				var __tmp__001;
				var __tmp__011;
				var __tmp__021;
				var __tmp__101;
				var __tmp__111;
				var __tmp__121;
				var __tmp__201;
				var __tmp__211;
				var __tmp__221;
				__tmp__001 = tf2._rotation00 * src11._rotation00 + tf2._rotation01 * src11._rotation10 + tf2._rotation02 * src11._rotation20;
				__tmp__011 = tf2._rotation00 * src11._rotation01 + tf2._rotation01 * src11._rotation11 + tf2._rotation02 * src11._rotation21;
				__tmp__021 = tf2._rotation00 * src11._rotation02 + tf2._rotation01 * src11._rotation12 + tf2._rotation02 * src11._rotation22;
				__tmp__101 = tf2._rotation10 * src11._rotation00 + tf2._rotation11 * src11._rotation10 + tf2._rotation12 * src11._rotation20;
				__tmp__111 = tf2._rotation10 * src11._rotation01 + tf2._rotation11 * src11._rotation11 + tf2._rotation12 * src11._rotation21;
				__tmp__121 = tf2._rotation10 * src11._rotation02 + tf2._rotation11 * src11._rotation12 + tf2._rotation12 * src11._rotation22;
				__tmp__201 = tf2._rotation20 * src11._rotation00 + tf2._rotation21 * src11._rotation10 + tf2._rotation22 * src11._rotation20;
				__tmp__211 = tf2._rotation20 * src11._rotation01 + tf2._rotation21 * src11._rotation11 + tf2._rotation22 * src11._rotation21;
				__tmp__221 = tf2._rotation20 * src11._rotation02 + tf2._rotation21 * src11._rotation12 + tf2._rotation22 * src11._rotation22;
				dst1._rotation00 = __tmp__001;
				dst1._rotation01 = __tmp__011;
				dst1._rotation02 = __tmp__021;
				dst1._rotation10 = __tmp__101;
				dst1._rotation11 = __tmp__111;
				dst1._rotation12 = __tmp__121;
				dst1._rotation20 = __tmp__201;
				dst1._rotation21 = __tmp__211;
				dst1._rotation22 = __tmp__221;
				var __tmp__X1;
				var __tmp__Y1;
				var __tmp__Z1;
				__tmp__X1 = tf2._rotation00 * src11._positionX + tf2._rotation01 * src11._positionY + tf2._rotation02 * src11._positionZ;
				__tmp__Y1 = tf2._rotation10 * src11._positionX + tf2._rotation11 * src11._positionY + tf2._rotation12 * src11._positionZ;
				__tmp__Z1 = tf2._rotation20 * src11._positionX + tf2._rotation21 * src11._positionY + tf2._rotation22 * src11._positionZ;
				dst1._positionX = __tmp__X1;
				dst1._positionY = __tmp__Y1;
				dst1._positionZ = __tmp__Z1;
				dst1._positionX += tf2._positionX;
				dst1._positionY += tf2._positionY;
				dst1._positionZ += tf2._positionZ;
				var minX;
				var minY;
				var minZ;
				var maxX;
				var maxY;
				var maxZ;
				s._geom._computeAabb(s._aabb,s._ptransform);
				minX = s._aabb._minX;
				minY = s._aabb._minY;
				minZ = s._aabb._minZ;
				maxX = s._aabb._maxX;
				maxY = s._aabb._maxY;
				maxZ = s._aabb._maxZ;
				s._geom._computeAabb(s._aabb,s._transform);
				s._aabb._minX = minX < s._aabb._minX ? minX : s._aabb._minX;
				s._aabb._minY = minY < s._aabb._minY ? minY : s._aabb._minY;
				s._aabb._minZ = minZ < s._aabb._minZ ? minZ : s._aabb._minZ;
				s._aabb._maxX = maxX > s._aabb._maxX ? maxX : s._aabb._maxX;
				s._aabb._maxY = maxY > s._aabb._maxY ? maxY : s._aabb._maxY;
				s._aabb._maxZ = maxZ > s._aabb._maxZ ? maxZ : s._aabb._maxZ;
				if(s._proxy != null) {
					var dX;
					var dY;
					var dZ;
					dX = s._transform._positionX - s._ptransform._positionX;
					dY = s._transform._positionY - s._ptransform._positionY;
					dZ = s._transform._positionZ - s._ptransform._positionZ;
					var v = s.displacement;
					v.x = dX;
					v.y = dY;
					v.z = dZ;
					s._rigidBody._world._broadPhase.moveProxy(s._proxy,s._aabb,s.displacement);
				}
				s = n;
			}
		}
		var _this = this.bullet;
		oimo_common_Vec3.numCreations++;
		if(_this._type == 1) {
			_this._velX = 0;
			_this._velY = 0;
			_this._velZ = 0;
		} else {
			_this._velX = 300;
			_this._velY = 0;
			_this._velZ = 0;
		}
		_this._sleeping = false;
		_this._sleepTime = 0;
		var _this = this.bullet;
		oimo_common_Vec3.numCreations++;
		if(_this._type == 1) {
			_this._angVelX = 0;
			_this._angVelY = 0;
			_this._angVelZ = 0;
		} else {
			_this._angVelX = 628.318530717958;
			_this._angVelY = 0;
			_this._angVelZ = 0;
		}
		_this._sleeping = false;
		_this._sleepTime = 0;
	}
	,update: function() {
		var v_x = 0;
		oimo_common_Vec3.numCreations++;
		v_x = this.bullet._transform._positionX;
		var x = 0 - v_x;
		var timeStep = (x > 0 ? x : -x) / 8000;
		var v_x = 0;
		oimo_common_Vec3.numCreations++;
		v_x = this.bullet._transform._positionX;
		if(v_x > 0) {
			timeStep *= 10;
		}
		var maxTimeStep = 0.016666666666666666;
		var v_x = 0;
		oimo_common_Vec3.numCreations++;
		v_x = this.bullet._transform._positionX;
		if(v_x < -10) {
			maxTimeStep = 0.0055555555555555558;
		}
		if(timeStep < 0.0001) {
			timeStep = 0.0001;
		}
		if(timeStep > maxTimeStep) {
			timeStep = maxTimeStep;
		}
		this.dt = timeStep;
		demo_common_DemoBase.prototype.update.call(this);
	}
	,__class__: demo_core_VariableTimeStepDemo
});
var demo_core_VerticalStackingDemo = function() {
	demo_common_DemoBase.call(this,"Vertical Stacking");
};
demo_core_VerticalStackingDemo.__name__ = true;
demo_core_VerticalStackingDemo.__super__ = demo_common_DemoBase;
demo_core_VerticalStackingDemo.prototype = $extend(demo_common_DemoBase.prototype,{
	init: function(world,renderer,input,viewInfo) {
		demo_common_DemoBase.prototype.init.call(this,world,renderer,input,viewInfo);
		var eye_x = 0;
		var eye_y = 16;
		var eye_z = 16;
		oimo_common_Vec3.numCreations++;
		oimo_common_Vec3.numCreations++;
		var up_x = 0;
		var up_y = 1;
		var up_z = 0;
		oimo_common_Vec3.numCreations++;
		var _this = renderer.viewMat;
		var zx = eye_x - 0;
		var zy = eye_y - 2;
		var zz = eye_z - 0;
		var tmp = 1 / Math.sqrt(zx * zx + zy * zy + zz * zz);
		zx *= tmp;
		zy *= tmp;
		zz *= tmp;
		var xx = up_y * zz - up_z * zy;
		var xy = up_z * zx - up_x * zz;
		var xz = up_x * zy - up_y * zx;
		tmp = 1 / Math.sqrt(xx * xx + xy * xy + xz * xz);
		xx *= tmp;
		xy *= tmp;
		xz *= tmp;
		var yx = zy * xz - zz * xy;
		var yy = zz * xx - zx * xz;
		var yz = zx * xy - zy * xx;
		_this.e00 = xx;
		_this.e01 = xy;
		_this.e02 = xz;
		_this.e03 = -(xx * eye_x + xy * eye_y + xz * eye_z);
		_this.e10 = yx;
		_this.e11 = yy;
		_this.e12 = yz;
		_this.e13 = -(yx * eye_x + yy * eye_y + yz * eye_z);
		_this.e20 = zx;
		_this.e21 = zy;
		_this.e22 = zz;
		_this.e23 = -(zx * eye_x + zy * eye_y + zz * eye_z);
		_this.e30 = 0;
		_this.e31 = 0;
		_this.e32 = 0;
		_this.e33 = 1;
		demo_common_OimoUtil.addBox(world,new oimo_common_Vec3(0,-0.5,0),new oimo_common_Vec3(10,0.5,6),true);
		var sp = 3;
		var tmp = oimo_common_Setting.defaultRestitution;
		oimo_common_Setting.defaultRestitution = 0;
		var _g = -2;
		while(_g < 3) {
			var i = _g++;
			var _g1 = 0;
			var _g2 = 6 + 2 * (i + 2);
			while(_g1 < _g2) demo_common_OimoUtil.addBox(world,new oimo_common_Vec3(i * sp + (-0.01 + Math.random() * 0.02),0.4 + _g1++ * 0.4 * 2.2,-0.01 + Math.random() * 0.02),new oimo_common_Vec3(0.4,0.4,0.4),false);
		}
		oimo_common_Setting.defaultRestitution = tmp;
	}
	,update: function() {
		demo_common_DemoBase.prototype.update.call(this);
		this.teleportRigidBodies(-20,10,5,5);
	}
	,__class__: demo_core_VerticalStackingDemo
});
var demo_js_minilib_OMain = function(canvas) {
	this.canvas = canvas;
	this.input = new demo_js_minilib_OInput();
	this.__setup();
};
demo_js_minilib_OMain.__name__ = true;
demo_js_minilib_OMain.prototype = {
	__setup: function() {
		this.__state = 0;
		this.frameCount = 0;
		this.setup();
		if(this.__state != 1) {
			throw haxe_Exception.thrown("call init()");
		}
		this.__state = 2;
		var _gthis = this;
		if(this.__state != 2) {
			throw haxe_Exception.thrown("invalid call");
		}
		var touchCount = 0;
		var firstTouchId = -1;
		var scalingRatio = window.devicePixelRatio;
		var elementX = function() {
			return _gthis.canvas.getBoundingClientRect().left;
		};
		var elementY = function() {
			return _gthis.canvas.getBoundingClientRect().top;
		};
		var body = this.canvas;
		this.canvas.addEventListener("touchstart",function(e) {
			if(e.cancelable) {
				e.preventDefault();
			}
			if(firstTouchId == -1) {
				firstTouchId = e.changedTouches[0].identifier;
			}
			var _g = 0;
			var _g1 = e.changedTouches.length;
			while(_g < _g1) {
				var touch = e.changedTouches[_g++];
				if(touch.identifier == firstTouchId) {
					var tmp = touch.clientX - elementX();
					_gthis.input._ntouchX = tmp * scalingRatio;
					var tmp1 = touch.clientY - elementY();
					_gthis.input._ntouchY = tmp1 * scalingRatio;
					_gthis.input._ntouch = true;
				}
			}
			touchCount += e.changedTouches.length;
		});
		body.addEventListener("touchmove",function(e) {
			if(e.cancelable) {
				e.preventDefault();
			}
			var _g = 0;
			var _g1 = e.touches.length;
			while(_g < _g1) {
				var touch = e.touches[_g++];
				if(touch.identifier == firstTouchId) {
					var tmp = touch.clientX - elementX();
					_gthis.input._ntouchX = tmp * scalingRatio;
					var tmp1 = touch.clientY - elementY();
					_gthis.input._ntouchY = tmp1 * scalingRatio;
				}
			}
		});
		var touchend = function(e) {
			if(e.cancelable) {
				e.preventDefault();
			}
			var _g = 0;
			var _g1 = e.changedTouches.length;
			while(_g < _g1) {
				var touch = e.changedTouches[_g++];
				if(touch.identifier == firstTouchId) {
					firstTouchId = -1;
					var touchend = touch.clientX - elementX();
					_gthis.input._ntouchX = touchend * scalingRatio;
					var touchend1 = touch.clientY - elementY();
					_gthis.input._ntouchY = touchend1 * scalingRatio;
					_gthis.input._ntouch = false;
				}
			}
			touchCount -= e.changedTouches.length;
		};
		body.addEventListener("touchend",touchend);
		body.addEventListener("touchcancel",touchend);
		body.addEventListener("mousedown",function(e) {
			if(e.cancelable) {
				e.preventDefault();
			}
			switch(e.button) {
			case 0:
				_gthis.input._nmouseL = true;
				break;
			case 2:
				_gthis.input._nmouseR = true;
				break;
			}
			var tmp = e.clientX - elementX();
			_gthis.input._nmouseX = tmp * scalingRatio;
			var tmp = e.clientY - elementY();
			_gthis.input._nmouseY = tmp * scalingRatio;
		});
		body.addEventListener("mouseup",function(e) {
			if(e.cancelable) {
				e.preventDefault();
			}
			switch(e.button) {
			case 0:
				_gthis.input._nmouseL = false;
				break;
			case 2:
				_gthis.input._nmouseR = false;
				break;
			}
			var tmp = e.clientX - elementX();
			_gthis.input._nmouseX = tmp * scalingRatio;
			var tmp = e.clientY - elementY();
			_gthis.input._nmouseY = tmp * scalingRatio;
		});
		body.addEventListener("mousemove",function(e) {
			if(e.cancelable) {
				e.preventDefault();
			}
			var tmp = e.clientX - elementX();
			_gthis.input._nmouseX = tmp * scalingRatio;
			var tmp = e.clientY - elementY();
			_gthis.input._nmouseY = tmp * scalingRatio;
		});
		body.oncontextmenu = function(e) {
			return false;
		};
		this.__state = 3;
		var _this = this.__timer;
		_this.running = true;
		_this.expectedNextTime = new Date().getTime();
		_this.loop();
	}
	,setup: function() {
		throw haxe_Exception.thrown("override this");
	}
	,__loop: function() {
		if(this.__state != 3) {
			throw haxe_Exception.thrown("invalid call");
		}
		this.frameCount++;
		this.input._update();
		this.loop();
	}
	,loop: function() {
		throw haxe_Exception.thrown("override this");
	}
	,__class__: demo_js_minilib_OMain
};
var demo_js_DemoJS = function(canvas) {
	demo_js_minilib_OMain.call(this,canvas);
};
demo_js_DemoJS.__name__ = true;
demo_js_DemoJS.main = function() {
	window.onload = function() {
		new demo_js_DemoJS(window.document.getElementById("canvas"));
	};
};
demo_js_DemoJS.__super__ = demo_js_minilib_OMain;
demo_js_DemoJS.prototype = $extend(demo_js_minilib_OMain.prototype,{
	setup: function() {
		if(this.__state != 0) {
			throw haxe_Exception.thrown("invalid call");
		}
		this.__state = 1;
		var pixelRatio = window.devicePixelRatio;
		var widthPix = window.innerWidth;
		var heightPix = window.innerHeight;
		window.document.body.style.margin = "0";
		this.__width = widthPix * pixelRatio | 0;
		this.__height = heightPix * pixelRatio | 0;
		this.__screenWidth = this.__width;
		this.__screenHeight = this.__height;
		this.canvas.style.width = widthPix + "px";
		this.canvas.style.height = heightPix + "px";
		this.canvas.width = this.__width;
		this.canvas.height = this.__height;
		var dom = this.canvas.parentElement;
		while(dom != null) {
			dom.style.overflow = "hidden";
			dom = dom.parentElement;
		}
		this.gl = js_html__$CanvasElement_CanvasUtil.getContextWebGL(this.canvas,null);
		this.__timer = new demo_js_minilib_OTimer(60,$bind(this,this.__loop));
		var a = this.__width;
		var b = this.__height;
		this.textScale = (a < b ? a : b) / 600;
		this.initText();
		this.initUserInput();
		this.test = new demo_common_DemoMain(this.__width,this.__height);
		this.test.init(new demo_js_WebGLDebugGraphics(this.gl));
		console.log("demos/src/demo/js/DemoJS.hx:24:","OimoPhysics demo is running...");
		console.log("demos/src/demo/js/DemoJS.hx:25:","width: " + this.canvas.width + ", height: " + this.canvas.height);
	}
	,initUserInput: function() {
		var _gthis = this;
		window.document.addEventListener("keydown",function(e) {
			_gthis.test.keyPressed(e.keyCode);
			if(!(e.keyCode >= 112 && e.keyCode <= 123)) {
				e.preventDefault();
			}
		});
		window.document.addEventListener("keyup",function(e) {
			_gthis.test.keyReleased(e.keyCode);
		});
	}
	,initText: function() {
		window.document.getElementById("container").style.position = "relative";
		this.textCanvas = window.document.getElementById("text");
		this.textCanvas.width = this.canvas.width;
		this.textCanvas.height = this.canvas.height;
		this.textCanvas.style.width = this.canvas.style.width;
		this.textCanvas.style.height = this.canvas.style.height;
		this.g = this.textCanvas.getContext("2d",null);
		this.g.font = 12 * this.textScale + "px Courier New";
		this.g.fillStyle = "#fff";
		this.g.textBaseline = "top";
		var textStyle = this.textCanvas.style;
		textStyle.position = "absolute";
		textStyle.left = "0px";
		textStyle.top = "0px";
		textStyle.zIndex = "1";
	}
	,loop: function() {
		this.test.mouseMoved(this.input.mouseX + this.input.touchX,this.input.mouseY + this.input.touchY);
		if(this.input.mouseL && !this.input.pmouseL || this.input.touch && !this.input.ptouch) {
			this.test.mouseLPressed();
		}
		if(!this.input.mouseL && this.input.pmouseL || !this.input.touch && this.input.ptouch) {
			this.test.mouseLReleased();
		}
		if(this.input.mouseR && !this.input.pmouseR) {
			this.test.mouseRPressed();
		}
		if(!this.input.mouseR && this.input.pmouseR) {
			this.test.mouseRReleased();
		}
		this.test.loop();
		this.g.clearRect(0,0,this.__width,this.__height);
		var lines = this.test.text.split("\n");
		var y = 8;
		var a = 15 * this.textScale;
		var lineHeight = a < 0 ? a - 0.5 | 0 : a + 0.5 | 0;
		var controlIndex = -1;
		var _g = 0;
		while(_g < lines.length) {
			var line = lines[_g];
			++_g;
			var w = this.g.measureText(line).width + 4;
			this.g.save();
			if(this.input.mouseX >= 8 && this.input.mouseX < 8 + w && this.input.mouseY >= y && this.input.mouseY < y + lineHeight || (this.input.touch || this.input.ptouch) && this.input.touchX >= 8 && this.input.touchX < 8 + w && this.input.touchY >= y && this.input.touchY < y + lineHeight) {
				if((this.input.dmouseL == 1 || this.input.dtouch == -1) && controlIndex >= 0) {
					this.test.action(controlIndex);
				}
				this.g.fillStyle = "rgba(192, 0, 0, 0.5)";
			} else {
				this.g.fillStyle = "rgba(0, 0, 0, 0.5)";
			}
			this.g.fillRect(8,y,w,lineHeight);
			this.g.restore();
			this.g.fillText(line,8,y);
			if(controlIndex >= 0) {
				++controlIndex;
			}
			if(line == "Control") {
				controlIndex = 0;
			}
			y += lineHeight;
		}
	}
	,__class__: demo_js_DemoJS
});
var oimo_dynamics_common_DebugDraw = function() {
	this.p = new oimo_common_Pool();
	this.wireframe = false;
	this.drawShapes = true;
	this.drawBvh = false;
	this.drawBvhMinLevel = 0;
	this.drawBvhMaxLevel = 65536;
	this.drawAabbs = false;
	this.drawBases = false;
	this.drawPairs = false;
	this.drawContacts = false;
	this.drawJoints = true;
	this.drawJointLimits = false;
	this.sphereCoords = new Array(5);
	this.tmpSphereVerts = new Array(5);
	this.tmpSphereNorms = new Array(5);
	var _g = 0;
	while(_g < 5) {
		var i = _g++;
		var num = i == 0 || i == 4 ? 1 : 8;
		this.sphereCoords[i] = new Array(num);
		this.tmpSphereVerts[i] = new Array(num);
		this.tmpSphereNorms[i] = new Array(num);
		var _g1 = 0;
		while(_g1 < 8) {
			var j = _g1++;
			var theta = i * 0.7853981633974475;
			var phi = j * 0.7853981633974475;
			this.sphereCoords[i][j] = new oimo_common_Vec3(Math.sin(theta) * Math.cos(phi),Math.cos(theta),-Math.sin(theta) * Math.sin(phi));
			this.tmpSphereVerts[i][j] = new oimo_common_Vec3();
			this.tmpSphereNorms[i][j] = new oimo_common_Vec3();
		}
	}
	this.circleCoords = new Array(8);
	this.circleCoordsShift = new Array(8);
	this.tmpCircleVerts1 = new Array(8);
	this.tmpCircleVerts2 = new Array(8);
	this.tmpCircleNorms = new Array(8);
	var _g = 0;
	while(_g < 8) {
		var i = _g++;
		this.circleCoords[i] = new oimo_common_Vec3(Math.cos(i * 0.7853981633974475),0,-Math.sin(i * 0.7853981633974475));
		this.circleCoordsShift[i] = new oimo_common_Vec3(Math.cos((i + 0.5) * 0.7853981633974475),0,-Math.sin((i + 0.5) * 0.7853981633974475));
		this.tmpCircleVerts1[i] = new oimo_common_Vec3();
		this.tmpCircleVerts2[i] = new oimo_common_Vec3();
		this.tmpCircleNorms[i] = new oimo_common_Vec3();
	}
	this.style = new oimo_dynamics_common_DebugDrawStyle();
};
oimo_dynamics_common_DebugDraw.__name__ = true;
oimo_dynamics_common_DebugDraw.prototype = {
	aabb: function(min,max,color) {
		var _this = this.p;
		var v1 = (_this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3]).init(min.x,min.y,min.z);
		var _this = this.p;
		var v2 = (_this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3]).init(min.x,min.y,max.z);
		var _this = this.p;
		var v3 = (_this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3]).init(min.x,max.y,min.z);
		var _this = this.p;
		var v4 = (_this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3]).init(min.x,max.y,max.z);
		var _this = this.p;
		var v5 = (_this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3]).init(max.x,min.y,min.z);
		var _this = this.p;
		var v6 = (_this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3]).init(max.x,min.y,max.z);
		var _this = this.p;
		var v7 = (_this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3]).init(max.x,max.y,min.z);
		var _this = this.p;
		var v8 = (_this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3]).init(max.x,max.y,max.z);
		this.line(v1,v2,color);
		this.line(v3,v4,color);
		this.line(v5,v6,color);
		this.line(v7,v8,color);
		this.line(v1,v3,color);
		this.line(v2,v4,color);
		this.line(v5,v7,color);
		this.line(v6,v8,color);
		this.line(v1,v5,color);
		this.line(v2,v6,color);
		this.line(v3,v7,color);
		this.line(v4,v8,color);
		var _this = this.p;
		if(v1 != null) {
			v1.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newArray = new Array(_this.sizeVec3 << 1);
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = v1;
		}
		var _this = this.p;
		if(v2 != null) {
			v2.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newArray = new Array(_this.sizeVec3 << 1);
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = v2;
		}
		var _this = this.p;
		if(v3 != null) {
			v3.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newArray = new Array(_this.sizeVec3 << 1);
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = v3;
		}
		var _this = this.p;
		if(v4 != null) {
			v4.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newArray = new Array(_this.sizeVec3 << 1);
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = v4;
		}
		var _this = this.p;
		if(v5 != null) {
			v5.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newArray = new Array(_this.sizeVec3 << 1);
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = v5;
		}
		var _this = this.p;
		if(v6 != null) {
			v6.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newArray = new Array(_this.sizeVec3 << 1);
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = v6;
		}
		var _this = this.p;
		if(v7 != null) {
			v7.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newArray = new Array(_this.sizeVec3 << 1);
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = v7;
		}
		var _this = this.p;
		if(v8 != null) {
			v8.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newArray = new Array(_this.sizeVec3 << 1);
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = v8;
		}
	}
	,basis: function(transform,length,colorX,colorY,colorZ) {
		var _this = this.p;
		var pos = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		var _this = this.p;
		var rot = _this.sizeMat3 == 0 ? new oimo_common_Mat3() : _this.stackMat3[--_this.sizeMat3];
		var _this = this.p;
		var ex = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		var _this = this.p;
		var ey = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		var _this = this.p;
		var ez = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		var v = pos;
		v.x = transform._positionX;
		v.y = transform._positionY;
		v.z = transform._positionZ;
		var m = rot;
		m.e00 = transform._rotation00;
		m.e01 = transform._rotation01;
		m.e02 = transform._rotation02;
		m.e10 = transform._rotation10;
		m.e11 = transform._rotation11;
		m.e12 = transform._rotation12;
		m.e20 = transform._rotation20;
		m.e21 = transform._rotation21;
		m.e22 = transform._rotation22;
		ex.init(rot.e00,rot.e10,rot.e20);
		ey.init(rot.e01,rot.e11,rot.e21);
		ez.init(rot.e02,rot.e12,rot.e22);
		ex.x *= length;
		ex.y *= length;
		ex.z *= length;
		var _this = ex;
		_this.x += pos.x;
		_this.y += pos.y;
		_this.z += pos.z;
		ey.x *= length;
		ey.y *= length;
		ey.z *= length;
		var _this = ey;
		_this.x += pos.x;
		_this.y += pos.y;
		_this.z += pos.z;
		ez.x *= length;
		ez.y *= length;
		ez.z *= length;
		var _this = ez;
		_this.x += pos.x;
		_this.y += pos.y;
		_this.z += pos.z;
		this.line(pos,ex,colorX);
		this.line(pos,ey,colorY);
		this.line(pos,ez,colorZ);
		var _this = this.p;
		if(pos != null) {
			pos.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newArray = new Array(_this.sizeVec3 << 1);
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = pos;
		}
		var _this = this.p;
		if(rot != null) {
			rot.e00 = 1;
			rot.e01 = 0;
			rot.e02 = 0;
			rot.e10 = 0;
			rot.e11 = 1;
			rot.e12 = 0;
			rot.e20 = 0;
			rot.e21 = 0;
			rot.e22 = 1;
			if(_this.sizeMat3 == _this.stackMat3.length) {
				var newArray = new Array(_this.sizeMat3 << 1);
				var _g = 0;
				var _g1 = _this.sizeMat3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat3[i];
					_this.stackMat3[i] = null;
				}
				_this.stackMat3 = newArray;
			}
			_this.stackMat3[_this.sizeMat3++] = rot;
		}
		var _this = this.p;
		if(ex != null) {
			ex.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newArray = new Array(_this.sizeVec3 << 1);
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = ex;
		}
		var _this = this.p;
		if(ey != null) {
			ey.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newArray = new Array(_this.sizeVec3 << 1);
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = ey;
		}
		var _this = this.p;
		if(ez != null) {
			ez.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newArray = new Array(_this.sizeVec3 << 1);
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = ez;
		}
	}
	,ellipse: function(center,ex,ey,radiusX,radiusY,color) {
		this.arc(center,ex,ey,radiusX,radiusY,0,6.28318530717958,false,color);
	}
	,arc: function(center,ex,ey,radiusX,radiusY,startAngle,endAngle,drawSector,color) {
		var _this = this.p;
		var _this1 = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		_this1.x = ex.x;
		_this1.y = ex.y;
		_this1.z = ex.z;
		var _this = _this1;
		_this.x *= radiusX;
		_this.y *= radiusX;
		_this.z *= radiusX;
		ex = _this;
		var _this1 = this.p;
		var _this2 = _this1.sizeVec3 == 0 ? new oimo_common_Vec3() : _this1.stackVec3[--_this1.sizeVec3];
		_this2.x = ey.x;
		_this2.y = ey.y;
		_this2.z = ey.z;
		var _this1 = _this2;
		_this1.x *= radiusY;
		_this1.y *= radiusY;
		_this1.z *= radiusY;
		ey = _this1;
		var angDiff = endAngle - startAngle;
		if(angDiff < 0) {
			angDiff = -angDiff;
		}
		var n = angDiff / 0.52359877559829837 + 0.5 | 0;
		if(n == 0) {
			n = 1;
		}
		var theta = startAngle;
		var dt = (endAngle - startAngle) / n;
		var _this2 = this.p;
		var _this3 = _this2.sizeVec3 == 0 ? new oimo_common_Vec3() : _this2.stackVec3[--_this2.sizeVec3];
		_this3.x = center.x;
		_this3.y = center.y;
		_this3.z = center.z;
		var _this2 = _this3;
		var s = Math.cos(startAngle);
		_this2.x += _this.x * s;
		_this2.y += _this.y * s;
		_this2.z += _this.z * s;
		var s = Math.sin(startAngle);
		_this2.x += _this1.x * s;
		_this2.y += _this1.y * s;
		_this2.z += _this1.z * s;
		var prevV = _this2;
		if(drawSector) {
			this.line(center,_this2,color);
		}
		var _g = 0;
		var _g1 = n;
		while(_g < _g1) {
			++_g;
			theta += dt;
			var _this2 = this.p;
			var _this3 = _this2.sizeVec3 == 0 ? new oimo_common_Vec3() : _this2.stackVec3[--_this2.sizeVec3];
			_this3.x = center.x;
			_this3.y = center.y;
			_this3.z = center.z;
			var _this4 = _this3;
			var s = Math.cos(theta);
			_this4.x += _this.x * s;
			_this4.y += _this.y * s;
			_this4.z += _this.z * s;
			var s1 = Math.sin(theta);
			_this4.x += _this1.x * s1;
			_this4.y += _this1.y * s1;
			_this4.z += _this1.z * s1;
			this.line(prevV,_this4,color);
			var _this5 = this.p;
			if(prevV != null) {
				prevV.zero();
				if(_this5.sizeVec3 == _this5.stackVec3.length) {
					var newArray = new Array(_this5.sizeVec3 << 1);
					var _g2 = 0;
					var _g11 = _this5.sizeVec3;
					while(_g2 < _g11) {
						var i = _g2++;
						newArray[i] = _this5.stackVec3[i];
						_this5.stackVec3[i] = null;
					}
					_this5.stackVec3 = newArray;
				}
				_this5.stackVec3[_this5.sizeVec3++] = prevV;
			}
			prevV = _this4;
		}
		if(drawSector) {
			this.line(center,prevV,color);
		}
		var _this2 = this.p;
		if(prevV != null) {
			prevV.zero();
			if(_this2.sizeVec3 == _this2.stackVec3.length) {
				var newArray = new Array(_this2.sizeVec3 << 1);
				var _g = 0;
				var _g1 = _this2.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this2.stackVec3[i];
					_this2.stackVec3[i] = null;
				}
				_this2.stackVec3 = newArray;
			}
			_this2.stackVec3[_this2.sizeVec3++] = prevV;
		}
		var _this2 = this.p;
		if(_this != null) {
			_this.zero();
			if(_this2.sizeVec3 == _this2.stackVec3.length) {
				var newArray = new Array(_this2.sizeVec3 << 1);
				var _g = 0;
				var _g1 = _this2.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this2.stackVec3[i];
					_this2.stackVec3[i] = null;
				}
				_this2.stackVec3 = newArray;
			}
			_this2.stackVec3[_this2.sizeVec3++] = _this;
		}
		var _this = this.p;
		if(_this1 != null) {
			_this1.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newArray = new Array(_this.sizeVec3 << 1);
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = _this1;
		}
	}
	,cone: function(tf,radius,halfHeight,color) {
		var _this = this.p;
		var ex = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		var _this = this.p;
		var ey = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		var _this = this.p;
		var ez = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		var _this = this.p;
		var o = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		var _this = this.p;
		var m = _this.sizeMat3 == 0 ? new oimo_common_Mat3() : _this.stackMat3[--_this.sizeMat3];
		var v = o;
		v.x = tf._positionX;
		v.y = tf._positionY;
		v.z = tf._positionZ;
		var m1 = m;
		m1.e00 = tf._rotation00;
		m1.e01 = tf._rotation01;
		m1.e02 = tf._rotation02;
		m1.e10 = tf._rotation10;
		m1.e11 = tf._rotation11;
		m1.e12 = tf._rotation12;
		m1.e20 = tf._rotation20;
		m1.e21 = tf._rotation21;
		m1.e22 = tf._rotation22;
		ex.init(m.e00,m.e10,m.e20);
		ey.init(m.e01,m.e11,m.e21);
		ez.init(m.e02,m.e12,m.e22);
		var _this = this.p;
		var _this1 = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		_this1.x = o.x;
		_this1.y = o.y;
		_this1.z = o.z;
		var _this = _this1;
		_this.x += ey.x * halfHeight;
		_this.y += ey.y * halfHeight;
		_this.z += ey.z * halfHeight;
		var _this1 = this.p;
		var _this2 = _this1.sizeVec3 == 0 ? new oimo_common_Vec3() : _this1.stackVec3[--_this1.sizeVec3];
		_this2.x = o.x;
		_this2.y = o.y;
		_this2.z = o.z;
		var _this1 = _this2;
		var s = -halfHeight;
		_this1.x += ey.x * s;
		_this1.y += ey.y * s;
		_this1.z += ey.z * s;
		if(this.wireframe) {
			var _this2 = this.p;
			var _this3 = _this2.sizeVec3 == 0 ? new oimo_common_Vec3() : _this2.stackVec3[--_this2.sizeVec3];
			_this3.x = _this1.x;
			_this3.y = _this1.y;
			_this3.z = _this1.z;
			var _this2 = _this3;
			var s = -radius;
			_this2.x += ex.x * s;
			_this2.y += ex.y * s;
			_this2.z += ex.z * s;
			_this2.x += ez.x * 0;
			_this2.y += ez.y * 0;
			_this2.z += ez.z * 0;
			var _this3 = this.p;
			var _this4 = _this3.sizeVec3 == 0 ? new oimo_common_Vec3() : _this3.stackVec3[--_this3.sizeVec3];
			_this4.x = _this1.x;
			_this4.y = _this1.y;
			_this4.z = _this1.z;
			var _this3 = _this4;
			_this3.x += ex.x * radius;
			_this3.y += ex.y * radius;
			_this3.z += ex.z * radius;
			_this3.x += ez.x * 0;
			_this3.y += ez.y * 0;
			_this3.z += ez.z * 0;
			var _this4 = this.p;
			var _this5 = _this4.sizeVec3 == 0 ? new oimo_common_Vec3() : _this4.stackVec3[--_this4.sizeVec3];
			_this5.x = _this1.x;
			_this5.y = _this1.y;
			_this5.z = _this1.z;
			var _this4 = _this5;
			_this4.x += ex.x * 0;
			_this4.y += ex.y * 0;
			_this4.z += ex.z * 0;
			var s = -radius;
			_this4.x += ez.x * s;
			_this4.y += ez.y * s;
			_this4.z += ez.z * s;
			var _this5 = this.p;
			var _this6 = _this5.sizeVec3 == 0 ? new oimo_common_Vec3() : _this5.stackVec3[--_this5.sizeVec3];
			_this6.x = _this1.x;
			_this6.y = _this1.y;
			_this6.z = _this1.z;
			var _this5 = _this6;
			_this5.x += ex.x * 0;
			_this5.y += ex.y * 0;
			_this5.z += ex.z * 0;
			_this5.x += ez.x * radius;
			_this5.y += ez.y * radius;
			_this5.z += ez.z * radius;
			this.ellipse(_this1,ex,ez,radius,radius,color);
			this.line(_this,_this2,color);
			this.line(_this,_this3,color);
			this.line(_this,_this4,color);
			this.line(_this,_this5,color);
			var _this6 = this.p;
			if(_this2 != null) {
				_this2.zero();
				if(_this6.sizeVec3 == _this6.stackVec3.length) {
					var newArray = new Array(_this6.sizeVec3 << 1);
					var _g = 0;
					var _g1 = _this6.sizeVec3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this6.stackVec3[i];
						_this6.stackVec3[i] = null;
					}
					_this6.stackVec3 = newArray;
				}
				_this6.stackVec3[_this6.sizeVec3++] = _this2;
			}
			var _this2 = this.p;
			if(_this3 != null) {
				_this3.zero();
				if(_this2.sizeVec3 == _this2.stackVec3.length) {
					var newArray = new Array(_this2.sizeVec3 << 1);
					var _g = 0;
					var _g1 = _this2.sizeVec3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this2.stackVec3[i];
						_this2.stackVec3[i] = null;
					}
					_this2.stackVec3 = newArray;
				}
				_this2.stackVec3[_this2.sizeVec3++] = _this3;
			}
			var _this2 = this.p;
			if(_this4 != null) {
				_this4.zero();
				if(_this2.sizeVec3 == _this2.stackVec3.length) {
					var newArray = new Array(_this2.sizeVec3 << 1);
					var _g = 0;
					var _g1 = _this2.sizeVec3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this2.stackVec3[i];
						_this2.stackVec3[i] = null;
					}
					_this2.stackVec3 = newArray;
				}
				_this2.stackVec3[_this2.sizeVec3++] = _this4;
			}
			var _this2 = this.p;
			if(_this5 != null) {
				_this5.zero();
				if(_this2.sizeVec3 == _this2.stackVec3.length) {
					var newArray = new Array(_this2.sizeVec3 << 1);
					var _g = 0;
					var _g1 = _this2.sizeVec3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this2.stackVec3[i];
						_this2.stackVec3[i] = null;
					}
					_this2.stackVec3 = newArray;
				}
				_this2.stackVec3[_this2.sizeVec3++] = _this5;
			}
		} else {
			var invDenom = 1 / Math.sqrt(radius * radius + 4 * halfHeight * halfHeight);
			var cos = 2 * halfHeight * invDenom;
			var sin = radius * invDenom;
			var _g = 0;
			while(_g < 8) {
				var i = _g++;
				var _this2 = this.tmpCircleNorms[i];
				var v = this.circleCoords[i];
				_this2.x = v.x;
				_this2.y = v.y;
				_this2.z = v.z;
				_this2.x *= cos;
				_this2.y *= cos;
				_this2.z *= cos;
				_this2.y += sin;
				var _this3 = this.tmpCircleNorms[i];
				var y = _this3.x * m.e10 + _this3.y * m.e11 + _this3.z * m.e12;
				var z = _this3.x * m.e20 + _this3.y * m.e21 + _this3.z * m.e22;
				_this3.x = _this3.x * m.e00 + _this3.y * m.e01 + _this3.z * m.e02;
				_this3.y = y;
				_this3.z = z;
				var _this4 = this.tmpCircleVerts1[i];
				var v1 = this.circleCoordsShift[i];
				_this4.x = v1.x;
				_this4.y = v1.y;
				_this4.z = v1.z;
				_this4.x *= cos;
				_this4.y *= cos;
				_this4.z *= cos;
				_this4.y += sin;
				var _this5 = this.tmpCircleVerts1[i];
				var y1 = _this5.x * m.e10 + _this5.y * m.e11 + _this5.z * m.e12;
				var z1 = _this5.x * m.e20 + _this5.y * m.e21 + _this5.z * m.e22;
				_this5.x = _this5.x * m.e00 + _this5.y * m.e01 + _this5.z * m.e02;
				_this5.y = y1;
				_this5.z = z1;
				var _this6 = this.tmpCircleVerts2[i];
				var v2 = this.circleCoords[i];
				_this6.x = v2.x;
				_this6.y = v2.y;
				_this6.z = v2.z;
				var y2 = _this6.x * m.e10 + _this6.y * m.e11 + _this6.z * m.e12;
				var z2 = _this6.x * m.e20 + _this6.y * m.e21 + _this6.z * m.e22;
				_this6.x = _this6.x * m.e00 + _this6.y * m.e01 + _this6.z * m.e02;
				_this6.y = y2;
				_this6.z = z2;
				_this6.x *= radius;
				_this6.y *= radius;
				_this6.z *= radius;
				_this6.x += o.x;
				_this6.y += o.y;
				_this6.z += o.z;
				var _this7 = this.tmpCircleVerts2[i];
				var s = -halfHeight;
				_this7.x += ey.x * s;
				_this7.y += ey.y * s;
				_this7.z += ey.z * s;
			}
			var _g = 0;
			while(_g < 8) {
				var i = _g++;
				var v2 = this.tmpCircleVerts2[i];
				var v3 = this.tmpCircleVerts2[(i + 1) % 8];
				var n1 = this.tmpCircleVerts1[i];
				this.triangle(_this,v2,v3,n1,this.tmpCircleNorms[i],this.tmpCircleNorms[(i + 1) % 8],color);
				v2 = this.tmpCircleVerts2[(i + 1) % 8];
				v3 = this.tmpCircleVerts2[i];
				var _this2 = this.p;
				var _this3 = _this2.sizeVec3 == 0 ? new oimo_common_Vec3() : _this2.stackVec3[--_this2.sizeVec3];
				_this3.x = ey.x;
				_this3.y = ey.y;
				_this3.z = ey.z;
				var _this4 = _this3;
				_this4.x = -_this4.x;
				_this4.y = -_this4.y;
				_this4.z = -_this4.z;
				n1 = _this4;
				this.triangle(_this1,v2,v3,_this4,_this4,_this4,color);
				var _this5 = this.p;
				if(_this4 != null) {
					_this4.zero();
					if(_this5.sizeVec3 == _this5.stackVec3.length) {
						var newArray = new Array(_this5.sizeVec3 << 1);
						var _g1 = 0;
						var _g11 = _this5.sizeVec3;
						while(_g1 < _g11) {
							var i1 = _g1++;
							newArray[i1] = _this5.stackVec3[i1];
							_this5.stackVec3[i1] = null;
						}
						_this5.stackVec3 = newArray;
					}
					_this5.stackVec3[_this5.sizeVec3++] = _this4;
				}
			}
		}
		var _this2 = this.p;
		if(_this != null) {
			_this.zero();
			if(_this2.sizeVec3 == _this2.stackVec3.length) {
				var newArray = new Array(_this2.sizeVec3 << 1);
				var _g = 0;
				var _g1 = _this2.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this2.stackVec3[i];
					_this2.stackVec3[i] = null;
				}
				_this2.stackVec3 = newArray;
			}
			_this2.stackVec3[_this2.sizeVec3++] = _this;
		}
		var _this = this.p;
		if(_this1 != null) {
			_this1.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newArray = new Array(_this.sizeVec3 << 1);
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = _this1;
		}
		var _this = this.p;
		if(o != null) {
			o.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newArray = new Array(_this.sizeVec3 << 1);
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = o;
		}
		var _this = this.p;
		if(m != null) {
			m.e00 = 1;
			m.e01 = 0;
			m.e02 = 0;
			m.e10 = 0;
			m.e11 = 1;
			m.e12 = 0;
			m.e20 = 0;
			m.e21 = 0;
			m.e22 = 1;
			if(_this.sizeMat3 == _this.stackMat3.length) {
				var newArray = new Array(_this.sizeMat3 << 1);
				var _g = 0;
				var _g1 = _this.sizeMat3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat3[i];
					_this.stackMat3[i] = null;
				}
				_this.stackMat3 = newArray;
			}
			_this.stackMat3[_this.sizeMat3++] = m;
		}
		var _this = this.p;
		if(ex != null) {
			ex.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newArray = new Array(_this.sizeVec3 << 1);
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = ex;
		}
		var _this = this.p;
		if(ey != null) {
			ey.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newArray = new Array(_this.sizeVec3 << 1);
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = ey;
		}
		var _this = this.p;
		if(ez != null) {
			ez.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newArray = new Array(_this.sizeVec3 << 1);
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = ez;
		}
	}
	,cylinder: function(tf,radius,halfHeight,color) {
		var _this = this.p;
		var ex = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		var _this = this.p;
		var ey = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		var _this = this.p;
		var ez = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		var _this = this.p;
		var o = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		var _this = this.p;
		var m = _this.sizeMat3 == 0 ? new oimo_common_Mat3() : _this.stackMat3[--_this.sizeMat3];
		var v = o;
		v.x = tf._positionX;
		v.y = tf._positionY;
		v.z = tf._positionZ;
		var m1 = m;
		m1.e00 = tf._rotation00;
		m1.e01 = tf._rotation01;
		m1.e02 = tf._rotation02;
		m1.e10 = tf._rotation10;
		m1.e11 = tf._rotation11;
		m1.e12 = tf._rotation12;
		m1.e20 = tf._rotation20;
		m1.e21 = tf._rotation21;
		m1.e22 = tf._rotation22;
		ex.init(m.e00,m.e10,m.e20);
		ey.init(m.e01,m.e11,m.e21);
		ez.init(m.e02,m.e12,m.e22);
		var _this = this.p;
		var _this1 = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		_this1.x = o.x;
		_this1.y = o.y;
		_this1.z = o.z;
		var _this = _this1;
		_this.x += ey.x * halfHeight;
		_this.y += ey.y * halfHeight;
		_this.z += ey.z * halfHeight;
		var _this1 = this.p;
		var _this2 = _this1.sizeVec3 == 0 ? new oimo_common_Vec3() : _this1.stackVec3[--_this1.sizeVec3];
		_this2.x = o.x;
		_this2.y = o.y;
		_this2.z = o.z;
		var _this1 = _this2;
		var s = -halfHeight;
		_this1.x += ey.x * s;
		_this1.y += ey.y * s;
		_this1.z += ey.z * s;
		if(this.wireframe) {
			var _this2 = this.p;
			var _this3 = _this2.sizeVec3 == 0 ? new oimo_common_Vec3() : _this2.stackVec3[--_this2.sizeVec3];
			_this3.x = _this.x;
			_this3.y = _this.y;
			_this3.z = _this.z;
			var _this2 = _this3;
			var s = -radius;
			_this2.x += ex.x * s;
			_this2.y += ex.y * s;
			_this2.z += ex.z * s;
			_this2.x += ez.x * 0;
			_this2.y += ez.y * 0;
			_this2.z += ez.z * 0;
			var _this3 = this.p;
			var _this4 = _this3.sizeVec3 == 0 ? new oimo_common_Vec3() : _this3.stackVec3[--_this3.sizeVec3];
			_this4.x = _this.x;
			_this4.y = _this.y;
			_this4.z = _this.z;
			var _this3 = _this4;
			_this3.x += ex.x * radius;
			_this3.y += ex.y * radius;
			_this3.z += ex.z * radius;
			_this3.x += ez.x * 0;
			_this3.y += ez.y * 0;
			_this3.z += ez.z * 0;
			var _this4 = this.p;
			var _this5 = _this4.sizeVec3 == 0 ? new oimo_common_Vec3() : _this4.stackVec3[--_this4.sizeVec3];
			_this5.x = _this.x;
			_this5.y = _this.y;
			_this5.z = _this.z;
			var _this4 = _this5;
			_this4.x += ex.x * 0;
			_this4.y += ex.y * 0;
			_this4.z += ex.z * 0;
			var s = -radius;
			_this4.x += ez.x * s;
			_this4.y += ez.y * s;
			_this4.z += ez.z * s;
			var _this5 = this.p;
			var _this6 = _this5.sizeVec3 == 0 ? new oimo_common_Vec3() : _this5.stackVec3[--_this5.sizeVec3];
			_this6.x = _this.x;
			_this6.y = _this.y;
			_this6.z = _this.z;
			var _this5 = _this6;
			_this5.x += ex.x * 0;
			_this5.y += ex.y * 0;
			_this5.z += ex.z * 0;
			_this5.x += ez.x * radius;
			_this5.y += ez.y * radius;
			_this5.z += ez.z * radius;
			var _this6 = this.p;
			var _this7 = _this6.sizeVec3 == 0 ? new oimo_common_Vec3() : _this6.stackVec3[--_this6.sizeVec3];
			_this7.x = _this1.x;
			_this7.y = _this1.y;
			_this7.z = _this1.z;
			var _this6 = _this7;
			var s = -radius;
			_this6.x += ex.x * s;
			_this6.y += ex.y * s;
			_this6.z += ex.z * s;
			_this6.x += ez.x * 0;
			_this6.y += ez.y * 0;
			_this6.z += ez.z * 0;
			var _this7 = this.p;
			var _this8 = _this7.sizeVec3 == 0 ? new oimo_common_Vec3() : _this7.stackVec3[--_this7.sizeVec3];
			_this8.x = _this1.x;
			_this8.y = _this1.y;
			_this8.z = _this1.z;
			var _this7 = _this8;
			_this7.x += ex.x * radius;
			_this7.y += ex.y * radius;
			_this7.z += ex.z * radius;
			_this7.x += ez.x * 0;
			_this7.y += ez.y * 0;
			_this7.z += ez.z * 0;
			var _this8 = this.p;
			var _this9 = _this8.sizeVec3 == 0 ? new oimo_common_Vec3() : _this8.stackVec3[--_this8.sizeVec3];
			_this9.x = _this1.x;
			_this9.y = _this1.y;
			_this9.z = _this1.z;
			var _this8 = _this9;
			_this8.x += ex.x * 0;
			_this8.y += ex.y * 0;
			_this8.z += ex.z * 0;
			var s = -radius;
			_this8.x += ez.x * s;
			_this8.y += ez.y * s;
			_this8.z += ez.z * s;
			var _this9 = this.p;
			var _this10 = _this9.sizeVec3 == 0 ? new oimo_common_Vec3() : _this9.stackVec3[--_this9.sizeVec3];
			_this10.x = _this1.x;
			_this10.y = _this1.y;
			_this10.z = _this1.z;
			var _this9 = _this10;
			_this9.x += ex.x * 0;
			_this9.y += ex.y * 0;
			_this9.z += ex.z * 0;
			_this9.x += ez.x * radius;
			_this9.y += ez.y * radius;
			_this9.z += ez.z * radius;
			this.ellipse(_this,ex,ez,radius,radius,color);
			this.ellipse(_this1,ex,ez,radius,radius,color);
			this.line(_this2,_this6,color);
			this.line(_this3,_this7,color);
			this.line(_this4,_this8,color);
			this.line(_this5,_this9,color);
			var _this10 = this.p;
			if(_this2 != null) {
				_this2.zero();
				if(_this10.sizeVec3 == _this10.stackVec3.length) {
					var newArray = new Array(_this10.sizeVec3 << 1);
					var _g = 0;
					var _g1 = _this10.sizeVec3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this10.stackVec3[i];
						_this10.stackVec3[i] = null;
					}
					_this10.stackVec3 = newArray;
				}
				_this10.stackVec3[_this10.sizeVec3++] = _this2;
			}
			var _this2 = this.p;
			if(_this3 != null) {
				_this3.zero();
				if(_this2.sizeVec3 == _this2.stackVec3.length) {
					var newArray = new Array(_this2.sizeVec3 << 1);
					var _g = 0;
					var _g1 = _this2.sizeVec3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this2.stackVec3[i];
						_this2.stackVec3[i] = null;
					}
					_this2.stackVec3 = newArray;
				}
				_this2.stackVec3[_this2.sizeVec3++] = _this3;
			}
			var _this2 = this.p;
			if(_this4 != null) {
				_this4.zero();
				if(_this2.sizeVec3 == _this2.stackVec3.length) {
					var newArray = new Array(_this2.sizeVec3 << 1);
					var _g = 0;
					var _g1 = _this2.sizeVec3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this2.stackVec3[i];
						_this2.stackVec3[i] = null;
					}
					_this2.stackVec3 = newArray;
				}
				_this2.stackVec3[_this2.sizeVec3++] = _this4;
			}
			var _this2 = this.p;
			if(_this5 != null) {
				_this5.zero();
				if(_this2.sizeVec3 == _this2.stackVec3.length) {
					var newArray = new Array(_this2.sizeVec3 << 1);
					var _g = 0;
					var _g1 = _this2.sizeVec3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this2.stackVec3[i];
						_this2.stackVec3[i] = null;
					}
					_this2.stackVec3 = newArray;
				}
				_this2.stackVec3[_this2.sizeVec3++] = _this5;
			}
			var _this2 = this.p;
			if(_this6 != null) {
				_this6.zero();
				if(_this2.sizeVec3 == _this2.stackVec3.length) {
					var newArray = new Array(_this2.sizeVec3 << 1);
					var _g = 0;
					var _g1 = _this2.sizeVec3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this2.stackVec3[i];
						_this2.stackVec3[i] = null;
					}
					_this2.stackVec3 = newArray;
				}
				_this2.stackVec3[_this2.sizeVec3++] = _this6;
			}
			var _this2 = this.p;
			if(_this7 != null) {
				_this7.zero();
				if(_this2.sizeVec3 == _this2.stackVec3.length) {
					var newArray = new Array(_this2.sizeVec3 << 1);
					var _g = 0;
					var _g1 = _this2.sizeVec3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this2.stackVec3[i];
						_this2.stackVec3[i] = null;
					}
					_this2.stackVec3 = newArray;
				}
				_this2.stackVec3[_this2.sizeVec3++] = _this7;
			}
			var _this2 = this.p;
			if(_this8 != null) {
				_this8.zero();
				if(_this2.sizeVec3 == _this2.stackVec3.length) {
					var newArray = new Array(_this2.sizeVec3 << 1);
					var _g = 0;
					var _g1 = _this2.sizeVec3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this2.stackVec3[i];
						_this2.stackVec3[i] = null;
					}
					_this2.stackVec3 = newArray;
				}
				_this2.stackVec3[_this2.sizeVec3++] = _this8;
			}
			var _this2 = this.p;
			if(_this9 != null) {
				_this9.zero();
				if(_this2.sizeVec3 == _this2.stackVec3.length) {
					var newArray = new Array(_this2.sizeVec3 << 1);
					var _g = 0;
					var _g1 = _this2.sizeVec3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this2.stackVec3[i];
						_this2.stackVec3[i] = null;
					}
					_this2.stackVec3 = newArray;
				}
				_this2.stackVec3[_this2.sizeVec3++] = _this9;
			}
		} else {
			var _g = 0;
			while(_g < 8) {
				var i = _g++;
				var _this2 = this.tmpCircleNorms[i];
				var v = this.circleCoords[i];
				_this2.x = v.x;
				_this2.y = v.y;
				_this2.z = v.z;
				var y = _this2.x * m.e10 + _this2.y * m.e11 + _this2.z * m.e12;
				var z = _this2.x * m.e20 + _this2.y * m.e21 + _this2.z * m.e22;
				_this2.x = _this2.x * m.e00 + _this2.y * m.e01 + _this2.z * m.e02;
				_this2.y = y;
				_this2.z = z;
				var _this3 = this.tmpCircleVerts1[i];
				var v1 = this.tmpCircleNorms[i];
				_this3.x = v1.x;
				_this3.y = v1.y;
				_this3.z = v1.z;
				_this3.x *= radius;
				_this3.y *= radius;
				_this3.z *= radius;
				_this3.x += o.x;
				_this3.y += o.y;
				_this3.z += o.z;
				var _this4 = this.tmpCircleVerts2[i];
				var v2 = this.tmpCircleVerts1[i];
				_this4.x = v2.x;
				_this4.y = v2.y;
				_this4.z = v2.z;
				var _this5 = this.tmpCircleVerts1[i];
				_this5.x += ey.x * halfHeight;
				_this5.y += ey.y * halfHeight;
				_this5.z += ey.z * halfHeight;
				var _this6 = this.tmpCircleVerts2[i];
				var s = -halfHeight;
				_this6.x += ey.x * s;
				_this6.y += ey.y * s;
				_this6.z += ey.z * s;
			}
			var _g = 0;
			while(_g < 8) {
				var i = _g++;
				var v1 = _this;
				var v2 = this.tmpCircleVerts1[i];
				var v3 = this.tmpCircleVerts1[(i + 1) % 8];
				var n1 = ey;
				this.triangle(_this,v2,v3,n1,n1,n1,color);
				v1 = _this1;
				v2 = this.tmpCircleVerts2[(i + 1) % 8];
				v3 = this.tmpCircleVerts2[i];
				var _this2 = this.p;
				var _this3 = _this2.sizeVec3 == 0 ? new oimo_common_Vec3() : _this2.stackVec3[--_this2.sizeVec3];
				_this3.x = ey.x;
				_this3.y = ey.y;
				_this3.z = ey.z;
				var _this4 = _this3;
				_this4.x = -_this4.x;
				_this4.y = -_this4.y;
				_this4.z = -_this4.z;
				n1 = _this4;
				this.triangle(_this1,v2,v3,_this4,_this4,_this4,color);
				var _this5 = this.p;
				if(_this4 != null) {
					_this4.zero();
					if(_this5.sizeVec3 == _this5.stackVec3.length) {
						var newArray = new Array(_this5.sizeVec3 << 1);
						var _g1 = 0;
						var _g11 = _this5.sizeVec3;
						while(_g1 < _g11) {
							var i1 = _g1++;
							newArray[i1] = _this5.stackVec3[i1];
							_this5.stackVec3[i1] = null;
						}
						_this5.stackVec3 = newArray;
					}
					_this5.stackVec3[_this5.sizeVec3++] = _this4;
				}
				v1 = this.tmpCircleVerts1[i];
				v2 = this.tmpCircleVerts2[i];
				v3 = this.tmpCircleVerts2[(i + 1) % 8];
				n1 = this.tmpCircleNorms[i];
				var n2 = this.tmpCircleNorms[(i + 1) % 8];
				this.rect(v1,v2,v3,this.tmpCircleVerts1[(i + 1) % 8],n1,n1,n2,n2,color);
			}
		}
		var _this2 = this.p;
		if(_this != null) {
			_this.zero();
			if(_this2.sizeVec3 == _this2.stackVec3.length) {
				var newArray = new Array(_this2.sizeVec3 << 1);
				var _g = 0;
				var _g1 = _this2.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this2.stackVec3[i];
					_this2.stackVec3[i] = null;
				}
				_this2.stackVec3 = newArray;
			}
			_this2.stackVec3[_this2.sizeVec3++] = _this;
		}
		var _this = this.p;
		if(_this1 != null) {
			_this1.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newArray = new Array(_this.sizeVec3 << 1);
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = _this1;
		}
		var _this = this.p;
		if(o != null) {
			o.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newArray = new Array(_this.sizeVec3 << 1);
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = o;
		}
		var _this = this.p;
		if(m != null) {
			m.e00 = 1;
			m.e01 = 0;
			m.e02 = 0;
			m.e10 = 0;
			m.e11 = 1;
			m.e12 = 0;
			m.e20 = 0;
			m.e21 = 0;
			m.e22 = 1;
			if(_this.sizeMat3 == _this.stackMat3.length) {
				var newArray = new Array(_this.sizeMat3 << 1);
				var _g = 0;
				var _g1 = _this.sizeMat3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat3[i];
					_this.stackMat3[i] = null;
				}
				_this.stackMat3 = newArray;
			}
			_this.stackMat3[_this.sizeMat3++] = m;
		}
		var _this = this.p;
		if(ex != null) {
			ex.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newArray = new Array(_this.sizeVec3 << 1);
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = ex;
		}
		var _this = this.p;
		if(ey != null) {
			ey.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newArray = new Array(_this.sizeVec3 << 1);
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = ey;
		}
		var _this = this.p;
		if(ez != null) {
			ez.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newArray = new Array(_this.sizeVec3 << 1);
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = ez;
		}
	}
	,capsule: function(tf,radius,halfHeight,color) {
		var _this = this.p;
		var ex = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		var _this = this.p;
		var ey = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		var _this = this.p;
		var ez = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		var _this = this.p;
		var o = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		var _this = this.p;
		var m = _this.sizeMat3 == 0 ? new oimo_common_Mat3() : _this.stackMat3[--_this.sizeMat3];
		var v = o;
		v.x = tf._positionX;
		v.y = tf._positionY;
		v.z = tf._positionZ;
		var m1 = m;
		m1.e00 = tf._rotation00;
		m1.e01 = tf._rotation01;
		m1.e02 = tf._rotation02;
		m1.e10 = tf._rotation10;
		m1.e11 = tf._rotation11;
		m1.e12 = tf._rotation12;
		m1.e20 = tf._rotation20;
		m1.e21 = tf._rotation21;
		m1.e22 = tf._rotation22;
		ex.init(m.e00,m.e10,m.e20);
		ey.init(m.e01,m.e11,m.e21);
		ez.init(m.e02,m.e12,m.e22);
		var vs = this.tmpSphereVerts;
		var ns = this.tmpSphereNorms;
		var _g = 0;
		while(_g < 5) {
			var i2 = _g++;
			var n = this.tmpSphereVerts[i2].length;
			var _g1 = 0;
			while(_g1 < n) {
				var j2 = _g1++;
				var _this = ns[i2][j2];
				var v = this.sphereCoords[i2][j2];
				_this.x = v.x;
				_this.y = v.y;
				_this.z = v.z;
				var y = _this.x * m.e10 + _this.y * m.e11 + _this.z * m.e12;
				var z = _this.x * m.e20 + _this.y * m.e21 + _this.z * m.e22;
				_this.x = _this.x * m.e00 + _this.y * m.e01 + _this.z * m.e02;
				_this.y = y;
				_this.z = z;
			}
		}
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			if(i == 0) {
				var _g1 = 0;
				while(_g1 < 3) {
					var i2 = _g1++;
					var n = this.tmpSphereVerts[i2].length;
					var _g2 = 0;
					while(_g2 < n) {
						var j2 = _g2++;
						var _this = vs[i2][j2];
						var v = ns[i2][j2];
						_this.x = v.x;
						_this.y = v.y;
						_this.z = v.z;
						_this.x *= radius;
						_this.y *= radius;
						_this.z *= radius;
						_this.x += o.x;
						_this.y += o.y;
						_this.z += o.z;
						_this.x += ey.x * halfHeight;
						_this.y += ey.y * halfHeight;
						_this.z += ey.z * halfHeight;
					}
				}
			}
			if(i == 2) {
				var _g3 = 2;
				while(_g3 < 5) {
					var i21 = _g3++;
					var n1 = this.tmpSphereVerts[i21].length;
					var _g4 = 0;
					while(_g4 < n1) {
						var j21 = _g4++;
						var _this1 = vs[i21][j21];
						var v1 = ns[i21][j21];
						_this1.x = v1.x;
						_this1.y = v1.y;
						_this1.z = v1.z;
						_this1.x *= radius;
						_this1.y *= radius;
						_this1.z *= radius;
						_this1.x += o.x;
						_this1.y += o.y;
						_this1.z += o.z;
						var s = -halfHeight;
						_this1.x += ey.x * s;
						_this1.y += ey.y * s;
						_this1.z += ey.z * s;
					}
				}
			}
			var _g5 = 0;
			while(_g5 < 8) {
				var j = _g5++;
				var v11;
				var v2;
				var v3;
				var v4;
				var n11;
				var n2;
				var n3;
				var n4;
				if(i == 0) {
					if(this.wireframe) {
						v11 = vs[0][0];
						v2 = vs[1][j];
						this.line(v11,v2,color);
					} else {
						v11 = vs[0][0];
						v2 = vs[1][j];
						v3 = vs[1][(j + 1) % 8];
						n11 = ns[0][0];
						n2 = ns[1][j];
						n3 = ns[1][(j + 1) % 8];
						this.triangle(v11,v2,v3,n11,n2,n3,color);
					}
				} else if(i == 3) {
					if(this.wireframe) {
						v11 = vs[4][0];
						v2 = vs[i][(j + 1) % 8];
						v3 = vs[i][j];
						this.line(v11,v2,color);
						this.line(v2,v3,color);
					} else {
						v11 = vs[4][0];
						v2 = vs[i][(j + 1) % 8];
						v3 = vs[i][j];
						n11 = ns[4][0];
						n2 = ns[i][(j + 1) % 8];
						n3 = ns[i][j];
						this.triangle(v11,v2,v3,n11,n2,n3,color);
					}
				} else if(this.wireframe) {
					v11 = vs[i][j];
					v2 = vs[i][(j + 1) % 8];
					v3 = vs[i + 1][j];
					this.line(v11,v2,color);
					this.line(v11,v3,color);
				} else {
					v11 = vs[i][j];
					v2 = vs[i][(j + 1) % 8];
					v3 = vs[i + 1][j];
					v4 = vs[i + 1][(j + 1) % 8];
					n11 = ns[i][j];
					n2 = ns[i][(j + 1) % 8];
					n3 = ns[i + 1][j];
					n4 = ns[i + 1][(j + 1) % 8];
					this.rect(v11,v3,v4,v2,n11,n3,n4,n2,color);
				}
			}
		}
		var _this = this.p;
		var _this1 = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		_this1.x = o.x;
		_this1.y = o.y;
		_this1.z = o.z;
		var _this = _this1;
		_this.x += ey.x * halfHeight;
		_this.y += ey.y * halfHeight;
		_this.z += ey.z * halfHeight;
		var _this1 = this.p;
		var _this2 = _this1.sizeVec3 == 0 ? new oimo_common_Vec3() : _this1.stackVec3[--_this1.sizeVec3];
		_this2.x = o.x;
		_this2.y = o.y;
		_this2.z = o.z;
		var _this1 = _this2;
		var s = -halfHeight;
		_this1.x += ey.x * s;
		_this1.y += ey.y * s;
		_this1.z += ey.z * s;
		if(this.wireframe) {
			var _this2 = this.p;
			var _this3 = _this2.sizeVec3 == 0 ? new oimo_common_Vec3() : _this2.stackVec3[--_this2.sizeVec3];
			_this3.x = _this.x;
			_this3.y = _this.y;
			_this3.z = _this.z;
			var _this2 = _this3;
			var s = -radius;
			_this2.x += ex.x * s;
			_this2.y += ex.y * s;
			_this2.z += ex.z * s;
			_this2.x += ez.x * 0;
			_this2.y += ez.y * 0;
			_this2.z += ez.z * 0;
			var _this3 = this.p;
			var _this4 = _this3.sizeVec3 == 0 ? new oimo_common_Vec3() : _this3.stackVec3[--_this3.sizeVec3];
			_this4.x = _this.x;
			_this4.y = _this.y;
			_this4.z = _this.z;
			var _this3 = _this4;
			_this3.x += ex.x * radius;
			_this3.y += ex.y * radius;
			_this3.z += ex.z * radius;
			_this3.x += ez.x * 0;
			_this3.y += ez.y * 0;
			_this3.z += ez.z * 0;
			var _this4 = this.p;
			var _this5 = _this4.sizeVec3 == 0 ? new oimo_common_Vec3() : _this4.stackVec3[--_this4.sizeVec3];
			_this5.x = _this.x;
			_this5.y = _this.y;
			_this5.z = _this.z;
			var _this4 = _this5;
			_this4.x += ex.x * 0;
			_this4.y += ex.y * 0;
			_this4.z += ex.z * 0;
			var s = -radius;
			_this4.x += ez.x * s;
			_this4.y += ez.y * s;
			_this4.z += ez.z * s;
			var _this5 = this.p;
			var _this6 = _this5.sizeVec3 == 0 ? new oimo_common_Vec3() : _this5.stackVec3[--_this5.sizeVec3];
			_this6.x = _this.x;
			_this6.y = _this.y;
			_this6.z = _this.z;
			var _this5 = _this6;
			_this5.x += ex.x * 0;
			_this5.y += ex.y * 0;
			_this5.z += ex.z * 0;
			_this5.x += ez.x * radius;
			_this5.y += ez.y * radius;
			_this5.z += ez.z * radius;
			var _this6 = this.p;
			var _this7 = _this6.sizeVec3 == 0 ? new oimo_common_Vec3() : _this6.stackVec3[--_this6.sizeVec3];
			_this7.x = _this1.x;
			_this7.y = _this1.y;
			_this7.z = _this1.z;
			var _this6 = _this7;
			var s = -radius;
			_this6.x += ex.x * s;
			_this6.y += ex.y * s;
			_this6.z += ex.z * s;
			_this6.x += ez.x * 0;
			_this6.y += ez.y * 0;
			_this6.z += ez.z * 0;
			var _this7 = this.p;
			var _this8 = _this7.sizeVec3 == 0 ? new oimo_common_Vec3() : _this7.stackVec3[--_this7.sizeVec3];
			_this8.x = _this1.x;
			_this8.y = _this1.y;
			_this8.z = _this1.z;
			var _this7 = _this8;
			_this7.x += ex.x * radius;
			_this7.y += ex.y * radius;
			_this7.z += ex.z * radius;
			_this7.x += ez.x * 0;
			_this7.y += ez.y * 0;
			_this7.z += ez.z * 0;
			var _this8 = this.p;
			var _this9 = _this8.sizeVec3 == 0 ? new oimo_common_Vec3() : _this8.stackVec3[--_this8.sizeVec3];
			_this9.x = _this1.x;
			_this9.y = _this1.y;
			_this9.z = _this1.z;
			var _this8 = _this9;
			_this8.x += ex.x * 0;
			_this8.y += ex.y * 0;
			_this8.z += ex.z * 0;
			var s = -radius;
			_this8.x += ez.x * s;
			_this8.y += ez.y * s;
			_this8.z += ez.z * s;
			var _this9 = this.p;
			var _this10 = _this9.sizeVec3 == 0 ? new oimo_common_Vec3() : _this9.stackVec3[--_this9.sizeVec3];
			_this10.x = _this1.x;
			_this10.y = _this1.y;
			_this10.z = _this1.z;
			var _this9 = _this10;
			_this9.x += ex.x * 0;
			_this9.y += ex.y * 0;
			_this9.z += ex.z * 0;
			_this9.x += ez.x * radius;
			_this9.y += ez.y * radius;
			_this9.z += ez.z * radius;
			this.ellipse(_this,ex,ez,radius,radius,color);
			this.ellipse(_this1,ex,ez,radius,radius,color);
			this.line(_this2,_this6,color);
			this.line(_this3,_this7,color);
			this.line(_this4,_this8,color);
			this.line(_this5,_this9,color);
			var _this10 = this.p;
			if(_this2 != null) {
				_this2.zero();
				if(_this10.sizeVec3 == _this10.stackVec3.length) {
					var newArray = new Array(_this10.sizeVec3 << 1);
					var _g = 0;
					var _g1 = _this10.sizeVec3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this10.stackVec3[i];
						_this10.stackVec3[i] = null;
					}
					_this10.stackVec3 = newArray;
				}
				_this10.stackVec3[_this10.sizeVec3++] = _this2;
			}
			var _this2 = this.p;
			if(_this3 != null) {
				_this3.zero();
				if(_this2.sizeVec3 == _this2.stackVec3.length) {
					var newArray = new Array(_this2.sizeVec3 << 1);
					var _g = 0;
					var _g1 = _this2.sizeVec3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this2.stackVec3[i];
						_this2.stackVec3[i] = null;
					}
					_this2.stackVec3 = newArray;
				}
				_this2.stackVec3[_this2.sizeVec3++] = _this3;
			}
			var _this2 = this.p;
			if(_this4 != null) {
				_this4.zero();
				if(_this2.sizeVec3 == _this2.stackVec3.length) {
					var newArray = new Array(_this2.sizeVec3 << 1);
					var _g = 0;
					var _g1 = _this2.sizeVec3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this2.stackVec3[i];
						_this2.stackVec3[i] = null;
					}
					_this2.stackVec3 = newArray;
				}
				_this2.stackVec3[_this2.sizeVec3++] = _this4;
			}
			var _this2 = this.p;
			if(_this5 != null) {
				_this5.zero();
				if(_this2.sizeVec3 == _this2.stackVec3.length) {
					var newArray = new Array(_this2.sizeVec3 << 1);
					var _g = 0;
					var _g1 = _this2.sizeVec3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this2.stackVec3[i];
						_this2.stackVec3[i] = null;
					}
					_this2.stackVec3 = newArray;
				}
				_this2.stackVec3[_this2.sizeVec3++] = _this5;
			}
			var _this2 = this.p;
			if(_this6 != null) {
				_this6.zero();
				if(_this2.sizeVec3 == _this2.stackVec3.length) {
					var newArray = new Array(_this2.sizeVec3 << 1);
					var _g = 0;
					var _g1 = _this2.sizeVec3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this2.stackVec3[i];
						_this2.stackVec3[i] = null;
					}
					_this2.stackVec3 = newArray;
				}
				_this2.stackVec3[_this2.sizeVec3++] = _this6;
			}
			var _this2 = this.p;
			if(_this7 != null) {
				_this7.zero();
				if(_this2.sizeVec3 == _this2.stackVec3.length) {
					var newArray = new Array(_this2.sizeVec3 << 1);
					var _g = 0;
					var _g1 = _this2.sizeVec3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this2.stackVec3[i];
						_this2.stackVec3[i] = null;
					}
					_this2.stackVec3 = newArray;
				}
				_this2.stackVec3[_this2.sizeVec3++] = _this7;
			}
			var _this2 = this.p;
			if(_this8 != null) {
				_this8.zero();
				if(_this2.sizeVec3 == _this2.stackVec3.length) {
					var newArray = new Array(_this2.sizeVec3 << 1);
					var _g = 0;
					var _g1 = _this2.sizeVec3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this2.stackVec3[i];
						_this2.stackVec3[i] = null;
					}
					_this2.stackVec3 = newArray;
				}
				_this2.stackVec3[_this2.sizeVec3++] = _this8;
			}
			var _this2 = this.p;
			if(_this9 != null) {
				_this9.zero();
				if(_this2.sizeVec3 == _this2.stackVec3.length) {
					var newArray = new Array(_this2.sizeVec3 << 1);
					var _g = 0;
					var _g1 = _this2.sizeVec3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this2.stackVec3[i];
						_this2.stackVec3[i] = null;
					}
					_this2.stackVec3 = newArray;
				}
				_this2.stackVec3[_this2.sizeVec3++] = _this9;
			}
		} else {
			var _g = 0;
			while(_g < 8) {
				var i = _g++;
				var _this2 = this.tmpCircleNorms[i];
				var v = this.circleCoords[i];
				_this2.x = v.x;
				_this2.y = v.y;
				_this2.z = v.z;
				var y = _this2.x * m.e10 + _this2.y * m.e11 + _this2.z * m.e12;
				var z = _this2.x * m.e20 + _this2.y * m.e21 + _this2.z * m.e22;
				_this2.x = _this2.x * m.e00 + _this2.y * m.e01 + _this2.z * m.e02;
				_this2.y = y;
				_this2.z = z;
				var _this3 = this.tmpCircleVerts1[i];
				var v1 = this.tmpCircleNorms[i];
				_this3.x = v1.x;
				_this3.y = v1.y;
				_this3.z = v1.z;
				_this3.x *= radius;
				_this3.y *= radius;
				_this3.z *= radius;
				_this3.x += o.x;
				_this3.y += o.y;
				_this3.z += o.z;
				var _this4 = this.tmpCircleVerts2[i];
				var v2 = this.tmpCircleVerts1[i];
				_this4.x = v2.x;
				_this4.y = v2.y;
				_this4.z = v2.z;
				var _this5 = this.tmpCircleVerts1[i];
				_this5.x += ey.x * halfHeight;
				_this5.y += ey.y * halfHeight;
				_this5.z += ey.z * halfHeight;
				var _this6 = this.tmpCircleVerts2[i];
				var s = -halfHeight;
				_this6.x += ey.x * s;
				_this6.y += ey.y * s;
				_this6.z += ey.z * s;
			}
			var _g = 0;
			while(_g < 8) {
				var i = _g++;
				var n1 = this.tmpCircleNorms[i];
				var n2 = this.tmpCircleNorms[(i + 1) % 8];
				this.rect(this.tmpCircleVerts1[i],this.tmpCircleVerts2[i],this.tmpCircleVerts2[(i + 1) % 8],this.tmpCircleVerts1[(i + 1) % 8],n1,n1,n2,n2,color);
			}
		}
		var _this2 = this.p;
		if(_this != null) {
			_this.zero();
			if(_this2.sizeVec3 == _this2.stackVec3.length) {
				var newArray = new Array(_this2.sizeVec3 << 1);
				var _g = 0;
				var _g1 = _this2.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this2.stackVec3[i];
					_this2.stackVec3[i] = null;
				}
				_this2.stackVec3 = newArray;
			}
			_this2.stackVec3[_this2.sizeVec3++] = _this;
		}
		var _this = this.p;
		if(_this1 != null) {
			_this1.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newArray = new Array(_this.sizeVec3 << 1);
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = _this1;
		}
		var _this = this.p;
		if(o != null) {
			o.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newArray = new Array(_this.sizeVec3 << 1);
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = o;
		}
		var _this = this.p;
		if(m != null) {
			m.e00 = 1;
			m.e01 = 0;
			m.e02 = 0;
			m.e10 = 0;
			m.e11 = 1;
			m.e12 = 0;
			m.e20 = 0;
			m.e21 = 0;
			m.e22 = 1;
			if(_this.sizeMat3 == _this.stackMat3.length) {
				var newArray = new Array(_this.sizeMat3 << 1);
				var _g = 0;
				var _g1 = _this.sizeMat3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat3[i];
					_this.stackMat3[i] = null;
				}
				_this.stackMat3 = newArray;
			}
			_this.stackMat3[_this.sizeMat3++] = m;
		}
		var _this = this.p;
		if(ex != null) {
			ex.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newArray = new Array(_this.sizeVec3 << 1);
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = ex;
		}
		var _this = this.p;
		if(ey != null) {
			ey.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newArray = new Array(_this.sizeVec3 << 1);
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = ey;
		}
		var _this = this.p;
		if(ez != null) {
			ez.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newArray = new Array(_this.sizeVec3 << 1);
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = ez;
		}
	}
	,sphere: function(tf,radius,color) {
		var _this = this.p;
		var o = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		var _this = this.p;
		var m = _this.sizeMat3 == 0 ? new oimo_common_Mat3() : _this.stackMat3[--_this.sizeMat3];
		var v = o;
		v.x = tf._positionX;
		v.y = tf._positionY;
		v.z = tf._positionZ;
		var m1 = m;
		m1.e00 = tf._rotation00;
		m1.e01 = tf._rotation01;
		m1.e02 = tf._rotation02;
		m1.e10 = tf._rotation10;
		m1.e11 = tf._rotation11;
		m1.e12 = tf._rotation12;
		m1.e20 = tf._rotation20;
		m1.e21 = tf._rotation21;
		m1.e22 = tf._rotation22;
		var vs = this.tmpSphereVerts;
		var ns = this.tmpSphereNorms;
		var _g = 0;
		while(_g < 5) {
			var i = _g++;
			var n = this.tmpSphereVerts[i].length;
			var _g1 = 0;
			while(_g1 < n) {
				var j = _g1++;
				var _this = ns[i][j];
				var v = this.sphereCoords[i][j];
				_this.x = v.x;
				_this.y = v.y;
				_this.z = v.z;
				var y = _this.x * m.e10 + _this.y * m.e11 + _this.z * m.e12;
				var z = _this.x * m.e20 + _this.y * m.e21 + _this.z * m.e22;
				_this.x = _this.x * m.e00 + _this.y * m.e01 + _this.z * m.e02;
				_this.y = y;
				_this.z = z;
				var _this1 = vs[i][j];
				var v1 = ns[i][j];
				_this1.x = v1.x;
				_this1.y = v1.y;
				_this1.z = v1.z;
				_this1.x *= radius;
				_this1.y *= radius;
				_this1.z *= radius;
				_this1.x += o.x;
				_this1.y += o.y;
				_this1.z += o.z;
			}
		}
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			var _g1 = 0;
			while(_g1 < 8) {
				var j = _g1++;
				var v1;
				var v2;
				var v3;
				var v4;
				var n1;
				var n2;
				var n3;
				var n4;
				if(i == 0) {
					if(this.wireframe) {
						v1 = vs[0][0];
						v2 = vs[1][j];
						this.line(v1,v2,color);
					} else {
						v1 = vs[0][0];
						v2 = vs[1][j];
						v3 = vs[1][(j + 1) % 8];
						n1 = ns[0][0];
						n2 = ns[1][j];
						n3 = ns[1][(j + 1) % 8];
						this.triangle(v1,v2,v3,n1,n2,n3,color);
					}
				} else if(i == 3) {
					if(this.wireframe) {
						v1 = vs[4][0];
						v2 = vs[i][(j + 1) % 8];
						v3 = vs[i][j];
						this.line(v1,v2,color);
						this.line(v2,v3,color);
					} else {
						v1 = vs[4][0];
						v2 = vs[i][(j + 1) % 8];
						v3 = vs[i][j];
						n1 = ns[4][0];
						n2 = ns[i][(j + 1) % 8];
						n3 = ns[i][j];
						this.triangle(v1,v2,v3,n1,n2,n3,color);
					}
				} else if(this.wireframe) {
					v1 = vs[i][j];
					v2 = vs[i][(j + 1) % 8];
					v3 = vs[i + 1][j];
					this.line(v1,v2,color);
					this.line(v1,v3,color);
				} else {
					v1 = vs[i][j];
					v2 = vs[i][(j + 1) % 8];
					v3 = vs[i + 1][j];
					v4 = vs[i + 1][(j + 1) % 8];
					n1 = ns[i][j];
					n2 = ns[i][(j + 1) % 8];
					n3 = ns[i + 1][j];
					n4 = ns[i + 1][(j + 1) % 8];
					this.rect(v1,v3,v4,v2,n1,n3,n4,n2,color);
				}
			}
		}
		var _this = this.p;
		if(o != null) {
			o.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newArray = new Array(_this.sizeVec3 << 1);
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = o;
		}
		var _this = this.p;
		if(m != null) {
			m.e00 = 1;
			m.e01 = 0;
			m.e02 = 0;
			m.e10 = 0;
			m.e11 = 1;
			m.e12 = 0;
			m.e20 = 0;
			m.e21 = 0;
			m.e22 = 1;
			if(_this.sizeMat3 == _this.stackMat3.length) {
				var newArray = new Array(_this.sizeMat3 << 1);
				var _g = 0;
				var _g1 = _this.sizeMat3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat3[i];
					_this.stackMat3[i] = null;
				}
				_this.stackMat3 = newArray;
			}
			_this.stackMat3[_this.sizeMat3++] = m;
		}
	}
	,box: function(tf,halfExtents,color) {
		var _this = this.p;
		var ex = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		var _this = this.p;
		var ey = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		var _this = this.p;
		var ez = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		var _this = this.p;
		var o = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		var _this = this.p;
		var m = _this.sizeMat3 == 0 ? new oimo_common_Mat3() : _this.stackMat3[--_this.sizeMat3];
		var v = o;
		v.x = tf._positionX;
		v.y = tf._positionY;
		v.z = tf._positionZ;
		var m1 = m;
		m1.e00 = tf._rotation00;
		m1.e01 = tf._rotation01;
		m1.e02 = tf._rotation02;
		m1.e10 = tf._rotation10;
		m1.e11 = tf._rotation11;
		m1.e12 = tf._rotation12;
		m1.e20 = tf._rotation20;
		m1.e21 = tf._rotation21;
		m1.e22 = tf._rotation22;
		ex.init(m.e00,m.e10,m.e20);
		ey.init(m.e01,m.e11,m.e21);
		ez.init(m.e02,m.e12,m.e22);
		var hx = halfExtents.x;
		var hy = halfExtents.y;
		var hz = halfExtents.z;
		var _this = this.p;
		var _this1 = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		_this1.x = o.x;
		_this1.y = o.y;
		_this1.z = o.z;
		var _this = _this1;
		var s = -hx;
		_this.x += ex.x * s;
		_this.y += ex.y * s;
		_this.z += ex.z * s;
		var s = -hy;
		_this.x += ey.x * s;
		_this.y += ey.y * s;
		_this.z += ey.z * s;
		var s = -hz;
		_this.x += ez.x * s;
		_this.y += ez.y * s;
		_this.z += ez.z * s;
		var _this1 = this.p;
		var _this2 = _this1.sizeVec3 == 0 ? new oimo_common_Vec3() : _this1.stackVec3[--_this1.sizeVec3];
		_this2.x = o.x;
		_this2.y = o.y;
		_this2.z = o.z;
		var _this1 = _this2;
		var s = -hx;
		_this1.x += ex.x * s;
		_this1.y += ex.y * s;
		_this1.z += ex.z * s;
		var s = -hy;
		_this1.x += ey.x * s;
		_this1.y += ey.y * s;
		_this1.z += ey.z * s;
		_this1.x += ez.x * hz;
		_this1.y += ez.y * hz;
		_this1.z += ez.z * hz;
		var _this2 = this.p;
		var _this3 = _this2.sizeVec3 == 0 ? new oimo_common_Vec3() : _this2.stackVec3[--_this2.sizeVec3];
		_this3.x = o.x;
		_this3.y = o.y;
		_this3.z = o.z;
		var _this2 = _this3;
		var s = -hx;
		_this2.x += ex.x * s;
		_this2.y += ex.y * s;
		_this2.z += ex.z * s;
		_this2.x += ey.x * hy;
		_this2.y += ey.y * hy;
		_this2.z += ey.z * hy;
		var s = -hz;
		_this2.x += ez.x * s;
		_this2.y += ez.y * s;
		_this2.z += ez.z * s;
		var _this3 = this.p;
		var _this4 = _this3.sizeVec3 == 0 ? new oimo_common_Vec3() : _this3.stackVec3[--_this3.sizeVec3];
		_this4.x = o.x;
		_this4.y = o.y;
		_this4.z = o.z;
		var _this3 = _this4;
		var s = -hx;
		_this3.x += ex.x * s;
		_this3.y += ex.y * s;
		_this3.z += ex.z * s;
		_this3.x += ey.x * hy;
		_this3.y += ey.y * hy;
		_this3.z += ey.z * hy;
		_this3.x += ez.x * hz;
		_this3.y += ez.y * hz;
		_this3.z += ez.z * hz;
		var _this4 = this.p;
		var _this5 = _this4.sizeVec3 == 0 ? new oimo_common_Vec3() : _this4.stackVec3[--_this4.sizeVec3];
		_this5.x = o.x;
		_this5.y = o.y;
		_this5.z = o.z;
		var _this4 = _this5;
		_this4.x += ex.x * hx;
		_this4.y += ex.y * hx;
		_this4.z += ex.z * hx;
		var s = -hy;
		_this4.x += ey.x * s;
		_this4.y += ey.y * s;
		_this4.z += ey.z * s;
		var s = -hz;
		_this4.x += ez.x * s;
		_this4.y += ez.y * s;
		_this4.z += ez.z * s;
		var _this5 = this.p;
		var _this6 = _this5.sizeVec3 == 0 ? new oimo_common_Vec3() : _this5.stackVec3[--_this5.sizeVec3];
		_this6.x = o.x;
		_this6.y = o.y;
		_this6.z = o.z;
		var _this5 = _this6;
		_this5.x += ex.x * hx;
		_this5.y += ex.y * hx;
		_this5.z += ex.z * hx;
		var s = -hy;
		_this5.x += ey.x * s;
		_this5.y += ey.y * s;
		_this5.z += ey.z * s;
		_this5.x += ez.x * hz;
		_this5.y += ez.y * hz;
		_this5.z += ez.z * hz;
		var _this6 = this.p;
		var _this7 = _this6.sizeVec3 == 0 ? new oimo_common_Vec3() : _this6.stackVec3[--_this6.sizeVec3];
		_this7.x = o.x;
		_this7.y = o.y;
		_this7.z = o.z;
		var _this6 = _this7;
		_this6.x += ex.x * hx;
		_this6.y += ex.y * hx;
		_this6.z += ex.z * hx;
		_this6.x += ey.x * hy;
		_this6.y += ey.y * hy;
		_this6.z += ey.z * hy;
		var s = -hz;
		_this6.x += ez.x * s;
		_this6.y += ez.y * s;
		_this6.z += ez.z * s;
		var _this7 = this.p;
		var _this8 = _this7.sizeVec3 == 0 ? new oimo_common_Vec3() : _this7.stackVec3[--_this7.sizeVec3];
		_this8.x = o.x;
		_this8.y = o.y;
		_this8.z = o.z;
		var _this7 = _this8;
		_this7.x += ex.x * hx;
		_this7.y += ex.y * hx;
		_this7.z += ex.z * hx;
		_this7.x += ey.x * hy;
		_this7.y += ey.y * hy;
		_this7.z += ey.z * hy;
		_this7.x += ez.x * hz;
		_this7.y += ez.y * hz;
		_this7.z += ez.z * hz;
		if(this.wireframe) {
			this.line(_this,_this1,color);
			this.line(_this2,_this3,color);
			this.line(_this4,_this5,color);
			this.line(_this6,_this7,color);
			this.line(_this,_this2,color);
			this.line(_this1,_this3,color);
			this.line(_this4,_this6,color);
			this.line(_this5,_this7,color);
			this.line(_this,_this4,color);
			this.line(_this1,_this5,color);
			this.line(_this2,_this6,color);
			this.line(_this3,_this7,color);
		} else {
			var _this8 = this.p;
			var _this9 = _this8.sizeVec3 == 0 ? new oimo_common_Vec3() : _this8.stackVec3[--_this8.sizeVec3];
			_this9.x = ex.x;
			_this9.y = ex.y;
			_this9.z = ex.z;
			var _this8 = _this9;
			_this8.x = -_this8.x;
			_this8.y = -_this8.y;
			_this8.z = -_this8.z;
			var _this9 = this.p;
			var _this10 = _this9.sizeVec3 == 0 ? new oimo_common_Vec3() : _this9.stackVec3[--_this9.sizeVec3];
			_this10.x = ey.x;
			_this10.y = ey.y;
			_this10.z = ey.z;
			var _this9 = _this10;
			_this9.x = -_this9.x;
			_this9.y = -_this9.y;
			_this9.z = -_this9.z;
			var _this10 = this.p;
			var _this11 = _this10.sizeVec3 == 0 ? new oimo_common_Vec3() : _this10.stackVec3[--_this10.sizeVec3];
			_this11.x = ez.x;
			_this11.y = ez.y;
			_this11.z = ez.z;
			var _this10 = _this11;
			_this10.x = -_this10.x;
			_this10.y = -_this10.y;
			_this10.z = -_this10.z;
			this.rect(_this,_this1,_this3,_this2,_this8,_this8,_this8,_this8,color);
			this.rect(_this4,_this6,_this7,_this5,ex,ex,ex,ex,color);
			this.rect(_this,_this4,_this5,_this1,_this9,_this9,_this9,_this9,color);
			this.rect(_this2,_this3,_this7,_this6,ey,ey,ey,ey,color);
			this.rect(_this,_this2,_this6,_this4,_this10,_this10,_this10,_this10,color);
			this.rect(_this1,_this5,_this7,_this3,ez,ez,ez,ez,color);
			var _this11 = this.p;
			if(_this8 != null) {
				_this8.zero();
				if(_this11.sizeVec3 == _this11.stackVec3.length) {
					var newArray = new Array(_this11.sizeVec3 << 1);
					var _g = 0;
					var _g1 = _this11.sizeVec3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this11.stackVec3[i];
						_this11.stackVec3[i] = null;
					}
					_this11.stackVec3 = newArray;
				}
				_this11.stackVec3[_this11.sizeVec3++] = _this8;
			}
			var _this8 = this.p;
			if(_this9 != null) {
				_this9.zero();
				if(_this8.sizeVec3 == _this8.stackVec3.length) {
					var newArray = new Array(_this8.sizeVec3 << 1);
					var _g = 0;
					var _g1 = _this8.sizeVec3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this8.stackVec3[i];
						_this8.stackVec3[i] = null;
					}
					_this8.stackVec3 = newArray;
				}
				_this8.stackVec3[_this8.sizeVec3++] = _this9;
			}
			var _this8 = this.p;
			if(_this10 != null) {
				_this10.zero();
				if(_this8.sizeVec3 == _this8.stackVec3.length) {
					var newArray = new Array(_this8.sizeVec3 << 1);
					var _g = 0;
					var _g1 = _this8.sizeVec3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this8.stackVec3[i];
						_this8.stackVec3[i] = null;
					}
					_this8.stackVec3 = newArray;
				}
				_this8.stackVec3[_this8.sizeVec3++] = _this10;
			}
		}
		var _this8 = this.p;
		if(_this != null) {
			_this.zero();
			if(_this8.sizeVec3 == _this8.stackVec3.length) {
				var newArray = new Array(_this8.sizeVec3 << 1);
				var _g = 0;
				var _g1 = _this8.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this8.stackVec3[i];
					_this8.stackVec3[i] = null;
				}
				_this8.stackVec3 = newArray;
			}
			_this8.stackVec3[_this8.sizeVec3++] = _this;
		}
		var _this = this.p;
		if(_this1 != null) {
			_this1.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newArray = new Array(_this.sizeVec3 << 1);
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = _this1;
		}
		var _this = this.p;
		if(_this2 != null) {
			_this2.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newArray = new Array(_this.sizeVec3 << 1);
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = _this2;
		}
		var _this = this.p;
		if(_this3 != null) {
			_this3.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newArray = new Array(_this.sizeVec3 << 1);
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = _this3;
		}
		var _this = this.p;
		if(_this4 != null) {
			_this4.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newArray = new Array(_this.sizeVec3 << 1);
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = _this4;
		}
		var _this = this.p;
		if(_this5 != null) {
			_this5.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newArray = new Array(_this.sizeVec3 << 1);
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = _this5;
		}
		var _this = this.p;
		if(_this6 != null) {
			_this6.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newArray = new Array(_this.sizeVec3 << 1);
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = _this6;
		}
		var _this = this.p;
		if(_this7 != null) {
			_this7.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newArray = new Array(_this.sizeVec3 << 1);
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = _this7;
		}
		var _this = this.p;
		if(o != null) {
			o.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newArray = new Array(_this.sizeVec3 << 1);
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = o;
		}
		var _this = this.p;
		if(m != null) {
			m.e00 = 1;
			m.e01 = 0;
			m.e02 = 0;
			m.e10 = 0;
			m.e11 = 1;
			m.e12 = 0;
			m.e20 = 0;
			m.e21 = 0;
			m.e22 = 1;
			if(_this.sizeMat3 == _this.stackMat3.length) {
				var newArray = new Array(_this.sizeMat3 << 1);
				var _g = 0;
				var _g1 = _this.sizeMat3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat3[i];
					_this.stackMat3[i] = null;
				}
				_this.stackMat3 = newArray;
			}
			_this.stackMat3[_this.sizeMat3++] = m;
		}
		var _this = this.p;
		if(ex != null) {
			ex.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newArray = new Array(_this.sizeVec3 << 1);
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = ex;
		}
		var _this = this.p;
		if(ey != null) {
			ey.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newArray = new Array(_this.sizeVec3 << 1);
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = ey;
		}
		var _this = this.p;
		if(ez != null) {
			ez.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newArray = new Array(_this.sizeVec3 << 1);
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = ez;
		}
	}
	,rect: function(v1,v2,v3,v4,n1,n2,n3,n4,color) {
		this.triangle(v1,v2,v3,n1,n2,n3,color);
		this.triangle(v1,v3,v4,n1,n3,n4,color);
	}
	,point: function(v,color) {
	}
	,triangle: function(v1,v2,v3,n1,n2,n3,color) {
	}
	,line: function(v1,v2,color) {
	}
	,__class__: oimo_dynamics_common_DebugDraw
};
var demo_js_WebGLDebugGraphics = function(gl) {
	oimo_dynamics_common_DebugDraw.call(this);
	this.gl = gl;
	gl.enable(2929);
	this.cameraPos = new oimo_common_Vec3();
	this.lightDir = new oimo_common_Vec3();
	this.viewMat = new oimo_common_Mat4();
	this.projMat = new oimo_common_Mat4();
	this.tmpMat = new oimo_common_Mat4();
	this.initShader();
	this.initBuffers();
};
demo_js_WebGLDebugGraphics.__name__ = true;
demo_js_WebGLDebugGraphics.__interfaces__ = [demo_common_IDemoGraphics];
demo_js_WebGLDebugGraphics.__super__ = oimo_dynamics_common_DebugDraw;
demo_js_WebGLDebugGraphics.prototype = $extend(oimo_dynamics_common_DebugDraw.prototype,{
	initBuffers: function() {
		var attribs = [new demo_js_minilib_OVertexAttribute(3,"aPosition"),new demo_js_minilib_OVertexAttribute(3,"aNormal"),new demo_js_minilib_OVertexAttribute(3,"aColor")];
		this.pointVBO = new demo_js_minilib_OVertexBuffer(this.gl);
		this.pointIBO = new demo_js_minilib_OIndexBuffer(this.gl);
		this.pointVBO.setAttribs(attribs);
		this.pointVBO.loadAttribIndices(this.shader);
		this.lineVBO = new demo_js_minilib_OVertexBuffer(this.gl);
		this.lineIBO = new demo_js_minilib_OIndexBuffer(this.gl);
		this.lineVBO.setAttribs(attribs);
		this.lineVBO.loadAttribIndices(this.shader);
		this.triVBO = new demo_js_minilib_OVertexBuffer(this.gl);
		this.triIBO = new demo_js_minilib_OIndexBuffer(this.gl);
		this.triVBO.setAttribs(attribs);
		this.triVBO.loadAttribIndices(this.shader);
		this.pointBufferSize = 4096;
		this.lineBufferSize = 4096;
		this.triBufferSize = 4096;
		this.pointData = new Float32Array(this.pointBufferSize * 9);
		this.lineData = new Float32Array(this.lineBufferSize * 9 * 2);
		this.triData = new Float32Array(this.triBufferSize * 9 * 3);
		this.initFloatArray(this.pointData);
		this.initFloatArray(this.lineData);
		this.initFloatArray(this.triData);
		var vbo = [];
		var ibo = [];
		var _g = 0;
		var _g1 = this.pointBufferSize;
		while(_g < _g1) {
			vbo.push(0);
			vbo.push(0);
			vbo.push(0);
			vbo.push(0);
			vbo.push(0);
			vbo.push(0);
			vbo.push(0);
			vbo.push(0);
			vbo.push(0);
			vbo.push(0);
			vbo.push(0);
			vbo.push(0);
			vbo.push(0);
			vbo.push(0);
			vbo.push(0);
			vbo.push(0);
			vbo.push(0);
			vbo.push(0);
			ibo.push(_g++);
		}
		this.pointVBO.setData(vbo,35048);
		this.pointIBO.setData(ibo,35048);
		vbo = [];
		ibo = [];
		var _g = 0;
		var _g1 = this.lineBufferSize;
		while(_g < _g1) {
			var i = _g++;
			vbo.push(0);
			vbo.push(0);
			vbo.push(0);
			vbo.push(0);
			vbo.push(0);
			vbo.push(0);
			vbo.push(0);
			vbo.push(0);
			vbo.push(0);
			vbo.push(0);
			vbo.push(0);
			vbo.push(0);
			vbo.push(0);
			vbo.push(0);
			vbo.push(0);
			vbo.push(0);
			vbo.push(0);
			vbo.push(0);
			ibo.push(i * 2);
			ibo.push(i * 2 + 1);
		}
		this.lineVBO.setData(vbo,35048);
		this.lineIBO.setData(ibo,35048);
		vbo = [];
		ibo = [];
		var _g = 0;
		var _g1 = this.triBufferSize;
		while(_g < _g1) {
			var i = _g++;
			vbo.push(0);
			vbo.push(0);
			vbo.push(0);
			vbo.push(0);
			vbo.push(0);
			vbo.push(0);
			vbo.push(0);
			vbo.push(0);
			vbo.push(0);
			vbo.push(0);
			vbo.push(0);
			vbo.push(0);
			vbo.push(0);
			vbo.push(0);
			vbo.push(0);
			vbo.push(0);
			vbo.push(0);
			vbo.push(0);
			vbo.push(0);
			vbo.push(0);
			vbo.push(0);
			vbo.push(0);
			vbo.push(0);
			vbo.push(0);
			vbo.push(0);
			vbo.push(0);
			vbo.push(0);
			ibo.push(i * 3);
			ibo.push(i * 3 + 1);
			ibo.push(i * 3 + 2);
		}
		this.triVBO.setData(vbo,35048);
		this.triIBO.setData(ibo,35048);
	}
	,initFloatArray: function(a) {
		var num = a.length;
		var _g = 0;
		while(_g < num) a[_g++] = 0;
	}
	,initShader: function() {
		this.shader = new demo_js_minilib_OShader(this.gl);
		this.shader.compile("\r\n\t\t\tprecision highp float;\r\n\t\t\tattribute vec3 aPosition;\r\n\t\t\tattribute vec3 aColor;\r\n\t\t\tattribute vec3 aNormal;\r\n\t\t\tvarying vec3 vPosition;\r\n\t\t\tvarying vec3 vNormal;\r\n\t\t\tvarying vec3 vColor;\r\n\t\t\tuniform mat4 worldMat;\r\n\t\t\tuniform mat4 viewMat;\r\n\t\t\tuniform mat4 projMat;\r\n\r\n\t\t\tvoid main() {\r\n\t\t\t\tvec4 worldPos = worldMat * vec4(aPosition, 1.0);\r\n\t\t\t\tvPosition = worldPos.xyz;\r\n\t\t\t\tvColor = aColor;\r\n\t\t\t\tvNormal = aNormal;\r\n\t\t\t\tgl_Position = projMat * (viewMat * worldPos);\r\n\t\t\t\tgl_PointSize = 6.0;\r\n\t\t\t}\r\n\t\t","\r\n\t\t\tprecision highp float;\r\n\t\t\tvarying vec3 vPosition;\r\n\t\t\tvarying vec3 vNormal;\r\n\t\t\tvarying vec3 vColor;\r\n\t\t\tuniform vec3 lightDir;\r\n\t\t\tuniform vec3 lightCol;\r\n\t\t\tuniform vec3 cameraPos;\r\n\t\t\tuniform float ambient;\r\n\t\t\tuniform float diffuse;\r\n\t\t\tuniform float specular;\r\n\t\t\tuniform float shininess;\r\n\r\n\t\t\tvoid main() {\r\n\t\t\t\tvec3 normal = length(vNormal) > 0.0 ? normalize(vNormal) : vec3(0.0, 0.0, 0.0);\r\n\t\t\t\tvec3 dir = normalize(lightDir);\r\n\t\t\t\tfloat d = -dot(dir, normal);\r\n\t\t\t\tfloat brightness = max(0.0, d) * diffuse;\r\n\t\t\t\tvec3 eye = normalize(vPosition - cameraPos);\r\n\t\t\t\tvec3 pixColor = vColor * min(1.0, ambient + diffuse * brightness);\r\n\t\t\t\tif (d > 0.0) {\r\n\t\t\t\t\td = -dot(dir, reflect(eye, normal));\r\n\t\t\t\t\tpixColor += lightCol * specular * pow(max(0.0, d), shininess);\r\n\t\t\t\t}\r\n\t\t\t\tgl_FragColor = vec4(pixColor, 1.0);\r\n\t\t\t}\r\n\t\t");
	}
	,setViewMatrix: function(matrix) {
		var _this = this.viewMat;
		_this.e00 = matrix.e00;
		_this.e01 = matrix.e01;
		_this.e02 = matrix.e02;
		_this.e03 = matrix.e03;
		_this.e10 = matrix.e10;
		_this.e11 = matrix.e11;
		_this.e12 = matrix.e12;
		_this.e13 = matrix.e13;
		_this.e20 = matrix.e20;
		_this.e21 = matrix.e21;
		_this.e22 = matrix.e22;
		_this.e23 = matrix.e23;
		_this.e30 = matrix.e30;
		_this.e31 = matrix.e31;
		_this.e32 = matrix.e32;
		_this.e33 = matrix.e33;
		var d01_01 = _this.e00 * _this.e11 - _this.e01 * _this.e10;
		var d01_02 = _this.e00 * _this.e12 - _this.e02 * _this.e10;
		var d01_03 = _this.e00 * _this.e13 - _this.e03 * _this.e10;
		var d01_12 = _this.e01 * _this.e12 - _this.e02 * _this.e11;
		var d01_13 = _this.e01 * _this.e13 - _this.e03 * _this.e11;
		var d01_23 = _this.e02 * _this.e13 - _this.e03 * _this.e12;
		var d23_01 = _this.e20 * _this.e31 - _this.e21 * _this.e30;
		var d23_02 = _this.e20 * _this.e32 - _this.e22 * _this.e30;
		var d23_03 = _this.e20 * _this.e33 - _this.e23 * _this.e30;
		var d23_12 = _this.e21 * _this.e32 - _this.e22 * _this.e31;
		var d23_13 = _this.e21 * _this.e33 - _this.e23 * _this.e31;
		var d23_23 = _this.e22 * _this.e33 - _this.e23 * _this.e32;
		var d00 = _this.e11 * d23_23 - _this.e12 * d23_13 + _this.e13 * d23_12;
		var d01 = _this.e10 * d23_23 - _this.e12 * d23_03 + _this.e13 * d23_02;
		var d02 = _this.e10 * d23_13 - _this.e11 * d23_03 + _this.e13 * d23_01;
		var d03 = _this.e10 * d23_12 - _this.e11 * d23_02 + _this.e12 * d23_01;
		var d11 = _this.e00 * d23_23 - _this.e02 * d23_03 + _this.e03 * d23_02;
		var d12 = _this.e00 * d23_13 - _this.e01 * d23_03 + _this.e03 * d23_01;
		var d13 = _this.e00 * d23_12 - _this.e01 * d23_02 + _this.e02 * d23_01;
		var d23 = _this.e30 * d01_12 - _this.e31 * d01_02 + _this.e32 * d01_01;
		var d32 = _this.e20 * d01_13 - _this.e21 * d01_03 + _this.e23 * d01_01;
		var d33 = _this.e20 * d01_12 - _this.e21 * d01_02 + _this.e22 * d01_01;
		var invDet = _this.e00 * d00 - _this.e01 * d01 + _this.e02 * d02 - _this.e03 * d03;
		if(invDet != 0) {
			invDet = 1 / invDet;
		}
		_this.e00 = d00 * invDet;
		_this.e01 = -(_this.e01 * d23_23 - _this.e02 * d23_13 + _this.e03 * d23_12) * invDet;
		_this.e02 = (_this.e31 * d01_23 - _this.e32 * d01_13 + _this.e33 * d01_12) * invDet;
		_this.e03 = -(_this.e21 * d01_23 - _this.e22 * d01_13 + _this.e23 * d01_12) * invDet;
		_this.e10 = -d01 * invDet;
		_this.e11 = d11 * invDet;
		_this.e12 = -(_this.e30 * d01_23 - _this.e32 * d01_03 + _this.e33 * d01_02) * invDet;
		_this.e13 = (_this.e20 * d01_23 - _this.e22 * d01_03 + _this.e23 * d01_02) * invDet;
		_this.e20 = d02 * invDet;
		_this.e21 = -d12 * invDet;
		_this.e22 = (_this.e30 * d01_13 - _this.e31 * d01_03 + _this.e33 * d01_01) * invDet;
		_this.e23 = -d32 * invDet;
		_this.e30 = -d03 * invDet;
		_this.e31 = d13 * invDet;
		_this.e32 = -d23 * invDet;
		_this.e33 = d33 * invDet;
		this.cameraPos.init(this.viewMat.e03,this.viewMat.e13,this.viewMat.e23);
		var _this = this.lightDir.init(this.viewMat.e02,this.viewMat.e12,this.viewMat.e22);
		_this.x *= -1;
		_this.y *= -1;
		_this.z *= -1;
		var _this = this.viewMat;
		_this.e00 = matrix.e00;
		_this.e01 = matrix.e01;
		_this.e02 = matrix.e02;
		_this.e03 = matrix.e03;
		_this.e10 = matrix.e10;
		_this.e11 = matrix.e11;
		_this.e12 = matrix.e12;
		_this.e13 = matrix.e13;
		_this.e20 = matrix.e20;
		_this.e21 = matrix.e21;
		_this.e22 = matrix.e22;
		_this.e23 = matrix.e23;
		_this.e30 = matrix.e30;
		_this.e31 = matrix.e31;
		_this.e32 = matrix.e32;
		_this.e33 = matrix.e33;
	}
	,setProjectionMatrix: function(matrix) {
		var _this = this.projMat;
		_this.e00 = matrix.e00;
		_this.e01 = matrix.e01;
		_this.e02 = matrix.e02;
		_this.e03 = matrix.e03;
		_this.e10 = matrix.e10;
		_this.e11 = matrix.e11;
		_this.e12 = matrix.e12;
		_this.e13 = matrix.e13;
		_this.e20 = matrix.e20;
		_this.e21 = matrix.e21;
		_this.e22 = matrix.e22;
		_this.e23 = matrix.e23;
		_this.e30 = matrix.e30;
		_this.e31 = matrix.e31;
		_this.e32 = matrix.e32;
		_this.e33 = matrix.e33;
	}
	,begin: function(color) {
		this.gl.clearColor(color.x,color.y,color.z,1);
		this.gl.enable(2884);
		this.gl.clearDepth(1);
		this.gl.clear(16640);
		this.gl.lineWidth(2.0);
		this.shader.use();
		var matrix = this.viewMat;
		this.gl.uniformMatrix4fv(this.shader.getUniformLocation("viewMat"),false,[matrix.e00,matrix.e10,matrix.e20,matrix.e30,matrix.e01,matrix.e11,matrix.e21,matrix.e31,matrix.e02,matrix.e12,matrix.e22,matrix.e32,matrix.e03,matrix.e13,matrix.e23,matrix.e33]);
		var matrix = this.projMat;
		this.gl.uniformMatrix4fv(this.shader.getUniformLocation("projMat"),false,[matrix.e00,matrix.e10,matrix.e20,matrix.e30,matrix.e01,matrix.e11,matrix.e21,matrix.e31,matrix.e02,matrix.e12,matrix.e22,matrix.e32,matrix.e03,matrix.e13,matrix.e23,matrix.e33]);
		var v = this.cameraPos;
		this.gl.uniform3f(this.shader.getUniformLocation("cameraPos"),v.x,v.y,v.z);
		var v = this.lightDir;
		this.gl.uniform3f(this.shader.getUniformLocation("lightDir"),v.x,v.y,v.z);
		this.gl.uniform3f(this.shader.getUniformLocation("lightCol"),1,1,1);
		var _this = this.tmpMat;
		_this.e00 = 1;
		_this.e01 = 0;
		_this.e02 = 0;
		_this.e03 = 0;
		_this.e10 = 0;
		_this.e11 = 1;
		_this.e12 = 0;
		_this.e13 = 0;
		_this.e20 = 0;
		_this.e21 = 0;
		_this.e22 = 1;
		_this.e23 = 0;
		_this.e30 = 0;
		_this.e31 = 0;
		_this.e32 = 0;
		_this.e33 = 1;
		var matrix = this.tmpMat;
		this.gl.uniformMatrix4fv(this.shader.getUniformLocation("worldMat"),false,[matrix.e00,matrix.e10,matrix.e20,matrix.e30,matrix.e01,matrix.e11,matrix.e21,matrix.e31,matrix.e02,matrix.e12,matrix.e22,matrix.e32,matrix.e03,matrix.e13,matrix.e23,matrix.e33]);
		this.numPointData = 0;
		this.numLineData = 0;
		this.numTriData = 0;
	}
	,end: function() {
		this.colorModeWireframe();
		if(this.numPointData > 0) {
			this.pointVBO.updateDataFloat32Array(this.pointData);
			this.pointVBO.bindAttribs();
			this.pointIBO.draw(0,this.numPointData);
			this.numPointData = 0;
		}
		if(this.numLineData > 0) {
			this.lineVBO.updateDataFloat32Array(this.lineData);
			this.lineVBO.bindAttribs();
			this.lineIBO.draw(1,this.numLineData * 2);
			this.numLineData = 0;
		}
		this.colorModeSolid();
		if(this.numTriData > 0) {
			this.triVBO.updateDataFloat32Array(this.triData);
			this.triVBO.bindAttribs();
			this.triIBO.draw(4,this.numTriData * 3);
			this.numTriData = 0;
		}
		this.gl.flush();
	}
	,getDebugDraw: function() {
		return this;
	}
	,point: function(v,color) {
		var idx = this.numPointData * 9;
		var data = this.pointData;
		data[idx++] = v.x;
		data[idx++] = v.y;
		data[idx++] = v.z;
		data[idx++] = 0;
		data[idx++] = 0;
		data[idx++] = 0;
		data[idx++] = color.x;
		data[idx++] = color.y;
		data[idx++] = color.z;
		this.numPointData++;
		if(this.numPointData == this.pointBufferSize) {
			this.colorModeWireframe();
			this.pointVBO.updateDataFloat32Array(this.pointData);
			this.pointVBO.bindAttribs();
			this.pointIBO.draw(0);
			this.numPointData = 0;
		}
	}
	,line: function(v1,v2,color) {
		var idx = this.numLineData * 18;
		var data = this.lineData;
		data[idx++] = v1.x;
		data[idx++] = v1.y;
		data[idx++] = v1.z;
		data[idx++] = 0;
		data[idx++] = 0;
		data[idx++] = 0;
		data[idx++] = color.x;
		data[idx++] = color.y;
		data[idx++] = color.z;
		data[idx++] = v2.x;
		data[idx++] = v2.y;
		data[idx++] = v2.z;
		data[idx++] = 0;
		data[idx++] = 0;
		data[idx++] = 0;
		data[idx++] = color.x;
		data[idx++] = color.y;
		data[idx++] = color.z;
		this.numLineData++;
		if(this.numLineData == this.lineBufferSize) {
			this.colorModeWireframe();
			this.lineVBO.updateDataFloat32Array(this.lineData);
			this.lineVBO.bindAttribs();
			this.lineIBO.draw(1);
			this.numLineData = 0;
		}
	}
	,triangle: function(v1,v2,v3,n1,n2,n3,color) {
		var idx = this.numTriData * 27;
		var data = this.triData;
		data[idx++] = v1.x;
		data[idx++] = v1.y;
		data[idx++] = v1.z;
		data[idx++] = n1.x;
		data[idx++] = n1.y;
		data[idx++] = n1.z;
		data[idx++] = color.x;
		data[idx++] = color.y;
		data[idx++] = color.z;
		data[idx++] = v2.x;
		data[idx++] = v2.y;
		data[idx++] = v2.z;
		data[idx++] = n2.x;
		data[idx++] = n2.y;
		data[idx++] = n2.z;
		data[idx++] = color.x;
		data[idx++] = color.y;
		data[idx++] = color.z;
		data[idx++] = v3.x;
		data[idx++] = v3.y;
		data[idx++] = v3.z;
		data[idx++] = n3.x;
		data[idx++] = n3.y;
		data[idx++] = n3.z;
		data[idx++] = color.x;
		data[idx++] = color.y;
		data[idx++] = color.z;
		this.numTriData++;
		if(this.numTriData == this.triBufferSize) {
			this.colorModeSolid();
			this.triVBO.updateDataFloat32Array(this.triData);
			this.triVBO.bindAttribs();
			this.triIBO.draw(4);
			this.numTriData = 0;
		}
	}
	,colorModeSolid: function() {
		this.gl.uniform1f(this.shader.getUniformLocation("ambient"),0.2);
		this.gl.uniform1f(this.shader.getUniformLocation("diffuse"),0.8);
		this.gl.uniform1f(this.shader.getUniformLocation("specular"),0.8);
		this.gl.uniform1f(this.shader.getUniformLocation("shininess"),20);
	}
	,colorModeWireframe: function() {
		this.gl.uniform1f(this.shader.getUniformLocation("ambient"),1);
		this.gl.uniform1f(this.shader.getUniformLocation("diffuse"),0);
		this.gl.uniform1f(this.shader.getUniformLocation("specular"),0);
		this.gl.uniform1f(this.shader.getUniformLocation("shininess"),1);
	}
	,__class__: demo_js_WebGLDebugGraphics
});
var demo_js_minilib_OIndexBuffer = function(gl) {
	this.gl = gl;
	this.buffer = gl.createBuffer();
};
demo_js_minilib_OIndexBuffer.__name__ = true;
demo_js_minilib_OIndexBuffer.prototype = {
	setData: function(array,usage) {
		if(usage == null) {
			usage = 35044;
		}
		this.gl.bindBuffer(34963,this.buffer);
		this.gl.bufferData(34963,new Int16Array(array),usage);
		this.gl.bindBuffer(34963,null);
		this.count = array.length;
	}
	,updateData: function(array,usage) {
		if(usage == null) {
			usage = 35044;
		}
		this.gl.bindBuffer(34963,this.buffer);
		this.gl.bufferSubData(34963,0,new Int16Array(array));
		this.gl.bindBuffer(34963,null);
	}
	,updateDataInt16Array: function(array) {
		this.gl.bindBuffer(34963,this.buffer);
		this.gl.bufferSubData(34963,0,array);
		this.gl.bindBuffer(34963,null);
	}
	,draw: function(mode,count) {
		if(count == null) {
			count = -1;
		}
		if(mode == null) {
			mode = 4;
		}
		this.gl.bindBuffer(34963,this.buffer);
		this.gl.drawElements(mode,count >= 0 ? count : this.count,5123,0);
	}
	,__class__: demo_js_minilib_OIndexBuffer
};
var demo_js_minilib_OInput = function() {
	this.ptouchX = 0;
	this.ptouchY = 0;
	this.touchX = 0;
	this.touchY = 0;
	this.dtouchX = 0;
	this.dtouchY = 0;
	this._ntouchX = 0;
	this._ntouchY = 0;
	this.ptouch = false;
	this.touch = false;
	this._ntouch = false;
	this.dtouch = 0;
	this.pmouseX = 0;
	this.pmouseY = 0;
	this.mouseX = 0;
	this.mouseY = 0;
	this.dmouseX = 0;
	this.dmouseY = 0;
	this._nmouseX = 0;
	this._nmouseY = 0;
	this.pmouseL = false;
	this.pmouseR = false;
	this.mouseL = false;
	this.mouseR = false;
	this.dmouseL = 0;
	this.dmouseR = 0;
	this._nmouseL = false;
	this._nmouseR = false;
};
demo_js_minilib_OInput.__name__ = true;
demo_js_minilib_OInput.prototype = {
	_update: function() {
		this.ptouchX = this.touchX;
		this.ptouchY = this.touchY;
		this.touchX = this._ntouchX;
		this.touchY = this._ntouchY;
		this.dtouchX = this.touchX - this.ptouchX;
		this.dtouchY = this.touchY - this.ptouchY;
		this.ptouch = this.touch;
		this.touch = this._ntouch;
		this.dtouch = (this.touch ? 1 : 0) - (this.ptouch ? 1 : 0);
		if(this.dtouch == 1) {
			this.ptouchX = this.touchX;
			this.ptouchY = this.touchY;
		}
		this.pmouseX = this.mouseX;
		this.pmouseY = this.mouseY;
		this.mouseX = this._nmouseX;
		this.mouseY = this._nmouseY;
		this.dmouseX = this.mouseX - this.pmouseX;
		this.dmouseY = this.mouseY - this.pmouseY;
		this.pmouseL = this.mouseL;
		this.pmouseR = this.mouseR;
		this.mouseL = this._nmouseL;
		this.mouseR = this._nmouseR;
		this.dmouseL = (this.mouseL ? 1 : 0) - (this.pmouseL ? 1 : 0);
		this.dmouseR = (this.mouseR ? 1 : 0) - (this.pmouseR ? 1 : 0);
	}
	,__class__: demo_js_minilib_OInput
};
var demo_js_minilib_OShader = function(gl) {
	this.gl = gl;
	this.program = gl.createProgram();
	this.vertexShader = gl.createShader(35633);
	this.fragmentShader = gl.createShader(35632);
};
demo_js_minilib_OShader.__name__ = true;
demo_js_minilib_OShader.prototype = {
	compile: function(vertexSource,fragmentSource) {
		this.uniformLocationMap = new haxe_ds_StringMap();
		this.compileShader(this.vertexShader,vertexSource);
		this.compileShader(this.fragmentShader,fragmentSource);
		this.gl.attachShader(this.program,this.vertexShader);
		this.gl.attachShader(this.program,this.fragmentShader);
		this.gl.linkProgram(this.program);
		if(!this.gl.getProgramParameter(this.program,35714)) {
			console.log("demos/src/demo/js/minilib/OShader.hx:27:",this.gl.getProgramInfoLog(this.program));
		}
	}
	,getAttribIndex: function(name) {
		return this.gl.getAttribLocation(this.program,name);
	}
	,getUniformLocation: function(name) {
		if(Object.prototype.hasOwnProperty.call(this.uniformLocationMap.h,name)) {
			return this.uniformLocationMap.h[name];
		}
		var location = this.gl.getUniformLocation(this.program,name);
		this.uniformLocationMap.h[name] = location;
		return location;
	}
	,getAttribIndices: function(attribs) {
		var indices = [];
		var _g = 0;
		while(_g < attribs.length) indices.push(this.getAttribIndex(attribs[_g++].name));
		return indices;
	}
	,use: function() {
		this.gl.useProgram(this.program);
	}
	,compileShader: function(shader,source) {
		this.gl.shaderSource(shader,source);
		this.gl.compileShader(shader);
		if(!this.gl.getShaderParameter(shader,35713)) {
			var v = this.gl.getShaderInfoLog(shader);
			window.alert(Std.string(v));
		}
	}
	,__class__: demo_js_minilib_OShader
};
var demo_js_minilib_OTimer = function(targetFPS,targetFunction) {
	this.targetFPS = targetFPS;
	this.targetFunction = targetFunction;
	this.running = false;
};
demo_js_minilib_OTimer.__name__ = true;
demo_js_minilib_OTimer.prototype = {
	run: function() {
		this.running = true;
		this.expectedNextTime = new Date().getTime();
		this.loop();
	}
	,stop: function() {
		this.running = false;
	}
	,loop: function() {
		this.targetFunction();
		var en = new Date().getTime();
		var sleep = this.expectedNextTime + 1000.0 / this.targetFPS - en;
		if(sleep < 3) {
			sleep = 3;
		}
		this.expectedNextTime = en + sleep;
		if(this.running) {
			window.setTimeout($bind(this,this.loop),sleep + 0.5 | 0);
		}
	}
	,time: function() {
		return new Date().getTime();
	}
	,__class__: demo_js_minilib_OTimer
};
var demo_js_minilib_OVertexAttribute = function(float32Count,name) {
	this.float32Count = float32Count;
	this.name = name;
};
demo_js_minilib_OVertexAttribute.__name__ = true;
demo_js_minilib_OVertexAttribute.prototype = {
	__class__: demo_js_minilib_OVertexAttribute
};
var demo_js_minilib_OVertexBuffer = function(gl) {
	this.gl = gl;
	this.buffer = gl.createBuffer();
};
demo_js_minilib_OVertexBuffer.__name__ = true;
demo_js_minilib_OVertexBuffer.prototype = {
	setData: function(array,usage) {
		if(usage == null) {
			usage = 35044;
		}
		if(this.attribs == null) {
			throw haxe_Exception.thrown("set attributes first");
		}
		this.numVertices = array.length / (this.stride / 4);
		this.gl.bindBuffer(34962,this.buffer);
		this.gl.bufferData(34962,new Float32Array(array),usage);
		this.gl.bindBuffer(34962,null);
	}
	,updateData: function(array) {
		this.gl.bindBuffer(34962,this.buffer);
		this.gl.bufferSubData(34962,0,new Float32Array(array));
		this.gl.bindBuffer(34962,null);
	}
	,updateDataFloat32Array: function(array) {
		this.gl.bindBuffer(34962,this.buffer);
		this.gl.bufferSubData(34962,0,array);
		this.gl.bindBuffer(34962,null);
	}
	,setAttribs: function(attribs) {
		this.attribs = attribs;
		this.offsets = [];
		this.stride = 0;
		var num = attribs.length;
		var _g = 0;
		while(_g < num) {
			this.offsets.push(this.stride);
			this.stride += attribs[_g++].float32Count * 4;
		}
	}
	,loadAttribIndices: function(program) {
		this.indices = program.getAttribIndices(this.attribs);
	}
	,bindAttribs: function() {
		if(this.indices == null) {
			throw haxe_Exception.thrown("indices are not loaded");
		}
		var num = this.attribs.length;
		this.gl.bindBuffer(34962,this.buffer);
		var _g = 0;
		while(_g < num) {
			var i = _g++;
			this.gl.enableVertexAttribArray(this.indices[i]);
			this.gl.vertexAttribPointer(this.indices[i],this.attribs[i].float32Count,5126,false,this.stride,this.offsets[i]);
		}
		this.gl.bindBuffer(34962,null);
	}
	,__class__: demo_js_minilib_OVertexBuffer
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
haxe_IMap.__isInterface__ = true;
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
haxe_Exception.__name__ = true;
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	get_native: function() {
		return this.__nativeException;
	}
	,__class__: haxe_Exception
});
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
};
haxe_ValueException.__name__ = true;
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	__class__: haxe_ValueException
});
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	__class__: haxe_ds_StringMap
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = true;
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
	,__class__: haxe_iterators_ArrayIterator
};
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	while(true) {
		if(cc == null) {
			return false;
		}
		if(cc == cl) {
			return true;
		}
		var intf = cc.__interfaces__;
		if(intf != null) {
			var _g = 0;
			var _g1 = intf.length;
			while(_g < _g1) {
				var i = intf[_g++];
				if(i == cl || js_Boot.__interfLoop(i,cl)) {
					return true;
				}
			}
		}
		cc = cc.__super__;
	}
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(js_Boot.__downcastCheck(o,cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return false;
	}
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(cl.__isInterface__) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__cast = function(o,t) {
	if(o == null || js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw haxe_Exception.thrown("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_html__$CanvasElement_CanvasUtil = function() { };
js_html__$CanvasElement_CanvasUtil.__name__ = true;
js_html__$CanvasElement_CanvasUtil.getContextWebGL = function(canvas,attribs) {
	var ctx = canvas.getContext("webgl",attribs);
	if(ctx != null) {
		return ctx;
	}
	var ctx = canvas.getContext("experimental-webgl",attribs);
	if(ctx != null) {
		return ctx;
	}
	return null;
};
var oimo_collision_broadphase_BroadPhase = function(type) {
	this._type = type;
	this._numProxies = 0;
	this._proxyList = null;
	this._proxyListLast = null;
	this._proxyPairList = null;
	this._incremental = false;
	this._testCount = 0;
	this._proxyPairPool = null;
	this._idCount = 0;
	this._convexSweep = new oimo_collision_broadphase__$BroadPhase_ConvexSweepGeometry();
	this._aabb = new oimo_collision_broadphase__$BroadPhase_AabbGeometry();
	this.identity = new oimo_common_Transform();
	this.zero = new oimo_common_Vec3();
	this.rayCastHit = new oimo_collision_geometry_RayCastHit();
};
oimo_collision_broadphase_BroadPhase.__name__ = true;
oimo_collision_broadphase_BroadPhase.prototype = {
	createProxy: function(userData,aabb) {
		return null;
	}
	,destroyProxy: function(proxy) {
	}
	,moveProxy: function(proxy,aabb,displacement) {
	}
	,isOverlapping: function(proxy1,proxy2) {
		if(proxy1._aabbMinX < proxy2._aabbMaxX && proxy1._aabbMaxX > proxy2._aabbMinX && proxy1._aabbMinY < proxy2._aabbMaxY && proxy1._aabbMaxY > proxy2._aabbMinY && proxy1._aabbMinZ < proxy2._aabbMaxZ) {
			return proxy1._aabbMaxZ > proxy2._aabbMinZ;
		} else {
			return false;
		}
	}
	,collectPairs: function() {
	}
	,getProxyPairList: function() {
		return this._proxyPairList;
	}
	,isIncremental: function() {
		return this._incremental;
	}
	,getTestCount: function() {
		return this._testCount;
	}
	,rayCast: function(begin,end,callback) {
	}
	,convexCast: function(convex,begin,translation,callback) {
	}
	,aabbTest: function(aabb,callback) {
	}
	,__class__: oimo_collision_broadphase_BroadPhase
};
var oimo_collision_geometry_Geometry = function(type) {
	this._type = type;
	this._volume = 0;
};
oimo_collision_geometry_Geometry.__name__ = true;
oimo_collision_geometry_Geometry.prototype = {
	_updateMass: function() {
	}
	,_computeAabb: function(aabb,tf) {
	}
	,_rayCastLocal: function(beginX,beginY,beginZ,endX,endY,endZ,hit) {
		return false;
	}
	,getType: function() {
		return this._type;
	}
	,getVolume: function() {
		return this._volume;
	}
	,rayCast: function(begin,end,transform,hit) {
		var beginLocalX;
		var beginLocalY;
		var beginLocalZ;
		var endLocalX;
		var endLocalY;
		var endLocalZ;
		beginLocalX = begin.x;
		beginLocalY = begin.y;
		beginLocalZ = begin.z;
		endLocalX = end.x;
		endLocalY = end.y;
		endLocalZ = end.z;
		beginLocalX -= transform._positionX;
		beginLocalY -= transform._positionY;
		beginLocalZ -= transform._positionZ;
		endLocalX -= transform._positionX;
		endLocalY -= transform._positionY;
		endLocalZ -= transform._positionZ;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = transform._rotation00 * beginLocalX + transform._rotation10 * beginLocalY + transform._rotation20 * beginLocalZ;
		__tmp__Y = transform._rotation01 * beginLocalX + transform._rotation11 * beginLocalY + transform._rotation21 * beginLocalZ;
		__tmp__Z = transform._rotation02 * beginLocalX + transform._rotation12 * beginLocalY + transform._rotation22 * beginLocalZ;
		beginLocalX = __tmp__X;
		beginLocalY = __tmp__Y;
		beginLocalZ = __tmp__Z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = transform._rotation00 * endLocalX + transform._rotation10 * endLocalY + transform._rotation20 * endLocalZ;
		__tmp__Y = transform._rotation01 * endLocalX + transform._rotation11 * endLocalY + transform._rotation21 * endLocalZ;
		__tmp__Z = transform._rotation02 * endLocalX + transform._rotation12 * endLocalY + transform._rotation22 * endLocalZ;
		endLocalX = __tmp__X;
		endLocalY = __tmp__Y;
		endLocalZ = __tmp__Z;
		if(this._rayCastLocal(beginLocalX,beginLocalY,beginLocalZ,endLocalX,endLocalY,endLocalZ,hit)) {
			var localPosX;
			var localPosY;
			var localPosZ;
			var localNormalX;
			var localNormalY;
			var localNormalZ;
			var v = hit.position;
			localPosX = v.x;
			localPosY = v.y;
			localPosZ = v.z;
			var v = hit.normal;
			localNormalX = v.x;
			localNormalY = v.y;
			localNormalZ = v.z;
			var __tmp__X;
			var __tmp__Y;
			var __tmp__Z;
			__tmp__X = transform._rotation00 * localPosX + transform._rotation01 * localPosY + transform._rotation02 * localPosZ;
			__tmp__Y = transform._rotation10 * localPosX + transform._rotation11 * localPosY + transform._rotation12 * localPosZ;
			__tmp__Z = transform._rotation20 * localPosX + transform._rotation21 * localPosY + transform._rotation22 * localPosZ;
			localPosX = __tmp__X;
			localPosY = __tmp__Y;
			localPosZ = __tmp__Z;
			var __tmp__X;
			var __tmp__Y;
			var __tmp__Z;
			__tmp__X = transform._rotation00 * localNormalX + transform._rotation01 * localNormalY + transform._rotation02 * localNormalZ;
			__tmp__Y = transform._rotation10 * localNormalX + transform._rotation11 * localNormalY + transform._rotation12 * localNormalZ;
			__tmp__Z = transform._rotation20 * localNormalX + transform._rotation21 * localNormalY + transform._rotation22 * localNormalZ;
			localNormalX = __tmp__X;
			localNormalY = __tmp__Y;
			localNormalZ = __tmp__Z;
			localPosX += transform._positionX;
			localPosY += transform._positionY;
			localPosZ += transform._positionZ;
			var v = hit.position;
			v.x = localPosX;
			v.y = localPosY;
			v.z = localPosZ;
			var v = hit.normal;
			v.x = localNormalX;
			v.y = localNormalY;
			v.z = localNormalZ;
			return true;
		}
		return false;
	}
	,__class__: oimo_collision_geometry_Geometry
};
var oimo_collision_geometry_ConvexGeometry = function(type) {
	oimo_collision_geometry_Geometry.call(this,type);
	this._gjkMargin = oimo_common_Setting.defaultGJKMargin;
	this._useGjkRayCast = false;
};
oimo_collision_geometry_ConvexGeometry.__name__ = true;
oimo_collision_geometry_ConvexGeometry.__super__ = oimo_collision_geometry_Geometry;
oimo_collision_geometry_ConvexGeometry.prototype = $extend(oimo_collision_geometry_Geometry.prototype,{
	getGjkMergin: function() {
		return this._gjkMargin;
	}
	,setGjkMergin: function(gjkMergin) {
		if(gjkMergin < 0) {
			gjkMergin = 0;
		}
		this._gjkMargin = gjkMergin;
	}
	,computeLocalSupportingVertex: function(dir,out) {
	}
	,rayCast: function(begin,end,transform,hit) {
		if(this._useGjkRayCast) {
			return oimo_collision_narrowphase_detector_gjkepa_GjkEpa.instance.rayCast(this,transform,begin,end,hit);
		} else {
			return oimo_collision_geometry_Geometry.prototype.rayCast.call(this,begin,end,transform,hit);
		}
	}
	,__class__: oimo_collision_geometry_ConvexGeometry
});
var oimo_collision_broadphase__$BroadPhase_ConvexSweepGeometry = function() {
	oimo_collision_geometry_ConvexGeometry.call(this,-1);
};
oimo_collision_broadphase__$BroadPhase_ConvexSweepGeometry.__name__ = true;
oimo_collision_broadphase__$BroadPhase_ConvexSweepGeometry.__super__ = oimo_collision_geometry_ConvexGeometry;
oimo_collision_broadphase__$BroadPhase_ConvexSweepGeometry.prototype = $extend(oimo_collision_geometry_ConvexGeometry.prototype,{
	init: function(c,transform,translation) {
		this.c = c;
		var trX;
		var trY;
		var trZ;
		trX = translation.x;
		trY = translation.y;
		trZ = translation.z;
		var localTrX;
		var localTrY;
		var localTrZ;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = transform._rotation00 * trX + transform._rotation10 * trY + transform._rotation20 * trZ;
		__tmp__Y = transform._rotation01 * trX + transform._rotation11 * trY + transform._rotation21 * trZ;
		__tmp__Z = transform._rotation02 * trX + transform._rotation12 * trY + transform._rotation22 * trZ;
		localTrX = __tmp__X;
		localTrY = __tmp__Y;
		localTrZ = __tmp__Z;
		this.localTranslation = new oimo_common_Vec3();
		var v = this.localTranslation;
		v.x = localTrX;
		v.y = localTrY;
		v.z = localTrZ;
		this._gjkMargin = c._gjkMargin;
	}
	,computeLocalSupportingVertex: function(dir,out) {
		this.c.computeLocalSupportingVertex(dir,out);
		var v = this.localTranslation;
		if(dir.x * v.x + dir.y * v.y + dir.z * v.z > 0) {
			var v = this.localTranslation;
			out.x += v.x;
			out.y += v.y;
			out.z += v.z;
		}
	}
	,__class__: oimo_collision_broadphase__$BroadPhase_ConvexSweepGeometry
});
var oimo_collision_broadphase__$BroadPhase_AabbGeometry = function() {
	oimo_collision_geometry_ConvexGeometry.call(this,-1);
	this.min = new oimo_common_Vec3();
	this.max = new oimo_common_Vec3();
};
oimo_collision_broadphase__$BroadPhase_AabbGeometry.__name__ = true;
oimo_collision_broadphase__$BroadPhase_AabbGeometry.__super__ = oimo_collision_geometry_ConvexGeometry;
oimo_collision_broadphase__$BroadPhase_AabbGeometry.prototype = $extend(oimo_collision_geometry_ConvexGeometry.prototype,{
	computeLocalSupportingVertex: function(dir,out) {
		out.x = dir.x > 0 ? this.max.x : this.min.x;
		out.y = dir.y > 0 ? this.max.y : this.min.y;
		out.z = dir.z > 0 ? this.max.z : this.min.z;
	}
	,__class__: oimo_collision_broadphase__$BroadPhase_AabbGeometry
});
var oimo_collision_broadphase_BroadPhaseProxyCallback = function() {
};
oimo_collision_broadphase_BroadPhaseProxyCallback.__name__ = true;
oimo_collision_broadphase_BroadPhaseProxyCallback.prototype = {
	process: function(proxy) {
	}
	,__class__: oimo_collision_broadphase_BroadPhaseProxyCallback
};
var oimo_collision_broadphase_BroadPhaseType = function() { };
oimo_collision_broadphase_BroadPhaseType.__name__ = true;
var oimo_collision_broadphase_Proxy = function(userData,id) {
	this.userData = userData;
	this._id = id;
	this._prev = null;
	this._next = null;
	this._aabbMinX = 0;
	this._aabbMinY = 0;
	this._aabbMinZ = 0;
	this._aabbMaxX = 0;
	this._aabbMaxY = 0;
	this._aabbMaxZ = 0;
};
oimo_collision_broadphase_Proxy.__name__ = true;
oimo_collision_broadphase_Proxy.prototype = {
	getId: function() {
		return this._id;
	}
	,getFatAabb: function() {
		var aabb = new oimo_collision_geometry_Aabb();
		aabb._minX = this._aabbMinX;
		aabb._minY = this._aabbMinY;
		aabb._minZ = this._aabbMinZ;
		aabb._maxX = this._aabbMaxX;
		aabb._maxY = this._aabbMaxY;
		aabb._maxZ = this._aabbMaxZ;
		return aabb;
	}
	,getFatAabbTo: function(aabb) {
		aabb._minX = this._aabbMinX;
		aabb._minY = this._aabbMinY;
		aabb._minZ = this._aabbMinZ;
		aabb._maxX = this._aabbMaxX;
		aabb._maxY = this._aabbMaxY;
		aabb._maxZ = this._aabbMaxZ;
	}
	,__class__: oimo_collision_broadphase_Proxy
};
var oimo_collision_broadphase_ProxyPair = function() {
	this._p1 = null;
	this._p2 = null;
};
oimo_collision_broadphase_ProxyPair.__name__ = true;
oimo_collision_broadphase_ProxyPair.prototype = {
	getProxy1: function() {
		return this._p1;
	}
	,getProxy2: function() {
		return this._p2;
	}
	,getNext: function() {
		return this._next;
	}
	,__class__: oimo_collision_broadphase_ProxyPair
};
var oimo_collision_broadphase_bruteforce_BruteForceBroadPhase = function() {
	oimo_collision_broadphase_BroadPhase.call(this,1);
	this._incremental = false;
};
oimo_collision_broadphase_bruteforce_BruteForceBroadPhase.__name__ = true;
oimo_collision_broadphase_bruteforce_BruteForceBroadPhase.__super__ = oimo_collision_broadphase_BroadPhase;
oimo_collision_broadphase_bruteforce_BruteForceBroadPhase.prototype = $extend(oimo_collision_broadphase_BroadPhase.prototype,{
	createProxy: function(userData,aabb) {
		var proxy = new oimo_collision_broadphase_Proxy(userData,this._idCount++);
		this._numProxies++;
		if(this._proxyList == null) {
			this._proxyList = proxy;
			this._proxyListLast = proxy;
		} else {
			this._proxyListLast._next = proxy;
			proxy._prev = this._proxyListLast;
			this._proxyListLast = proxy;
		}
		proxy._aabbMinX = aabb._minX;
		proxy._aabbMinY = aabb._minY;
		proxy._aabbMinZ = aabb._minZ;
		proxy._aabbMaxX = aabb._maxX;
		proxy._aabbMaxY = aabb._maxY;
		proxy._aabbMaxZ = aabb._maxZ;
		return proxy;
	}
	,destroyProxy: function(proxy) {
		this._numProxies--;
		var prev = proxy._prev;
		var next = proxy._next;
		if(prev != null) {
			prev._next = next;
		}
		if(next != null) {
			next._prev = prev;
		}
		if(proxy == this._proxyList) {
			this._proxyList = this._proxyList._next;
		}
		if(proxy == this._proxyListLast) {
			this._proxyListLast = this._proxyListLast._prev;
		}
		proxy._next = null;
		proxy._prev = null;
		proxy.userData = null;
	}
	,moveProxy: function(proxy,aabb,dislacement) {
		proxy._aabbMinX = aabb._minX;
		proxy._aabbMinY = aabb._minY;
		proxy._aabbMinZ = aabb._minZ;
		proxy._aabbMaxX = aabb._maxX;
		proxy._aabbMaxY = aabb._maxY;
		proxy._aabbMaxZ = aabb._maxZ;
	}
	,collectPairs: function() {
		var p = this._proxyPairList;
		if(p != null) {
			while(true) {
				p._p1 = null;
				p._p2 = null;
				p = p._next;
				if(!(p != null)) {
					break;
				}
			}
			this._proxyPairList._next = this._proxyPairPool;
			this._proxyPairPool = this._proxyPairList;
			this._proxyPairList = null;
		}
		this._testCount = 0;
		var p1 = this._proxyList;
		while(p1 != null) {
			var n = p1._next;
			var p2 = p1._next;
			while(p2 != null) {
				var n1 = p2._next;
				this._testCount++;
				if(p1._aabbMinX < p2._aabbMaxX && p1._aabbMaxX > p2._aabbMinX && p1._aabbMinY < p2._aabbMaxY && p1._aabbMaxY > p2._aabbMinY && p1._aabbMinZ < p2._aabbMaxZ && p1._aabbMaxZ > p2._aabbMinZ) {
					var first = this._proxyPairPool;
					if(first != null) {
						this._proxyPairPool = first._next;
						first._next = null;
					} else {
						first = new oimo_collision_broadphase_ProxyPair();
					}
					var pp = first;
					if(this._proxyPairList == null) {
						this._proxyPairList = pp;
					} else {
						pp._next = this._proxyPairList;
						this._proxyPairList = pp;
					}
					pp._p1 = p1;
					pp._p2 = p2;
				}
				p2 = n1;
			}
			p1 = n;
		}
	}
	,rayCast: function(begin,end,callback) {
		var p1X;
		var p1Y;
		var p1Z;
		var p2X;
		var p2Y;
		var p2Z;
		p1X = begin.x;
		p1Y = begin.y;
		p1Z = begin.z;
		p2X = end.x;
		p2Y = end.y;
		p2Z = end.z;
		var p = this._proxyList;
		while(p != null) {
			var n = p._next;
			var x1 = p1X;
			var y1 = p1Y;
			var z1 = p1Z;
			var x2 = p2X;
			var y2 = p2Y;
			var z2 = p2Z;
			var pminx = p._aabbMinX;
			var pminy = p._aabbMinY;
			var pminz = p._aabbMinZ;
			var pmaxx = p._aabbMaxX;
			var pmaxy = p._aabbMaxY;
			var pmaxz = p._aabbMaxZ;
			var tmp;
			if(pminx > (x1 > x2 ? x1 : x2) || pmaxx < (x1 < x2 ? x1 : x2) || pminy > (y1 > y2 ? y1 : y2) || pmaxy < (y1 < y2 ? y1 : y2) || pminz > (z1 > z2 ? z1 : z2) || pmaxz < (z1 < z2 ? z1 : z2)) {
				tmp = false;
			} else {
				var dx = x2 - x1;
				var dy = y2 - y1;
				var dz = z2 - z1;
				var adx = dx < 0 ? -dx : dx;
				var ady = dy < 0 ? -dy : dy;
				var adz = dz < 0 ? -dz : dz;
				var pextx = (pmaxx - pminx) * 0.5;
				var pexty = (pmaxy - pminy) * 0.5;
				var pextz = (pmaxz - pminz) * 0.5;
				var cpx = x1 - (pmaxx + pminx) * 0.5;
				var cpy = y1 - (pmaxy + pminy) * 0.5;
				var cpz = z1 - (pmaxz + pminz) * 0.5;
				var tmp1;
				var tmp2;
				var x = cpy * dz - cpz * dy;
				if(!((x < 0 ? -x : x) - (pexty * adz + pextz * ady) > 0)) {
					var x3 = cpz * dx - cpx * dz;
					tmp2 = (x3 < 0 ? -x3 : x3) - (pextz * adx + pextx * adz) > 0;
				} else {
					tmp2 = true;
				}
				if(!tmp2) {
					var x4 = cpx * dy - cpy * dx;
					tmp1 = (x4 < 0 ? -x4 : x4) - (pextx * ady + pexty * adx) > 0;
				} else {
					tmp1 = true;
				}
				tmp = tmp1 ? false : true;
			}
			if(tmp) {
				callback.process(p);
			}
			p = n;
		}
	}
	,convexCast: function(convex,begin,translation,callback) {
		var p = this._proxyList;
		while(p != null) {
			var n = p._next;
			var v = this._aabb.min;
			v.x = p._aabbMinX;
			v.y = p._aabbMinY;
			v.z = p._aabbMinZ;
			var v1 = this._aabb.max;
			v1.x = p._aabbMaxX;
			v1.y = p._aabbMaxY;
			v1.z = p._aabbMaxZ;
			this._convexSweep.init(convex,begin,translation);
			var gjkEpa = oimo_collision_narrowphase_detector_gjkepa_GjkEpa.instance;
			if(gjkEpa.computeClosestPointsImpl(this._convexSweep,this._aabb,begin,this.identity,null,false) == 0 && gjkEpa.distance <= 0) {
				callback.process(p);
			}
			p = n;
		}
	}
	,aabbTest: function(aabb,callback) {
		var p = this._proxyList;
		while(p != null) {
			var n = p._next;
			if(aabb._minX < p._aabbMaxX && aabb._maxX > p._aabbMinX && aabb._minY < p._aabbMaxY && aabb._maxY > p._aabbMinY && aabb._minZ < p._aabbMaxZ && aabb._maxZ > p._aabbMinZ) {
				callback.process(p);
			}
			p = n;
		}
	}
	,__class__: oimo_collision_broadphase_bruteforce_BruteForceBroadPhase
});
var oimo_collision_broadphase_bvh_BvhBroadPhase = function() {
	oimo_collision_broadphase_BroadPhase.call(this,2);
	this._incremental = true;
	this._tree = new oimo_collision_broadphase_bvh_BvhTree();
	this.movedProxies = new Array(1024);
	this.numMovedProxies = 0;
};
oimo_collision_broadphase_bvh_BvhBroadPhase.__name__ = true;
oimo_collision_broadphase_bvh_BvhBroadPhase.__super__ = oimo_collision_broadphase_BroadPhase;
oimo_collision_broadphase_bvh_BvhBroadPhase.prototype = $extend(oimo_collision_broadphase_BroadPhase.prototype,{
	collide: function(n1,n2) {
		this._testCount++;
		var l1 = n1._height == 0;
		var l2 = n2._height == 0;
		if(n1 == n2) {
			if(l1) {
				return;
			}
			this.collide(n1._children[0],n2);
			this.collide(n1._children[1],n2);
			return;
		}
		if(!(n1._aabbMinX < n2._aabbMaxX && n1._aabbMaxX > n2._aabbMinX && n1._aabbMinY < n2._aabbMaxY && n1._aabbMaxY > n2._aabbMinY && n1._aabbMinZ < n2._aabbMaxZ && n1._aabbMaxZ > n2._aabbMinZ)) {
			return;
		}
		if(l1 && l2) {
			var first = this._proxyPairPool;
			if(first != null) {
				this._proxyPairPool = first._next;
				first._next = null;
			} else {
				first = new oimo_collision_broadphase_ProxyPair();
			}
			var pp = first;
			if(this._proxyPairList == null) {
				this._proxyPairList = pp;
			} else {
				pp._next = this._proxyPairList;
				this._proxyPairList = pp;
			}
			pp._p1 = n1._proxy;
			pp._p2 = n2._proxy;
			return;
		}
		if(l2 || n1._height > n2._height) {
			this.collide(n1._children[0],n2);
			this.collide(n1._children[1],n2);
		} else {
			this.collide(n2._children[0],n1);
			this.collide(n2._children[1],n1);
		}
	}
	,rayCastRecursive: function(node,_p1X,_p1Y,_p1Z,_p2X,_p2Y,_p2Z,callback) {
		var x1 = _p1X;
		var y1 = _p1Y;
		var z1 = _p1Z;
		var x2 = _p2X;
		var y2 = _p2Y;
		var z2 = _p2Z;
		var pminx = node._aabbMinX;
		var pminy = node._aabbMinY;
		var pminz = node._aabbMinZ;
		var pmaxx = node._aabbMaxX;
		var pmaxy = node._aabbMaxY;
		var pmaxz = node._aabbMaxZ;
		var tmp;
		if(pminx > (x1 > x2 ? x1 : x2) || pmaxx < (x1 < x2 ? x1 : x2) || pminy > (y1 > y2 ? y1 : y2) || pmaxy < (y1 < y2 ? y1 : y2) || pminz > (z1 > z2 ? z1 : z2) || pmaxz < (z1 < z2 ? z1 : z2)) {
			tmp = false;
		} else {
			var dx = x2 - x1;
			var dy = y2 - y1;
			var dz = z2 - z1;
			var adx = dx < 0 ? -dx : dx;
			var ady = dy < 0 ? -dy : dy;
			var adz = dz < 0 ? -dz : dz;
			var pextx = (pmaxx - pminx) * 0.5;
			var pexty = (pmaxy - pminy) * 0.5;
			var pextz = (pmaxz - pminz) * 0.5;
			var cpx = x1 - (pmaxx + pminx) * 0.5;
			var cpy = y1 - (pmaxy + pminy) * 0.5;
			var cpz = z1 - (pmaxz + pminz) * 0.5;
			var tmp1;
			var tmp2;
			var x = cpy * dz - cpz * dy;
			if(!((x < 0 ? -x : x) - (pexty * adz + pextz * ady) > 0)) {
				var x = cpz * dx - cpx * dz;
				tmp2 = (x < 0 ? -x : x) - (pextz * adx + pextx * adz) > 0;
			} else {
				tmp2 = true;
			}
			if(!tmp2) {
				var x = cpx * dy - cpy * dx;
				tmp1 = (x < 0 ? -x : x) - (pextx * ady + pexty * adx) > 0;
			} else {
				tmp1 = true;
			}
			tmp = tmp1 ? false : true;
		}
		if(!tmp) {
			return;
		}
		if(node._height == 0) {
			callback.process(node._proxy);
			return;
		}
		this.rayCastRecursive(node._children[0],_p1X,_p1Y,_p1Z,_p2X,_p2Y,_p2Z,callback);
		this.rayCastRecursive(node._children[1],_p1X,_p1Y,_p1Z,_p2X,_p2Y,_p2Z,callback);
	}
	,convexCastRecursive: function(node,convex,begin,translation,callback) {
		var v = this._aabb.min;
		v.x = node._aabbMinX;
		v.y = node._aabbMinY;
		v.z = node._aabbMinZ;
		var v = this._aabb.max;
		v.x = node._aabbMaxX;
		v.y = node._aabbMaxY;
		v.z = node._aabbMaxZ;
		this._convexSweep.init(convex,begin,translation);
		var gjkEpa = oimo_collision_narrowphase_detector_gjkepa_GjkEpa.instance;
		if(!(gjkEpa.computeClosestPointsImpl(this._convexSweep,this._aabb,begin,this.identity,null,false) == 0 && gjkEpa.distance <= 0)) {
			return;
		}
		if(node._height == 0) {
			callback.process(node._proxy);
			return;
		}
		this.convexCastRecursive(node._children[0],convex,begin,translation,callback);
		this.convexCastRecursive(node._children[1],convex,begin,translation,callback);
	}
	,aabbTestRecursive: function(node,aabb,callback) {
		if(!(node._aabbMinX < aabb._maxX && node._aabbMaxX > aabb._minX && node._aabbMinY < aabb._maxY && node._aabbMaxY > aabb._minY && node._aabbMinZ < aabb._maxZ && node._aabbMaxZ > aabb._minZ)) {
			return;
		}
		if(node._height == 0) {
			callback.process(node._proxy);
			return;
		}
		this.aabbTestRecursive(node._children[0],aabb,callback);
		this.aabbTestRecursive(node._children[1],aabb,callback);
	}
	,createProxy: function(userData,aabb) {
		var p = new oimo_collision_broadphase_bvh_BvhProxy(userData,this._idCount++);
		this._numProxies++;
		if(this._proxyList == null) {
			this._proxyList = p;
			this._proxyListLast = p;
		} else {
			this._proxyListLast._next = p;
			p._prev = this._proxyListLast;
			this._proxyListLast = p;
		}
		p._aabbMinX = aabb._minX;
		p._aabbMinY = aabb._minY;
		p._aabbMinZ = aabb._minZ;
		p._aabbMaxX = aabb._maxX;
		p._aabbMaxY = aabb._maxY;
		p._aabbMaxZ = aabb._maxZ;
		var padding = oimo_common_Setting.bvhProxyPadding;
		p._aabbMinX -= padding;
		p._aabbMinY -= padding;
		p._aabbMinZ -= padding;
		p._aabbMaxX += padding;
		p._aabbMaxY += padding;
		p._aabbMaxZ += padding;
		var _this = this._tree;
		var first = _this._nodePool;
		if(first != null) {
			_this._nodePool = first._next;
			first._next = null;
		} else {
			first = new oimo_collision_broadphase_bvh_BvhNode();
		}
		var leaf = first;
		leaf._proxy = p;
		p._leaf = leaf;
		leaf._aabbMinX = p._aabbMinX;
		leaf._aabbMinY = p._aabbMinY;
		leaf._aabbMinZ = p._aabbMinZ;
		leaf._aabbMaxX = p._aabbMaxX;
		leaf._aabbMaxY = p._aabbMaxY;
		leaf._aabbMaxZ = p._aabbMaxZ;
		_this._numLeaves++;
		if(_this.leafList == null) {
			_this.leafList = leaf;
			_this.leafListLast = leaf;
		} else {
			_this.leafListLast._nextLeaf = leaf;
			leaf._prevLeaf = _this.leafListLast;
			_this.leafListLast = leaf;
		}
		if(_this._root == null) {
			_this._root = leaf;
		} else {
			var sibling = _this._root;
			while(sibling._height > 0) {
				var nextStep = _this._strategy._decideInsertion(sibling,leaf);
				if(nextStep == -1) {
					break;
				} else {
					sibling = sibling._children[nextStep];
				}
			}
			var parent = sibling._parent;
			var first = _this._nodePool;
			if(first != null) {
				_this._nodePool = first._next;
				first._next = null;
			} else {
				first = new oimo_collision_broadphase_bvh_BvhNode();
			}
			var node = first;
			if(parent == null) {
				_this._root = node;
			} else {
				var index = sibling._childIndex;
				parent._children[index] = node;
				node._parent = parent;
				node._childIndex = index;
			}
			var index = sibling._childIndex;
			node._children[index] = sibling;
			sibling._parent = node;
			sibling._childIndex = index;
			var index = sibling._childIndex ^ 1;
			node._children[index] = leaf;
			leaf._parent = node;
			leaf._childIndex = index;
			while(node != null) {
				if(_this._strategy._balancingEnabled) {
					if(node._height >= 2) {
						var p1 = node._parent;
						var l = node._children[0];
						var r = node._children[1];
						var balance = l._height - r._height;
						var nodeIndex = node._childIndex;
						if(balance > 1) {
							var ll = l._children[0];
							var lr = l._children[1];
							if(ll._height > lr._height) {
								l._children[1] = node;
								node._parent = l;
								node._childIndex = 1;
								node._children[0] = lr;
								lr._parent = node;
								lr._childIndex = 0;
								var c1 = l._children[0];
								var c2 = l._children[1];
								l._aabbMinX = c1._aabbMinX < c2._aabbMinX ? c1._aabbMinX : c2._aabbMinX;
								l._aabbMinY = c1._aabbMinY < c2._aabbMinY ? c1._aabbMinY : c2._aabbMinY;
								l._aabbMinZ = c1._aabbMinZ < c2._aabbMinZ ? c1._aabbMinZ : c2._aabbMinZ;
								l._aabbMaxX = c1._aabbMaxX > c2._aabbMaxX ? c1._aabbMaxX : c2._aabbMaxX;
								l._aabbMaxY = c1._aabbMaxY > c2._aabbMaxY ? c1._aabbMaxY : c2._aabbMaxY;
								l._aabbMaxZ = c1._aabbMaxZ > c2._aabbMaxZ ? c1._aabbMaxZ : c2._aabbMaxZ;
								var h1 = l._children[0]._height;
								var h2 = l._children[1]._height;
								l._height = (h1 > h2 ? h1 : h2) + 1;
								var c11 = node._children[0];
								var c21 = node._children[1];
								node._aabbMinX = c11._aabbMinX < c21._aabbMinX ? c11._aabbMinX : c21._aabbMinX;
								node._aabbMinY = c11._aabbMinY < c21._aabbMinY ? c11._aabbMinY : c21._aabbMinY;
								node._aabbMinZ = c11._aabbMinZ < c21._aabbMinZ ? c11._aabbMinZ : c21._aabbMinZ;
								node._aabbMaxX = c11._aabbMaxX > c21._aabbMaxX ? c11._aabbMaxX : c21._aabbMaxX;
								node._aabbMaxY = c11._aabbMaxY > c21._aabbMaxY ? c11._aabbMaxY : c21._aabbMaxY;
								node._aabbMaxZ = c11._aabbMaxZ > c21._aabbMaxZ ? c11._aabbMaxZ : c21._aabbMaxZ;
								var h11 = node._children[0]._height;
								var h21 = node._children[1]._height;
								node._height = (h11 > h21 ? h11 : h21) + 1;
							} else {
								l._children[0] = node;
								node._parent = l;
								node._childIndex = 0;
								node._children[0] = ll;
								ll._parent = node;
								ll._childIndex = 0;
								var c12 = l._children[0];
								var c22 = l._children[1];
								l._aabbMinX = c12._aabbMinX < c22._aabbMinX ? c12._aabbMinX : c22._aabbMinX;
								l._aabbMinY = c12._aabbMinY < c22._aabbMinY ? c12._aabbMinY : c22._aabbMinY;
								l._aabbMinZ = c12._aabbMinZ < c22._aabbMinZ ? c12._aabbMinZ : c22._aabbMinZ;
								l._aabbMaxX = c12._aabbMaxX > c22._aabbMaxX ? c12._aabbMaxX : c22._aabbMaxX;
								l._aabbMaxY = c12._aabbMaxY > c22._aabbMaxY ? c12._aabbMaxY : c22._aabbMaxY;
								l._aabbMaxZ = c12._aabbMaxZ > c22._aabbMaxZ ? c12._aabbMaxZ : c22._aabbMaxZ;
								var h12 = l._children[0]._height;
								var h22 = l._children[1]._height;
								l._height = (h12 > h22 ? h12 : h22) + 1;
								var c13 = node._children[0];
								var c23 = node._children[1];
								node._aabbMinX = c13._aabbMinX < c23._aabbMinX ? c13._aabbMinX : c23._aabbMinX;
								node._aabbMinY = c13._aabbMinY < c23._aabbMinY ? c13._aabbMinY : c23._aabbMinY;
								node._aabbMinZ = c13._aabbMinZ < c23._aabbMinZ ? c13._aabbMinZ : c23._aabbMinZ;
								node._aabbMaxX = c13._aabbMaxX > c23._aabbMaxX ? c13._aabbMaxX : c23._aabbMaxX;
								node._aabbMaxY = c13._aabbMaxY > c23._aabbMaxY ? c13._aabbMaxY : c23._aabbMaxY;
								node._aabbMaxZ = c13._aabbMaxZ > c23._aabbMaxZ ? c13._aabbMaxZ : c23._aabbMaxZ;
								var h13 = node._children[0]._height;
								var h23 = node._children[1]._height;
								node._height = (h13 > h23 ? h13 : h23) + 1;
							}
							if(p1 != null) {
								p1._children[nodeIndex] = l;
								l._parent = p1;
								l._childIndex = nodeIndex;
							} else {
								_this._root = l;
								l._parent = null;
							}
							node = l;
						} else if(balance < -1) {
							var rl = r._children[0];
							var rr = r._children[1];
							if(rl._height > rr._height) {
								r._children[1] = node;
								node._parent = r;
								node._childIndex = 1;
								node._children[1] = rr;
								rr._parent = node;
								rr._childIndex = 1;
								var c14 = r._children[0];
								var c24 = r._children[1];
								r._aabbMinX = c14._aabbMinX < c24._aabbMinX ? c14._aabbMinX : c24._aabbMinX;
								r._aabbMinY = c14._aabbMinY < c24._aabbMinY ? c14._aabbMinY : c24._aabbMinY;
								r._aabbMinZ = c14._aabbMinZ < c24._aabbMinZ ? c14._aabbMinZ : c24._aabbMinZ;
								r._aabbMaxX = c14._aabbMaxX > c24._aabbMaxX ? c14._aabbMaxX : c24._aabbMaxX;
								r._aabbMaxY = c14._aabbMaxY > c24._aabbMaxY ? c14._aabbMaxY : c24._aabbMaxY;
								r._aabbMaxZ = c14._aabbMaxZ > c24._aabbMaxZ ? c14._aabbMaxZ : c24._aabbMaxZ;
								var h14 = r._children[0]._height;
								var h24 = r._children[1]._height;
								r._height = (h14 > h24 ? h14 : h24) + 1;
								var c15 = node._children[0];
								var c25 = node._children[1];
								node._aabbMinX = c15._aabbMinX < c25._aabbMinX ? c15._aabbMinX : c25._aabbMinX;
								node._aabbMinY = c15._aabbMinY < c25._aabbMinY ? c15._aabbMinY : c25._aabbMinY;
								node._aabbMinZ = c15._aabbMinZ < c25._aabbMinZ ? c15._aabbMinZ : c25._aabbMinZ;
								node._aabbMaxX = c15._aabbMaxX > c25._aabbMaxX ? c15._aabbMaxX : c25._aabbMaxX;
								node._aabbMaxY = c15._aabbMaxY > c25._aabbMaxY ? c15._aabbMaxY : c25._aabbMaxY;
								node._aabbMaxZ = c15._aabbMaxZ > c25._aabbMaxZ ? c15._aabbMaxZ : c25._aabbMaxZ;
								var h15 = node._children[0]._height;
								var h25 = node._children[1]._height;
								node._height = (h15 > h25 ? h15 : h25) + 1;
							} else {
								r._children[0] = node;
								node._parent = r;
								node._childIndex = 0;
								node._children[1] = rl;
								rl._parent = node;
								rl._childIndex = 1;
								var c16 = r._children[0];
								var c26 = r._children[1];
								r._aabbMinX = c16._aabbMinX < c26._aabbMinX ? c16._aabbMinX : c26._aabbMinX;
								r._aabbMinY = c16._aabbMinY < c26._aabbMinY ? c16._aabbMinY : c26._aabbMinY;
								r._aabbMinZ = c16._aabbMinZ < c26._aabbMinZ ? c16._aabbMinZ : c26._aabbMinZ;
								r._aabbMaxX = c16._aabbMaxX > c26._aabbMaxX ? c16._aabbMaxX : c26._aabbMaxX;
								r._aabbMaxY = c16._aabbMaxY > c26._aabbMaxY ? c16._aabbMaxY : c26._aabbMaxY;
								r._aabbMaxZ = c16._aabbMaxZ > c26._aabbMaxZ ? c16._aabbMaxZ : c26._aabbMaxZ;
								var h16 = r._children[0]._height;
								var h26 = r._children[1]._height;
								r._height = (h16 > h26 ? h16 : h26) + 1;
								var c17 = node._children[0];
								var c27 = node._children[1];
								node._aabbMinX = c17._aabbMinX < c27._aabbMinX ? c17._aabbMinX : c27._aabbMinX;
								node._aabbMinY = c17._aabbMinY < c27._aabbMinY ? c17._aabbMinY : c27._aabbMinY;
								node._aabbMinZ = c17._aabbMinZ < c27._aabbMinZ ? c17._aabbMinZ : c27._aabbMinZ;
								node._aabbMaxX = c17._aabbMaxX > c27._aabbMaxX ? c17._aabbMaxX : c27._aabbMaxX;
								node._aabbMaxY = c17._aabbMaxY > c27._aabbMaxY ? c17._aabbMaxY : c27._aabbMaxY;
								node._aabbMaxZ = c17._aabbMaxZ > c27._aabbMaxZ ? c17._aabbMaxZ : c27._aabbMaxZ;
								var h17 = node._children[0]._height;
								var h27 = node._children[1]._height;
								node._height = (h17 > h27 ? h17 : h27) + 1;
							}
							if(p1 != null) {
								p1._children[nodeIndex] = r;
								r._parent = p1;
								r._childIndex = nodeIndex;
							} else {
								_this._root = r;
								r._parent = null;
							}
							node = r;
						}
					}
				}
				var h18 = node._children[0]._height;
				var h28 = node._children[1]._height;
				node._height = (h18 > h28 ? h18 : h28) + 1;
				var c18 = node._children[0];
				var c28 = node._children[1];
				node._aabbMinX = c18._aabbMinX < c28._aabbMinX ? c18._aabbMinX : c28._aabbMinX;
				node._aabbMinY = c18._aabbMinY < c28._aabbMinY ? c18._aabbMinY : c28._aabbMinY;
				node._aabbMinZ = c18._aabbMinZ < c28._aabbMinZ ? c18._aabbMinZ : c28._aabbMinZ;
				node._aabbMaxX = c18._aabbMaxX > c28._aabbMaxX ? c18._aabbMaxX : c28._aabbMaxX;
				node._aabbMaxY = c18._aabbMaxY > c28._aabbMaxY ? c18._aabbMaxY : c28._aabbMaxY;
				node._aabbMaxZ = c18._aabbMaxZ > c28._aabbMaxZ ? c18._aabbMaxZ : c28._aabbMaxZ;
				node = node._parent;
			}
		}
		if(!p._moved) {
			p._moved = true;
			if(this.movedProxies.length == this.numMovedProxies) {
				var newArray = new Array(this.numMovedProxies << 1);
				var _g = 0;
				var _g1 = this.numMovedProxies;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = this.movedProxies[i];
					this.movedProxies[i] = null;
				}
				this.movedProxies = newArray;
			}
			this.movedProxies[this.numMovedProxies++] = p;
		}
		return p;
	}
	,destroyProxy: function(proxy) {
		this._numProxies--;
		var prev = proxy._prev;
		var next = proxy._next;
		if(prev != null) {
			prev._next = next;
		}
		if(next != null) {
			next._prev = prev;
		}
		if(proxy == this._proxyList) {
			this._proxyList = this._proxyList._next;
		}
		if(proxy == this._proxyListLast) {
			this._proxyListLast = this._proxyListLast._prev;
		}
		proxy._next = null;
		proxy._prev = null;
		var bvhProxy = proxy;
		var _this = this._tree;
		var leaf = bvhProxy._leaf;
		_this._numLeaves--;
		var prev = leaf._prevLeaf;
		var next = leaf._nextLeaf;
		if(prev != null) {
			prev._nextLeaf = next;
		}
		if(next != null) {
			next._prevLeaf = prev;
		}
		if(leaf == _this.leafList) {
			_this.leafList = _this.leafList._nextLeaf;
		}
		if(leaf == _this.leafListLast) {
			_this.leafListLast = _this.leafListLast._prevLeaf;
		}
		leaf._nextLeaf = null;
		leaf._prevLeaf = null;
		if(_this._root == leaf) {
			_this._root = null;
		} else {
			var parent = leaf._parent;
			var sibling = parent._children[leaf._childIndex ^ 1];
			var grandParent = parent._parent;
			if(grandParent == null) {
				sibling._parent = null;
				sibling._childIndex = 0;
				_this._root = sibling;
				parent._next = null;
				parent._childIndex = 0;
				parent._children[0] = null;
				parent._children[1] = null;
				parent._childIndex = 0;
				parent._parent = null;
				parent._height = 0;
				parent._proxy = null;
				parent._next = _this._nodePool;
				_this._nodePool = parent;
			} else {
				sibling._parent = grandParent;
				var index = parent._childIndex;
				grandParent._children[index] = sibling;
				sibling._parent = grandParent;
				sibling._childIndex = index;
				parent._next = null;
				parent._childIndex = 0;
				parent._children[0] = null;
				parent._children[1] = null;
				parent._childIndex = 0;
				parent._parent = null;
				parent._height = 0;
				parent._proxy = null;
				parent._next = _this._nodePool;
				_this._nodePool = parent;
				var node = grandParent;
				while(node != null) {
					if(_this._strategy._balancingEnabled) {
						if(node._height >= 2) {
							var p = node._parent;
							var l = node._children[0];
							var r = node._children[1];
							var balance = l._height - r._height;
							var nodeIndex = node._childIndex;
							if(balance > 1) {
								var ll = l._children[0];
								var lr = l._children[1];
								if(ll._height > lr._height) {
									l._children[1] = node;
									node._parent = l;
									node._childIndex = 1;
									node._children[0] = lr;
									lr._parent = node;
									lr._childIndex = 0;
									var c1 = l._children[0];
									var c2 = l._children[1];
									l._aabbMinX = c1._aabbMinX < c2._aabbMinX ? c1._aabbMinX : c2._aabbMinX;
									l._aabbMinY = c1._aabbMinY < c2._aabbMinY ? c1._aabbMinY : c2._aabbMinY;
									l._aabbMinZ = c1._aabbMinZ < c2._aabbMinZ ? c1._aabbMinZ : c2._aabbMinZ;
									l._aabbMaxX = c1._aabbMaxX > c2._aabbMaxX ? c1._aabbMaxX : c2._aabbMaxX;
									l._aabbMaxY = c1._aabbMaxY > c2._aabbMaxY ? c1._aabbMaxY : c2._aabbMaxY;
									l._aabbMaxZ = c1._aabbMaxZ > c2._aabbMaxZ ? c1._aabbMaxZ : c2._aabbMaxZ;
									var h1 = l._children[0]._height;
									var h2 = l._children[1]._height;
									l._height = (h1 > h2 ? h1 : h2) + 1;
									var c11 = node._children[0];
									var c21 = node._children[1];
									node._aabbMinX = c11._aabbMinX < c21._aabbMinX ? c11._aabbMinX : c21._aabbMinX;
									node._aabbMinY = c11._aabbMinY < c21._aabbMinY ? c11._aabbMinY : c21._aabbMinY;
									node._aabbMinZ = c11._aabbMinZ < c21._aabbMinZ ? c11._aabbMinZ : c21._aabbMinZ;
									node._aabbMaxX = c11._aabbMaxX > c21._aabbMaxX ? c11._aabbMaxX : c21._aabbMaxX;
									node._aabbMaxY = c11._aabbMaxY > c21._aabbMaxY ? c11._aabbMaxY : c21._aabbMaxY;
									node._aabbMaxZ = c11._aabbMaxZ > c21._aabbMaxZ ? c11._aabbMaxZ : c21._aabbMaxZ;
									var h11 = node._children[0]._height;
									var h21 = node._children[1]._height;
									node._height = (h11 > h21 ? h11 : h21) + 1;
								} else {
									l._children[0] = node;
									node._parent = l;
									node._childIndex = 0;
									node._children[0] = ll;
									ll._parent = node;
									ll._childIndex = 0;
									var c12 = l._children[0];
									var c22 = l._children[1];
									l._aabbMinX = c12._aabbMinX < c22._aabbMinX ? c12._aabbMinX : c22._aabbMinX;
									l._aabbMinY = c12._aabbMinY < c22._aabbMinY ? c12._aabbMinY : c22._aabbMinY;
									l._aabbMinZ = c12._aabbMinZ < c22._aabbMinZ ? c12._aabbMinZ : c22._aabbMinZ;
									l._aabbMaxX = c12._aabbMaxX > c22._aabbMaxX ? c12._aabbMaxX : c22._aabbMaxX;
									l._aabbMaxY = c12._aabbMaxY > c22._aabbMaxY ? c12._aabbMaxY : c22._aabbMaxY;
									l._aabbMaxZ = c12._aabbMaxZ > c22._aabbMaxZ ? c12._aabbMaxZ : c22._aabbMaxZ;
									var h12 = l._children[0]._height;
									var h22 = l._children[1]._height;
									l._height = (h12 > h22 ? h12 : h22) + 1;
									var c13 = node._children[0];
									var c23 = node._children[1];
									node._aabbMinX = c13._aabbMinX < c23._aabbMinX ? c13._aabbMinX : c23._aabbMinX;
									node._aabbMinY = c13._aabbMinY < c23._aabbMinY ? c13._aabbMinY : c23._aabbMinY;
									node._aabbMinZ = c13._aabbMinZ < c23._aabbMinZ ? c13._aabbMinZ : c23._aabbMinZ;
									node._aabbMaxX = c13._aabbMaxX > c23._aabbMaxX ? c13._aabbMaxX : c23._aabbMaxX;
									node._aabbMaxY = c13._aabbMaxY > c23._aabbMaxY ? c13._aabbMaxY : c23._aabbMaxY;
									node._aabbMaxZ = c13._aabbMaxZ > c23._aabbMaxZ ? c13._aabbMaxZ : c23._aabbMaxZ;
									var h13 = node._children[0]._height;
									var h23 = node._children[1]._height;
									node._height = (h13 > h23 ? h13 : h23) + 1;
								}
								if(p != null) {
									p._children[nodeIndex] = l;
									l._parent = p;
									l._childIndex = nodeIndex;
								} else {
									_this._root = l;
									l._parent = null;
								}
								node = l;
							} else if(balance < -1) {
								var rl = r._children[0];
								var rr = r._children[1];
								if(rl._height > rr._height) {
									r._children[1] = node;
									node._parent = r;
									node._childIndex = 1;
									node._children[1] = rr;
									rr._parent = node;
									rr._childIndex = 1;
									var c14 = r._children[0];
									var c24 = r._children[1];
									r._aabbMinX = c14._aabbMinX < c24._aabbMinX ? c14._aabbMinX : c24._aabbMinX;
									r._aabbMinY = c14._aabbMinY < c24._aabbMinY ? c14._aabbMinY : c24._aabbMinY;
									r._aabbMinZ = c14._aabbMinZ < c24._aabbMinZ ? c14._aabbMinZ : c24._aabbMinZ;
									r._aabbMaxX = c14._aabbMaxX > c24._aabbMaxX ? c14._aabbMaxX : c24._aabbMaxX;
									r._aabbMaxY = c14._aabbMaxY > c24._aabbMaxY ? c14._aabbMaxY : c24._aabbMaxY;
									r._aabbMaxZ = c14._aabbMaxZ > c24._aabbMaxZ ? c14._aabbMaxZ : c24._aabbMaxZ;
									var h14 = r._children[0]._height;
									var h24 = r._children[1]._height;
									r._height = (h14 > h24 ? h14 : h24) + 1;
									var c15 = node._children[0];
									var c25 = node._children[1];
									node._aabbMinX = c15._aabbMinX < c25._aabbMinX ? c15._aabbMinX : c25._aabbMinX;
									node._aabbMinY = c15._aabbMinY < c25._aabbMinY ? c15._aabbMinY : c25._aabbMinY;
									node._aabbMinZ = c15._aabbMinZ < c25._aabbMinZ ? c15._aabbMinZ : c25._aabbMinZ;
									node._aabbMaxX = c15._aabbMaxX > c25._aabbMaxX ? c15._aabbMaxX : c25._aabbMaxX;
									node._aabbMaxY = c15._aabbMaxY > c25._aabbMaxY ? c15._aabbMaxY : c25._aabbMaxY;
									node._aabbMaxZ = c15._aabbMaxZ > c25._aabbMaxZ ? c15._aabbMaxZ : c25._aabbMaxZ;
									var h15 = node._children[0]._height;
									var h25 = node._children[1]._height;
									node._height = (h15 > h25 ? h15 : h25) + 1;
								} else {
									r._children[0] = node;
									node._parent = r;
									node._childIndex = 0;
									node._children[1] = rl;
									rl._parent = node;
									rl._childIndex = 1;
									var c16 = r._children[0];
									var c26 = r._children[1];
									r._aabbMinX = c16._aabbMinX < c26._aabbMinX ? c16._aabbMinX : c26._aabbMinX;
									r._aabbMinY = c16._aabbMinY < c26._aabbMinY ? c16._aabbMinY : c26._aabbMinY;
									r._aabbMinZ = c16._aabbMinZ < c26._aabbMinZ ? c16._aabbMinZ : c26._aabbMinZ;
									r._aabbMaxX = c16._aabbMaxX > c26._aabbMaxX ? c16._aabbMaxX : c26._aabbMaxX;
									r._aabbMaxY = c16._aabbMaxY > c26._aabbMaxY ? c16._aabbMaxY : c26._aabbMaxY;
									r._aabbMaxZ = c16._aabbMaxZ > c26._aabbMaxZ ? c16._aabbMaxZ : c26._aabbMaxZ;
									var h16 = r._children[0]._height;
									var h26 = r._children[1]._height;
									r._height = (h16 > h26 ? h16 : h26) + 1;
									var c17 = node._children[0];
									var c27 = node._children[1];
									node._aabbMinX = c17._aabbMinX < c27._aabbMinX ? c17._aabbMinX : c27._aabbMinX;
									node._aabbMinY = c17._aabbMinY < c27._aabbMinY ? c17._aabbMinY : c27._aabbMinY;
									node._aabbMinZ = c17._aabbMinZ < c27._aabbMinZ ? c17._aabbMinZ : c27._aabbMinZ;
									node._aabbMaxX = c17._aabbMaxX > c27._aabbMaxX ? c17._aabbMaxX : c27._aabbMaxX;
									node._aabbMaxY = c17._aabbMaxY > c27._aabbMaxY ? c17._aabbMaxY : c27._aabbMaxY;
									node._aabbMaxZ = c17._aabbMaxZ > c27._aabbMaxZ ? c17._aabbMaxZ : c27._aabbMaxZ;
									var h17 = node._children[0]._height;
									var h27 = node._children[1]._height;
									node._height = (h17 > h27 ? h17 : h27) + 1;
								}
								if(p != null) {
									p._children[nodeIndex] = r;
									r._parent = p;
									r._childIndex = nodeIndex;
								} else {
									_this._root = r;
									r._parent = null;
								}
								node = r;
							}
						}
					}
					var h18 = node._children[0]._height;
					var h28 = node._children[1]._height;
					node._height = (h18 > h28 ? h18 : h28) + 1;
					var c18 = node._children[0];
					var c28 = node._children[1];
					node._aabbMinX = c18._aabbMinX < c28._aabbMinX ? c18._aabbMinX : c28._aabbMinX;
					node._aabbMinY = c18._aabbMinY < c28._aabbMinY ? c18._aabbMinY : c28._aabbMinY;
					node._aabbMinZ = c18._aabbMinZ < c28._aabbMinZ ? c18._aabbMinZ : c28._aabbMinZ;
					node._aabbMaxX = c18._aabbMaxX > c28._aabbMaxX ? c18._aabbMaxX : c28._aabbMaxX;
					node._aabbMaxY = c18._aabbMaxY > c28._aabbMaxY ? c18._aabbMaxY : c28._aabbMaxY;
					node._aabbMaxZ = c18._aabbMaxZ > c28._aabbMaxZ ? c18._aabbMaxZ : c28._aabbMaxZ;
					node = node._parent;
				}
			}
		}
		bvhProxy._leaf = null;
		leaf._next = null;
		leaf._childIndex = 0;
		leaf._children[0] = null;
		leaf._children[1] = null;
		leaf._childIndex = 0;
		leaf._parent = null;
		leaf._height = 0;
		leaf._proxy = null;
		leaf._next = _this._nodePool;
		_this._nodePool = leaf;
		bvhProxy.userData = null;
		bvhProxy._next = null;
		bvhProxy._prev = null;
		if(bvhProxy._moved) {
			bvhProxy._moved = false;
		}
	}
	,moveProxy: function(proxy,aabb,displacement) {
		var p = proxy;
		if(p._aabbMinX <= aabb._minX && p._aabbMaxX >= aabb._maxX && p._aabbMinY <= aabb._minY && p._aabbMaxY >= aabb._maxY && p._aabbMinZ <= aabb._minZ && p._aabbMaxZ >= aabb._maxZ) {
			return;
		}
		p._aabbMinX = aabb._minX;
		p._aabbMinY = aabb._minY;
		p._aabbMinZ = aabb._minZ;
		p._aabbMaxX = aabb._maxX;
		p._aabbMaxY = aabb._maxY;
		p._aabbMaxZ = aabb._maxZ;
		var padding = oimo_common_Setting.bvhProxyPadding;
		p._aabbMinX -= padding;
		p._aabbMinY -= padding;
		p._aabbMinZ -= padding;
		p._aabbMaxX += padding;
		p._aabbMaxY += padding;
		p._aabbMaxZ += padding;
		if(displacement != null) {
			var dX;
			var dY;
			var dZ;
			var zeroX;
			var zeroY;
			var zeroZ;
			var addToMinX;
			var addToMinY;
			var addToMinZ;
			var addToMaxX;
			var addToMaxY;
			var addToMaxZ;
			zeroX = 0;
			zeroY = 0;
			zeroZ = 0;
			dX = displacement.x;
			dY = displacement.y;
			dZ = displacement.z;
			addToMinX = zeroX < dX ? zeroX : dX;
			addToMinY = zeroY < dY ? zeroY : dY;
			addToMinZ = zeroZ < dZ ? zeroZ : dZ;
			addToMaxX = zeroX > dX ? zeroX : dX;
			addToMaxY = zeroY > dY ? zeroY : dY;
			addToMaxZ = zeroZ > dZ ? zeroZ : dZ;
			p._aabbMinX += addToMinX;
			p._aabbMinY += addToMinY;
			p._aabbMinZ += addToMinZ;
			p._aabbMaxX += addToMaxX;
			p._aabbMaxY += addToMaxY;
			p._aabbMaxZ += addToMaxZ;
		}
		if(!p._moved) {
			p._moved = true;
			if(this.movedProxies.length == this.numMovedProxies) {
				var newArray = new Array(this.numMovedProxies << 1);
				var _g = 0;
				var _g1 = this.numMovedProxies;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = this.movedProxies[i];
					this.movedProxies[i] = null;
				}
				this.movedProxies = newArray;
			}
			this.movedProxies[this.numMovedProxies++] = p;
		}
	}
	,collectPairs: function() {
		var p = this._proxyPairList;
		if(p != null) {
			while(true) {
				p._p1 = null;
				p._p2 = null;
				p = p._next;
				if(!(p != null)) {
					break;
				}
			}
			this._proxyPairList._next = this._proxyPairPool;
			this._proxyPairPool = this._proxyPairList;
			this._proxyPairList = null;
		}
		this._testCount = 0;
		if(this._numProxies < 2) {
			return;
		}
		var incrementalCollision = this.numMovedProxies / this._numProxies < oimo_common_Setting.bvhIncrementalCollisionThreshold;
		var _g = 0;
		var _g1 = this.numMovedProxies;
		while(_g < _g1) {
			var i = _g++;
			var p = this.movedProxies[i];
			if(p._moved) {
				var _this = this._tree;
				var leaf = p._leaf;
				_this._numLeaves--;
				var prev = leaf._prevLeaf;
				var next = leaf._nextLeaf;
				if(prev != null) {
					prev._nextLeaf = next;
				}
				if(next != null) {
					next._prevLeaf = prev;
				}
				if(leaf == _this.leafList) {
					_this.leafList = _this.leafList._nextLeaf;
				}
				if(leaf == _this.leafListLast) {
					_this.leafListLast = _this.leafListLast._prevLeaf;
				}
				leaf._nextLeaf = null;
				leaf._prevLeaf = null;
				if(_this._root == leaf) {
					_this._root = null;
				} else {
					var parent = leaf._parent;
					var sibling = parent._children[leaf._childIndex ^ 1];
					var grandParent = parent._parent;
					if(grandParent == null) {
						sibling._parent = null;
						sibling._childIndex = 0;
						_this._root = sibling;
						parent._next = null;
						parent._childIndex = 0;
						parent._children[0] = null;
						parent._children[1] = null;
						parent._childIndex = 0;
						parent._parent = null;
						parent._height = 0;
						parent._proxy = null;
						parent._next = _this._nodePool;
						_this._nodePool = parent;
					} else {
						sibling._parent = grandParent;
						var index = parent._childIndex;
						grandParent._children[index] = sibling;
						sibling._parent = grandParent;
						sibling._childIndex = index;
						parent._next = null;
						parent._childIndex = 0;
						parent._children[0] = null;
						parent._children[1] = null;
						parent._childIndex = 0;
						parent._parent = null;
						parent._height = 0;
						parent._proxy = null;
						parent._next = _this._nodePool;
						_this._nodePool = parent;
						var node = grandParent;
						while(node != null) {
							if(_this._strategy._balancingEnabled) {
								if(node._height >= 2) {
									var p1 = node._parent;
									var l = node._children[0];
									var r = node._children[1];
									var balance = l._height - r._height;
									var nodeIndex = node._childIndex;
									if(balance > 1) {
										var ll = l._children[0];
										var lr = l._children[1];
										if(ll._height > lr._height) {
											l._children[1] = node;
											node._parent = l;
											node._childIndex = 1;
											node._children[0] = lr;
											lr._parent = node;
											lr._childIndex = 0;
											var c1 = l._children[0];
											var c2 = l._children[1];
											l._aabbMinX = c1._aabbMinX < c2._aabbMinX ? c1._aabbMinX : c2._aabbMinX;
											l._aabbMinY = c1._aabbMinY < c2._aabbMinY ? c1._aabbMinY : c2._aabbMinY;
											l._aabbMinZ = c1._aabbMinZ < c2._aabbMinZ ? c1._aabbMinZ : c2._aabbMinZ;
											l._aabbMaxX = c1._aabbMaxX > c2._aabbMaxX ? c1._aabbMaxX : c2._aabbMaxX;
											l._aabbMaxY = c1._aabbMaxY > c2._aabbMaxY ? c1._aabbMaxY : c2._aabbMaxY;
											l._aabbMaxZ = c1._aabbMaxZ > c2._aabbMaxZ ? c1._aabbMaxZ : c2._aabbMaxZ;
											var h1 = l._children[0]._height;
											var h2 = l._children[1]._height;
											l._height = (h1 > h2 ? h1 : h2) + 1;
											var c11 = node._children[0];
											var c21 = node._children[1];
											node._aabbMinX = c11._aabbMinX < c21._aabbMinX ? c11._aabbMinX : c21._aabbMinX;
											node._aabbMinY = c11._aabbMinY < c21._aabbMinY ? c11._aabbMinY : c21._aabbMinY;
											node._aabbMinZ = c11._aabbMinZ < c21._aabbMinZ ? c11._aabbMinZ : c21._aabbMinZ;
											node._aabbMaxX = c11._aabbMaxX > c21._aabbMaxX ? c11._aabbMaxX : c21._aabbMaxX;
											node._aabbMaxY = c11._aabbMaxY > c21._aabbMaxY ? c11._aabbMaxY : c21._aabbMaxY;
											node._aabbMaxZ = c11._aabbMaxZ > c21._aabbMaxZ ? c11._aabbMaxZ : c21._aabbMaxZ;
											var h11 = node._children[0]._height;
											var h21 = node._children[1]._height;
											node._height = (h11 > h21 ? h11 : h21) + 1;
										} else {
											l._children[0] = node;
											node._parent = l;
											node._childIndex = 0;
											node._children[0] = ll;
											ll._parent = node;
											ll._childIndex = 0;
											var c12 = l._children[0];
											var c22 = l._children[1];
											l._aabbMinX = c12._aabbMinX < c22._aabbMinX ? c12._aabbMinX : c22._aabbMinX;
											l._aabbMinY = c12._aabbMinY < c22._aabbMinY ? c12._aabbMinY : c22._aabbMinY;
											l._aabbMinZ = c12._aabbMinZ < c22._aabbMinZ ? c12._aabbMinZ : c22._aabbMinZ;
											l._aabbMaxX = c12._aabbMaxX > c22._aabbMaxX ? c12._aabbMaxX : c22._aabbMaxX;
											l._aabbMaxY = c12._aabbMaxY > c22._aabbMaxY ? c12._aabbMaxY : c22._aabbMaxY;
											l._aabbMaxZ = c12._aabbMaxZ > c22._aabbMaxZ ? c12._aabbMaxZ : c22._aabbMaxZ;
											var h12 = l._children[0]._height;
											var h22 = l._children[1]._height;
											l._height = (h12 > h22 ? h12 : h22) + 1;
											var c13 = node._children[0];
											var c23 = node._children[1];
											node._aabbMinX = c13._aabbMinX < c23._aabbMinX ? c13._aabbMinX : c23._aabbMinX;
											node._aabbMinY = c13._aabbMinY < c23._aabbMinY ? c13._aabbMinY : c23._aabbMinY;
											node._aabbMinZ = c13._aabbMinZ < c23._aabbMinZ ? c13._aabbMinZ : c23._aabbMinZ;
											node._aabbMaxX = c13._aabbMaxX > c23._aabbMaxX ? c13._aabbMaxX : c23._aabbMaxX;
											node._aabbMaxY = c13._aabbMaxY > c23._aabbMaxY ? c13._aabbMaxY : c23._aabbMaxY;
											node._aabbMaxZ = c13._aabbMaxZ > c23._aabbMaxZ ? c13._aabbMaxZ : c23._aabbMaxZ;
											var h13 = node._children[0]._height;
											var h23 = node._children[1]._height;
											node._height = (h13 > h23 ? h13 : h23) + 1;
										}
										if(p1 != null) {
											p1._children[nodeIndex] = l;
											l._parent = p1;
											l._childIndex = nodeIndex;
										} else {
											_this._root = l;
											l._parent = null;
										}
										node = l;
									} else if(balance < -1) {
										var rl = r._children[0];
										var rr = r._children[1];
										if(rl._height > rr._height) {
											r._children[1] = node;
											node._parent = r;
											node._childIndex = 1;
											node._children[1] = rr;
											rr._parent = node;
											rr._childIndex = 1;
											var c14 = r._children[0];
											var c24 = r._children[1];
											r._aabbMinX = c14._aabbMinX < c24._aabbMinX ? c14._aabbMinX : c24._aabbMinX;
											r._aabbMinY = c14._aabbMinY < c24._aabbMinY ? c14._aabbMinY : c24._aabbMinY;
											r._aabbMinZ = c14._aabbMinZ < c24._aabbMinZ ? c14._aabbMinZ : c24._aabbMinZ;
											r._aabbMaxX = c14._aabbMaxX > c24._aabbMaxX ? c14._aabbMaxX : c24._aabbMaxX;
											r._aabbMaxY = c14._aabbMaxY > c24._aabbMaxY ? c14._aabbMaxY : c24._aabbMaxY;
											r._aabbMaxZ = c14._aabbMaxZ > c24._aabbMaxZ ? c14._aabbMaxZ : c24._aabbMaxZ;
											var h14 = r._children[0]._height;
											var h24 = r._children[1]._height;
											r._height = (h14 > h24 ? h14 : h24) + 1;
											var c15 = node._children[0];
											var c25 = node._children[1];
											node._aabbMinX = c15._aabbMinX < c25._aabbMinX ? c15._aabbMinX : c25._aabbMinX;
											node._aabbMinY = c15._aabbMinY < c25._aabbMinY ? c15._aabbMinY : c25._aabbMinY;
											node._aabbMinZ = c15._aabbMinZ < c25._aabbMinZ ? c15._aabbMinZ : c25._aabbMinZ;
											node._aabbMaxX = c15._aabbMaxX > c25._aabbMaxX ? c15._aabbMaxX : c25._aabbMaxX;
											node._aabbMaxY = c15._aabbMaxY > c25._aabbMaxY ? c15._aabbMaxY : c25._aabbMaxY;
											node._aabbMaxZ = c15._aabbMaxZ > c25._aabbMaxZ ? c15._aabbMaxZ : c25._aabbMaxZ;
											var h15 = node._children[0]._height;
											var h25 = node._children[1]._height;
											node._height = (h15 > h25 ? h15 : h25) + 1;
										} else {
											r._children[0] = node;
											node._parent = r;
											node._childIndex = 0;
											node._children[1] = rl;
											rl._parent = node;
											rl._childIndex = 1;
											var c16 = r._children[0];
											var c26 = r._children[1];
											r._aabbMinX = c16._aabbMinX < c26._aabbMinX ? c16._aabbMinX : c26._aabbMinX;
											r._aabbMinY = c16._aabbMinY < c26._aabbMinY ? c16._aabbMinY : c26._aabbMinY;
											r._aabbMinZ = c16._aabbMinZ < c26._aabbMinZ ? c16._aabbMinZ : c26._aabbMinZ;
											r._aabbMaxX = c16._aabbMaxX > c26._aabbMaxX ? c16._aabbMaxX : c26._aabbMaxX;
											r._aabbMaxY = c16._aabbMaxY > c26._aabbMaxY ? c16._aabbMaxY : c26._aabbMaxY;
											r._aabbMaxZ = c16._aabbMaxZ > c26._aabbMaxZ ? c16._aabbMaxZ : c26._aabbMaxZ;
											var h16 = r._children[0]._height;
											var h26 = r._children[1]._height;
											r._height = (h16 > h26 ? h16 : h26) + 1;
											var c17 = node._children[0];
											var c27 = node._children[1];
											node._aabbMinX = c17._aabbMinX < c27._aabbMinX ? c17._aabbMinX : c27._aabbMinX;
											node._aabbMinY = c17._aabbMinY < c27._aabbMinY ? c17._aabbMinY : c27._aabbMinY;
											node._aabbMinZ = c17._aabbMinZ < c27._aabbMinZ ? c17._aabbMinZ : c27._aabbMinZ;
											node._aabbMaxX = c17._aabbMaxX > c27._aabbMaxX ? c17._aabbMaxX : c27._aabbMaxX;
											node._aabbMaxY = c17._aabbMaxY > c27._aabbMaxY ? c17._aabbMaxY : c27._aabbMaxY;
											node._aabbMaxZ = c17._aabbMaxZ > c27._aabbMaxZ ? c17._aabbMaxZ : c27._aabbMaxZ;
											var h17 = node._children[0]._height;
											var h27 = node._children[1]._height;
											node._height = (h17 > h27 ? h17 : h27) + 1;
										}
										if(p1 != null) {
											p1._children[nodeIndex] = r;
											r._parent = p1;
											r._childIndex = nodeIndex;
										} else {
											_this._root = r;
											r._parent = null;
										}
										node = r;
									}
								}
							}
							var h18 = node._children[0]._height;
							var h28 = node._children[1]._height;
							node._height = (h18 > h28 ? h18 : h28) + 1;
							var c18 = node._children[0];
							var c28 = node._children[1];
							node._aabbMinX = c18._aabbMinX < c28._aabbMinX ? c18._aabbMinX : c28._aabbMinX;
							node._aabbMinY = c18._aabbMinY < c28._aabbMinY ? c18._aabbMinY : c28._aabbMinY;
							node._aabbMinZ = c18._aabbMinZ < c28._aabbMinZ ? c18._aabbMinZ : c28._aabbMinZ;
							node._aabbMaxX = c18._aabbMaxX > c28._aabbMaxX ? c18._aabbMaxX : c28._aabbMaxX;
							node._aabbMaxY = c18._aabbMaxY > c28._aabbMaxY ? c18._aabbMaxY : c28._aabbMaxY;
							node._aabbMaxZ = c18._aabbMaxZ > c28._aabbMaxZ ? c18._aabbMaxZ : c28._aabbMaxZ;
							node = node._parent;
						}
					}
				}
				p._leaf = null;
				leaf._next = null;
				leaf._childIndex = 0;
				leaf._children[0] = null;
				leaf._children[1] = null;
				leaf._childIndex = 0;
				leaf._parent = null;
				leaf._height = 0;
				leaf._proxy = null;
				leaf._next = _this._nodePool;
				_this._nodePool = leaf;
				var _this1 = this._tree;
				var first = _this1._nodePool;
				if(first != null) {
					_this1._nodePool = first._next;
					first._next = null;
				} else {
					first = new oimo_collision_broadphase_bvh_BvhNode();
				}
				var leaf1 = first;
				leaf1._proxy = p;
				p._leaf = leaf1;
				leaf1._aabbMinX = p._aabbMinX;
				leaf1._aabbMinY = p._aabbMinY;
				leaf1._aabbMinZ = p._aabbMinZ;
				leaf1._aabbMaxX = p._aabbMaxX;
				leaf1._aabbMaxY = p._aabbMaxY;
				leaf1._aabbMaxZ = p._aabbMaxZ;
				_this1._numLeaves++;
				if(_this1.leafList == null) {
					_this1.leafList = leaf1;
					_this1.leafListLast = leaf1;
				} else {
					_this1.leafListLast._nextLeaf = leaf1;
					leaf1._prevLeaf = _this1.leafListLast;
					_this1.leafListLast = leaf1;
				}
				if(_this1._root == null) {
					_this1._root = leaf1;
				} else {
					var sibling1 = _this1._root;
					while(sibling1._height > 0) {
						var nextStep = _this1._strategy._decideInsertion(sibling1,leaf1);
						if(nextStep == -1) {
							break;
						} else {
							sibling1 = sibling1._children[nextStep];
						}
					}
					var parent1 = sibling1._parent;
					var first1 = _this1._nodePool;
					if(first1 != null) {
						_this1._nodePool = first1._next;
						first1._next = null;
					} else {
						first1 = new oimo_collision_broadphase_bvh_BvhNode();
					}
					var node1 = first1;
					if(parent1 == null) {
						_this1._root = node1;
					} else {
						var index1 = sibling1._childIndex;
						parent1._children[index1] = node1;
						node1._parent = parent1;
						node1._childIndex = index1;
					}
					var index2 = sibling1._childIndex;
					node1._children[index2] = sibling1;
					sibling1._parent = node1;
					sibling1._childIndex = index2;
					var index3 = sibling1._childIndex ^ 1;
					node1._children[index3] = leaf1;
					leaf1._parent = node1;
					leaf1._childIndex = index3;
					while(node1 != null) {
						if(_this1._strategy._balancingEnabled) {
							if(node1._height >= 2) {
								var p2 = node1._parent;
								var l1 = node1._children[0];
								var r1 = node1._children[1];
								var balance1 = l1._height - r1._height;
								var nodeIndex1 = node1._childIndex;
								if(balance1 > 1) {
									var ll1 = l1._children[0];
									var lr1 = l1._children[1];
									if(ll1._height > lr1._height) {
										l1._children[1] = node1;
										node1._parent = l1;
										node1._childIndex = 1;
										node1._children[0] = lr1;
										lr1._parent = node1;
										lr1._childIndex = 0;
										var c19 = l1._children[0];
										var c29 = l1._children[1];
										l1._aabbMinX = c19._aabbMinX < c29._aabbMinX ? c19._aabbMinX : c29._aabbMinX;
										l1._aabbMinY = c19._aabbMinY < c29._aabbMinY ? c19._aabbMinY : c29._aabbMinY;
										l1._aabbMinZ = c19._aabbMinZ < c29._aabbMinZ ? c19._aabbMinZ : c29._aabbMinZ;
										l1._aabbMaxX = c19._aabbMaxX > c29._aabbMaxX ? c19._aabbMaxX : c29._aabbMaxX;
										l1._aabbMaxY = c19._aabbMaxY > c29._aabbMaxY ? c19._aabbMaxY : c29._aabbMaxY;
										l1._aabbMaxZ = c19._aabbMaxZ > c29._aabbMaxZ ? c19._aabbMaxZ : c29._aabbMaxZ;
										var h19 = l1._children[0]._height;
										var h29 = l1._children[1]._height;
										l1._height = (h19 > h29 ? h19 : h29) + 1;
										var c110 = node1._children[0];
										var c210 = node1._children[1];
										node1._aabbMinX = c110._aabbMinX < c210._aabbMinX ? c110._aabbMinX : c210._aabbMinX;
										node1._aabbMinY = c110._aabbMinY < c210._aabbMinY ? c110._aabbMinY : c210._aabbMinY;
										node1._aabbMinZ = c110._aabbMinZ < c210._aabbMinZ ? c110._aabbMinZ : c210._aabbMinZ;
										node1._aabbMaxX = c110._aabbMaxX > c210._aabbMaxX ? c110._aabbMaxX : c210._aabbMaxX;
										node1._aabbMaxY = c110._aabbMaxY > c210._aabbMaxY ? c110._aabbMaxY : c210._aabbMaxY;
										node1._aabbMaxZ = c110._aabbMaxZ > c210._aabbMaxZ ? c110._aabbMaxZ : c210._aabbMaxZ;
										var h110 = node1._children[0]._height;
										var h210 = node1._children[1]._height;
										node1._height = (h110 > h210 ? h110 : h210) + 1;
									} else {
										l1._children[0] = node1;
										node1._parent = l1;
										node1._childIndex = 0;
										node1._children[0] = ll1;
										ll1._parent = node1;
										ll1._childIndex = 0;
										var c111 = l1._children[0];
										var c211 = l1._children[1];
										l1._aabbMinX = c111._aabbMinX < c211._aabbMinX ? c111._aabbMinX : c211._aabbMinX;
										l1._aabbMinY = c111._aabbMinY < c211._aabbMinY ? c111._aabbMinY : c211._aabbMinY;
										l1._aabbMinZ = c111._aabbMinZ < c211._aabbMinZ ? c111._aabbMinZ : c211._aabbMinZ;
										l1._aabbMaxX = c111._aabbMaxX > c211._aabbMaxX ? c111._aabbMaxX : c211._aabbMaxX;
										l1._aabbMaxY = c111._aabbMaxY > c211._aabbMaxY ? c111._aabbMaxY : c211._aabbMaxY;
										l1._aabbMaxZ = c111._aabbMaxZ > c211._aabbMaxZ ? c111._aabbMaxZ : c211._aabbMaxZ;
										var h111 = l1._children[0]._height;
										var h211 = l1._children[1]._height;
										l1._height = (h111 > h211 ? h111 : h211) + 1;
										var c112 = node1._children[0];
										var c212 = node1._children[1];
										node1._aabbMinX = c112._aabbMinX < c212._aabbMinX ? c112._aabbMinX : c212._aabbMinX;
										node1._aabbMinY = c112._aabbMinY < c212._aabbMinY ? c112._aabbMinY : c212._aabbMinY;
										node1._aabbMinZ = c112._aabbMinZ < c212._aabbMinZ ? c112._aabbMinZ : c212._aabbMinZ;
										node1._aabbMaxX = c112._aabbMaxX > c212._aabbMaxX ? c112._aabbMaxX : c212._aabbMaxX;
										node1._aabbMaxY = c112._aabbMaxY > c212._aabbMaxY ? c112._aabbMaxY : c212._aabbMaxY;
										node1._aabbMaxZ = c112._aabbMaxZ > c212._aabbMaxZ ? c112._aabbMaxZ : c212._aabbMaxZ;
										var h112 = node1._children[0]._height;
										var h212 = node1._children[1]._height;
										node1._height = (h112 > h212 ? h112 : h212) + 1;
									}
									if(p2 != null) {
										p2._children[nodeIndex1] = l1;
										l1._parent = p2;
										l1._childIndex = nodeIndex1;
									} else {
										_this1._root = l1;
										l1._parent = null;
									}
									node1 = l1;
								} else if(balance1 < -1) {
									var rl1 = r1._children[0];
									var rr1 = r1._children[1];
									if(rl1._height > rr1._height) {
										r1._children[1] = node1;
										node1._parent = r1;
										node1._childIndex = 1;
										node1._children[1] = rr1;
										rr1._parent = node1;
										rr1._childIndex = 1;
										var c113 = r1._children[0];
										var c213 = r1._children[1];
										r1._aabbMinX = c113._aabbMinX < c213._aabbMinX ? c113._aabbMinX : c213._aabbMinX;
										r1._aabbMinY = c113._aabbMinY < c213._aabbMinY ? c113._aabbMinY : c213._aabbMinY;
										r1._aabbMinZ = c113._aabbMinZ < c213._aabbMinZ ? c113._aabbMinZ : c213._aabbMinZ;
										r1._aabbMaxX = c113._aabbMaxX > c213._aabbMaxX ? c113._aabbMaxX : c213._aabbMaxX;
										r1._aabbMaxY = c113._aabbMaxY > c213._aabbMaxY ? c113._aabbMaxY : c213._aabbMaxY;
										r1._aabbMaxZ = c113._aabbMaxZ > c213._aabbMaxZ ? c113._aabbMaxZ : c213._aabbMaxZ;
										var h113 = r1._children[0]._height;
										var h213 = r1._children[1]._height;
										r1._height = (h113 > h213 ? h113 : h213) + 1;
										var c114 = node1._children[0];
										var c214 = node1._children[1];
										node1._aabbMinX = c114._aabbMinX < c214._aabbMinX ? c114._aabbMinX : c214._aabbMinX;
										node1._aabbMinY = c114._aabbMinY < c214._aabbMinY ? c114._aabbMinY : c214._aabbMinY;
										node1._aabbMinZ = c114._aabbMinZ < c214._aabbMinZ ? c114._aabbMinZ : c214._aabbMinZ;
										node1._aabbMaxX = c114._aabbMaxX > c214._aabbMaxX ? c114._aabbMaxX : c214._aabbMaxX;
										node1._aabbMaxY = c114._aabbMaxY > c214._aabbMaxY ? c114._aabbMaxY : c214._aabbMaxY;
										node1._aabbMaxZ = c114._aabbMaxZ > c214._aabbMaxZ ? c114._aabbMaxZ : c214._aabbMaxZ;
										var h114 = node1._children[0]._height;
										var h214 = node1._children[1]._height;
										node1._height = (h114 > h214 ? h114 : h214) + 1;
									} else {
										r1._children[0] = node1;
										node1._parent = r1;
										node1._childIndex = 0;
										node1._children[1] = rl1;
										rl1._parent = node1;
										rl1._childIndex = 1;
										var c115 = r1._children[0];
										var c215 = r1._children[1];
										r1._aabbMinX = c115._aabbMinX < c215._aabbMinX ? c115._aabbMinX : c215._aabbMinX;
										r1._aabbMinY = c115._aabbMinY < c215._aabbMinY ? c115._aabbMinY : c215._aabbMinY;
										r1._aabbMinZ = c115._aabbMinZ < c215._aabbMinZ ? c115._aabbMinZ : c215._aabbMinZ;
										r1._aabbMaxX = c115._aabbMaxX > c215._aabbMaxX ? c115._aabbMaxX : c215._aabbMaxX;
										r1._aabbMaxY = c115._aabbMaxY > c215._aabbMaxY ? c115._aabbMaxY : c215._aabbMaxY;
										r1._aabbMaxZ = c115._aabbMaxZ > c215._aabbMaxZ ? c115._aabbMaxZ : c215._aabbMaxZ;
										var h115 = r1._children[0]._height;
										var h215 = r1._children[1]._height;
										r1._height = (h115 > h215 ? h115 : h215) + 1;
										var c116 = node1._children[0];
										var c216 = node1._children[1];
										node1._aabbMinX = c116._aabbMinX < c216._aabbMinX ? c116._aabbMinX : c216._aabbMinX;
										node1._aabbMinY = c116._aabbMinY < c216._aabbMinY ? c116._aabbMinY : c216._aabbMinY;
										node1._aabbMinZ = c116._aabbMinZ < c216._aabbMinZ ? c116._aabbMinZ : c216._aabbMinZ;
										node1._aabbMaxX = c116._aabbMaxX > c216._aabbMaxX ? c116._aabbMaxX : c216._aabbMaxX;
										node1._aabbMaxY = c116._aabbMaxY > c216._aabbMaxY ? c116._aabbMaxY : c216._aabbMaxY;
										node1._aabbMaxZ = c116._aabbMaxZ > c216._aabbMaxZ ? c116._aabbMaxZ : c216._aabbMaxZ;
										var h116 = node1._children[0]._height;
										var h216 = node1._children[1]._height;
										node1._height = (h116 > h216 ? h116 : h216) + 1;
									}
									if(p2 != null) {
										p2._children[nodeIndex1] = r1;
										r1._parent = p2;
										r1._childIndex = nodeIndex1;
									} else {
										_this1._root = r1;
										r1._parent = null;
									}
									node1 = r1;
								}
							}
						}
						var h117 = node1._children[0]._height;
						var h217 = node1._children[1]._height;
						node1._height = (h117 > h217 ? h117 : h217) + 1;
						var c117 = node1._children[0];
						var c217 = node1._children[1];
						node1._aabbMinX = c117._aabbMinX < c217._aabbMinX ? c117._aabbMinX : c217._aabbMinX;
						node1._aabbMinY = c117._aabbMinY < c217._aabbMinY ? c117._aabbMinY : c217._aabbMinY;
						node1._aabbMinZ = c117._aabbMinZ < c217._aabbMinZ ? c117._aabbMinZ : c217._aabbMinZ;
						node1._aabbMaxX = c117._aabbMaxX > c217._aabbMaxX ? c117._aabbMaxX : c217._aabbMaxX;
						node1._aabbMaxY = c117._aabbMaxY > c217._aabbMaxY ? c117._aabbMaxY : c217._aabbMaxY;
						node1._aabbMaxZ = c117._aabbMaxZ > c217._aabbMaxZ ? c117._aabbMaxZ : c217._aabbMaxZ;
						node1 = node1._parent;
					}
				}
				if(incrementalCollision) {
					this.collide(this._tree._root,p._leaf);
				}
				p._moved = false;
			}
			this.movedProxies[i] = null;
		}
		if(!incrementalCollision) {
			this.collide(this._tree._root,this._tree._root);
		}
		this.numMovedProxies = 0;
	}
	,rayCast: function(begin,end,callback) {
		if(this._tree._root == null) {
			return;
		}
		var p1X;
		var p1Y;
		var p1Z;
		var p2X;
		var p2Y;
		var p2Z;
		p1X = begin.x;
		p1Y = begin.y;
		p1Z = begin.z;
		p2X = end.x;
		p2Y = end.y;
		p2Z = end.z;
		this.rayCastRecursive(this._tree._root,p1X,p1Y,p1Z,p2X,p2Y,p2Z,callback);
	}
	,convexCast: function(convex,begin,translation,callback) {
		if(this._tree._root == null) {
			return;
		}
		this.convexCastRecursive(this._tree._root,convex,begin,translation,callback);
	}
	,aabbTest: function(aabb,callback) {
		if(this._tree._root == null) {
			return;
		}
		this.aabbTestRecursive(this._tree._root,aabb,callback);
	}
	,getTreeBalance: function() {
		return this._tree._getBalance();
	}
	,__class__: oimo_collision_broadphase_bvh_BvhBroadPhase
});
var oimo_collision_broadphase_bvh_BvhInsertionStrategy = function() { };
oimo_collision_broadphase_bvh_BvhInsertionStrategy.__name__ = true;
var oimo_collision_broadphase_bvh_BvhNode = function() {
	this._next = null;
	this._prevLeaf = null;
	this._nextLeaf = null;
	this._children = new Array(2);
	this._childIndex = 0;
	this._parent = null;
	this._height = 0;
	this._proxy = null;
	this._aabbMinX = 0;
	this._aabbMinY = 0;
	this._aabbMinZ = 0;
	this._aabbMaxX = 0;
	this._aabbMaxY = 0;
	this._aabbMaxZ = 0;
};
oimo_collision_broadphase_bvh_BvhNode.__name__ = true;
oimo_collision_broadphase_bvh_BvhNode.prototype = {
	__class__: oimo_collision_broadphase_bvh_BvhNode
};
var oimo_collision_broadphase_bvh_BvhProxy = function(userData,id) {
	oimo_collision_broadphase_Proxy.call(this,userData,id);
	this._leaf = null;
	this._moved = false;
};
oimo_collision_broadphase_bvh_BvhProxy.__name__ = true;
oimo_collision_broadphase_bvh_BvhProxy.__super__ = oimo_collision_broadphase_Proxy;
oimo_collision_broadphase_bvh_BvhProxy.prototype = $extend(oimo_collision_broadphase_Proxy.prototype,{
	__class__: oimo_collision_broadphase_bvh_BvhProxy
});
var oimo_collision_broadphase_bvh_BvhStrategy = function() {
	this._insertionStrategy = 0;
	this._balancingEnabled = false;
};
oimo_collision_broadphase_bvh_BvhStrategy.__name__ = true;
oimo_collision_broadphase_bvh_BvhStrategy.prototype = {
	_decideInsertion: function(currentNode,leaf) {
		switch(this._insertionStrategy) {
		case 0:
			var centerX;
			var centerY;
			var centerZ;
			centerX = leaf._aabbMinX + leaf._aabbMaxX;
			centerY = leaf._aabbMinY + leaf._aabbMaxY;
			centerZ = leaf._aabbMinZ + leaf._aabbMaxZ;
			var c1 = currentNode._children[0];
			var c2 = currentNode._children[1];
			var diff1X;
			var diff1Y;
			var diff1Z;
			var diff2X;
			var diff2Y;
			var diff2Z;
			diff1X = c1._aabbMinX + c1._aabbMaxX;
			diff1Y = c1._aabbMinY + c1._aabbMaxY;
			diff1Z = c1._aabbMinZ + c1._aabbMaxZ;
			diff2X = c2._aabbMinX + c2._aabbMaxX;
			diff2Y = c2._aabbMinY + c2._aabbMaxY;
			diff2Z = c2._aabbMinZ + c2._aabbMaxZ;
			diff1X -= centerX;
			diff1Y -= centerY;
			diff1Z -= centerZ;
			diff2X -= centerX;
			diff2Y -= centerY;
			diff2Z -= centerZ;
			if(diff1X * diff1X + diff1Y * diff1Y + diff1Z * diff1Z < diff2X * diff2X + diff2Y * diff2Y + diff2Z * diff2Z) {
				return 0;
			} else {
				return 1;
			}
			break;
		case 1:
			var c1 = currentNode._children[0];
			var c2 = currentNode._children[1];
			var ey = currentNode._aabbMaxY - currentNode._aabbMinY;
			var ez = currentNode._aabbMaxZ - currentNode._aabbMinZ;
			var combinedMinX;
			var combinedMinY;
			var combinedMinZ;
			var combinedMaxX;
			var combinedMaxY;
			var combinedMaxZ;
			combinedMinX = currentNode._aabbMinX < leaf._aabbMinX ? currentNode._aabbMinX : leaf._aabbMinX;
			combinedMinY = currentNode._aabbMinY < leaf._aabbMinY ? currentNode._aabbMinY : leaf._aabbMinY;
			combinedMinZ = currentNode._aabbMinZ < leaf._aabbMinZ ? currentNode._aabbMinZ : leaf._aabbMinZ;
			combinedMaxX = currentNode._aabbMaxX > leaf._aabbMaxX ? currentNode._aabbMaxX : leaf._aabbMaxX;
			combinedMaxY = currentNode._aabbMaxY > leaf._aabbMaxY ? currentNode._aabbMaxY : leaf._aabbMaxY;
			combinedMaxZ = currentNode._aabbMaxZ > leaf._aabbMaxZ ? currentNode._aabbMaxZ : leaf._aabbMaxZ;
			var ey1 = combinedMaxY - combinedMinY;
			var ez1 = combinedMaxZ - combinedMinZ;
			var newArea = ((combinedMaxX - combinedMinX) * (ey1 + ez1) + ey1 * ez1) * 2;
			var creatingCost = newArea * 2;
			var incrementalCost = (newArea - ((currentNode._aabbMaxX - currentNode._aabbMinX) * (ey + ez) + ey * ez) * 2) * 2;
			var descendingCost1 = incrementalCost;
			combinedMinX = c1._aabbMinX < leaf._aabbMinX ? c1._aabbMinX : leaf._aabbMinX;
			combinedMinY = c1._aabbMinY < leaf._aabbMinY ? c1._aabbMinY : leaf._aabbMinY;
			combinedMinZ = c1._aabbMinZ < leaf._aabbMinZ ? c1._aabbMinZ : leaf._aabbMinZ;
			combinedMaxX = c1._aabbMaxX > leaf._aabbMaxX ? c1._aabbMaxX : leaf._aabbMaxX;
			combinedMaxY = c1._aabbMaxY > leaf._aabbMaxY ? c1._aabbMaxY : leaf._aabbMaxY;
			combinedMaxZ = c1._aabbMaxZ > leaf._aabbMaxZ ? c1._aabbMaxZ : leaf._aabbMaxZ;
			if(c1._height == 0) {
				var ey = combinedMaxY - combinedMinY;
				var ez = combinedMaxZ - combinedMinZ;
				descendingCost1 = incrementalCost + ((combinedMaxX - combinedMinX) * (ey + ez) + ey * ez) * 2;
			} else {
				var ey = combinedMaxY - combinedMinY;
				var ez = combinedMaxZ - combinedMinZ;
				var ey1 = c1._aabbMaxY - c1._aabbMinY;
				var ez1 = c1._aabbMaxZ - c1._aabbMinZ;
				descendingCost1 = incrementalCost + (((combinedMaxX - combinedMinX) * (ey + ez) + ey * ez) * 2 - ((c1._aabbMaxX - c1._aabbMinX) * (ey1 + ez1) + ey1 * ez1) * 2);
			}
			var descendingCost2 = incrementalCost;
			combinedMinX = c2._aabbMinX < leaf._aabbMinX ? c2._aabbMinX : leaf._aabbMinX;
			combinedMinY = c2._aabbMinY < leaf._aabbMinY ? c2._aabbMinY : leaf._aabbMinY;
			combinedMinZ = c2._aabbMinZ < leaf._aabbMinZ ? c2._aabbMinZ : leaf._aabbMinZ;
			combinedMaxX = c2._aabbMaxX > leaf._aabbMaxX ? c2._aabbMaxX : leaf._aabbMaxX;
			combinedMaxY = c2._aabbMaxY > leaf._aabbMaxY ? c2._aabbMaxY : leaf._aabbMaxY;
			combinedMaxZ = c2._aabbMaxZ > leaf._aabbMaxZ ? c2._aabbMaxZ : leaf._aabbMaxZ;
			if(c2._height == 0) {
				var ey = combinedMaxY - combinedMinY;
				var ez = combinedMaxZ - combinedMinZ;
				descendingCost2 = incrementalCost + ((combinedMaxX - combinedMinX) * (ey + ez) + ey * ez) * 2;
			} else {
				var ey = combinedMaxY - combinedMinY;
				var ez = combinedMaxZ - combinedMinZ;
				var ey1 = c2._aabbMaxY - c2._aabbMinY;
				var ez1 = c2._aabbMaxZ - c2._aabbMinZ;
				descendingCost2 = incrementalCost + (((combinedMaxX - combinedMinX) * (ey + ez) + ey * ez) * 2 - ((c2._aabbMaxX - c2._aabbMinX) * (ey1 + ez1) + ey1 * ez1) * 2);
			}
			if(creatingCost < descendingCost1) {
				if(creatingCost < descendingCost2) {
					return -1;
				} else {
					return 1;
				}
			} else if(descendingCost1 < descendingCost2) {
				return 0;
			} else {
				return 1;
			}
			break;
		default:
			console.log("src/oimo/collision/broadphase/bvh/BvhStrategy.hx:37:","invalid BVH insertion strategy: " + this._insertionStrategy);
			return -1;
		}
	}
	,_splitLeaves: function(leaves,from,until) {
		var invN = 1.0 / (until - from);
		var centerMeanX;
		var centerMeanY;
		var centerMeanZ;
		centerMeanX = 0;
		centerMeanY = 0;
		centerMeanZ = 0;
		var _g = from;
		while(_g < until) {
			var leaf = leaves[_g++];
			leaf._tmpX = leaf._aabbMaxX + leaf._aabbMinX;
			leaf._tmpY = leaf._aabbMaxY + leaf._aabbMinY;
			leaf._tmpZ = leaf._aabbMaxZ + leaf._aabbMinZ;
			centerMeanX += leaf._tmpX;
			centerMeanY += leaf._tmpY;
			centerMeanZ += leaf._tmpZ;
		}
		centerMeanX *= invN;
		centerMeanY *= invN;
		centerMeanZ *= invN;
		var varianceX;
		var varianceY;
		var varianceZ;
		varianceX = 0;
		varianceY = 0;
		varianceZ = 0;
		var _g = from;
		while(_g < until) {
			var leaf = leaves[_g++];
			var diffX;
			var diffY;
			var diffZ;
			diffX = leaf._tmpX - centerMeanX;
			diffY = leaf._tmpY - centerMeanY;
			diffZ = leaf._tmpZ - centerMeanZ;
			diffX *= diffX;
			diffY *= diffY;
			diffZ *= diffZ;
			varianceX += diffX;
			varianceY += diffY;
			varianceZ += diffZ;
		}
		var varX = varianceX;
		var varY = varianceY;
		var varZ = varianceZ;
		var l = from;
		var r = until - 1;
		if(varX > varY) {
			if(varX > varZ) {
				var mean = centerMeanX;
				while(true) {
					while(!(leaves[l]._tmpX <= mean)) ++l;
					while(!(leaves[r]._tmpX >= mean)) --r;
					if(l >= r) {
						break;
					}
					var tmp = leaves[l];
					leaves[l] = leaves[r];
					leaves[r] = tmp;
					++l;
					--r;
				}
			} else {
				var mean = centerMeanZ;
				while(true) {
					while(!(leaves[l]._tmpZ <= mean)) ++l;
					while(!(leaves[r]._tmpZ >= mean)) --r;
					if(l >= r) {
						break;
					}
					var tmp = leaves[l];
					leaves[l] = leaves[r];
					leaves[r] = tmp;
					++l;
					--r;
				}
			}
		} else if(varY > varZ) {
			var mean = centerMeanY;
			while(true) {
				while(!(leaves[l]._tmpY <= mean)) ++l;
				while(!(leaves[r]._tmpY >= mean)) --r;
				if(l >= r) {
					break;
				}
				var tmp = leaves[l];
				leaves[l] = leaves[r];
				leaves[r] = tmp;
				++l;
				--r;
			}
		} else {
			var mean = centerMeanZ;
			while(true) {
				while(!(leaves[l]._tmpZ <= mean)) ++l;
				while(!(leaves[r]._tmpZ >= mean)) --r;
				if(l >= r) {
					break;
				}
				var tmp = leaves[l];
				leaves[l] = leaves[r];
				leaves[r] = tmp;
				++l;
				--r;
			}
		}
		return l;
	}
	,__class__: oimo_collision_broadphase_bvh_BvhStrategy
};
var oimo_collision_broadphase_bvh_BvhTree = function() {
	this._root = null;
	this._numLeaves = 0;
	this._strategy = new oimo_collision_broadphase_bvh_BvhStrategy();
	this._nodePool = null;
	this.leafList = null;
	this.leafListLast = null;
	this.tmp = new Array(1024);
};
oimo_collision_broadphase_bvh_BvhTree.__name__ = true;
oimo_collision_broadphase_bvh_BvhTree.prototype = {
	_print: function(root,indent) {
		if(indent == null) {
			indent = "";
		}
		if(root == null) {
			return;
		}
		if(root._height == 0) {
			console.log("src/oimo/collision/broadphase/bvh/BvhTree.hx:39:",indent + root._proxy._id);
		} else {
			this._print(root._children[0],indent + "  ");
			var tmp;
			var sizeX;
			var sizeY;
			var sizeZ;
			sizeX = root._aabbMaxX - root._aabbMinX;
			sizeY = root._aabbMaxY - root._aabbMinY;
			sizeZ = root._aabbMaxZ - root._aabbMinZ;
			var y = sizeY;
			var z = sizeZ;
			if(sizeX * (y + z) + y * z > 0) {
				var sizeX;
				var sizeY;
				var sizeZ;
				sizeX = root._aabbMaxX - root._aabbMinX;
				sizeY = root._aabbMaxY - root._aabbMinY;
				sizeZ = root._aabbMaxZ - root._aabbMinZ;
				var y = sizeY;
				var z = sizeZ;
				tmp = ((sizeX * (y + z) + y * z) * 1000 + 0.5 | 0) / 1000;
			} else {
				var sizeX;
				var sizeY;
				var sizeZ;
				sizeX = root._aabbMaxX - root._aabbMinX;
				sizeY = root._aabbMaxY - root._aabbMinY;
				sizeZ = root._aabbMaxZ - root._aabbMinZ;
				var y = sizeY;
				var z = sizeZ;
				tmp = ((sizeX * (y + z) + y * z) * 1000 - 0.5 | 0) / 1000;
			}
			console.log("src/oimo/collision/broadphase/bvh/BvhTree.hx:42:",indent + "#" + root._height + ", " + tmp);
			this._print(root._children[1],indent + "  ");
		}
	}
	,_getBalance: function() {
		return this.getBalanceRecursive(this._root);
	}
	,deleteRecursive: function(root) {
		if(root._height == 0) {
			var prev = root._prevLeaf;
			var next = root._nextLeaf;
			if(prev != null) {
				prev._nextLeaf = next;
			}
			if(next != null) {
				next._prevLeaf = prev;
			}
			if(root == this.leafList) {
				this.leafList = this.leafList._nextLeaf;
			}
			if(root == this.leafListLast) {
				this.leafListLast = this.leafListLast._prevLeaf;
			}
			root._nextLeaf = null;
			root._prevLeaf = null;
			root._proxy._leaf = null;
			root._next = null;
			root._childIndex = 0;
			root._children[0] = null;
			root._children[1] = null;
			root._childIndex = 0;
			root._parent = null;
			root._height = 0;
			root._proxy = null;
			root._next = this._nodePool;
			this._nodePool = root;
			return;
		}
		this.deleteRecursive(root._children[0]);
		this.deleteRecursive(root._children[1]);
		root._next = null;
		root._childIndex = 0;
		root._children[0] = null;
		root._children[1] = null;
		root._childIndex = 0;
		root._parent = null;
		root._height = 0;
		root._proxy = null;
		root._next = this._nodePool;
		this._nodePool = root;
	}
	,decomposeRecursive: function(root) {
		if(root._height == 0) {
			root._childIndex = 0;
			root._parent = null;
			return;
		}
		this.decomposeRecursive(root._children[0]);
		this.decomposeRecursive(root._children[1]);
		root._next = null;
		root._childIndex = 0;
		root._children[0] = null;
		root._children[1] = null;
		root._childIndex = 0;
		root._parent = null;
		root._height = 0;
		root._proxy = null;
		root._next = this._nodePool;
		this._nodePool = root;
	}
	,buildTopDownRecursive: function(leaves,from,until) {
		if(until - from == 1) {
			var leaf = leaves[from];
			var proxy = leaf._proxy;
			leaf._aabbMinX = proxy._aabbMinX;
			leaf._aabbMinY = proxy._aabbMinY;
			leaf._aabbMinZ = proxy._aabbMinZ;
			leaf._aabbMaxX = proxy._aabbMaxX;
			leaf._aabbMaxY = proxy._aabbMaxY;
			leaf._aabbMaxZ = proxy._aabbMaxZ;
			return leaf;
		}
		var splitAt = this._strategy._splitLeaves(leaves,from,until);
		var child1 = this.buildTopDownRecursive(leaves,from,splitAt);
		var child2 = this.buildTopDownRecursive(leaves,splitAt,until);
		var first = this._nodePool;
		if(first != null) {
			this._nodePool = first._next;
			first._next = null;
		} else {
			first = new oimo_collision_broadphase_bvh_BvhNode();
		}
		var parent = first;
		parent._children[0] = child1;
		child1._parent = parent;
		child1._childIndex = 0;
		parent._children[1] = child2;
		child2._parent = parent;
		child2._childIndex = 1;
		var c1 = parent._children[0];
		var c2 = parent._children[1];
		parent._aabbMinX = c1._aabbMinX < c2._aabbMinX ? c1._aabbMinX : c2._aabbMinX;
		parent._aabbMinY = c1._aabbMinY < c2._aabbMinY ? c1._aabbMinY : c2._aabbMinY;
		parent._aabbMinZ = c1._aabbMinZ < c2._aabbMinZ ? c1._aabbMinZ : c2._aabbMinZ;
		parent._aabbMaxX = c1._aabbMaxX > c2._aabbMaxX ? c1._aabbMaxX : c2._aabbMaxX;
		parent._aabbMaxY = c1._aabbMaxY > c2._aabbMaxY ? c1._aabbMaxY : c2._aabbMaxY;
		parent._aabbMaxZ = c1._aabbMaxZ > c2._aabbMaxZ ? c1._aabbMaxZ : c2._aabbMaxZ;
		var h1 = parent._children[0]._height;
		var h2 = parent._children[1]._height;
		parent._height = (h1 > h2 ? h1 : h2) + 1;
		return parent;
	}
	,getBalanceRecursive: function(root) {
		if(root == null || root._height == 0) {
			return 0;
		}
		var balance = root._children[0]._height - root._children[1]._height;
		if(balance < 0) {
			balance = -balance;
		}
		return balance + this.getBalanceRecursive(root._children[0]) + this.getBalanceRecursive(root._children[1]);
	}
	,__class__: oimo_collision_broadphase_bvh_BvhTree
};
var oimo_collision_geometry_Aabb = function() {
	this._minX = 0;
	this._minY = 0;
	this._minZ = 0;
	this._maxX = 0;
	this._maxY = 0;
	this._maxZ = 0;
};
oimo_collision_geometry_Aabb.__name__ = true;
oimo_collision_geometry_Aabb.prototype = {
	init: function(min,max) {
		this._minX = min.x;
		this._minY = min.y;
		this._minZ = min.z;
		this._maxX = max.x;
		this._maxY = max.y;
		this._maxZ = max.z;
		return this;
	}
	,getMin: function() {
		var min = new oimo_common_Vec3();
		min.x = this._minX;
		min.y = this._minY;
		min.z = this._minZ;
		return min;
	}
	,getMinTo: function(min) {
		min.x = this._minX;
		min.y = this._minY;
		min.z = this._minZ;
	}
	,setMin: function(min) {
		this._minX = min.x;
		this._minY = min.y;
		this._minZ = min.z;
		return this;
	}
	,getMax: function() {
		var max = new oimo_common_Vec3();
		max.x = this._maxX;
		max.y = this._maxY;
		max.z = this._maxZ;
		return max;
	}
	,getMaxTo: function(max) {
		max.x = this._maxX;
		max.y = this._maxY;
		max.z = this._maxZ;
	}
	,setMax: function(max) {
		this._maxX = max.x;
		this._maxY = max.y;
		this._maxZ = max.z;
		return this;
	}
	,getCenter: function() {
		var v = new oimo_common_Vec3();
		var cX;
		var cY;
		var cZ;
		cX = this._minX + this._maxX;
		cY = this._minY + this._maxY;
		cZ = this._minZ + this._maxZ;
		cX *= 0.5;
		cY *= 0.5;
		cZ *= 0.5;
		v.x = cX;
		v.y = cY;
		v.z = cZ;
		return v;
	}
	,getCenterTo: function(center) {
		var cX;
		var cY;
		var cZ;
		cX = this._minX + this._maxX;
		cY = this._minY + this._maxY;
		cZ = this._minZ + this._maxZ;
		cX *= 0.5;
		cY *= 0.5;
		cZ *= 0.5;
		center.x = cX;
		center.y = cY;
		center.z = cZ;
	}
	,getExtents: function() {
		var v = new oimo_common_Vec3();
		var cX;
		var cY;
		var cZ;
		cX = this._maxX - this._minX;
		cY = this._maxY - this._minY;
		cZ = this._maxZ - this._minZ;
		cX *= 0.5;
		cY *= 0.5;
		cZ *= 0.5;
		v.x = cX;
		v.y = cY;
		v.z = cZ;
		return v;
	}
	,getExtentsTo: function(halfExtents) {
		var cX;
		var cY;
		var cZ;
		cX = this._maxX - this._minX;
		cY = this._maxY - this._minY;
		cZ = this._maxZ - this._minZ;
		cX *= 0.5;
		cY *= 0.5;
		cZ *= 0.5;
		halfExtents.x = cX;
		halfExtents.y = cY;
		halfExtents.z = cZ;
	}
	,combine: function(other) {
		this._minX = this._minX < other._minX ? this._minX : other._minX;
		this._minY = this._minY < other._minY ? this._minY : other._minY;
		this._minZ = this._minZ < other._minZ ? this._minZ : other._minZ;
		this._maxX = this._maxX > other._maxX ? this._maxX : other._maxX;
		this._maxY = this._maxY > other._maxY ? this._maxY : other._maxY;
		this._maxZ = this._maxZ > other._maxZ ? this._maxZ : other._maxZ;
		return this;
	}
	,combined: function(other) {
		var aabb = new oimo_collision_geometry_Aabb();
		aabb._minX = this._minX < other._minX ? this._minX : other._minX;
		aabb._minY = this._minY < other._minY ? this._minY : other._minY;
		aabb._minZ = this._minZ < other._minZ ? this._minZ : other._minZ;
		aabb._maxX = this._maxX > other._maxX ? this._maxX : other._maxX;
		aabb._maxY = this._maxY > other._maxY ? this._maxY : other._maxY;
		aabb._maxZ = this._maxZ > other._maxZ ? this._maxZ : other._maxZ;
		return aabb;
	}
	,overlap: function(other) {
		if(this._minX < other._maxX && this._maxX > other._minX && this._minY < other._maxY && this._maxY > other._minY && this._minZ < other._maxZ) {
			return this._maxZ > other._minZ;
		} else {
			return false;
		}
	}
	,getIntersection: function(other) {
		var aabb = new oimo_collision_geometry_Aabb();
		aabb._minX = this._minX > other._minX ? this._minX : other._minX;
		aabb._minY = this._minY > other._minY ? this._minY : other._minY;
		aabb._minZ = this._minZ > other._minZ ? this._minZ : other._minZ;
		aabb._maxX = this._maxX < other._maxX ? this._maxX : other._maxX;
		aabb._maxY = this._maxY < other._maxY ? this._maxY : other._maxY;
		aabb._maxZ = this._maxZ < other._maxZ ? this._maxZ : other._maxZ;
		return aabb;
	}
	,getIntersectionTo: function(other,intersection) {
		intersection._minX = this._minX > other._minX ? this._minX : other._minX;
		intersection._minY = this._minY > other._minY ? this._minY : other._minY;
		intersection._minZ = this._minZ > other._minZ ? this._minZ : other._minZ;
		intersection._maxX = this._maxX < other._maxX ? this._maxX : other._maxX;
		intersection._maxY = this._maxY < other._maxY ? this._maxY : other._maxY;
		intersection._maxZ = this._maxZ < other._maxZ ? this._maxZ : other._maxZ;
	}
	,copyFrom: function(aabb) {
		this._minX = aabb._minX;
		this._minY = aabb._minY;
		this._minZ = aabb._minZ;
		this._maxX = aabb._maxX;
		this._maxY = aabb._maxY;
		this._maxZ = aabb._maxZ;
		return this;
	}
	,clone: function() {
		var aabb = new oimo_collision_geometry_Aabb();
		aabb._minX = this._minX;
		aabb._minY = this._minY;
		aabb._minZ = this._minZ;
		aabb._maxX = this._maxX;
		aabb._maxY = this._maxY;
		aabb._maxZ = this._maxZ;
		return aabb;
	}
	,__class__: oimo_collision_geometry_Aabb
};
var oimo_collision_geometry_BoxGeometry = function(halfExtents) {
	oimo_collision_geometry_ConvexGeometry.call(this,1);
	this._halfExtentsX = halfExtents.x;
	this._halfExtentsY = halfExtents.y;
	this._halfExtentsZ = halfExtents.z;
	this._halfAxisXX = halfExtents.x;
	this._halfAxisXY = 0;
	this._halfAxisXZ = 0;
	this._halfAxisYX = 0;
	this._halfAxisYY = halfExtents.y;
	this._halfAxisYZ = 0;
	this._halfAxisZX = 0;
	this._halfAxisZY = 0;
	this._halfAxisZZ = halfExtents.z;
	this._updateMass();
	var minHalfExtents = halfExtents.x < halfExtents.y ? halfExtents.z < halfExtents.x ? halfExtents.z : halfExtents.x : halfExtents.z < halfExtents.y ? halfExtents.z : halfExtents.y;
	if(this._gjkMargin > minHalfExtents * 0.2) {
		this._gjkMargin = minHalfExtents * 0.2;
	}
};
oimo_collision_geometry_BoxGeometry.__name__ = true;
oimo_collision_geometry_BoxGeometry.__super__ = oimo_collision_geometry_ConvexGeometry;
oimo_collision_geometry_BoxGeometry.prototype = $extend(oimo_collision_geometry_ConvexGeometry.prototype,{
	getHalfExtents: function() {
		var v = new oimo_common_Vec3();
		v.x = this._halfExtentsX;
		v.y = this._halfExtentsY;
		v.z = this._halfExtentsZ;
		return v;
	}
	,getHalfExtentsTo: function(halfExtents) {
		halfExtents.x = this._halfExtentsX;
		halfExtents.y = this._halfExtentsY;
		halfExtents.z = this._halfExtentsZ;
	}
	,_updateMass: function() {
		this._volume = 8 * (this._halfExtentsX * this._halfExtentsY * this._halfExtentsZ);
		var sqX;
		var sqY;
		var sqZ;
		sqX = this._halfExtentsX * this._halfExtentsX;
		sqY = this._halfExtentsY * this._halfExtentsY;
		sqZ = this._halfExtentsZ * this._halfExtentsZ;
		this._inertiaCoeff00 = 0.33333333333333331 * (sqY + sqZ);
		this._inertiaCoeff01 = 0;
		this._inertiaCoeff02 = 0;
		this._inertiaCoeff10 = 0;
		this._inertiaCoeff11 = 0.33333333333333331 * (sqZ + sqX);
		this._inertiaCoeff12 = 0;
		this._inertiaCoeff20 = 0;
		this._inertiaCoeff21 = 0;
		this._inertiaCoeff22 = 0.33333333333333331 * (sqX + sqY);
	}
	,_computeAabb: function(aabb,tf) {
		var tfxX;
		var tfxY;
		var tfxZ;
		var tfyX;
		var tfyY;
		var tfyZ;
		var tfzX;
		var tfzY;
		var tfzZ;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = tf._rotation00 * this._halfAxisXX + tf._rotation01 * this._halfAxisXY + tf._rotation02 * this._halfAxisXZ;
		__tmp__Y = tf._rotation10 * this._halfAxisXX + tf._rotation11 * this._halfAxisXY + tf._rotation12 * this._halfAxisXZ;
		__tmp__Z = tf._rotation20 * this._halfAxisXX + tf._rotation21 * this._halfAxisXY + tf._rotation22 * this._halfAxisXZ;
		tfxX = __tmp__X;
		tfxY = __tmp__Y;
		tfxZ = __tmp__Z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = tf._rotation00 * this._halfAxisYX + tf._rotation01 * this._halfAxisYY + tf._rotation02 * this._halfAxisYZ;
		__tmp__Y = tf._rotation10 * this._halfAxisYX + tf._rotation11 * this._halfAxisYY + tf._rotation12 * this._halfAxisYZ;
		__tmp__Z = tf._rotation20 * this._halfAxisYX + tf._rotation21 * this._halfAxisYY + tf._rotation22 * this._halfAxisYZ;
		tfyX = __tmp__X;
		tfyY = __tmp__Y;
		tfyZ = __tmp__Z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = tf._rotation00 * this._halfAxisZX + tf._rotation01 * this._halfAxisZY + tf._rotation02 * this._halfAxisZZ;
		__tmp__Y = tf._rotation10 * this._halfAxisZX + tf._rotation11 * this._halfAxisZY + tf._rotation12 * this._halfAxisZZ;
		__tmp__Z = tf._rotation20 * this._halfAxisZX + tf._rotation21 * this._halfAxisZY + tf._rotation22 * this._halfAxisZZ;
		tfzX = __tmp__X;
		tfzY = __tmp__Y;
		tfzZ = __tmp__Z;
		if(tfxX < 0) {
			tfxX = -tfxX;
		}
		if(tfxY < 0) {
			tfxY = -tfxY;
		}
		if(tfxZ < 0) {
			tfxZ = -tfxZ;
		}
		if(tfyX < 0) {
			tfyX = -tfyX;
		}
		if(tfyY < 0) {
			tfyY = -tfyY;
		}
		if(tfyZ < 0) {
			tfyZ = -tfyZ;
		}
		if(tfzX < 0) {
			tfzX = -tfzX;
		}
		if(tfzY < 0) {
			tfzY = -tfzY;
		}
		if(tfzZ < 0) {
			tfzZ = -tfzZ;
		}
		var tfsX;
		var tfsY;
		var tfsZ;
		tfsX = tfxX + tfyX;
		tfsY = tfxY + tfyY;
		tfsZ = tfxZ + tfyZ;
		tfsX += tfzX;
		tfsY += tfzY;
		tfsZ += tfzZ;
		aabb._minX = tf._positionX - tfsX;
		aabb._minY = tf._positionY - tfsY;
		aabb._minZ = tf._positionZ - tfsZ;
		aabb._maxX = tf._positionX + tfsX;
		aabb._maxY = tf._positionY + tfsY;
		aabb._maxZ = tf._positionZ + tfsZ;
	}
	,computeLocalSupportingVertex: function(dir,out) {
		var gjkMarginsX;
		var gjkMarginsY;
		var gjkMarginsZ;
		var coreExtentsX;
		var coreExtentsY;
		var coreExtentsZ;
		gjkMarginsX = this._gjkMargin;
		gjkMarginsY = this._gjkMargin;
		gjkMarginsZ = this._gjkMargin;
		if(!(gjkMarginsX < this._halfExtentsX)) {
			gjkMarginsX = this._halfExtentsX;
		}
		if(!(gjkMarginsY < this._halfExtentsY)) {
			gjkMarginsY = this._halfExtentsY;
		}
		if(!(gjkMarginsZ < this._halfExtentsZ)) {
			gjkMarginsZ = this._halfExtentsZ;
		}
		coreExtentsX = this._halfExtentsX - gjkMarginsX;
		coreExtentsY = this._halfExtentsY - gjkMarginsY;
		coreExtentsZ = this._halfExtentsZ - gjkMarginsZ;
		out.x = dir.x > 0 ? coreExtentsX : -coreExtentsX;
		out.y = dir.y > 0 ? coreExtentsY : -coreExtentsY;
		out.z = dir.z > 0 ? coreExtentsZ : -coreExtentsZ;
	}
	,_rayCastLocal: function(beginX,beginY,beginZ,endX,endY,endZ,hit) {
		var halfW = this._halfExtentsX;
		var halfH = this._halfExtentsY;
		var halfD = this._halfExtentsZ;
		var dx = endX - beginX;
		var dy = endY - beginY;
		var dz = endZ - beginZ;
		var tminx = 0;
		var tminy = 0;
		var tminz = 0;
		var tmaxx = 1;
		var tmaxy = 1;
		var tmaxz = 1;
		if(dx > -1e-6 && dx < 1e-6) {
			if(beginX <= -halfW || beginX >= halfW) {
				return false;
			}
		} else {
			var invDx = 1 / dx;
			var t1 = (-halfW - beginX) * invDx;
			var t2 = (halfW - beginX) * invDx;
			if(t1 > t2) {
				var tmp = t1;
				t1 = t2;
				t2 = tmp;
			}
			if(t1 > 0) {
				tminx = t1;
			}
			if(t2 < 1) {
				tmaxx = t2;
			}
		}
		if(dy > -1e-6 && dy < 1e-6) {
			if(beginY <= -halfH || beginY >= halfH) {
				return false;
			}
		} else {
			var invDy = 1 / dy;
			var t1 = (-halfH - beginY) * invDy;
			var t2 = (halfH - beginY) * invDy;
			if(t1 > t2) {
				var tmp = t1;
				t1 = t2;
				t2 = tmp;
			}
			if(t1 > 0) {
				tminy = t1;
			}
			if(t2 < 1) {
				tmaxy = t2;
			}
		}
		if(dz > -1e-6 && dz < 1e-6) {
			if(beginZ <= -halfD || beginZ >= halfD) {
				return false;
			}
		} else {
			var invDz = 1 / dz;
			var t1 = (-halfD - beginZ) * invDz;
			var t2 = (halfD - beginZ) * invDz;
			if(t1 > t2) {
				var tmp = t1;
				t1 = t2;
				t2 = tmp;
			}
			if(t1 > 0) {
				tminz = t1;
			}
			if(t2 < 1) {
				tmaxz = t2;
			}
		}
		if(tminx >= 1 || tminy >= 1 || tminz >= 1 || tmaxx <= 0 || tmaxy <= 0 || tmaxz <= 0) {
			return false;
		}
		var min = tminx;
		var max = tmaxx;
		var hitDirection = 0;
		if(tminy > min) {
			min = tminy;
			hitDirection = 1;
		}
		if(tminz > min) {
			min = tminz;
			hitDirection = 2;
		}
		if(tmaxy < max) {
			max = tmaxy;
		}
		if(tmaxz < max) {
			max = tmaxz;
		}
		if(min > max) {
			return false;
		}
		if(min == 0) {
			return false;
		}
		switch(hitDirection) {
		case 0:
			hit.normal.init(dx > 0 ? -1 : 1,0,0);
			break;
		case 1:
			hit.normal.init(0,dy > 0 ? -1 : 1,0);
			break;
		case 2:
			hit.normal.init(0,0,dz > 0 ? -1 : 1);
			break;
		}
		hit.position.init(beginX + min * dx,beginY + min * dy,beginZ + min * dz);
		hit.fraction = min;
		return true;
	}
	,__class__: oimo_collision_geometry_BoxGeometry
});
var oimo_collision_geometry_CapsuleGeometry = function(radius,halfHeight) {
	oimo_collision_geometry_ConvexGeometry.call(this,4);
	this._radius = radius;
	this._halfHeight = halfHeight;
	this._gjkMargin = this._radius;
	this._updateMass();
};
oimo_collision_geometry_CapsuleGeometry.__name__ = true;
oimo_collision_geometry_CapsuleGeometry.__super__ = oimo_collision_geometry_ConvexGeometry;
oimo_collision_geometry_CapsuleGeometry.prototype = $extend(oimo_collision_geometry_ConvexGeometry.prototype,{
	getRadius: function() {
		return this._radius;
	}
	,getHalfHeight: function() {
		return this._halfHeight;
	}
	,_updateMass: function() {
		var r2 = this._radius * this._radius;
		var hh2 = this._halfHeight * this._halfHeight;
		var cylinderVolume = 6.28318530717958 * r2 * this._halfHeight;
		var sphereVolume = 3.14159265358979 * r2 * this._radius * 4 / 3;
		this._volume = cylinderVolume + sphereVolume;
		var invVolume = this._volume == 0 ? 0 : 1 / this._volume;
		var inertiaXZ = invVolume * (cylinderVolume * (r2 * 0.25 + hh2 / 3) + sphereVolume * (r2 * 0.4 + this._halfHeight * this._radius * 0.75 + hh2));
		this._inertiaCoeff00 = inertiaXZ;
		this._inertiaCoeff01 = 0;
		this._inertiaCoeff02 = 0;
		this._inertiaCoeff10 = 0;
		this._inertiaCoeff11 = invVolume * (cylinderVolume * r2 * 0.5 + sphereVolume * r2 * 0.4);
		this._inertiaCoeff12 = 0;
		this._inertiaCoeff20 = 0;
		this._inertiaCoeff21 = 0;
		this._inertiaCoeff22 = inertiaXZ;
	}
	,_computeAabb: function(aabb,tf) {
		var radVecX;
		var radVecY;
		var radVecZ;
		radVecX = this._radius;
		radVecY = this._radius;
		radVecZ = this._radius;
		var axisX;
		var axisY;
		var axisZ;
		axisX = tf._rotation01;
		axisY = tf._rotation11;
		axisZ = tf._rotation21;
		if(axisX < 0) {
			axisX = -axisX;
		}
		if(axisY < 0) {
			axisY = -axisY;
		}
		if(axisZ < 0) {
			axisZ = -axisZ;
		}
		axisX *= this._halfHeight;
		axisY *= this._halfHeight;
		axisZ *= this._halfHeight;
		radVecX += axisX;
		radVecY += axisY;
		radVecZ += axisZ;
		aabb._minX = tf._positionX - radVecX;
		aabb._minY = tf._positionY - radVecY;
		aabb._minZ = tf._positionZ - radVecZ;
		aabb._maxX = tf._positionX + radVecX;
		aabb._maxY = tf._positionY + radVecY;
		aabb._maxZ = tf._positionZ + radVecZ;
	}
	,computeLocalSupportingVertex: function(dir,out) {
		if(dir.y > 0) {
			out.init(0,this._halfHeight,0);
		} else {
			out.init(0,-this._halfHeight,0);
		}
	}
	,_rayCastLocal: function(beginX,beginY,beginZ,endX,endY,endZ,hit) {
		var halfH = this._halfHeight;
		var dx = endX - beginX;
		var dz = endZ - beginZ;
		var tminxz = 0;
		var tmaxxz = 1;
		var a = dx * dx + dz * dz;
		var b = beginX * dx + beginZ * dz;
		var c = beginX * beginX + beginZ * beginZ - this._radius * this._radius;
		var D = b * b - a * c;
		if(D < 0) {
			return false;
		}
		if(a > 0) {
			var sqrtD = Math.sqrt(D);
			tminxz = (-b - sqrtD) / a;
			tmaxxz = (-b + sqrtD) / a;
			if(tminxz >= 1 || tmaxxz <= 0) {
				return false;
			}
		} else {
			if(c >= 0) {
				return false;
			}
			tminxz = 0;
			tmaxxz = 1;
		}
		var crossY = beginY + (endY - beginY) * tminxz;
		var min;
		if(crossY > -halfH && crossY < halfH) {
			if(tminxz > 0) {
				min = tminxz;
				var _this = hit.normal.init(beginX + dx * min,0,beginZ + dz * min);
				var invLen = Math.sqrt(_this.x * _this.x + _this.y * _this.y + _this.z * _this.z);
				if(invLen > 0) {
					invLen = 1 / invLen;
				}
				_this.x *= invLen;
				_this.y *= invLen;
				_this.z *= invLen;
				hit.position.init(beginX + min * dx,crossY,beginZ + min * dz);
				hit.fraction = min;
				return true;
			}
			return false;
		}
		var spherePosX;
		var spherePosY;
		var spherePosZ;
		var sphereToBeginX;
		var sphereToBeginY;
		var sphereToBeginZ;
		spherePosX = 0;
		spherePosY = crossY < 0 ? -halfH : halfH;
		spherePosZ = 0;
		sphereToBeginX = beginX - spherePosX;
		sphereToBeginY = beginY - spherePosY;
		sphereToBeginZ = beginZ - spherePosZ;
		var dX;
		var dY;
		var dZ;
		dX = endX - beginX;
		dY = endY - beginY;
		dZ = endZ - beginZ;
		a = dX * dX + dY * dY + dZ * dZ;
		b = sphereToBeginX * dX + sphereToBeginY * dY + sphereToBeginZ * dZ;
		c = sphereToBeginX * sphereToBeginX + sphereToBeginY * sphereToBeginY + sphereToBeginZ * sphereToBeginZ - this._radius * this._radius;
		D = b * b - a * c;
		if(D < 0) {
			return false;
		}
		var t = (-b - Math.sqrt(D)) / a;
		if(t < 0 || t > 1) {
			return false;
		}
		var hitPosX;
		var hitPosY;
		var hitPosZ;
		var hitNormalX;
		var hitNormalY;
		var hitNormalZ;
		hitPosX = sphereToBeginX + dX * t;
		hitPosY = sphereToBeginY + dY * t;
		hitPosZ = sphereToBeginZ + dZ * t;
		var l = hitPosX * hitPosX + hitPosY * hitPosY + hitPosZ * hitPosZ;
		if(l > 0) {
			l = 1 / Math.sqrt(l);
		}
		hitNormalX = hitPosX * l;
		hitNormalY = hitPosY * l;
		hitNormalZ = hitPosZ * l;
		hitPosX += spherePosX;
		hitPosY += spherePosY;
		hitPosZ += spherePosZ;
		var v = hit.position;
		v.x = hitPosX;
		v.y = hitPosY;
		v.z = hitPosZ;
		var v = hit.normal;
		v.x = hitNormalX;
		v.y = hitNormalY;
		v.z = hitNormalZ;
		hit.fraction = t;
		return true;
	}
	,__class__: oimo_collision_geometry_CapsuleGeometry
});
var oimo_collision_geometry_ConeGeometry = function(radius,halfHeight) {
	oimo_collision_geometry_ConvexGeometry.call(this,3);
	this._radius = radius;
	this._halfHeight = halfHeight;
	this.sinTheta = radius / Math.sqrt(radius * radius + 4 * halfHeight * halfHeight);
	this.cosTheta = 2 * halfHeight / Math.sqrt(radius * radius + 4 * halfHeight * halfHeight);
	this._updateMass();
};
oimo_collision_geometry_ConeGeometry.__name__ = true;
oimo_collision_geometry_ConeGeometry.__super__ = oimo_collision_geometry_ConvexGeometry;
oimo_collision_geometry_ConeGeometry.prototype = $extend(oimo_collision_geometry_ConvexGeometry.prototype,{
	getRadius: function() {
		return this._radius;
	}
	,getHalfHeight: function() {
		return this._halfHeight;
	}
	,_updateMass: function() {
		var r2 = this._radius * this._radius;
		var h2 = this._halfHeight * this._halfHeight * 4;
		this._volume = 3.14159265358979 * r2 * this._halfHeight * 2 / 3;
		this._inertiaCoeff00 = 0.05 * (3 * r2 + 2 * h2);
		this._inertiaCoeff01 = 0;
		this._inertiaCoeff02 = 0;
		this._inertiaCoeff10 = 0;
		this._inertiaCoeff11 = 0.3 * r2;
		this._inertiaCoeff12 = 0;
		this._inertiaCoeff20 = 0;
		this._inertiaCoeff21 = 0;
		this._inertiaCoeff22 = 0.05 * (3 * r2 + 2 * h2);
	}
	,_computeAabb: function(aabb,tf) {
		var axisX;
		var axisY;
		var axisZ;
		var axis2X;
		var axis2Y;
		var axis2Z;
		var ehX;
		var ehY;
		var ehZ;
		var erX;
		var erY;
		var erZ;
		axisX = tf._rotation01;
		axisY = tf._rotation11;
		axisZ = tf._rotation21;
		axis2X = axisX * axisX;
		axis2Y = axisY * axisY;
		axis2Z = axisZ * axisZ;
		erX = Math.sqrt(1 - axis2X);
		erY = Math.sqrt(1 - axis2Y);
		erZ = Math.sqrt(1 - axis2Z);
		erX *= this._radius;
		erY *= this._radius;
		erZ *= this._radius;
		ehX = axisX * this._halfHeight;
		ehY = axisY * this._halfHeight;
		ehZ = axisZ * this._halfHeight;
		var rminX;
		var rminY;
		var rminZ;
		var rmaxX;
		var rmaxY;
		var rmaxZ;
		rminX = -ehX;
		rminY = -ehY;
		rminZ = -ehZ;
		rminX -= erX;
		rminY -= erY;
		rminZ -= erZ;
		rmaxX = -ehX;
		rmaxY = -ehY;
		rmaxZ = -ehZ;
		rmaxX += erX;
		rmaxY += erY;
		rmaxZ += erZ;
		var maxX;
		var maxY;
		var maxZ;
		var minX;
		var minY;
		var minZ;
		maxX = rminX > rmaxX ? rminX : rmaxX;
		maxY = rminY > rmaxY ? rminY : rmaxY;
		maxZ = rminZ > rmaxZ ? rminZ : rmaxZ;
		if(!(maxX > ehX)) {
			maxX = ehX;
		}
		if(!(maxY > ehY)) {
			maxY = ehY;
		}
		if(!(maxZ > ehZ)) {
			maxZ = ehZ;
		}
		minX = rminX < rmaxX ? rminX : rmaxX;
		minY = rminY < rmaxY ? rminY : rmaxY;
		minZ = rminZ < rmaxZ ? rminZ : rmaxZ;
		if(!(minX < ehX)) {
			minX = ehX;
		}
		if(!(minY < ehY)) {
			minY = ehY;
		}
		if(!(minZ < ehZ)) {
			minZ = ehZ;
		}
		aabb._minX = tf._positionX + minX;
		aabb._minY = tf._positionY + minY;
		aabb._minZ = tf._positionZ + minZ;
		aabb._maxX = tf._positionX + maxX;
		aabb._maxY = tf._positionY + maxY;
		aabb._maxZ = tf._positionZ + maxZ;
	}
	,computeLocalSupportingVertex: function(dir,out) {
		var dx = dir.x;
		var dy = dir.y;
		var dz = dir.z;
		if(dy > 0 && dy * dy > this.sinTheta * this.sinTheta * (dx * dx + dy * dy + dz * dz)) {
			out.init(0,this._halfHeight - this._gjkMargin / this.sinTheta,0);
			if(out.y < 0) {
				out.y = 0;
			}
			return;
		}
		var rx = dir.x;
		var rz = dir.z;
		var len = rx * rx + rz * rz;
		var height = 2 * this._halfHeight;
		var coreRadius = (height - this._gjkMargin) / height * this._radius - this._gjkMargin / this.cosTheta;
		if(coreRadius < 0) {
			coreRadius = 0;
		}
		var invLen = len > 0 ? coreRadius / Math.sqrt(len) : 0;
		var coreHalfHeight = this._halfHeight - this._gjkMargin;
		if(coreHalfHeight < 0) {
			coreHalfHeight = 0;
		}
		out.x = rx * invLen;
		out.y = -coreHalfHeight;
		out.z = rz * invLen;
	}
	,_rayCastLocal: function(beginX,beginY,beginZ,endX,endY,endZ,hit) {
		var p1y = beginY;
		var halfH = this._halfHeight;
		var dx = endX - beginX;
		var dy = endY - beginY;
		var dz = endZ - beginZ;
		var tminy = 0;
		var tmaxy = 1;
		if(dy > -1e-6 && dy < 1e-6) {
			if(beginY <= -halfH || beginY >= halfH) {
				return false;
			}
		} else {
			var invDy = 1 / dy;
			var t1 = (-halfH - beginY) * invDy;
			var t2 = (halfH - beginY) * invDy;
			if(t1 > t2) {
				var tmp = t1;
				t1 = t2;
				t2 = tmp;
			}
			if(t1 > 0) {
				tminy = t1;
			}
			if(t2 < 1) {
				tmaxy = t2;
			}
		}
		if(tminy >= 1 || tmaxy <= 0) {
			return false;
		}
		var tminxz = 0;
		var tmaxxz = 0;
		p1y = beginY - halfH;
		var cos2 = this.cosTheta * this.cosTheta;
		var a = cos2 * (dx * dx + dy * dy + dz * dz) - dy * dy;
		var b = cos2 * (beginX * dx + p1y * dy + beginZ * dz) - p1y * dy;
		var c = cos2 * (beginX * beginX + p1y * p1y + beginZ * beginZ) - p1y * p1y;
		var D = b * b - a * c;
		if(a != 0) {
			if(D < 0) {
				return false;
			}
			var sqrtD = Math.sqrt(D);
			if(a < 0) {
				if(dy > 0) {
					tminxz = 0;
					tmaxxz = (-b + sqrtD) / a;
					if(tmaxxz <= 0) {
						return false;
					}
				} else {
					tminxz = (-b - sqrtD) / a;
					tmaxxz = 1;
					if(tminxz >= 1) {
						return false;
					}
				}
			} else {
				tminxz = (-b - sqrtD) / a;
				tmaxxz = (-b + sqrtD) / a;
				if(tminxz >= 1 || tmaxxz <= 0) {
					return false;
				}
			}
		} else {
			var t = -c / (2 * b);
			if(b > 0) {
				tminxz = 0;
				tmaxxz = t;
				if(t <= 0) {
					return false;
				}
			} else {
				tminxz = t;
				tmaxxz = 1;
				if(t >= 1) {
					return false;
				}
			}
		}
		p1y += halfH;
		var min;
		if(tmaxxz <= tminy || tmaxy <= tminxz) {
			return false;
		}
		if(tminxz < tminy) {
			min = tminy;
			if(min == 0) {
				return false;
			}
			hit.normal.init(0,dy > 0 ? -1 : 1,0);
		} else {
			min = tminxz;
			if(min == 0) {
				return false;
			}
			var _this = hit.normal.init(beginX + dx * min,0,beginZ + dz * min);
			var invLen = Math.sqrt(_this.x * _this.x + _this.y * _this.y + _this.z * _this.z);
			if(invLen > 0) {
				invLen = 1 / invLen;
			}
			_this.x *= invLen;
			_this.y *= invLen;
			_this.z *= invLen;
			var s = this.cosTheta;
			_this.x *= s;
			_this.y *= s;
			_this.z *= s;
			hit.normal.y += this.sinTheta;
		}
		hit.position.init(beginX + min * dx,p1y + min * dy,beginZ + min * dz);
		hit.fraction = min;
		return true;
	}
	,__class__: oimo_collision_geometry_ConeGeometry
});
var oimo_collision_geometry_ConvexHullGeometry = function(vertices) {
	oimo_collision_geometry_ConvexGeometry.call(this,5);
	this._numVertices = vertices.length;
	this._vertices = new Array(this._numVertices);
	this._tmpVertices = new Array(this._numVertices);
	var _g = 0;
	var _g1 = this._numVertices;
	while(_g < _g1) {
		var i = _g++;
		this._vertices[i] = vertices[i];
		this._tmpVertices[i] = new oimo_common_Vec3();
	}
	this._useGjkRayCast = true;
	this._updateMass();
};
oimo_collision_geometry_ConvexHullGeometry.__name__ = true;
oimo_collision_geometry_ConvexHullGeometry.__super__ = oimo_collision_geometry_ConvexGeometry;
oimo_collision_geometry_ConvexHullGeometry.prototype = $extend(oimo_collision_geometry_ConvexGeometry.prototype,{
	getVertices: function() {
		return this._vertices;
	}
	,_updateMass: function() {
		this._volume = 1;
		this._inertiaCoeff00 = 1;
		this._inertiaCoeff01 = 0;
		this._inertiaCoeff02 = 0;
		this._inertiaCoeff10 = 0;
		this._inertiaCoeff11 = 1;
		this._inertiaCoeff12 = 0;
		this._inertiaCoeff20 = 0;
		this._inertiaCoeff21 = 0;
		this._inertiaCoeff22 = 1;
		var minx = this._vertices[0].x;
		var miny = this._vertices[0].y;
		var minz = this._vertices[0].z;
		var maxx = this._vertices[0].x;
		var maxy = this._vertices[0].y;
		var maxz = this._vertices[0].z;
		var _g = 1;
		var _g1 = this._numVertices;
		while(_g < _g1) {
			var i = _g++;
			var vx = this._vertices[i].x;
			var vy = this._vertices[i].y;
			var vz = this._vertices[i].z;
			if(vx < minx) {
				minx = vx;
			} else if(vx > maxx) {
				maxx = vx;
			}
			if(vy < miny) {
				miny = vy;
			} else if(vy > maxy) {
				maxy = vy;
			}
			if(vz < minz) {
				minz = vz;
			} else if(vz > maxz) {
				maxz = vz;
			}
		}
		var sizex = maxx - minx;
		var sizey = maxy - miny;
		var sizez = maxz - minz;
		this._volume = sizex * sizey * sizez;
		var diffCog = ((minx + maxx) * (minx + maxx) + (miny + maxy) * (miny + maxy) + (minz + maxz) * (minz + maxz)) * 0.25;
		sizex = sizex * sizex * 0.25;
		sizey = sizey * sizey * 0.25;
		sizez = sizez * sizez * 0.25;
		this._inertiaCoeff00 = 0.33333333333333331 * (sizey + sizez) + diffCog;
		this._inertiaCoeff01 = 0;
		this._inertiaCoeff02 = 0;
		this._inertiaCoeff10 = 0;
		this._inertiaCoeff11 = 0.33333333333333331 * (sizez + sizex) + diffCog;
		this._inertiaCoeff12 = 0;
		this._inertiaCoeff20 = 0;
		this._inertiaCoeff21 = 0;
		this._inertiaCoeff22 = 0.33333333333333331 * (sizex + sizey) + diffCog;
	}
	,_computeAabb: function(aabb,tf) {
		var minX;
		var minY;
		var minZ;
		var maxX;
		var maxY;
		var maxZ;
		var marginX;
		var marginY;
		var marginZ;
		marginX = this._gjkMargin;
		marginY = this._gjkMargin;
		marginZ = this._gjkMargin;
		var localVX;
		var localVY;
		var localVZ;
		var v = this._vertices[0];
		localVX = v.x;
		localVY = v.y;
		localVZ = v.z;
		var worldVX;
		var worldVY;
		var worldVZ;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = tf._rotation00 * localVX + tf._rotation01 * localVY + tf._rotation02 * localVZ;
		__tmp__Y = tf._rotation10 * localVX + tf._rotation11 * localVY + tf._rotation12 * localVZ;
		__tmp__Z = tf._rotation20 * localVX + tf._rotation21 * localVY + tf._rotation22 * localVZ;
		worldVX = __tmp__X;
		worldVY = __tmp__Y;
		worldVZ = __tmp__Z;
		worldVX += tf._positionX;
		worldVY += tf._positionY;
		worldVZ += tf._positionZ;
		minX = worldVX;
		minY = worldVY;
		minZ = worldVZ;
		maxX = worldVX;
		maxY = worldVY;
		maxZ = worldVZ;
		var _g = 1;
		var _g1 = this._numVertices;
		while(_g < _g1) {
			var v = this._vertices[_g++];
			localVX = v.x;
			localVY = v.y;
			localVZ = v.z;
			var __tmp__X;
			var __tmp__Y;
			var __tmp__Z;
			__tmp__X = tf._rotation00 * localVX + tf._rotation01 * localVY + tf._rotation02 * localVZ;
			__tmp__Y = tf._rotation10 * localVX + tf._rotation11 * localVY + tf._rotation12 * localVZ;
			__tmp__Z = tf._rotation20 * localVX + tf._rotation21 * localVY + tf._rotation22 * localVZ;
			worldVX = __tmp__X;
			worldVY = __tmp__Y;
			worldVZ = __tmp__Z;
			worldVX += tf._positionX;
			worldVY += tf._positionY;
			worldVZ += tf._positionZ;
			if(!(minX < worldVX)) {
				minX = worldVX;
			}
			if(!(minY < worldVY)) {
				minY = worldVY;
			}
			if(!(minZ < worldVZ)) {
				minZ = worldVZ;
			}
			if(!(maxX > worldVX)) {
				maxX = worldVX;
			}
			if(!(maxY > worldVY)) {
				maxY = worldVY;
			}
			if(!(maxZ > worldVZ)) {
				maxZ = worldVZ;
			}
		}
		aabb._minX = minX - marginX;
		aabb._minY = minY - marginY;
		aabb._minZ = minZ - marginZ;
		aabb._maxX = maxX + marginX;
		aabb._maxY = maxY + marginY;
		aabb._maxZ = maxZ + marginZ;
	}
	,computeLocalSupportingVertex: function(dir,out) {
		var _this = this._vertices[0];
		var maxDot = _this.x * dir.x + _this.y * dir.y + _this.z * dir.z;
		var maxIndex = 0;
		var _g = 1;
		var _g1 = this._numVertices;
		while(_g < _g1) {
			var i = _g++;
			var _this = this._vertices[i];
			var dot = _this.x * dir.x + _this.y * dir.y + _this.z * dir.z;
			if(dot > maxDot) {
				maxDot = dot;
				maxIndex = i;
			}
		}
		var v = this._vertices[maxIndex];
		out.x = v.x;
		out.y = v.y;
		out.z = v.z;
	}
	,__class__: oimo_collision_geometry_ConvexHullGeometry
});
var oimo_collision_geometry_CylinderGeometry = function(radius,halfHeight) {
	oimo_collision_geometry_ConvexGeometry.call(this,2);
	this._radius = radius;
	this._halfHeight = halfHeight;
	this._updateMass();
};
oimo_collision_geometry_CylinderGeometry.__name__ = true;
oimo_collision_geometry_CylinderGeometry.__super__ = oimo_collision_geometry_ConvexGeometry;
oimo_collision_geometry_CylinderGeometry.prototype = $extend(oimo_collision_geometry_ConvexGeometry.prototype,{
	getRadius: function() {
		return this._radius;
	}
	,getHalfHeight: function() {
		return this._halfHeight;
	}
	,_updateMass: function() {
		var r2 = this._radius * this._radius;
		var h2 = this._halfHeight * this._halfHeight * 4;
		this._volume = 3.14159265358979 * r2 * this._halfHeight * 2;
		this._inertiaCoeff00 = 0.083333333333333329 * (3 * r2 + h2);
		this._inertiaCoeff01 = 0;
		this._inertiaCoeff02 = 0;
		this._inertiaCoeff10 = 0;
		this._inertiaCoeff11 = 0.5 * r2;
		this._inertiaCoeff12 = 0;
		this._inertiaCoeff20 = 0;
		this._inertiaCoeff21 = 0;
		this._inertiaCoeff22 = 0.083333333333333329 * (3 * r2 + h2);
	}
	,_computeAabb: function(aabb,tf) {
		var axisX;
		var axisY;
		var axisZ;
		var axis2X;
		var axis2Y;
		var axis2Z;
		var ehX;
		var ehY;
		var ehZ;
		var erX;
		var erY;
		var erZ;
		axisX = tf._rotation01;
		axisY = tf._rotation11;
		axisZ = tf._rotation21;
		if(axisX < 0) {
			axisX = -axisX;
		}
		if(axisY < 0) {
			axisY = -axisY;
		}
		if(axisZ < 0) {
			axisZ = -axisZ;
		}
		axis2X = axisX * axisX;
		axis2Y = axisY * axisY;
		axis2Z = axisZ * axisZ;
		erX = Math.sqrt(1 - axis2X);
		erY = Math.sqrt(1 - axis2Y);
		erZ = Math.sqrt(1 - axis2Z);
		erX *= this._radius;
		erY *= this._radius;
		erZ *= this._radius;
		ehX = axisX * this._halfHeight;
		ehY = axisY * this._halfHeight;
		ehZ = axisZ * this._halfHeight;
		var maxX;
		var maxY;
		var maxZ;
		maxX = erX + ehX;
		maxY = erY + ehY;
		maxZ = erZ + ehZ;
		aabb._minX = tf._positionX - maxX;
		aabb._minY = tf._positionY - maxY;
		aabb._minZ = tf._positionZ - maxZ;
		aabb._maxX = tf._positionX + maxX;
		aabb._maxY = tf._positionY + maxY;
		aabb._maxZ = tf._positionZ + maxZ;
	}
	,computeLocalSupportingVertex: function(dir,out) {
		var rx = dir.x;
		var rz = dir.z;
		var len = rx * rx + rz * rz;
		var coreRadius = this._radius - this._gjkMargin;
		if(coreRadius < 0) {
			coreRadius = 0;
		}
		var invLen = len > 0 ? coreRadius / Math.sqrt(len) : 0;
		var coreHeight = this._halfHeight - this._gjkMargin;
		if(coreHeight < 0) {
			coreHeight = 0;
		}
		out.x = rx * invLen;
		out.y = dir.y > 0 ? coreHeight : -coreHeight;
		out.z = rz * invLen;
	}
	,_rayCastLocal: function(beginX,beginY,beginZ,endX,endY,endZ,hit) {
		var halfH = this._halfHeight;
		var dx = endX - beginX;
		var dy = endY - beginY;
		var dz = endZ - beginZ;
		var tminy = 0;
		var tmaxy = 1;
		if(dy > -1e-6 && dy < 1e-6) {
			if(beginY <= -halfH || beginY >= halfH) {
				return false;
			}
		} else {
			var invDy = 1 / dy;
			var t1 = (-halfH - beginY) * invDy;
			var t2 = (halfH - beginY) * invDy;
			if(t1 > t2) {
				var tmp = t1;
				t1 = t2;
				t2 = tmp;
			}
			if(t1 > 0) {
				tminy = t1;
			}
			if(t2 < 1) {
				tmaxy = t2;
			}
		}
		if(tminy >= 1 || tmaxy <= 0) {
			return false;
		}
		var tminxz = 0;
		var tmaxxz = 1;
		var a = dx * dx + dz * dz;
		var b = beginX * dx + beginZ * dz;
		var c = beginX * beginX + beginZ * beginZ - this._radius * this._radius;
		var D = b * b - a * c;
		if(D < 0) {
			return false;
		}
		if(a > 0) {
			var sqrtD = Math.sqrt(D);
			tminxz = (-b - sqrtD) / a;
			tmaxxz = (-b + sqrtD) / a;
			if(tminxz >= 1 || tmaxxz <= 0) {
				return false;
			}
		} else {
			if(c >= 0) {
				return false;
			}
			tminxz = 0;
			tmaxxz = 1;
		}
		var min;
		if(tmaxxz <= tminy || tmaxy <= tminxz) {
			return false;
		}
		if(tminxz < tminy) {
			min = tminy;
			if(min == 0) {
				return false;
			}
			hit.normal.init(0,dy > 0 ? -1 : 1,0);
		} else {
			min = tminxz;
			if(min == 0) {
				return false;
			}
			var _this = hit.normal.init(beginX + dx * min,0,beginZ + dz * min);
			var invLen = Math.sqrt(_this.x * _this.x + _this.y * _this.y + _this.z * _this.z);
			if(invLen > 0) {
				invLen = 1 / invLen;
			}
			_this.x *= invLen;
			_this.y *= invLen;
			_this.z *= invLen;
		}
		hit.position.init(beginX + min * dx,beginY + min * dy,beginZ + min * dz);
		hit.fraction = min;
		return true;
	}
	,__class__: oimo_collision_geometry_CylinderGeometry
});
var oimo_collision_geometry_GeometryType = function() { };
oimo_collision_geometry_GeometryType.__name__ = true;
var oimo_collision_geometry_RayCastHit = function() {
	this.position = new oimo_common_Vec3();
	this.normal = new oimo_common_Vec3();
	this.fraction = 0;
};
oimo_collision_geometry_RayCastHit.__name__ = true;
oimo_collision_geometry_RayCastHit.prototype = {
	__class__: oimo_collision_geometry_RayCastHit
};
var oimo_collision_geometry_SphereGeometry = function(radius) {
	oimo_collision_geometry_ConvexGeometry.call(this,0);
	this._radius = radius;
	this._gjkMargin = this._radius;
	this._updateMass();
};
oimo_collision_geometry_SphereGeometry.__name__ = true;
oimo_collision_geometry_SphereGeometry.__super__ = oimo_collision_geometry_ConvexGeometry;
oimo_collision_geometry_SphereGeometry.prototype = $extend(oimo_collision_geometry_ConvexGeometry.prototype,{
	getRadius: function() {
		return this._radius;
	}
	,_updateMass: function() {
		this._volume = 4.1887902047863861 * this._radius * this._radius * this._radius;
		this._inertiaCoeff00 = 0.4 * this._radius * this._radius;
		this._inertiaCoeff01 = 0;
		this._inertiaCoeff02 = 0;
		this._inertiaCoeff10 = 0;
		this._inertiaCoeff11 = 0.4 * this._radius * this._radius;
		this._inertiaCoeff12 = 0;
		this._inertiaCoeff20 = 0;
		this._inertiaCoeff21 = 0;
		this._inertiaCoeff22 = 0.4 * this._radius * this._radius;
	}
	,_computeAabb: function(aabb,tf) {
		var radVecX;
		var radVecY;
		var radVecZ;
		radVecX = this._radius;
		radVecY = this._radius;
		radVecZ = this._radius;
		aabb._minX = tf._positionX - radVecX;
		aabb._minY = tf._positionY - radVecY;
		aabb._minZ = tf._positionZ - radVecZ;
		aabb._maxX = tf._positionX + radVecX;
		aabb._maxY = tf._positionY + radVecY;
		aabb._maxZ = tf._positionZ + radVecZ;
	}
	,computeLocalSupportingVertex: function(dir,out) {
		out.zero();
	}
	,_rayCastLocal: function(beginX,beginY,beginZ,endX,endY,endZ,hit) {
		var dX;
		var dY;
		var dZ;
		dX = endX - beginX;
		dY = endY - beginY;
		dZ = endZ - beginZ;
		var a = dX * dX + dY * dY + dZ * dZ;
		var b = beginX * dX + beginY * dY + beginZ * dZ;
		var D = b * b - a * (beginX * beginX + beginY * beginY + beginZ * beginZ - this._radius * this._radius);
		if(D < 0) {
			return false;
		}
		var t = (-b - Math.sqrt(D)) / a;
		if(t < 0 || t > 1) {
			return false;
		}
		var hitPosX;
		var hitPosY;
		var hitPosZ;
		var hitNormalX;
		var hitNormalY;
		var hitNormalZ;
		hitPosX = beginX + dX * t;
		hitPosY = beginY + dY * t;
		hitPosZ = beginZ + dZ * t;
		var l = hitPosX * hitPosX + hitPosY * hitPosY + hitPosZ * hitPosZ;
		if(l > 0) {
			l = 1 / Math.sqrt(l);
		}
		hitNormalX = hitPosX * l;
		hitNormalY = hitPosY * l;
		hitNormalZ = hitPosZ * l;
		var v = hit.position;
		v.x = hitPosX;
		v.y = hitPosY;
		v.z = hitPosZ;
		var v = hit.normal;
		v.x = hitNormalX;
		v.y = hitNormalY;
		v.z = hitNormalZ;
		hit.fraction = t;
		return true;
	}
	,__class__: oimo_collision_geometry_SphereGeometry
});
var oimo_collision_narrowphase_CollisionMatrix = function() {
	this.detectors = new Array(8);
	this.detectors[0] = new Array(8);
	this.detectors[1] = new Array(8);
	this.detectors[2] = new Array(8);
	this.detectors[3] = new Array(8);
	this.detectors[4] = new Array(8);
	this.detectors[5] = new Array(8);
	var gjkEpaDetector = new oimo_collision_narrowphase_detector_GjkEpaDetector();
	this.detectors[0][0] = new oimo_collision_narrowphase_detector_SphereSphereDetector();
	this.detectors[0][1] = new oimo_collision_narrowphase_detector_SphereBoxDetector(false);
	this.detectors[0][2] = gjkEpaDetector;
	this.detectors[0][3] = gjkEpaDetector;
	this.detectors[0][4] = new oimo_collision_narrowphase_detector_SphereCapsuleDetector(false);
	this.detectors[0][5] = gjkEpaDetector;
	this.detectors[1][0] = new oimo_collision_narrowphase_detector_SphereBoxDetector(true);
	this.detectors[1][1] = new oimo_collision_narrowphase_detector_BoxBoxDetector();
	this.detectors[1][2] = gjkEpaDetector;
	this.detectors[1][3] = gjkEpaDetector;
	this.detectors[1][4] = gjkEpaDetector;
	this.detectors[1][5] = gjkEpaDetector;
	this.detectors[2][0] = gjkEpaDetector;
	this.detectors[2][1] = gjkEpaDetector;
	this.detectors[2][2] = gjkEpaDetector;
	this.detectors[2][3] = gjkEpaDetector;
	this.detectors[2][4] = gjkEpaDetector;
	this.detectors[2][5] = gjkEpaDetector;
	this.detectors[3][0] = gjkEpaDetector;
	this.detectors[3][1] = gjkEpaDetector;
	this.detectors[3][2] = gjkEpaDetector;
	this.detectors[3][3] = gjkEpaDetector;
	this.detectors[3][4] = gjkEpaDetector;
	this.detectors[3][5] = gjkEpaDetector;
	this.detectors[4][0] = new oimo_collision_narrowphase_detector_SphereCapsuleDetector(true);
	this.detectors[4][1] = gjkEpaDetector;
	this.detectors[4][2] = gjkEpaDetector;
	this.detectors[4][3] = gjkEpaDetector;
	this.detectors[4][4] = new oimo_collision_narrowphase_detector_CapsuleCapsuleDetector();
	this.detectors[4][5] = gjkEpaDetector;
	this.detectors[5][0] = gjkEpaDetector;
	this.detectors[5][1] = gjkEpaDetector;
	this.detectors[5][2] = gjkEpaDetector;
	this.detectors[5][3] = gjkEpaDetector;
	this.detectors[5][4] = gjkEpaDetector;
	this.detectors[5][5] = gjkEpaDetector;
};
oimo_collision_narrowphase_CollisionMatrix.__name__ = true;
oimo_collision_narrowphase_CollisionMatrix.prototype = {
	getDetector: function(geomType1,geomType2) {
		return this.detectors[geomType1][geomType2];
	}
	,__class__: oimo_collision_narrowphase_CollisionMatrix
};
var oimo_collision_narrowphase_DetectorResult = function() {
	this.numPoints = 0;
	this.normal = new oimo_common_Vec3();
	this.points = new Array(oimo_common_Setting.maxManifoldPoints);
	this.incremental = false;
	var _g = 0;
	var _g1 = oimo_common_Setting.maxManifoldPoints;
	while(_g < _g1) this.points[_g++] = new oimo_collision_narrowphase_DetectorResultPoint();
};
oimo_collision_narrowphase_DetectorResult.__name__ = true;
oimo_collision_narrowphase_DetectorResult.prototype = {
	getMaxDepth: function() {
		var max = 0;
		var _g = 0;
		var _g1 = this.numPoints;
		while(_g < _g1) {
			var i = _g++;
			if(this.points[i].depth > max) {
				max = this.points[i].depth;
			}
		}
		return max;
	}
	,clear: function() {
		this.numPoints = 0;
		var _g = 0;
		var _g1 = this.points;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			p.position1.zero();
			p.position2.zero();
			p.depth = 0;
			p.id = 0;
		}
		this.normal.zero();
	}
	,__class__: oimo_collision_narrowphase_DetectorResult
};
var oimo_collision_narrowphase_DetectorResultPoint = function() {
	this.position1 = new oimo_common_Vec3();
	this.position2 = new oimo_common_Vec3();
	this.depth = 0;
	this.id = 0;
};
oimo_collision_narrowphase_DetectorResultPoint.__name__ = true;
oimo_collision_narrowphase_DetectorResultPoint.prototype = {
	__class__: oimo_collision_narrowphase_DetectorResultPoint
};
var oimo_collision_narrowphase_detector_Detector = function(swapped) {
	this.swapped = swapped;
};
oimo_collision_narrowphase_detector_Detector.__name__ = true;
oimo_collision_narrowphase_detector_Detector.prototype = {
	setNormal: function(result,nX,nY,nZ) {
		var v = result.normal;
		v.x = nX;
		v.y = nY;
		v.z = nZ;
		if(this.swapped) {
			var _this = result.normal;
			_this.x = -_this.x;
			_this.y = -_this.y;
			_this.z = -_this.z;
		}
	}
	,addPoint: function(result,pos1X,pos1Y,pos1Z,pos2X,pos2Y,pos2Z,depth,id) {
		var p = result.points[result.numPoints++];
		p.depth = depth;
		p.id = id;
		if(this.swapped) {
			var v = p.position1;
			v.x = pos2X;
			v.y = pos2Y;
			v.z = pos2Z;
			var v = p.position2;
			v.x = pos1X;
			v.y = pos1Y;
			v.z = pos1Z;
		} else {
			var v = p.position1;
			v.x = pos1X;
			v.y = pos1Y;
			v.z = pos1Z;
			var v = p.position2;
			v.x = pos2X;
			v.y = pos2Y;
			v.z = pos2Z;
		}
	}
	,detectImpl: function(result,geom1,geom2,tf1,tf2,cachedData) {
	}
	,detect: function(result,geom1,geom2,transform1,transform2,cachedData) {
		result.numPoints = 0;
		var _g = 0;
		var _g1 = result.points;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			p.position1.zero();
			p.position2.zero();
			p.depth = 0;
			p.id = 0;
		}
		result.normal.zero();
		if(this.swapped) {
			this.detectImpl(result,geom2,geom1,transform2,transform1,cachedData);
		} else {
			this.detectImpl(result,geom1,geom2,transform1,transform2,cachedData);
		}
	}
	,__class__: oimo_collision_narrowphase_detector_Detector
};
var oimo_collision_narrowphase_detector_BoxBoxDetector = function() {
	oimo_collision_narrowphase_detector_Detector.call(this,false);
	this.clipper = new oimo_collision_narrowphase_detector__$BoxBoxDetector_FaceClipper();
};
oimo_collision_narrowphase_detector_BoxBoxDetector.__name__ = true;
oimo_collision_narrowphase_detector_BoxBoxDetector.__super__ = oimo_collision_narrowphase_detector_Detector;
oimo_collision_narrowphase_detector_BoxBoxDetector.prototype = $extend(oimo_collision_narrowphase_detector_Detector.prototype,{
	detectImpl: function(result,geom1,geom2,tf1,tf2,cachedData) {
		var b1 = geom1;
		var b2 = geom2;
		result.incremental = false;
		var c1X;
		var c1Y;
		var c1Z;
		var c2X;
		var c2Y;
		var c2Z;
		var c12X;
		var c12Y;
		var c12Z;
		c1X = tf1._positionX;
		c1Y = tf1._positionY;
		c1Z = tf1._positionZ;
		c2X = tf2._positionX;
		c2Y = tf2._positionY;
		c2Z = tf2._positionZ;
		c12X = c2X - c1X;
		c12Y = c2Y - c1Y;
		c12Z = c2Z - c1Z;
		var x1X;
		var x1Y;
		var x1Z;
		var y1X;
		var y1Y;
		var y1Z;
		var z1X;
		var z1Y;
		var z1Z;
		var x2X;
		var x2Y;
		var x2Z;
		var y2X;
		var y2Y;
		var y2Z;
		var z2X;
		var z2Y;
		var z2Z;
		x1X = tf1._rotation00;
		x1Y = tf1._rotation10;
		x1Z = tf1._rotation20;
		y1X = tf1._rotation01;
		y1Y = tf1._rotation11;
		y1Z = tf1._rotation21;
		z1X = tf1._rotation02;
		z1Y = tf1._rotation12;
		z1Z = tf1._rotation22;
		x2X = tf2._rotation00;
		x2Y = tf2._rotation10;
		x2Z = tf2._rotation20;
		y2X = tf2._rotation01;
		y2Y = tf2._rotation11;
		y2Z = tf2._rotation21;
		z2X = tf2._rotation02;
		z2Y = tf2._rotation12;
		z2Z = tf2._rotation22;
		var w1 = b1._halfExtentsX;
		var h1 = b1._halfExtentsY;
		var d1 = b1._halfExtentsZ;
		var w2 = b2._halfExtentsX;
		var h2 = b2._halfExtentsY;
		var d2 = b2._halfExtentsZ;
		var sx1X;
		var sx1Y;
		var sx1Z;
		var sy1X;
		var sy1Y;
		var sy1Z;
		var sz1X;
		var sz1Y;
		var sz1Z;
		var sx2X;
		var sx2Y;
		var sx2Z;
		var sy2X;
		var sy2Y;
		var sy2Z;
		var sz2X;
		var sz2Y;
		var sz2Z;
		sx1X = x1X * w1;
		sx1Y = x1Y * w1;
		sx1Z = x1Z * w1;
		sy1X = y1X * h1;
		sy1Y = y1Y * h1;
		sy1Z = y1Z * h1;
		sz1X = z1X * d1;
		sz1Y = z1Y * d1;
		sz1Z = z1Z * d1;
		sx2X = x2X * w2;
		sx2Y = x2Y * w2;
		sx2Z = x2Z * w2;
		sy2X = y2X * h2;
		sy2Y = y2Y * h2;
		sy2Z = y2Z * h2;
		sz2X = z2X * d2;
		sz2Y = z2Y * d2;
		sz2Z = z2Z * d2;
		var mDepth = 1e65536;
		var mId = -1;
		var mSign = 0;
		var mAxisX;
		var mAxisY;
		var mAxisZ;
		mAxisX = 0;
		mAxisY = 0;
		mAxisZ = 0;
		var proj1 = w1;
		var dx = x1X * sx2X + x1Y * sx2Y + x1Z * sx2Z;
		var dy = x1X * sy2X + x1Y * sy2Y + x1Z * sy2Z;
		var dz = x1X * sz2X + x1Y * sz2Y + x1Z * sz2Z;
		if(dx < 0) {
			dx = -dx;
		}
		if(dy < 0) {
			dy = -dy;
		}
		if(dz < 0) {
			dz = -dz;
		}
		var proj2 = dx + dy + dz;
		var projC12 = x1X * c12X + x1Y * c12Y + x1Z * c12Z;
		var sum = proj1 + proj2;
		var neg = projC12 < 0;
		var abs = neg ? -projC12 : projC12;
		if(abs < sum) {
			var depth = sum - abs;
			if(depth < 1e65536) {
				mDepth = depth;
				mId = 0;
				mAxisX = x1X;
				mAxisY = x1Y;
				mAxisZ = x1Z;
				mSign = neg ? -1 : 1;
			}
		} else {
			return;
		}
		proj1 = h1;
		var dx = y1X * sx2X + y1Y * sx2Y + y1Z * sx2Z;
		var dy = y1X * sy2X + y1Y * sy2Y + y1Z * sy2Z;
		var dz = y1X * sz2X + y1Y * sz2Y + y1Z * sz2Z;
		if(dx < 0) {
			dx = -dx;
		}
		if(dy < 0) {
			dy = -dy;
		}
		if(dz < 0) {
			dz = -dz;
		}
		proj2 = dx + dy + dz;
		projC12 = y1X * c12X + y1Y * c12Y + y1Z * c12Z;
		var sum = proj1 + proj2;
		var neg = projC12 < 0;
		var abs = neg ? -projC12 : projC12;
		if(abs < sum) {
			var depth = sum - abs;
			if(depth < mDepth) {
				mDepth = depth;
				mId = 1;
				mAxisX = y1X;
				mAxisY = y1Y;
				mAxisZ = y1Z;
				mSign = neg ? -1 : 1;
			}
		} else {
			return;
		}
		proj1 = d1;
		var dx = z1X * sx2X + z1Y * sx2Y + z1Z * sx2Z;
		var dy = z1X * sy2X + z1Y * sy2Y + z1Z * sy2Z;
		var dz = z1X * sz2X + z1Y * sz2Y + z1Z * sz2Z;
		if(dx < 0) {
			dx = -dx;
		}
		if(dy < 0) {
			dy = -dy;
		}
		if(dz < 0) {
			dz = -dz;
		}
		proj2 = dx + dy + dz;
		projC12 = z1X * c12X + z1Y * c12Y + z1Z * c12Z;
		var sum = proj1 + proj2;
		var neg = projC12 < 0;
		var abs = neg ? -projC12 : projC12;
		if(abs < sum) {
			var depth = sum - abs;
			if(depth < mDepth) {
				mDepth = depth;
				mId = 2;
				mAxisX = z1X;
				mAxisY = z1Y;
				mAxisZ = z1Z;
				mSign = neg ? -1 : 1;
			}
		} else {
			return;
		}
		if(mDepth > oimo_common_Setting.linearSlop) {
			mDepth -= oimo_common_Setting.linearSlop;
		} else {
			mDepth = 0;
		}
		var dx = x2X * sx1X + x2Y * sx1Y + x2Z * sx1Z;
		var dy = x2X * sy1X + x2Y * sy1Y + x2Z * sy1Z;
		var dz = x2X * sz1X + x2Y * sz1Y + x2Z * sz1Z;
		if(dx < 0) {
			dx = -dx;
		}
		if(dy < 0) {
			dy = -dy;
		}
		if(dz < 0) {
			dz = -dz;
		}
		proj1 = dx + dy + dz;
		proj2 = w2;
		projC12 = x2X * c12X + x2Y * c12Y + x2Z * c12Z;
		var sum = proj1 + proj2;
		var neg = projC12 < 0;
		var abs = neg ? -projC12 : projC12;
		if(abs < sum) {
			var depth = sum - abs;
			if(depth < mDepth) {
				mDepth = depth;
				mId = 3;
				mAxisX = x2X;
				mAxisY = x2Y;
				mAxisZ = x2Z;
				mSign = neg ? -1 : 1;
			}
		} else {
			return;
		}
		var dx = y2X * sx1X + y2Y * sx1Y + y2Z * sx1Z;
		var dy = y2X * sy1X + y2Y * sy1Y + y2Z * sy1Z;
		var dz = y2X * sz1X + y2Y * sz1Y + y2Z * sz1Z;
		if(dx < 0) {
			dx = -dx;
		}
		if(dy < 0) {
			dy = -dy;
		}
		if(dz < 0) {
			dz = -dz;
		}
		proj1 = dx + dy + dz;
		proj2 = h2;
		projC12 = y2X * c12X + y2Y * c12Y + y2Z * c12Z;
		var sum = proj1 + proj2;
		var neg = projC12 < 0;
		var abs = neg ? -projC12 : projC12;
		if(abs < sum) {
			var depth = sum - abs;
			if(depth < mDepth) {
				mDepth = depth;
				mId = 4;
				mAxisX = y2X;
				mAxisY = y2Y;
				mAxisZ = y2Z;
				mSign = neg ? -1 : 1;
			}
		} else {
			return;
		}
		var dx = z2X * sx1X + z2Y * sx1Y + z2Z * sx1Z;
		var dy = z2X * sy1X + z2Y * sy1Y + z2Z * sy1Z;
		var dz = z2X * sz1X + z2Y * sz1Y + z2Z * sz1Z;
		if(dx < 0) {
			dx = -dx;
		}
		if(dy < 0) {
			dy = -dy;
		}
		if(dz < 0) {
			dz = -dz;
		}
		proj1 = dx + dy + dz;
		proj2 = d2;
		projC12 = z2X * c12X + z2Y * c12Y + z2Z * c12Z;
		var sum = proj1 + proj2;
		var neg = projC12 < 0;
		var abs = neg ? -projC12 : projC12;
		if(abs < sum) {
			var depth = sum - abs;
			if(depth < mDepth) {
				mDepth = depth;
				mId = 5;
				mAxisX = z2X;
				mAxisY = z2Y;
				mAxisZ = z2Z;
				mSign = neg ? -1 : 1;
			}
		} else {
			return;
		}
		if(mDepth > oimo_common_Setting.linearSlop) {
			mDepth -= oimo_common_Setting.linearSlop;
		} else {
			mDepth = 0;
		}
		var edgeAxisX;
		var edgeAxisY;
		var edgeAxisZ;
		edgeAxisX = x1Y * x2Z - x1Z * x2Y;
		edgeAxisY = x1Z * x2X - x1X * x2Z;
		edgeAxisZ = x1X * x2Y - x1Y * x2X;
		if(!(edgeAxisX == 0 && edgeAxisY == 0 && edgeAxisZ == 0)) {
			var l = edgeAxisX * edgeAxisX + edgeAxisY * edgeAxisY + edgeAxisZ * edgeAxisZ;
			if(l > 0) {
				l = 1 / Math.sqrt(l);
			}
			edgeAxisX *= l;
			edgeAxisY *= l;
			edgeAxisZ *= l;
			var dx = edgeAxisX * sy1X + edgeAxisY * sy1Y + edgeAxisZ * sy1Z;
			var dy = edgeAxisX * sz1X + edgeAxisY * sz1Y + edgeAxisZ * sz1Z;
			if(dx < 0) {
				dx = -dx;
			}
			if(dy < 0) {
				dy = -dy;
			}
			proj1 = dx + dy;
			var dx = edgeAxisX * sy2X + edgeAxisY * sy2Y + edgeAxisZ * sy2Z;
			var dy = edgeAxisX * sz2X + edgeAxisY * sz2Y + edgeAxisZ * sz2Z;
			if(dx < 0) {
				dx = -dx;
			}
			if(dy < 0) {
				dy = -dy;
			}
			proj2 = dx + dy;
			projC12 = edgeAxisX * c12X + edgeAxisY * c12Y + edgeAxisZ * c12Z;
			var sum = proj1 + proj2;
			var neg = projC12 < 0;
			var abs = neg ? -projC12 : projC12;
			if(abs < sum) {
				var depth = sum - abs;
				if(depth < mDepth) {
					mDepth = depth;
					mId = 6;
					mAxisX = edgeAxisX;
					mAxisY = edgeAxisY;
					mAxisZ = edgeAxisZ;
					mSign = neg ? -1 : 1;
				}
			} else {
				return;
			}
		}
		edgeAxisX = x1Y * y2Z - x1Z * y2Y;
		edgeAxisY = x1Z * y2X - x1X * y2Z;
		edgeAxisZ = x1X * y2Y - x1Y * y2X;
		if(!(edgeAxisX == 0 && edgeAxisY == 0 && edgeAxisZ == 0)) {
			var l = edgeAxisX * edgeAxisX + edgeAxisY * edgeAxisY + edgeAxisZ * edgeAxisZ;
			if(l > 0) {
				l = 1 / Math.sqrt(l);
			}
			edgeAxisX *= l;
			edgeAxisY *= l;
			edgeAxisZ *= l;
			var dx = edgeAxisX * sy1X + edgeAxisY * sy1Y + edgeAxisZ * sy1Z;
			var dy = edgeAxisX * sz1X + edgeAxisY * sz1Y + edgeAxisZ * sz1Z;
			if(dx < 0) {
				dx = -dx;
			}
			if(dy < 0) {
				dy = -dy;
			}
			proj1 = dx + dy;
			var dx = edgeAxisX * sx2X + edgeAxisY * sx2Y + edgeAxisZ * sx2Z;
			var dy = edgeAxisX * sz2X + edgeAxisY * sz2Y + edgeAxisZ * sz2Z;
			if(dx < 0) {
				dx = -dx;
			}
			if(dy < 0) {
				dy = -dy;
			}
			proj2 = dx + dy;
			projC12 = edgeAxisX * c12X + edgeAxisY * c12Y + edgeAxisZ * c12Z;
			var sum = proj1 + proj2;
			var neg = projC12 < 0;
			var abs = neg ? -projC12 : projC12;
			if(abs < sum) {
				var depth = sum - abs;
				if(depth < mDepth) {
					mDepth = depth;
					mId = 7;
					mAxisX = edgeAxisX;
					mAxisY = edgeAxisY;
					mAxisZ = edgeAxisZ;
					mSign = neg ? -1 : 1;
				}
			} else {
				return;
			}
		}
		edgeAxisX = x1Y * z2Z - x1Z * z2Y;
		edgeAxisY = x1Z * z2X - x1X * z2Z;
		edgeAxisZ = x1X * z2Y - x1Y * z2X;
		if(!(edgeAxisX == 0 && edgeAxisY == 0 && edgeAxisZ == 0)) {
			var l = edgeAxisX * edgeAxisX + edgeAxisY * edgeAxisY + edgeAxisZ * edgeAxisZ;
			if(l > 0) {
				l = 1 / Math.sqrt(l);
			}
			edgeAxisX *= l;
			edgeAxisY *= l;
			edgeAxisZ *= l;
			var dx = edgeAxisX * sy1X + edgeAxisY * sy1Y + edgeAxisZ * sy1Z;
			var dy = edgeAxisX * sz1X + edgeAxisY * sz1Y + edgeAxisZ * sz1Z;
			if(dx < 0) {
				dx = -dx;
			}
			if(dy < 0) {
				dy = -dy;
			}
			proj1 = dx + dy;
			var dx = edgeAxisX * sx2X + edgeAxisY * sx2Y + edgeAxisZ * sx2Z;
			var dy = edgeAxisX * sy2X + edgeAxisY * sy2Y + edgeAxisZ * sy2Z;
			if(dx < 0) {
				dx = -dx;
			}
			if(dy < 0) {
				dy = -dy;
			}
			proj2 = dx + dy;
			projC12 = edgeAxisX * c12X + edgeAxisY * c12Y + edgeAxisZ * c12Z;
			var sum = proj1 + proj2;
			var neg = projC12 < 0;
			var abs = neg ? -projC12 : projC12;
			if(abs < sum) {
				var depth = sum - abs;
				if(depth < mDepth) {
					mDepth = depth;
					mId = 8;
					mAxisX = edgeAxisX;
					mAxisY = edgeAxisY;
					mAxisZ = edgeAxisZ;
					mSign = neg ? -1 : 1;
				}
			} else {
				return;
			}
		}
		edgeAxisX = y1Y * x2Z - y1Z * x2Y;
		edgeAxisY = y1Z * x2X - y1X * x2Z;
		edgeAxisZ = y1X * x2Y - y1Y * x2X;
		if(!(edgeAxisX == 0 && edgeAxisY == 0 && edgeAxisZ == 0)) {
			var l = edgeAxisX * edgeAxisX + edgeAxisY * edgeAxisY + edgeAxisZ * edgeAxisZ;
			if(l > 0) {
				l = 1 / Math.sqrt(l);
			}
			edgeAxisX *= l;
			edgeAxisY *= l;
			edgeAxisZ *= l;
			var dx = edgeAxisX * sx1X + edgeAxisY * sx1Y + edgeAxisZ * sx1Z;
			var dy = edgeAxisX * sz1X + edgeAxisY * sz1Y + edgeAxisZ * sz1Z;
			if(dx < 0) {
				dx = -dx;
			}
			if(dy < 0) {
				dy = -dy;
			}
			proj1 = dx + dy;
			var dx = edgeAxisX * sy2X + edgeAxisY * sy2Y + edgeAxisZ * sy2Z;
			var dy = edgeAxisX * sz2X + edgeAxisY * sz2Y + edgeAxisZ * sz2Z;
			if(dx < 0) {
				dx = -dx;
			}
			if(dy < 0) {
				dy = -dy;
			}
			proj2 = dx + dy;
			projC12 = edgeAxisX * c12X + edgeAxisY * c12Y + edgeAxisZ * c12Z;
			var sum = proj1 + proj2;
			var neg = projC12 < 0;
			var abs = neg ? -projC12 : projC12;
			if(abs < sum) {
				var depth = sum - abs;
				if(depth < mDepth) {
					mDepth = depth;
					mId = 9;
					mAxisX = edgeAxisX;
					mAxisY = edgeAxisY;
					mAxisZ = edgeAxisZ;
					mSign = neg ? -1 : 1;
				}
			} else {
				return;
			}
		}
		edgeAxisX = y1Y * y2Z - y1Z * y2Y;
		edgeAxisY = y1Z * y2X - y1X * y2Z;
		edgeAxisZ = y1X * y2Y - y1Y * y2X;
		if(!(edgeAxisX == 0 && edgeAxisY == 0 && edgeAxisZ == 0)) {
			var l = edgeAxisX * edgeAxisX + edgeAxisY * edgeAxisY + edgeAxisZ * edgeAxisZ;
			if(l > 0) {
				l = 1 / Math.sqrt(l);
			}
			edgeAxisX *= l;
			edgeAxisY *= l;
			edgeAxisZ *= l;
			var dx = edgeAxisX * sx1X + edgeAxisY * sx1Y + edgeAxisZ * sx1Z;
			var dy = edgeAxisX * sz1X + edgeAxisY * sz1Y + edgeAxisZ * sz1Z;
			if(dx < 0) {
				dx = -dx;
			}
			if(dy < 0) {
				dy = -dy;
			}
			proj1 = dx + dy;
			var dx = edgeAxisX * sx2X + edgeAxisY * sx2Y + edgeAxisZ * sx2Z;
			var dy = edgeAxisX * sz2X + edgeAxisY * sz2Y + edgeAxisZ * sz2Z;
			if(dx < 0) {
				dx = -dx;
			}
			if(dy < 0) {
				dy = -dy;
			}
			proj2 = dx + dy;
			projC12 = edgeAxisX * c12X + edgeAxisY * c12Y + edgeAxisZ * c12Z;
			var sum = proj1 + proj2;
			var neg = projC12 < 0;
			var abs = neg ? -projC12 : projC12;
			if(abs < sum) {
				var depth = sum - abs;
				if(depth < mDepth) {
					mDepth = depth;
					mId = 10;
					mAxisX = edgeAxisX;
					mAxisY = edgeAxisY;
					mAxisZ = edgeAxisZ;
					mSign = neg ? -1 : 1;
				}
			} else {
				return;
			}
		}
		edgeAxisX = y1Y * z2Z - y1Z * z2Y;
		edgeAxisY = y1Z * z2X - y1X * z2Z;
		edgeAxisZ = y1X * z2Y - y1Y * z2X;
		if(!(edgeAxisX == 0 && edgeAxisY == 0 && edgeAxisZ == 0)) {
			var l = edgeAxisX * edgeAxisX + edgeAxisY * edgeAxisY + edgeAxisZ * edgeAxisZ;
			if(l > 0) {
				l = 1 / Math.sqrt(l);
			}
			edgeAxisX *= l;
			edgeAxisY *= l;
			edgeAxisZ *= l;
			var dx = edgeAxisX * sx1X + edgeAxisY * sx1Y + edgeAxisZ * sx1Z;
			var dy = edgeAxisX * sz1X + edgeAxisY * sz1Y + edgeAxisZ * sz1Z;
			if(dx < 0) {
				dx = -dx;
			}
			if(dy < 0) {
				dy = -dy;
			}
			proj1 = dx + dy;
			var dx = edgeAxisX * sx2X + edgeAxisY * sx2Y + edgeAxisZ * sx2Z;
			var dy = edgeAxisX * sy2X + edgeAxisY * sy2Y + edgeAxisZ * sy2Z;
			if(dx < 0) {
				dx = -dx;
			}
			if(dy < 0) {
				dy = -dy;
			}
			proj2 = dx + dy;
			projC12 = edgeAxisX * c12X + edgeAxisY * c12Y + edgeAxisZ * c12Z;
			var sum = proj1 + proj2;
			var neg = projC12 < 0;
			var abs = neg ? -projC12 : projC12;
			if(abs < sum) {
				var depth = sum - abs;
				if(depth < mDepth) {
					mDepth = depth;
					mId = 11;
					mAxisX = edgeAxisX;
					mAxisY = edgeAxisY;
					mAxisZ = edgeAxisZ;
					mSign = neg ? -1 : 1;
				}
			} else {
				return;
			}
		}
		edgeAxisX = z1Y * x2Z - z1Z * x2Y;
		edgeAxisY = z1Z * x2X - z1X * x2Z;
		edgeAxisZ = z1X * x2Y - z1Y * x2X;
		if(!(edgeAxisX == 0 && edgeAxisY == 0 && edgeAxisZ == 0)) {
			var l = edgeAxisX * edgeAxisX + edgeAxisY * edgeAxisY + edgeAxisZ * edgeAxisZ;
			if(l > 0) {
				l = 1 / Math.sqrt(l);
			}
			edgeAxisX *= l;
			edgeAxisY *= l;
			edgeAxisZ *= l;
			var dx = edgeAxisX * sx1X + edgeAxisY * sx1Y + edgeAxisZ * sx1Z;
			var dy = edgeAxisX * sy1X + edgeAxisY * sy1Y + edgeAxisZ * sy1Z;
			if(dx < 0) {
				dx = -dx;
			}
			if(dy < 0) {
				dy = -dy;
			}
			proj1 = dx + dy;
			var dx = edgeAxisX * sy2X + edgeAxisY * sy2Y + edgeAxisZ * sy2Z;
			var dy = edgeAxisX * sz2X + edgeAxisY * sz2Y + edgeAxisZ * sz2Z;
			if(dx < 0) {
				dx = -dx;
			}
			if(dy < 0) {
				dy = -dy;
			}
			proj2 = dx + dy;
			projC12 = edgeAxisX * c12X + edgeAxisY * c12Y + edgeAxisZ * c12Z;
			var sum = proj1 + proj2;
			var neg = projC12 < 0;
			var abs = neg ? -projC12 : projC12;
			if(abs < sum) {
				var depth = sum - abs;
				if(depth < mDepth) {
					mDepth = depth;
					mId = 12;
					mAxisX = edgeAxisX;
					mAxisY = edgeAxisY;
					mAxisZ = edgeAxisZ;
					mSign = neg ? -1 : 1;
				}
			} else {
				return;
			}
		}
		edgeAxisX = z1Y * y2Z - z1Z * y2Y;
		edgeAxisY = z1Z * y2X - z1X * y2Z;
		edgeAxisZ = z1X * y2Y - z1Y * y2X;
		if(!(edgeAxisX == 0 && edgeAxisY == 0 && edgeAxisZ == 0)) {
			var l = edgeAxisX * edgeAxisX + edgeAxisY * edgeAxisY + edgeAxisZ * edgeAxisZ;
			if(l > 0) {
				l = 1 / Math.sqrt(l);
			}
			edgeAxisX *= l;
			edgeAxisY *= l;
			edgeAxisZ *= l;
			var dx = edgeAxisX * sx1X + edgeAxisY * sx1Y + edgeAxisZ * sx1Z;
			var dy = edgeAxisX * sy1X + edgeAxisY * sy1Y + edgeAxisZ * sy1Z;
			if(dx < 0) {
				dx = -dx;
			}
			if(dy < 0) {
				dy = -dy;
			}
			proj1 = dx + dy;
			var dx = edgeAxisX * sx2X + edgeAxisY * sx2Y + edgeAxisZ * sx2Z;
			var dy = edgeAxisX * sz2X + edgeAxisY * sz2Y + edgeAxisZ * sz2Z;
			if(dx < 0) {
				dx = -dx;
			}
			if(dy < 0) {
				dy = -dy;
			}
			proj2 = dx + dy;
			projC12 = edgeAxisX * c12X + edgeAxisY * c12Y + edgeAxisZ * c12Z;
			var sum = proj1 + proj2;
			var neg = projC12 < 0;
			var abs = neg ? -projC12 : projC12;
			if(abs < sum) {
				var depth = sum - abs;
				if(depth < mDepth) {
					mDepth = depth;
					mId = 13;
					mAxisX = edgeAxisX;
					mAxisY = edgeAxisY;
					mAxisZ = edgeAxisZ;
					mSign = neg ? -1 : 1;
				}
			} else {
				return;
			}
		}
		edgeAxisX = z1Y * z2Z - z1Z * z2Y;
		edgeAxisY = z1Z * z2X - z1X * z2Z;
		edgeAxisZ = z1X * z2Y - z1Y * z2X;
		if(!(edgeAxisX == 0 && edgeAxisY == 0 && edgeAxisZ == 0)) {
			var l = edgeAxisX * edgeAxisX + edgeAxisY * edgeAxisY + edgeAxisZ * edgeAxisZ;
			if(l > 0) {
				l = 1 / Math.sqrt(l);
			}
			edgeAxisX *= l;
			edgeAxisY *= l;
			edgeAxisZ *= l;
			var dx = edgeAxisX * sx1X + edgeAxisY * sx1Y + edgeAxisZ * sx1Z;
			var dy = edgeAxisX * sy1X + edgeAxisY * sy1Y + edgeAxisZ * sy1Z;
			if(dx < 0) {
				dx = -dx;
			}
			if(dy < 0) {
				dy = -dy;
			}
			proj1 = dx + dy;
			var dx = edgeAxisX * sx2X + edgeAxisY * sx2Y + edgeAxisZ * sx2Z;
			var dy = edgeAxisX * sy2X + edgeAxisY * sy2Y + edgeAxisZ * sy2Z;
			if(dx < 0) {
				dx = -dx;
			}
			if(dy < 0) {
				dy = -dy;
			}
			proj2 = dx + dy;
			projC12 = edgeAxisX * c12X + edgeAxisY * c12Y + edgeAxisZ * c12Z;
			var sum = proj1 + proj2;
			var neg = projC12 < 0;
			var abs = neg ? -projC12 : projC12;
			if(abs < sum) {
				var depth = sum - abs;
				if(depth < mDepth) {
					mDepth = depth;
					mId = 14;
					mAxisX = edgeAxisX;
					mAxisY = edgeAxisY;
					mAxisZ = edgeAxisZ;
					mSign = neg ? -1 : 1;
				}
			} else {
				return;
			}
		}
		if(mId >= 6) {
			mAxisX *= mSign;
			mAxisY *= mSign;
			mAxisZ *= mSign;
			var id1 = (mId - 6) / 3 | 0;
			var id2 = mId - 6 - id1 * 3;
			var p1X;
			var p1Y;
			var p1Z;
			var p2X;
			var p2Y;
			var p2Z;
			var d1X;
			var d1Y;
			var d1Z;
			var d2X;
			var d2Y;
			var d2Z;
			switch(id1) {
			case 0:
				d1X = x1X;
				d1Y = x1Y;
				d1Z = x1Z;
				var signY = sz1X * mAxisX + sz1Y * mAxisY + sz1Z * mAxisZ > 0;
				if(sy1X * mAxisX + sy1Y * mAxisY + sy1Z * mAxisZ > 0) {
					if(signY) {
						p1X = sy1X + sz1X;
						p1Y = sy1Y + sz1Y;
						p1Z = sy1Z + sz1Z;
					} else {
						p1X = sy1X - sz1X;
						p1Y = sy1Y - sz1Y;
						p1Z = sy1Z - sz1Z;
					}
				} else if(signY) {
					p1X = sz1X - sy1X;
					p1Y = sz1Y - sy1Y;
					p1Z = sz1Z - sy1Z;
				} else {
					p1X = sy1X + sz1X;
					p1Y = sy1Y + sz1Y;
					p1Z = sy1Z + sz1Z;
					p1X = -p1X;
					p1Y = -p1Y;
					p1Z = -p1Z;
				}
				break;
			case 1:
				d1X = y1X;
				d1Y = y1Y;
				d1Z = y1Z;
				var signY = sz1X * mAxisX + sz1Y * mAxisY + sz1Z * mAxisZ > 0;
				if(sx1X * mAxisX + sx1Y * mAxisY + sx1Z * mAxisZ > 0) {
					if(signY) {
						p1X = sx1X + sz1X;
						p1Y = sx1Y + sz1Y;
						p1Z = sx1Z + sz1Z;
					} else {
						p1X = sx1X - sz1X;
						p1Y = sx1Y - sz1Y;
						p1Z = sx1Z - sz1Z;
					}
				} else if(signY) {
					p1X = sz1X - sx1X;
					p1Y = sz1Y - sx1Y;
					p1Z = sz1Z - sx1Z;
				} else {
					p1X = sx1X + sz1X;
					p1Y = sx1Y + sz1Y;
					p1Z = sx1Z + sz1Z;
					p1X = -p1X;
					p1Y = -p1Y;
					p1Z = -p1Z;
				}
				break;
			default:
				d1X = z1X;
				d1Y = z1Y;
				d1Z = z1Z;
				var signY = sy1X * mAxisX + sy1Y * mAxisY + sy1Z * mAxisZ > 0;
				if(sx1X * mAxisX + sx1Y * mAxisY + sx1Z * mAxisZ > 0) {
					if(signY) {
						p1X = sx1X + sy1X;
						p1Y = sx1Y + sy1Y;
						p1Z = sx1Z + sy1Z;
					} else {
						p1X = sx1X - sy1X;
						p1Y = sx1Y - sy1Y;
						p1Z = sx1Z - sy1Z;
					}
				} else if(signY) {
					p1X = sy1X - sx1X;
					p1Y = sy1Y - sx1Y;
					p1Z = sy1Z - sx1Z;
				} else {
					p1X = sx1X + sy1X;
					p1Y = sx1Y + sy1Y;
					p1Z = sx1Z + sy1Z;
					p1X = -p1X;
					p1Y = -p1Y;
					p1Z = -p1Z;
				}
			}
			p1X = c1X + p1X;
			p1Y = c1Y + p1Y;
			p1Z = c1Z + p1Z;
			switch(id2) {
			case 0:
				d2X = x2X;
				d2Y = x2Y;
				d2Z = x2Z;
				var signY = sz2X * mAxisX + sz2Y * mAxisY + sz2Z * mAxisZ > 0;
				if(sy2X * mAxisX + sy2Y * mAxisY + sy2Z * mAxisZ > 0) {
					if(signY) {
						p2X = sy2X + sz2X;
						p2Y = sy2Y + sz2Y;
						p2Z = sy2Z + sz2Z;
					} else {
						p2X = sy2X - sz2X;
						p2Y = sy2Y - sz2Y;
						p2Z = sy2Z - sz2Z;
					}
				} else if(signY) {
					p2X = sz2X - sy2X;
					p2Y = sz2Y - sy2Y;
					p2Z = sz2Z - sy2Z;
				} else {
					p2X = sy2X + sz2X;
					p2Y = sy2Y + sz2Y;
					p2Z = sy2Z + sz2Z;
					p2X = -p2X;
					p2Y = -p2Y;
					p2Z = -p2Z;
				}
				break;
			case 1:
				d2X = y2X;
				d2Y = y2Y;
				d2Z = y2Z;
				var signY = sz2X * mAxisX + sz2Y * mAxisY + sz2Z * mAxisZ > 0;
				if(sx2X * mAxisX + sx2Y * mAxisY + sx2Z * mAxisZ > 0) {
					if(signY) {
						p2X = sx2X + sz2X;
						p2Y = sx2Y + sz2Y;
						p2Z = sx2Z + sz2Z;
					} else {
						p2X = sx2X - sz2X;
						p2Y = sx2Y - sz2Y;
						p2Z = sx2Z - sz2Z;
					}
				} else if(signY) {
					p2X = sz2X - sx2X;
					p2Y = sz2Y - sx2Y;
					p2Z = sz2Z - sx2Z;
				} else {
					p2X = sx2X + sz2X;
					p2Y = sx2Y + sz2Y;
					p2Z = sx2Z + sz2Z;
					p2X = -p2X;
					p2Y = -p2Y;
					p2Z = -p2Z;
				}
				break;
			default:
				d2X = z2X;
				d2Y = z2Y;
				d2Z = z2Z;
				var signY = sy2X * mAxisX + sy2Y * mAxisY + sy2Z * mAxisZ > 0;
				if(sx2X * mAxisX + sx2Y * mAxisY + sx2Z * mAxisZ > 0) {
					if(signY) {
						p2X = sx2X + sy2X;
						p2Y = sx2Y + sy2Y;
						p2Z = sx2Z + sy2Z;
					} else {
						p2X = sx2X - sy2X;
						p2Y = sx2Y - sy2Y;
						p2Z = sx2Z - sy2Z;
					}
				} else if(signY) {
					p2X = sy2X - sx2X;
					p2Y = sy2Y - sx2Y;
					p2Z = sy2Z - sx2Z;
				} else {
					p2X = sx2X + sy2X;
					p2Y = sx2Y + sy2Y;
					p2Z = sx2Z + sy2Z;
					p2X = -p2X;
					p2Y = -p2Y;
					p2Z = -p2Z;
				}
			}
			p2X = c2X - p2X;
			p2Y = c2Y - p2Y;
			p2Z = c2Z - p2Z;
			var rX;
			var rY;
			var rZ;
			rX = p1X - p2X;
			rY = p1Y - p2Y;
			rZ = p1Z - p2Z;
			var dot12 = d1X * d2X + d1Y * d2Y + d1Z * d2Z;
			var dot1r = d1X * rX + d1Y * rY + d1Z * rZ;
			var dot2r = d2X * rX + d2Y * rY + d2Z * rZ;
			var invDet = 1 / (1 - dot12 * dot12);
			var t1 = (dot12 * dot2r - dot1r) * invDet;
			var t2 = (dot2r - dot12 * dot1r) * invDet;
			var cp1X;
			var cp1Y;
			var cp1Z;
			var cp2X;
			var cp2Y;
			var cp2Z;
			cp1X = p1X + d1X * t1;
			cp1Y = p1Y + d1Y * t1;
			cp1Z = p1Z + d1Z * t1;
			cp2X = p2X + d2X * t2;
			cp2Y = p2Y + d2Y * t2;
			cp2Z = p2Z + d2Z * t2;
			var normalX;
			var normalY;
			var normalZ;
			normalX = -mAxisX;
			normalY = -mAxisY;
			normalZ = -mAxisZ;
			this.setNormal(result,normalX,normalY,normalZ);
			this.addPoint(result,cp1X,cp1Y,cp1Z,cp2X,cp2Y,cp2Z,mDepth,4);
			return;
		}
		var tmpX;
		var tmpY;
		var tmpZ;
		var swapped;
		if(mId >= 3) {
			mSign = -mSign;
			c12X = -c12X;
			c12Y = -c12Y;
			c12Z = -c12Z;
			var tmp = b1;
			b1 = b2;
			b2 = tmp;
			var tmp = w1;
			w1 = w2;
			w2 = tmp;
			var tmp = h1;
			h1 = h2;
			h2 = tmp;
			var tmp = d1;
			d1 = d2;
			d2 = tmp;
			tmpX = c1X;
			tmpY = c1Y;
			tmpZ = c1Z;
			c1X = c2X;
			c1Y = c2Y;
			c1Z = c2Z;
			c2X = tmpX;
			c2Y = tmpY;
			c2Z = tmpZ;
			tmpX = x1X;
			tmpY = x1Y;
			tmpZ = x1Z;
			x1X = x2X;
			x1Y = x2Y;
			x1Z = x2Z;
			x2X = tmpX;
			x2Y = tmpY;
			x2Z = tmpZ;
			tmpX = y1X;
			tmpY = y1Y;
			tmpZ = y1Z;
			y1X = y2X;
			y1Y = y2Y;
			y1Z = y2Z;
			y2X = tmpX;
			y2Y = tmpY;
			y2Z = tmpZ;
			tmpX = z1X;
			tmpY = z1Y;
			tmpZ = z1Z;
			z1X = z2X;
			z1Y = z2Y;
			z1Z = z2Z;
			z2X = tmpX;
			z2Y = tmpY;
			z2Z = tmpZ;
			tmpX = sx1X;
			tmpY = sx1Y;
			tmpZ = sx1Z;
			sx1X = sx2X;
			sx1Y = sx2Y;
			sx1Z = sx2Z;
			sx2X = tmpX;
			sx2Y = tmpY;
			sx2Z = tmpZ;
			tmpX = sy1X;
			tmpY = sy1Y;
			tmpZ = sy1Z;
			sy1X = sy2X;
			sy1Y = sy2Y;
			sy1Z = sy2Z;
			sy2X = tmpX;
			sy2Y = tmpY;
			sy2Z = tmpZ;
			tmpX = sz1X;
			tmpY = sz1Y;
			tmpZ = sz1Z;
			sz1X = sz2X;
			sz1Y = sz2Y;
			sz1Z = sz2Z;
			sz2X = tmpX;
			sz2Y = tmpY;
			sz2Z = tmpZ;
			mId -= 3;
			swapped = true;
		} else {
			swapped = false;
		}
		var refCenterX;
		var refCenterY;
		var refCenterZ;
		var refNormalX;
		var refNormalY;
		var refNormalZ;
		var refXX;
		var refXY;
		var refXZ;
		var refYX;
		var refYY;
		var refYZ;
		var refW;
		var refH;
		switch(mId) {
		case 0:
			refCenterX = sx1X;
			refCenterY = sx1Y;
			refCenterZ = sx1Z;
			refNormalX = x1X;
			refNormalY = x1Y;
			refNormalZ = x1Z;
			refXX = y1X;
			refXY = y1Y;
			refXZ = y1Z;
			refYX = z1X;
			refYY = z1Y;
			refYZ = z1Z;
			refW = h1;
			refH = d1;
			break;
		case 1:
			refCenterX = sy1X;
			refCenterY = sy1Y;
			refCenterZ = sy1Z;
			refNormalX = y1X;
			refNormalY = y1Y;
			refNormalZ = y1Z;
			refXX = z1X;
			refXY = z1Y;
			refXZ = z1Z;
			refYX = x1X;
			refYY = x1Y;
			refYZ = x1Z;
			refW = d1;
			refH = w1;
			break;
		default:
			refCenterX = sz1X;
			refCenterY = sz1Y;
			refCenterZ = sz1Z;
			refNormalX = z1X;
			refNormalY = z1Y;
			refNormalZ = z1Z;
			refXX = x1X;
			refXY = x1Y;
			refXZ = x1Z;
			refYX = y1X;
			refYY = y1Y;
			refYZ = y1Z;
			refW = w1;
			refH = h1;
		}
		if(mSign < 0) {
			refCenterX = -refCenterX;
			refCenterY = -refCenterY;
			refCenterZ = -refCenterZ;
			refNormalX = -refNormalX;
			refNormalY = -refNormalY;
			refNormalZ = -refNormalZ;
			tmpX = refXX;
			tmpY = refXY;
			tmpZ = refXZ;
			refXX = refYX;
			refXY = refYY;
			refXZ = refYZ;
			refYX = tmpX;
			refYY = tmpY;
			refYZ = tmpZ;
			var tmp = refW;
			refW = refH;
			refH = tmp;
		}
		refCenterX += c1X;
		refCenterY += c1Y;
		refCenterZ += c1Z;
		var minIncDot = 1;
		var incId = 0;
		var incDot = refNormalX * x2X + refNormalY * x2Y + refNormalZ * x2Z;
		if(incDot < minIncDot) {
			minIncDot = incDot;
			incId = 0;
		}
		if(-incDot < minIncDot) {
			minIncDot = -incDot;
			incId = 1;
		}
		incDot = refNormalX * y2X + refNormalY * y2Y + refNormalZ * y2Z;
		if(incDot < minIncDot) {
			minIncDot = incDot;
			incId = 2;
		}
		if(-incDot < minIncDot) {
			minIncDot = -incDot;
			incId = 3;
		}
		incDot = refNormalX * z2X + refNormalY * z2Y + refNormalZ * z2Z;
		if(incDot < minIncDot) {
			minIncDot = incDot;
			incId = 4;
		}
		if(-incDot < minIncDot) {
			minIncDot = -incDot;
			incId = 5;
		}
		var incV1X;
		var incV1Y;
		var incV1Z;
		var incV2X;
		var incV2Y;
		var incV2Z;
		var incV3X;
		var incV3Y;
		var incV3Z;
		var incV4X;
		var incV4Y;
		var incV4Z;
		switch(incId) {
		case 0:
			incV1X = sx2X + sy2X;
			incV1Y = sx2Y + sy2Y;
			incV1Z = sx2Z + sy2Z;
			incV1X += sz2X;
			incV1Y += sz2Y;
			incV1Z += sz2Z;
			incV2X = sx2X - sy2X;
			incV2Y = sx2Y - sy2Y;
			incV2Z = sx2Z - sy2Z;
			incV2X += sz2X;
			incV2Y += sz2Y;
			incV2Z += sz2Z;
			incV3X = sx2X - sy2X;
			incV3Y = sx2Y - sy2Y;
			incV3Z = sx2Z - sy2Z;
			incV3X -= sz2X;
			incV3Y -= sz2Y;
			incV3Z -= sz2Z;
			incV4X = sx2X + sy2X;
			incV4Y = sx2Y + sy2Y;
			incV4Z = sx2Z + sy2Z;
			incV4X -= sz2X;
			incV4Y -= sz2Y;
			incV4Z -= sz2Z;
			break;
		case 1:
			incV1X = sy2X - sx2X;
			incV1Y = sy2Y - sx2Y;
			incV1Z = sy2Z - sx2Z;
			incV1X += sz2X;
			incV1Y += sz2Y;
			incV1Z += sz2Z;
			incV2X = sy2X - sx2X;
			incV2Y = sy2Y - sx2Y;
			incV2Z = sy2Z - sx2Z;
			incV2X -= sz2X;
			incV2Y -= sz2Y;
			incV2Z -= sz2Z;
			incV3X = sx2X + sy2X;
			incV3Y = sx2Y + sy2Y;
			incV3Z = sx2Z + sy2Z;
			incV3X = -incV3X;
			incV3Y = -incV3Y;
			incV3Z = -incV3Z;
			incV3X -= sz2X;
			incV3Y -= sz2Y;
			incV3Z -= sz2Z;
			incV4X = sx2X + sy2X;
			incV4Y = sx2Y + sy2Y;
			incV4Z = sx2Z + sy2Z;
			incV4X = -incV4X;
			incV4Y = -incV4Y;
			incV4Z = -incV4Z;
			incV4X += sz2X;
			incV4Y += sz2Y;
			incV4Z += sz2Z;
			break;
		case 2:
			incV1X = sx2X + sy2X;
			incV1Y = sx2Y + sy2Y;
			incV1Z = sx2Z + sy2Z;
			incV1X += sz2X;
			incV1Y += sz2Y;
			incV1Z += sz2Z;
			incV2X = sx2X + sy2X;
			incV2Y = sx2Y + sy2Y;
			incV2Z = sx2Z + sy2Z;
			incV2X -= sz2X;
			incV2Y -= sz2Y;
			incV2Z -= sz2Z;
			incV3X = sy2X - sx2X;
			incV3Y = sy2Y - sx2Y;
			incV3Z = sy2Z - sx2Z;
			incV3X -= sz2X;
			incV3Y -= sz2Y;
			incV3Z -= sz2Z;
			incV4X = sy2X - sx2X;
			incV4Y = sy2Y - sx2Y;
			incV4Z = sy2Z - sx2Z;
			incV4X += sz2X;
			incV4Y += sz2Y;
			incV4Z += sz2Z;
			break;
		case 3:
			incV1X = sx2X - sy2X;
			incV1Y = sx2Y - sy2Y;
			incV1Z = sx2Z - sy2Z;
			incV1X += sz2X;
			incV1Y += sz2Y;
			incV1Z += sz2Z;
			incV2X = sx2X + sy2X;
			incV2Y = sx2Y + sy2Y;
			incV2Z = sx2Z + sy2Z;
			incV2X = -incV2X;
			incV2Y = -incV2Y;
			incV2Z = -incV2Z;
			incV2X += sz2X;
			incV2Y += sz2Y;
			incV2Z += sz2Z;
			incV3X = sx2X + sy2X;
			incV3Y = sx2Y + sy2Y;
			incV3Z = sx2Z + sy2Z;
			incV3X = -incV3X;
			incV3Y = -incV3Y;
			incV3Z = -incV3Z;
			incV3X -= sz2X;
			incV3Y -= sz2Y;
			incV3Z -= sz2Z;
			incV4X = sx2X - sy2X;
			incV4Y = sx2Y - sy2Y;
			incV4Z = sx2Z - sy2Z;
			incV4X -= sz2X;
			incV4Y -= sz2Y;
			incV4Z -= sz2Z;
			break;
		case 4:
			incV1X = sx2X + sy2X;
			incV1Y = sx2Y + sy2Y;
			incV1Z = sx2Z + sy2Z;
			incV1X += sz2X;
			incV1Y += sz2Y;
			incV1Z += sz2Z;
			incV2X = sy2X - sx2X;
			incV2Y = sy2Y - sx2Y;
			incV2Z = sy2Z - sx2Z;
			incV2X += sz2X;
			incV2Y += sz2Y;
			incV2Z += sz2Z;
			incV3X = sx2X + sy2X;
			incV3Y = sx2Y + sy2Y;
			incV3Z = sx2Z + sy2Z;
			incV3X = -incV3X;
			incV3Y = -incV3Y;
			incV3Z = -incV3Z;
			incV3X += sz2X;
			incV3Y += sz2Y;
			incV3Z += sz2Z;
			incV4X = sx2X - sy2X;
			incV4Y = sx2Y - sy2Y;
			incV4Z = sx2Z - sy2Z;
			incV4X += sz2X;
			incV4Y += sz2Y;
			incV4Z += sz2Z;
			break;
		default:
			incV1X = sx2X + sy2X;
			incV1Y = sx2Y + sy2Y;
			incV1Z = sx2Z + sy2Z;
			incV1X -= sz2X;
			incV1Y -= sz2Y;
			incV1Z -= sz2Z;
			incV2X = sx2X - sy2X;
			incV2Y = sx2Y - sy2Y;
			incV2Z = sx2Z - sy2Z;
			incV2X -= sz2X;
			incV2Y -= sz2Y;
			incV2Z -= sz2Z;
			incV3X = sx2X + sy2X;
			incV3Y = sx2Y + sy2Y;
			incV3Z = sx2Z + sy2Z;
			incV3X = -incV3X;
			incV3Y = -incV3Y;
			incV3Z = -incV3Z;
			incV3X -= sz2X;
			incV3Y -= sz2Y;
			incV3Z -= sz2Z;
			incV4X = sy2X - sx2X;
			incV4Y = sy2Y - sx2Y;
			incV4Z = sy2Z - sx2Z;
			incV4X -= sz2X;
			incV4Y -= sz2Y;
			incV4Z -= sz2Z;
		}
		incV1X += c12X;
		incV1Y += c12Y;
		incV1Z += c12Z;
		incV2X += c12X;
		incV2Y += c12Y;
		incV2Z += c12Z;
		incV3X += c12X;
		incV3Y += c12Y;
		incV3Z += c12Z;
		incV4X += c12X;
		incV4Y += c12Y;
		incV4Z += c12Z;
		var _this = this.clipper;
		_this.w = refW;
		_this.h = refH;
		_this.numVertices = 0;
		_this.numTmpVertices = 0;
		var _this = this.clipper;
		var _this1 = _this.vertices[_this.numVertices++];
		_this1.x = incV1X * refXX + incV1Y * refXY + incV1Z * refXZ;
		_this1.y = incV1X * refYX + incV1Y * refYY + incV1Z * refYZ;
		_this1.wx = incV1X;
		_this1.wy = incV1Y;
		_this1.wz = incV1Z;
		var _this = this.clipper;
		var _this1 = _this.vertices[_this.numVertices++];
		_this1.x = incV2X * refXX + incV2Y * refXY + incV2Z * refXZ;
		_this1.y = incV2X * refYX + incV2Y * refYY + incV2Z * refYZ;
		_this1.wx = incV2X;
		_this1.wy = incV2Y;
		_this1.wz = incV2Z;
		var _this = this.clipper;
		var _this1 = _this.vertices[_this.numVertices++];
		_this1.x = incV3X * refXX + incV3Y * refXY + incV3Z * refXZ;
		_this1.y = incV3X * refYX + incV3Y * refYY + incV3Z * refYZ;
		_this1.wx = incV3X;
		_this1.wy = incV3Y;
		_this1.wz = incV3Z;
		var _this = this.clipper;
		var _this1 = _this.vertices[_this.numVertices++];
		_this1.x = incV4X * refXX + incV4Y * refXY + incV4Z * refXZ;
		_this1.y = incV4X * refYX + incV4Y * refYY + incV4Z * refYZ;
		_this1.wx = incV4X;
		_this1.wy = incV4Y;
		_this1.wz = incV4Z;
		this.clipper.clip();
		this.clipper.reduce();
		var normalX;
		var normalY;
		var normalZ;
		if(swapped) {
			normalX = refNormalX;
			normalY = refNormalY;
			normalZ = refNormalZ;
		} else {
			normalX = -refNormalX;
			normalY = -refNormalY;
			normalZ = -refNormalZ;
		}
		this.setNormal(result,normalX,normalY,normalZ);
		var _g = 0;
		var _g1 = this.clipper.numVertices;
		while(_g < _g1) {
			var i = _g++;
			var v = this.clipper.vertices[i];
			var clippedVertexX;
			var clippedVertexY;
			var clippedVertexZ;
			clippedVertexX = v.wx;
			clippedVertexY = v.wy;
			clippedVertexZ = v.wz;
			clippedVertexX += c1X;
			clippedVertexY += c1Y;
			clippedVertexZ += c1Z;
			var clippedVertexToRefCenterX;
			var clippedVertexToRefCenterY;
			var clippedVertexToRefCenterZ;
			clippedVertexToRefCenterX = refCenterX - clippedVertexX;
			clippedVertexToRefCenterY = refCenterY - clippedVertexY;
			clippedVertexToRefCenterZ = refCenterZ - clippedVertexZ;
			var depth = clippedVertexToRefCenterX * refNormalX + clippedVertexToRefCenterY * refNormalY + clippedVertexToRefCenterZ * refNormalZ;
			var clippedVertexOnRefFaceX;
			var clippedVertexOnRefFaceY;
			var clippedVertexOnRefFaceZ;
			clippedVertexOnRefFaceX = clippedVertexX + refNormalX * depth;
			clippedVertexOnRefFaceY = clippedVertexY + refNormalY * depth;
			clippedVertexOnRefFaceZ = clippedVertexZ + refNormalZ * depth;
			if(depth > -oimo_common_Setting.contactPersistenceThreshold) {
				if(swapped) {
					this.addPoint(result,clippedVertexX,clippedVertexY,clippedVertexZ,clippedVertexOnRefFaceX,clippedVertexOnRefFaceY,clippedVertexOnRefFaceZ,depth,i);
				} else {
					this.addPoint(result,clippedVertexOnRefFaceX,clippedVertexOnRefFaceY,clippedVertexOnRefFaceZ,clippedVertexX,clippedVertexY,clippedVertexZ,depth,i);
				}
			}
		}
	}
	,__class__: oimo_collision_narrowphase_detector_BoxBoxDetector
});
var oimo_collision_narrowphase_detector__$BoxBoxDetector_IncidentVertex = function() {
	this.x = 0;
	this.y = 0;
	this.wx = 0;
	this.wy = 0;
	this.wz = 0;
};
oimo_collision_narrowphase_detector__$BoxBoxDetector_IncidentVertex.__name__ = true;
oimo_collision_narrowphase_detector__$BoxBoxDetector_IncidentVertex.prototype = {
	__class__: oimo_collision_narrowphase_detector__$BoxBoxDetector_IncidentVertex
};
var oimo_collision_narrowphase_detector__$BoxBoxDetector_FaceClipper = function() {
	this.w = 0;
	this.h = 0;
	this.numVertices = 0;
	this.numTmpVertices = 0;
	this.vertices = new Array(8);
	this.tmpVertices = new Array(8);
	this.vertices[0] = new oimo_collision_narrowphase_detector__$BoxBoxDetector_IncidentVertex();
	this.tmpVertices[0] = new oimo_collision_narrowphase_detector__$BoxBoxDetector_IncidentVertex();
	this.vertices[1] = new oimo_collision_narrowphase_detector__$BoxBoxDetector_IncidentVertex();
	this.tmpVertices[1] = new oimo_collision_narrowphase_detector__$BoxBoxDetector_IncidentVertex();
	this.vertices[2] = new oimo_collision_narrowphase_detector__$BoxBoxDetector_IncidentVertex();
	this.tmpVertices[2] = new oimo_collision_narrowphase_detector__$BoxBoxDetector_IncidentVertex();
	this.vertices[3] = new oimo_collision_narrowphase_detector__$BoxBoxDetector_IncidentVertex();
	this.tmpVertices[3] = new oimo_collision_narrowphase_detector__$BoxBoxDetector_IncidentVertex();
	this.vertices[4] = new oimo_collision_narrowphase_detector__$BoxBoxDetector_IncidentVertex();
	this.tmpVertices[4] = new oimo_collision_narrowphase_detector__$BoxBoxDetector_IncidentVertex();
	this.vertices[5] = new oimo_collision_narrowphase_detector__$BoxBoxDetector_IncidentVertex();
	this.tmpVertices[5] = new oimo_collision_narrowphase_detector__$BoxBoxDetector_IncidentVertex();
	this.vertices[6] = new oimo_collision_narrowphase_detector__$BoxBoxDetector_IncidentVertex();
	this.tmpVertices[6] = new oimo_collision_narrowphase_detector__$BoxBoxDetector_IncidentVertex();
	this.vertices[7] = new oimo_collision_narrowphase_detector__$BoxBoxDetector_IncidentVertex();
	this.tmpVertices[7] = new oimo_collision_narrowphase_detector__$BoxBoxDetector_IncidentVertex();
};
oimo_collision_narrowphase_detector__$BoxBoxDetector_FaceClipper.__name__ = true;
oimo_collision_narrowphase_detector__$BoxBoxDetector_FaceClipper.prototype = {
	clip: function() {
		var _g = 0;
		var _g1 = this.numVertices;
		while(_g < _g1) {
			var i = _g++;
			var v1 = this.vertices[i];
			var v2 = this.vertices[(i + 1) % this.numVertices];
			var s1 = this.w + v1.x;
			var s2 = this.w + v2.x;
			if(s1 > 0 && s2 > 0) {
				var _this = this.tmpVertices[this.numTmpVertices++];
				_this.x = v1.x;
				_this.y = v1.y;
				_this.wx = v1.wx;
				_this.wy = v1.wy;
				_this.wz = v1.wz;
			} else if(s1 > 0 && s2 <= 0) {
				var _this1 = this.tmpVertices[this.numTmpVertices++];
				_this1.x = v1.x;
				_this1.y = v1.y;
				_this1.wx = v1.wx;
				_this1.wy = v1.wy;
				_this1.wz = v1.wz;
				var t = s1 / (s1 - s2);
				var _this2 = this.tmpVertices[this.numTmpVertices++];
				_this2.x = v1.x + (v2.x - v1.x) * t;
				_this2.y = v1.y + (v2.y - v1.y) * t;
				_this2.wx = v1.wx + (v2.wx - v1.wx) * t;
				_this2.wy = v1.wy + (v2.wy - v1.wy) * t;
				_this2.wz = v1.wz + (v2.wz - v1.wz) * t;
			} else if(s1 <= 0 && s2 > 0) {
				var t1 = s1 / (s1 - s2);
				var _this3 = this.tmpVertices[this.numTmpVertices++];
				_this3.x = v1.x + (v2.x - v1.x) * t1;
				_this3.y = v1.y + (v2.y - v1.y) * t1;
				_this3.wx = v1.wx + (v2.wx - v1.wx) * t1;
				_this3.wy = v1.wy + (v2.wy - v1.wy) * t1;
				_this3.wz = v1.wz + (v2.wz - v1.wz) * t1;
			}
		}
		var tmp = this.vertices;
		this.vertices = this.tmpVertices;
		this.tmpVertices = tmp;
		this.numVertices = this.numTmpVertices;
		this.numTmpVertices = 0;
		var _g = 0;
		var _g1 = this.numVertices;
		while(_g < _g1) {
			var i = _g++;
			var v1 = this.vertices[i];
			var v2 = this.vertices[(i + 1) % this.numVertices];
			var s1 = this.w - v1.x;
			var s2 = this.w - v2.x;
			if(s1 > 0 && s2 > 0) {
				var _this = this.tmpVertices[this.numTmpVertices++];
				_this.x = v1.x;
				_this.y = v1.y;
				_this.wx = v1.wx;
				_this.wy = v1.wy;
				_this.wz = v1.wz;
			} else if(s1 > 0 && s2 <= 0) {
				var _this1 = this.tmpVertices[this.numTmpVertices++];
				_this1.x = v1.x;
				_this1.y = v1.y;
				_this1.wx = v1.wx;
				_this1.wy = v1.wy;
				_this1.wz = v1.wz;
				var t = s1 / (s1 - s2);
				var _this2 = this.tmpVertices[this.numTmpVertices++];
				_this2.x = v1.x + (v2.x - v1.x) * t;
				_this2.y = v1.y + (v2.y - v1.y) * t;
				_this2.wx = v1.wx + (v2.wx - v1.wx) * t;
				_this2.wy = v1.wy + (v2.wy - v1.wy) * t;
				_this2.wz = v1.wz + (v2.wz - v1.wz) * t;
			} else if(s1 <= 0 && s2 > 0) {
				var t1 = s1 / (s1 - s2);
				var _this3 = this.tmpVertices[this.numTmpVertices++];
				_this3.x = v1.x + (v2.x - v1.x) * t1;
				_this3.y = v1.y + (v2.y - v1.y) * t1;
				_this3.wx = v1.wx + (v2.wx - v1.wx) * t1;
				_this3.wy = v1.wy + (v2.wy - v1.wy) * t1;
				_this3.wz = v1.wz + (v2.wz - v1.wz) * t1;
			}
		}
		var tmp = this.vertices;
		this.vertices = this.tmpVertices;
		this.tmpVertices = tmp;
		this.numVertices = this.numTmpVertices;
		this.numTmpVertices = 0;
		var _g = 0;
		var _g1 = this.numVertices;
		while(_g < _g1) {
			var i = _g++;
			var v1 = this.vertices[i];
			var v2 = this.vertices[(i + 1) % this.numVertices];
			var s1 = this.h + v1.y;
			var s2 = this.h + v2.y;
			if(s1 > 0 && s2 > 0) {
				var _this = this.tmpVertices[this.numTmpVertices++];
				_this.x = v1.x;
				_this.y = v1.y;
				_this.wx = v1.wx;
				_this.wy = v1.wy;
				_this.wz = v1.wz;
			} else if(s1 > 0 && s2 <= 0) {
				var _this1 = this.tmpVertices[this.numTmpVertices++];
				_this1.x = v1.x;
				_this1.y = v1.y;
				_this1.wx = v1.wx;
				_this1.wy = v1.wy;
				_this1.wz = v1.wz;
				var t = s1 / (s1 - s2);
				var _this2 = this.tmpVertices[this.numTmpVertices++];
				_this2.x = v1.x + (v2.x - v1.x) * t;
				_this2.y = v1.y + (v2.y - v1.y) * t;
				_this2.wx = v1.wx + (v2.wx - v1.wx) * t;
				_this2.wy = v1.wy + (v2.wy - v1.wy) * t;
				_this2.wz = v1.wz + (v2.wz - v1.wz) * t;
			} else if(s1 <= 0 && s2 > 0) {
				var t1 = s1 / (s1 - s2);
				var _this3 = this.tmpVertices[this.numTmpVertices++];
				_this3.x = v1.x + (v2.x - v1.x) * t1;
				_this3.y = v1.y + (v2.y - v1.y) * t1;
				_this3.wx = v1.wx + (v2.wx - v1.wx) * t1;
				_this3.wy = v1.wy + (v2.wy - v1.wy) * t1;
				_this3.wz = v1.wz + (v2.wz - v1.wz) * t1;
			}
		}
		var tmp = this.vertices;
		this.vertices = this.tmpVertices;
		this.tmpVertices = tmp;
		this.numVertices = this.numTmpVertices;
		this.numTmpVertices = 0;
		var _g = 0;
		var _g1 = this.numVertices;
		while(_g < _g1) {
			var i = _g++;
			var v1 = this.vertices[i];
			var v2 = this.vertices[(i + 1) % this.numVertices];
			var s1 = this.h - v1.y;
			var s2 = this.h - v2.y;
			if(s1 > 0 && s2 > 0) {
				var _this = this.tmpVertices[this.numTmpVertices++];
				_this.x = v1.x;
				_this.y = v1.y;
				_this.wx = v1.wx;
				_this.wy = v1.wy;
				_this.wz = v1.wz;
			} else if(s1 > 0 && s2 <= 0) {
				var _this1 = this.tmpVertices[this.numTmpVertices++];
				_this1.x = v1.x;
				_this1.y = v1.y;
				_this1.wx = v1.wx;
				_this1.wy = v1.wy;
				_this1.wz = v1.wz;
				var t = s1 / (s1 - s2);
				var _this2 = this.tmpVertices[this.numTmpVertices++];
				_this2.x = v1.x + (v2.x - v1.x) * t;
				_this2.y = v1.y + (v2.y - v1.y) * t;
				_this2.wx = v1.wx + (v2.wx - v1.wx) * t;
				_this2.wy = v1.wy + (v2.wy - v1.wy) * t;
				_this2.wz = v1.wz + (v2.wz - v1.wz) * t;
			} else if(s1 <= 0 && s2 > 0) {
				var t1 = s1 / (s1 - s2);
				var _this3 = this.tmpVertices[this.numTmpVertices++];
				_this3.x = v1.x + (v2.x - v1.x) * t1;
				_this3.y = v1.y + (v2.y - v1.y) * t1;
				_this3.wx = v1.wx + (v2.wx - v1.wx) * t1;
				_this3.wy = v1.wy + (v2.wy - v1.wy) * t1;
				_this3.wz = v1.wz + (v2.wz - v1.wz) * t1;
			}
		}
		var tmp = this.vertices;
		this.vertices = this.tmpVertices;
		this.tmpVertices = tmp;
		this.numVertices = this.numTmpVertices;
		this.numTmpVertices = 0;
	}
	,reduce: function() {
		if(this.numVertices < 4) {
			return;
		}
		var max1 = -1e65536;
		var min1 = 1e65536;
		var max2 = -1e65536;
		var min2 = 1e65536;
		var max1V = null;
		var min1V = null;
		var max2V = null;
		var min2V = null;
		var e1x = 1;
		var e1y = 1;
		var e2x = -1;
		var e2y = 1;
		var _g = 0;
		var _g1 = this.numVertices;
		while(_g < _g1) {
			var i = _g++;
			var v = this.vertices[i];
			var dot1 = v.x * e1x + v.y * e1y;
			var dot2 = v.x * e2x + v.y * e2y;
			if(i == 0) {
				max1 = dot1;
				max1V = v;
				min1 = dot1;
				min1V = v;
				max2 = dot2;
				max2V = v;
				min2 = dot2;
				min2V = v;
			} else {
				if(dot1 > max1) {
					max1 = dot1;
					max1V = v;
				}
				if(dot1 < min1) {
					min1 = dot1;
					min1V = v;
				}
				if(dot2 > max2) {
					max2 = dot2;
					max2V = v;
				}
				if(dot2 < min2) {
					min2 = dot2;
					min2V = v;
				}
			}
		}
		var _this = this.tmpVertices[this.numTmpVertices++];
		_this.x = max1V.x;
		_this.y = max1V.y;
		_this.wx = max1V.wx;
		_this.wy = max1V.wy;
		_this.wz = max1V.wz;
		var _this = this.tmpVertices[this.numTmpVertices++];
		_this.x = max2V.x;
		_this.y = max2V.y;
		_this.wx = max2V.wx;
		_this.wy = max2V.wy;
		_this.wz = max2V.wz;
		var _this = this.tmpVertices[this.numTmpVertices++];
		_this.x = min1V.x;
		_this.y = min1V.y;
		_this.wx = min1V.wx;
		_this.wy = min1V.wy;
		_this.wz = min1V.wz;
		var _this = this.tmpVertices[this.numTmpVertices++];
		_this.x = min2V.x;
		_this.y = min2V.y;
		_this.wx = min2V.wx;
		_this.wy = min2V.wy;
		_this.wz = min2V.wz;
		var tmp = this.vertices;
		this.vertices = this.tmpVertices;
		this.tmpVertices = tmp;
		this.numVertices = this.numTmpVertices;
		this.numTmpVertices = 0;
	}
	,__class__: oimo_collision_narrowphase_detector__$BoxBoxDetector_FaceClipper
};
var oimo_collision_narrowphase_detector_BoxBoxDetectorMacro = function() { };
oimo_collision_narrowphase_detector_BoxBoxDetectorMacro.__name__ = true;
var oimo_collision_narrowphase_detector_CachedDetectorData = function() {
};
oimo_collision_narrowphase_detector_CachedDetectorData.__name__ = true;
oimo_collision_narrowphase_detector_CachedDetectorData.prototype = {
	_clear: function() {
		if(this._gjkCache != null) {
			this._gjkCache.clear();
		}
	}
	,__class__: oimo_collision_narrowphase_detector_CachedDetectorData
};
var oimo_collision_narrowphase_detector_CapsuleCapsuleDetector = function() {
	oimo_collision_narrowphase_detector_Detector.call(this,false);
};
oimo_collision_narrowphase_detector_CapsuleCapsuleDetector.__name__ = true;
oimo_collision_narrowphase_detector_CapsuleCapsuleDetector.__super__ = oimo_collision_narrowphase_detector_Detector;
oimo_collision_narrowphase_detector_CapsuleCapsuleDetector.prototype = $extend(oimo_collision_narrowphase_detector_Detector.prototype,{
	detectImpl: function(result,geom1,geom2,tf1,tf2,cachedData) {
		var c1 = geom1;
		var c2 = geom2;
		result.incremental = false;
		var axis1X;
		var axis1Y;
		var axis1Z;
		var axis2X;
		var axis2Y;
		var axis2Z;
		axis1X = tf1._rotation01;
		axis1Y = tf1._rotation11;
		axis1Z = tf1._rotation21;
		axis2X = tf2._rotation01;
		axis2Y = tf2._rotation11;
		axis2Z = tf2._rotation21;
		var hh1 = c1._halfHeight;
		var hh2 = c2._halfHeight;
		var r1 = c1._radius;
		var r2 = c2._radius;
		var p1X;
		var p1Y;
		var p1Z;
		var q1X;
		var q1Y;
		var q1Z;
		var p2X;
		var p2Y;
		var p2Z;
		var q2X;
		var q2Y;
		var q2Z;
		p1X = tf1._positionX + axis1X * -hh1;
		p1Y = tf1._positionY + axis1Y * -hh1;
		p1Z = tf1._positionZ + axis1Z * -hh1;
		q1X = tf1._positionX + axis1X * hh1;
		q1Y = tf1._positionY + axis1Y * hh1;
		q1Z = tf1._positionZ + axis1Z * hh1;
		p2X = tf2._positionX + axis2X * -hh2;
		p2Y = tf2._positionY + axis2Y * -hh2;
		p2Z = tf2._positionZ + axis2Z * -hh2;
		q2X = tf2._positionX + axis2X * hh2;
		q2Y = tf2._positionY + axis2Y * hh2;
		q2Z = tf2._positionZ + axis2Z * hh2;
		var p12X;
		var p12Y;
		var p12Z;
		p12X = p1X - p2X;
		p12Y = p1Y - p2Y;
		p12Z = p1Z - p2Z;
		var d1X;
		var d1Y;
		var d1Z;
		var d2X;
		var d2Y;
		var d2Z;
		d1X = q1X - p1X;
		d1Y = q1Y - p1Y;
		d1Z = q1Z - p1Z;
		d2X = q2X - p2X;
		d2Y = q2Y - p2Y;
		d2Z = q2Z - p2Z;
		var p21d1 = -(p12X * d1X + p12Y * d1Y + p12Z * d1Z);
		var p12d2 = p12X * d2X + p12Y * d2Y + p12Z * d2Z;
		var d11 = hh1 * hh1 * 4;
		var d12 = d1X * d2X + d1Y * d2Y + d1Z * d2Z;
		var d22 = hh2 * hh2 * 4;
		var t1;
		var t2;
		if(d11 == 0 && d22 == 0) {
			t1 = 0;
			t2 = 0;
		} else if(d11 == 0) {
			t1 = 0;
			t2 = p12d2;
			if(p12d2 < 0) {
				t2 = 0;
			} else if(p12d2 > d22) {
				t2 = 1;
			} else {
				t2 = p12d2 / d22;
			}
		} else if(d22 == 0) {
			t2 = 0;
			t1 = p21d1;
			if(p21d1 < 0) {
				t1 = 0;
			} else if(p21d1 > d11) {
				t1 = 1;
			} else {
				t1 = p21d1 / d11;
			}
		} else {
			var det = d11 * d22 - d12 * d12;
			if(det == 0) {
				t1 = 0;
			} else {
				t1 = d12 * p12d2 + d22 * p21d1;
				if(t1 < 0) {
					t1 = 0;
				} else if(t1 > det) {
					t1 = 1;
				} else {
					t1 /= det;
				}
			}
			t2 = t1 * d12 + p12d2;
			if(t2 < 0) {
				t2 = 0;
				t1 = p21d1;
				if(p21d1 < 0) {
					t1 = 0;
				} else if(p21d1 > d11) {
					t1 = 1;
				} else {
					t1 = p21d1 / d11;
				}
			} else if(t2 > d22) {
				t2 = 1;
				t1 = d12 + p21d1;
				if(t1 < 0) {
					t1 = 0;
				} else if(t1 > d11) {
					t1 = 1;
				} else {
					t1 /= d11;
				}
			} else {
				t2 /= d22;
			}
		}
		var cp1X;
		var cp1Y;
		var cp1Z;
		var cp2X;
		var cp2Y;
		var cp2Z;
		cp1X = p1X + d1X * t1;
		cp1Y = p1Y + d1Y * t1;
		cp1Z = p1Z + d1Z * t1;
		cp2X = p2X + d2X * t2;
		cp2Y = p2Y + d2Y * t2;
		cp2Z = p2Z + d2Z * t2;
		var dX;
		var dY;
		var dZ;
		dX = cp1X - cp2X;
		dY = cp1Y - cp2Y;
		dZ = cp1Z - cp2Z;
		var len2 = dX * dX + dY * dY + dZ * dZ;
		if(len2 >= (r1 + r2) * (r1 + r2)) {
			return;
		}
		var len = Math.sqrt(len2);
		var nX;
		var nY;
		var nZ;
		if(len > 0) {
			nX = dX * (1 / len);
			nY = dY * (1 / len);
			nZ = dZ * (1 / len);
		} else {
			nX = 1;
			nY = 0;
			nZ = 0;
		}
		this.setNormal(result,nX,nY,nZ);
		var pos1X;
		var pos1Y;
		var pos1Z;
		var pos2X;
		var pos2Y;
		var pos2Z;
		pos1X = cp1X + nX * -r1;
		pos1Y = cp1Y + nY * -r1;
		pos1Z = cp1Z + nZ * -r1;
		pos2X = cp2X + nX * r2;
		pos2Y = cp2Y + nY * r2;
		pos2Z = cp2Z + nZ * r2;
		this.addPoint(result,pos1X,pos1Y,pos1Z,pos2X,pos2Y,pos2Z,r1 + r2 - len,0);
	}
	,__class__: oimo_collision_narrowphase_detector_CapsuleCapsuleDetector
});
var oimo_collision_narrowphase_detector_GjkEpaDetector = function() {
	oimo_collision_narrowphase_detector_Detector.call(this,false);
};
oimo_collision_narrowphase_detector_GjkEpaDetector.__name__ = true;
oimo_collision_narrowphase_detector_GjkEpaDetector.__super__ = oimo_collision_narrowphase_detector_Detector;
oimo_collision_narrowphase_detector_GjkEpaDetector.prototype = $extend(oimo_collision_narrowphase_detector_Detector.prototype,{
	detectImpl: function(result,geom1,geom2,tf1,tf2,cachedData) {
		var gjkEpa = oimo_collision_narrowphase_detector_gjkepa_GjkEpa.instance;
		var g1 = geom1;
		var g2 = geom2;
		var status = gjkEpa.computeClosestPointsImpl(g1,g2,tf1,tf2,oimo_common_Setting.enableGJKCaching ? cachedData : null,true);
		result.incremental = true;
		if(status != oimo_collision_narrowphase_detector_gjkepa_GjkEpaResultState.SUCCEEDED) {
			console.log("src/oimo/collision/narrowphase/detector/GjkEpaDetector.hx:28:","GJK/EPA failed: status=" + status);
			return;
		}
		if(gjkEpa.distance > g1._gjkMargin + g2._gjkMargin) {
			return;
		}
		var pos1X;
		var pos1Y;
		var pos1Z;
		var pos2X;
		var pos2Y;
		var pos2Z;
		var v = gjkEpa.closestPoint1;
		pos1X = v.x;
		pos1Y = v.y;
		pos1Z = v.z;
		var v = gjkEpa.closestPoint2;
		pos2X = v.x;
		pos2Y = v.y;
		pos2Z = v.z;
		var normalX;
		var normalY;
		var normalZ;
		normalX = pos1X - pos2X;
		normalY = pos1Y - pos2Y;
		normalZ = pos1Z - pos2Z;
		if(normalX * normalX + normalY * normalY + normalZ * normalZ == 0) {
			return;
		}
		if(gjkEpa.distance < 0) {
			normalX = -normalX;
			normalY = -normalY;
			normalZ = -normalZ;
		}
		var l = normalX * normalX + normalY * normalY + normalZ * normalZ;
		if(l > 0) {
			l = 1 / Math.sqrt(l);
		}
		normalX *= l;
		normalY *= l;
		normalZ *= l;
		this.setNormal(result,normalX,normalY,normalZ);
		pos1X += normalX * -g1._gjkMargin;
		pos1Y += normalY * -g1._gjkMargin;
		pos1Z += normalZ * -g1._gjkMargin;
		pos2X += normalX * g2._gjkMargin;
		pos2Y += normalY * g2._gjkMargin;
		pos2Z += normalZ * g2._gjkMargin;
		this.addPoint(result,pos1X,pos1Y,pos1Z,pos2X,pos2Y,pos2Z,g1._gjkMargin + g2._gjkMargin - gjkEpa.distance,0);
	}
	,__class__: oimo_collision_narrowphase_detector_GjkEpaDetector
});
var oimo_collision_narrowphase_detector_SphereBoxDetector = function(swapped) {
	oimo_collision_narrowphase_detector_Detector.call(this,swapped);
};
oimo_collision_narrowphase_detector_SphereBoxDetector.__name__ = true;
oimo_collision_narrowphase_detector_SphereBoxDetector.__super__ = oimo_collision_narrowphase_detector_Detector;
oimo_collision_narrowphase_detector_SphereBoxDetector.prototype = $extend(oimo_collision_narrowphase_detector_Detector.prototype,{
	detectImpl: function(result,geom1,geom2,tf1,tf2,cachedData) {
		var b = geom2;
		result.incremental = false;
		var halfExtX;
		var halfExtY;
		var halfExtZ;
		var negHalfExtX;
		var negHalfExtY;
		var negHalfExtZ;
		halfExtX = b._halfExtentsX;
		halfExtY = b._halfExtentsY;
		halfExtZ = b._halfExtentsZ;
		negHalfExtX = -halfExtX;
		negHalfExtY = -halfExtY;
		negHalfExtZ = -halfExtZ;
		var r = geom1._radius;
		var boxToSphereX;
		var boxToSphereY;
		var boxToSphereZ;
		boxToSphereX = tf1._positionX - tf2._positionX;
		boxToSphereY = tf1._positionY - tf2._positionY;
		boxToSphereZ = tf1._positionZ - tf2._positionZ;
		var boxToSphereInBoxX;
		var boxToSphereInBoxY;
		var boxToSphereInBoxZ;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = tf2._rotation00 * boxToSphereX + tf2._rotation10 * boxToSphereY + tf2._rotation20 * boxToSphereZ;
		__tmp__Y = tf2._rotation01 * boxToSphereX + tf2._rotation11 * boxToSphereY + tf2._rotation21 * boxToSphereZ;
		__tmp__Z = tf2._rotation02 * boxToSphereX + tf2._rotation12 * boxToSphereY + tf2._rotation22 * boxToSphereZ;
		boxToSphereInBoxX = __tmp__X;
		boxToSphereInBoxY = __tmp__Y;
		boxToSphereInBoxZ = __tmp__Z;
		if(negHalfExtX < boxToSphereInBoxX && halfExtX > boxToSphereInBoxX && negHalfExtY < boxToSphereInBoxY && halfExtY > boxToSphereInBoxY && negHalfExtZ < boxToSphereInBoxZ && halfExtZ > boxToSphereInBoxZ) {
			var sphereToBoxSurfaceX;
			var sphereToBoxSurfaceY;
			var sphereToBoxSurfaceZ;
			sphereToBoxSurfaceX = boxToSphereInBoxX < 0 ? -boxToSphereInBoxX : boxToSphereInBoxX;
			sphereToBoxSurfaceY = boxToSphereInBoxY < 0 ? -boxToSphereInBoxY : boxToSphereInBoxY;
			sphereToBoxSurfaceZ = boxToSphereInBoxZ < 0 ? -boxToSphereInBoxZ : boxToSphereInBoxZ;
			sphereToBoxSurfaceX = halfExtX - sphereToBoxSurfaceX;
			sphereToBoxSurfaceY = halfExtY - sphereToBoxSurfaceY;
			sphereToBoxSurfaceZ = halfExtZ - sphereToBoxSurfaceZ;
			var normalInBoxX;
			var normalInBoxY;
			var normalInBoxZ;
			var distX = sphereToBoxSurfaceX;
			var distY = sphereToBoxSurfaceY;
			var distZ = sphereToBoxSurfaceZ;
			var depth;
			var projectionMaskX;
			var projectionMaskY;
			var projectionMaskZ;
			if(distX < distY) {
				if(distX < distZ) {
					if(boxToSphereInBoxX > 0) {
						normalInBoxX = 1;
						normalInBoxY = 0;
						normalInBoxZ = 0;
					} else {
						normalInBoxX = -1;
						normalInBoxY = 0;
						normalInBoxZ = 0;
					}
					projectionMaskX = 0;
					projectionMaskY = 1;
					projectionMaskZ = 1;
					depth = distX;
				} else {
					if(boxToSphereInBoxZ > 0) {
						normalInBoxX = 0;
						normalInBoxY = 0;
						normalInBoxZ = 1;
					} else {
						normalInBoxX = 0;
						normalInBoxY = 0;
						normalInBoxZ = -1;
					}
					projectionMaskX = 1;
					projectionMaskY = 1;
					projectionMaskZ = 0;
					depth = distZ;
				}
			} else if(distY < distZ) {
				if(boxToSphereInBoxY > 0) {
					normalInBoxX = 0;
					normalInBoxY = 1;
					normalInBoxZ = 0;
				} else {
					normalInBoxX = 0;
					normalInBoxY = -1;
					normalInBoxZ = 0;
				}
				projectionMaskX = 1;
				projectionMaskY = 0;
				projectionMaskZ = 1;
				depth = distY;
			} else {
				if(boxToSphereInBoxZ > 0) {
					normalInBoxX = 0;
					normalInBoxY = 0;
					normalInBoxZ = 1;
				} else {
					normalInBoxX = 0;
					normalInBoxY = 0;
					normalInBoxZ = -1;
				}
				projectionMaskX = 1;
				projectionMaskY = 1;
				projectionMaskZ = 0;
				depth = distZ;
			}
			var baseX;
			var baseY;
			var baseZ;
			baseX = projectionMaskX * boxToSphereInBoxX;
			baseY = projectionMaskY * boxToSphereInBoxY;
			baseZ = projectionMaskZ * boxToSphereInBoxZ;
			var boxToClosestPointInBoxX;
			var boxToClosestPointInBoxY;
			var boxToClosestPointInBoxZ;
			boxToClosestPointInBoxX = normalInBoxX * halfExtX;
			boxToClosestPointInBoxY = normalInBoxY * halfExtY;
			boxToClosestPointInBoxZ = normalInBoxZ * halfExtZ;
			boxToClosestPointInBoxX += baseX;
			boxToClosestPointInBoxY += baseY;
			boxToClosestPointInBoxZ += baseZ;
			var boxToClosestPointX;
			var boxToClosestPointY;
			var boxToClosestPointZ;
			var normalX;
			var normalY;
			var normalZ;
			var __tmp__X;
			var __tmp__Y;
			var __tmp__Z;
			__tmp__X = tf2._rotation00 * boxToClosestPointInBoxX + tf2._rotation01 * boxToClosestPointInBoxY + tf2._rotation02 * boxToClosestPointInBoxZ;
			__tmp__Y = tf2._rotation10 * boxToClosestPointInBoxX + tf2._rotation11 * boxToClosestPointInBoxY + tf2._rotation12 * boxToClosestPointInBoxZ;
			__tmp__Z = tf2._rotation20 * boxToClosestPointInBoxX + tf2._rotation21 * boxToClosestPointInBoxY + tf2._rotation22 * boxToClosestPointInBoxZ;
			boxToClosestPointX = __tmp__X;
			boxToClosestPointY = __tmp__Y;
			boxToClosestPointZ = __tmp__Z;
			var __tmp__X;
			var __tmp__Y;
			var __tmp__Z;
			__tmp__X = tf2._rotation00 * normalInBoxX + tf2._rotation01 * normalInBoxY + tf2._rotation02 * normalInBoxZ;
			__tmp__Y = tf2._rotation10 * normalInBoxX + tf2._rotation11 * normalInBoxY + tf2._rotation12 * normalInBoxZ;
			__tmp__Z = tf2._rotation20 * normalInBoxX + tf2._rotation21 * normalInBoxY + tf2._rotation22 * normalInBoxZ;
			normalX = __tmp__X;
			normalY = __tmp__Y;
			normalZ = __tmp__Z;
			this.setNormal(result,normalX,normalY,normalZ);
			var pos1X;
			var pos1Y;
			var pos1Z;
			var pos2X;
			var pos2Y;
			var pos2Z;
			pos1X = tf1._positionX + normalX * -r;
			pos1Y = tf1._positionY + normalY * -r;
			pos1Z = tf1._positionZ + normalZ * -r;
			pos2X = tf2._positionX + boxToClosestPointX;
			pos2Y = tf2._positionY + boxToClosestPointY;
			pos2Z = tf2._positionZ + boxToClosestPointZ;
			this.addPoint(result,pos1X,pos1Y,pos1Z,pos2X,pos2Y,pos2Z,depth,0);
			return;
		}
		var boxToClosestPointInBoxX;
		var boxToClosestPointInBoxY;
		var boxToClosestPointInBoxZ;
		halfExtX -= 1e-9;
		halfExtY -= 1e-9;
		halfExtZ -= 1e-9;
		negHalfExtX += 1e-9;
		negHalfExtY += 1e-9;
		negHalfExtZ += 1e-9;
		boxToClosestPointInBoxX = boxToSphereInBoxX < halfExtX ? boxToSphereInBoxX : halfExtX;
		boxToClosestPointInBoxY = boxToSphereInBoxY < halfExtY ? boxToSphereInBoxY : halfExtY;
		boxToClosestPointInBoxZ = boxToSphereInBoxZ < halfExtZ ? boxToSphereInBoxZ : halfExtZ;
		if(!(boxToClosestPointInBoxX > negHalfExtX)) {
			boxToClosestPointInBoxX = negHalfExtX;
		}
		if(!(boxToClosestPointInBoxY > negHalfExtY)) {
			boxToClosestPointInBoxY = negHalfExtY;
		}
		if(!(boxToClosestPointInBoxZ > negHalfExtZ)) {
			boxToClosestPointInBoxZ = negHalfExtZ;
		}
		var closestPointToSphereInBoxX;
		var closestPointToSphereInBoxY;
		var closestPointToSphereInBoxZ;
		closestPointToSphereInBoxX = boxToSphereInBoxX - boxToClosestPointInBoxX;
		closestPointToSphereInBoxY = boxToSphereInBoxY - boxToClosestPointInBoxY;
		closestPointToSphereInBoxZ = boxToSphereInBoxZ - boxToClosestPointInBoxZ;
		var dist = closestPointToSphereInBoxX * closestPointToSphereInBoxX + closestPointToSphereInBoxY * closestPointToSphereInBoxY + closestPointToSphereInBoxZ * closestPointToSphereInBoxZ;
		if(dist >= r * r) {
			return;
		}
		dist = Math.sqrt(dist);
		var boxToClosestPointX;
		var boxToClosestPointY;
		var boxToClosestPointZ;
		var closestPointToSphereX;
		var closestPointToSphereY;
		var closestPointToSphereZ;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = tf2._rotation00 * boxToClosestPointInBoxX + tf2._rotation01 * boxToClosestPointInBoxY + tf2._rotation02 * boxToClosestPointInBoxZ;
		__tmp__Y = tf2._rotation10 * boxToClosestPointInBoxX + tf2._rotation11 * boxToClosestPointInBoxY + tf2._rotation12 * boxToClosestPointInBoxZ;
		__tmp__Z = tf2._rotation20 * boxToClosestPointInBoxX + tf2._rotation21 * boxToClosestPointInBoxY + tf2._rotation22 * boxToClosestPointInBoxZ;
		boxToClosestPointX = __tmp__X;
		boxToClosestPointY = __tmp__Y;
		boxToClosestPointZ = __tmp__Z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = tf2._rotation00 * closestPointToSphereInBoxX + tf2._rotation01 * closestPointToSphereInBoxY + tf2._rotation02 * closestPointToSphereInBoxZ;
		__tmp__Y = tf2._rotation10 * closestPointToSphereInBoxX + tf2._rotation11 * closestPointToSphereInBoxY + tf2._rotation12 * closestPointToSphereInBoxZ;
		__tmp__Z = tf2._rotation20 * closestPointToSphereInBoxX + tf2._rotation21 * closestPointToSphereInBoxY + tf2._rotation22 * closestPointToSphereInBoxZ;
		closestPointToSphereX = __tmp__X;
		closestPointToSphereY = __tmp__Y;
		closestPointToSphereZ = __tmp__Z;
		var normalX;
		var normalY;
		var normalZ;
		var l = closestPointToSphereX * closestPointToSphereX + closestPointToSphereY * closestPointToSphereY + closestPointToSphereZ * closestPointToSphereZ;
		if(l > 0) {
			l = 1 / Math.sqrt(l);
		}
		normalX = closestPointToSphereX * l;
		normalY = closestPointToSphereY * l;
		normalZ = closestPointToSphereZ * l;
		this.setNormal(result,normalX,normalY,normalZ);
		var pos1X;
		var pos1Y;
		var pos1Z;
		var pos2X;
		var pos2Y;
		var pos2Z;
		pos1X = tf1._positionX + normalX * -r;
		pos1Y = tf1._positionY + normalY * -r;
		pos1Z = tf1._positionZ + normalZ * -r;
		pos2X = tf2._positionX + boxToClosestPointX;
		pos2Y = tf2._positionY + boxToClosestPointY;
		pos2Z = tf2._positionZ + boxToClosestPointZ;
		this.addPoint(result,pos1X,pos1Y,pos1Z,pos2X,pos2Y,pos2Z,r - dist,0);
	}
	,__class__: oimo_collision_narrowphase_detector_SphereBoxDetector
});
var oimo_collision_narrowphase_detector_SphereCapsuleDetector = function(swapped) {
	oimo_collision_narrowphase_detector_Detector.call(this,swapped);
};
oimo_collision_narrowphase_detector_SphereCapsuleDetector.__name__ = true;
oimo_collision_narrowphase_detector_SphereCapsuleDetector.__super__ = oimo_collision_narrowphase_detector_Detector;
oimo_collision_narrowphase_detector_SphereCapsuleDetector.prototype = $extend(oimo_collision_narrowphase_detector_Detector.prototype,{
	detectImpl: function(result,geom1,geom2,tf1,tf2,cachedData) {
		var c2 = geom2;
		result.incremental = false;
		var hh2 = c2._halfHeight;
		var r1 = geom1._radius;
		var r2 = c2._radius;
		var axis2X;
		var axis2Y;
		var axis2Z;
		axis2X = tf2._rotation01;
		axis2Y = tf2._rotation11;
		axis2Z = tf2._rotation21;
		var cp1X;
		var cp1Y;
		var cp1Z;
		cp1X = tf1._positionX;
		cp1Y = tf1._positionY;
		cp1Z = tf1._positionZ;
		var p2X;
		var p2Y;
		var p2Z;
		var q2X;
		var q2Y;
		var q2Z;
		p2X = tf2._positionX + axis2X * -hh2;
		p2Y = tf2._positionY + axis2Y * -hh2;
		p2Z = tf2._positionZ + axis2Z * -hh2;
		q2X = tf2._positionX + axis2X * hh2;
		q2Y = tf2._positionY + axis2Y * hh2;
		q2Z = tf2._positionZ + axis2Z * hh2;
		var p12X;
		var p12Y;
		var p12Z;
		p12X = cp1X - p2X;
		p12Y = cp1Y - p2Y;
		p12Z = cp1Z - p2Z;
		var d2X;
		var d2Y;
		var d2Z;
		d2X = q2X - p2X;
		d2Y = q2Y - p2Y;
		d2Z = q2Z - p2Z;
		var d22 = hh2 * hh2 * 4;
		var t = p12X * d2X + p12Y * d2Y + p12Z * d2Z;
		if(t < 0) {
			t = 0;
		} else if(t > d22) {
			t = 1;
		} else {
			t /= d22;
		}
		var cp2X;
		var cp2Y;
		var cp2Z;
		cp2X = p2X + d2X * t;
		cp2Y = p2Y + d2Y * t;
		cp2Z = p2Z + d2Z * t;
		var dX;
		var dY;
		var dZ;
		dX = cp1X - cp2X;
		dY = cp1Y - cp2Y;
		dZ = cp1Z - cp2Z;
		var len2 = dX * dX + dY * dY + dZ * dZ;
		if(len2 >= (r1 + r2) * (r1 + r2)) {
			return;
		}
		var len = Math.sqrt(len2);
		var nX;
		var nY;
		var nZ;
		if(len > 0) {
			nX = dX * (1 / len);
			nY = dY * (1 / len);
			nZ = dZ * (1 / len);
		} else {
			nX = 1;
			nY = 0;
			nZ = 0;
		}
		this.setNormal(result,nX,nY,nZ);
		var pos1X;
		var pos1Y;
		var pos1Z;
		var pos2X;
		var pos2Y;
		var pos2Z;
		pos1X = cp1X + nX * -r1;
		pos1Y = cp1Y + nY * -r1;
		pos1Z = cp1Z + nZ * -r1;
		pos2X = cp2X + nX * r2;
		pos2Y = cp2Y + nY * r2;
		pos2Z = cp2Z + nZ * r2;
		this.addPoint(result,pos1X,pos1Y,pos1Z,pos2X,pos2Y,pos2Z,r1 + r2 - len,0);
	}
	,__class__: oimo_collision_narrowphase_detector_SphereCapsuleDetector
});
var oimo_collision_narrowphase_detector_SphereSphereDetector = function() {
	oimo_collision_narrowphase_detector_Detector.call(this,false);
};
oimo_collision_narrowphase_detector_SphereSphereDetector.__name__ = true;
oimo_collision_narrowphase_detector_SphereSphereDetector.__super__ = oimo_collision_narrowphase_detector_Detector;
oimo_collision_narrowphase_detector_SphereSphereDetector.prototype = $extend(oimo_collision_narrowphase_detector_Detector.prototype,{
	detectImpl: function(result,geom1,geom2,tf1,tf2,cachedData) {
		result.incremental = false;
		var dX;
		var dY;
		var dZ;
		dX = tf1._positionX - tf2._positionX;
		dY = tf1._positionY - tf2._positionY;
		dZ = tf1._positionZ - tf2._positionZ;
		var r1 = geom1._radius;
		var r2 = geom2._radius;
		var len2 = dX * dX + dY * dY + dZ * dZ;
		if(len2 >= (r1 + r2) * (r1 + r2)) {
			return;
		}
		var len = Math.sqrt(len2);
		var nX;
		var nY;
		var nZ;
		if(len > 0) {
			nX = dX * (1 / len);
			nY = dY * (1 / len);
			nZ = dZ * (1 / len);
		} else {
			nX = 1;
			nY = 0;
			nZ = 0;
		}
		this.setNormal(result,nX,nY,nZ);
		var pos1X;
		var pos1Y;
		var pos1Z;
		var pos2X;
		var pos2Y;
		var pos2Z;
		pos1X = tf1._positionX + nX * -r1;
		pos1Y = tf1._positionY + nY * -r1;
		pos1Z = tf1._positionZ + nZ * -r1;
		pos2X = tf2._positionX + nX * r2;
		pos2Y = tf2._positionY + nY * r2;
		pos2Z = tf2._positionZ + nZ * r2;
		this.addPoint(result,pos1X,pos1Y,pos1Z,pos2X,pos2Y,pos2Z,r1 + r2 - len,0);
	}
	,__class__: oimo_collision_narrowphase_detector_SphereSphereDetector
});
var oimo_collision_narrowphase_detector_gjkepa_EpaPolyhedron = function() {
	this._vertices = new Array(oimo_common_Setting.maxEPAVertices);
	this._center = new oimo_common_Vec3();
	this._numVertices = 0;
	this._triangleList = null;
	this._triangleListLast = null;
	this._numTriangles = 0;
	this._trianglePool = null;
	this._vertexPool = null;
};
oimo_collision_narrowphase_detector_gjkepa_EpaPolyhedron.__name__ = true;
oimo_collision_narrowphase_detector_gjkepa_EpaPolyhedron.prototype = {
	dumpHoleEdge: function(first) {
	}
	,validate: function() {
		var t = this._triangleList;
		while(t != null) {
			t._vertices[0]._tmpEdgeLoopOuterTriangle = null;
			t._vertices[0]._tmpEdgeLoopNext = null;
			if(t._adjacentPairIndex[0] == -1) {
				this._status = 2;
				return false;
			}
			if(t._adjacentTriangles[0] == null) {
				this._status = 3;
				return false;
			}
			t._vertices[1]._tmpEdgeLoopOuterTriangle = null;
			t._vertices[1]._tmpEdgeLoopNext = null;
			if(t._adjacentPairIndex[1] == -1) {
				this._status = 2;
				return false;
			}
			if(t._adjacentTriangles[1] == null) {
				this._status = 3;
				return false;
			}
			t._vertices[2]._tmpEdgeLoopOuterTriangle = null;
			t._vertices[2]._tmpEdgeLoopNext = null;
			if(t._adjacentPairIndex[2] == -1) {
				this._status = 2;
				return false;
			}
			if(t._adjacentTriangles[2] == null) {
				this._status = 3;
				return false;
			}
			t = t._next;
		}
		return true;
	}
	,findEdgeLoop: function(id,base,from) {
		if(base._tmpDfsId == id) {
			return;
		}
		base._tmpDfsId = id;
		var _this = base.tmp;
		_this.x = from.x;
		_this.y = from.y;
		_this.z = from.z;
		var v = base._vertices[0].v;
		_this.x -= v.x;
		_this.y -= v.y;
		_this.z -= v.z;
		var _this = base.tmp;
		var v = base._normal;
		base._tmpDfsVisible = _this.x * v.x + _this.y * v.y + _this.z * v.z > 0;
		if(!base._tmpDfsVisible) {
			this._status = 6;
			return;
		}
		var _g = 0;
		while(_g < 3) {
			var i = _g++;
			var t = base._adjacentTriangles[i];
			if(t == null) {
				continue;
			}
			var _this = t.tmp;
			_this.x = from.x;
			_this.y = from.y;
			_this.z = from.z;
			var v = t._vertices[0].v;
			_this.x -= v.x;
			_this.y -= v.y;
			_this.z -= v.z;
			var _this1 = t.tmp;
			var v1 = t._normal;
			t._tmpDfsVisible = _this1.x * v1.x + _this1.y * v1.y + _this1.z * v1.z > 0;
			if(t._tmpDfsVisible) {
				this.findEdgeLoop(id,t,from);
			} else {
				var v11 = base._vertices[i];
				v11._tmpEdgeLoopNext = base._vertices[base._nextIndex[i]];
				v11._tmpEdgeLoopOuterTriangle = t;
			}
		}
		var triangle = base._adjacentTriangles[0];
		if(triangle != null) {
			var pairIndex = base._adjacentPairIndex[0];
			triangle._adjacentTriangles[pairIndex] = null;
			triangle._adjacentPairIndex[pairIndex] = -1;
			base._adjacentTriangles[0] = null;
			base._adjacentPairIndex[0] = -1;
		}
		var triangle = base._adjacentTriangles[1];
		if(triangle != null) {
			var pairIndex = base._adjacentPairIndex[1];
			triangle._adjacentTriangles[pairIndex] = null;
			triangle._adjacentPairIndex[pairIndex] = -1;
			base._adjacentTriangles[1] = null;
			base._adjacentPairIndex[1] = -1;
		}
		var triangle = base._adjacentTriangles[2];
		if(triangle != null) {
			var pairIndex = base._adjacentPairIndex[2];
			triangle._adjacentTriangles[pairIndex] = null;
			triangle._adjacentPairIndex[pairIndex] = -1;
			base._adjacentTriangles[2] = null;
			base._adjacentPairIndex[2] = -1;
		}
		this._numTriangles--;
		var prev = base._prev;
		var next = base._next;
		if(prev != null) {
			prev._next = next;
		}
		if(next != null) {
			next._prev = prev;
		}
		if(base == this._triangleList) {
			this._triangleList = this._triangleList._next;
		}
		if(base == this._triangleListLast) {
			this._triangleListLast = this._triangleListLast._prev;
		}
		base._next = null;
		base._prev = null;
		base.removeReferences();
		base._next = this._trianglePool;
		this._trianglePool = base;
	}
	,_init: function(v1,v2,v3,v4) {
		this._status = 0;
		this._numVertices = 4;
		this._vertices[0] = v1;
		this._vertices[1] = v2;
		this._vertices[2] = v3;
		this._vertices[3] = v4;
		var _this = this._center;
		var v = v1.v;
		_this.x = v.x;
		_this.y = v.y;
		_this.z = v.z;
		var v = v2.v;
		_this.x += v.x;
		_this.y += v.y;
		_this.z += v.z;
		var v = v3.v;
		_this.x += v.x;
		_this.y += v.y;
		_this.z += v.z;
		var v = v4.v;
		_this.x += v.x;
		_this.y += v.y;
		_this.z += v.z;
		_this.x *= 0.25;
		_this.y *= 0.25;
		_this.z *= 0.25;
		var first = this._trianglePool;
		if(first != null) {
			this._trianglePool = first._next;
			first._next = null;
		} else {
			first = new oimo_collision_narrowphase_detector_gjkepa_EpaTriangle();
		}
		var t1 = first;
		var first = this._trianglePool;
		if(first != null) {
			this._trianglePool = first._next;
			first._next = null;
		} else {
			first = new oimo_collision_narrowphase_detector_gjkepa_EpaTriangle();
		}
		var t2 = first;
		var first = this._trianglePool;
		if(first != null) {
			this._trianglePool = first._next;
			first._next = null;
		} else {
			first = new oimo_collision_narrowphase_detector_gjkepa_EpaTriangle();
		}
		var t3 = first;
		var first = this._trianglePool;
		if(first != null) {
			this._trianglePool = first._next;
			first._next = null;
		} else {
			first = new oimo_collision_narrowphase_detector_gjkepa_EpaTriangle();
		}
		var t4 = first;
		if(!t1.init(v1,v2,v3,this._center,true)) {
			this._status = 1;
		}
		if(!t2.init(v1,v2,v4,this._center,true)) {
			this._status = 1;
		}
		if(!t3.init(v1,v3,v4,this._center,true)) {
			this._status = 1;
		}
		if(!t4.init(v2,v3,v4,this._center,true)) {
			this._status = 1;
		}
		if(!t1.setAdjacentTriangle(t2)) {
			this._status = 1;
		}
		if(!t1.setAdjacentTriangle(t3)) {
			this._status = 1;
		}
		if(!t1.setAdjacentTriangle(t4)) {
			this._status = 1;
		}
		if(!t2.setAdjacentTriangle(t3)) {
			this._status = 1;
		}
		if(!t2.setAdjacentTriangle(t4)) {
			this._status = 1;
		}
		if(!t3.setAdjacentTriangle(t4)) {
			this._status = 1;
		}
		this._numTriangles++;
		if(this._triangleList == null) {
			this._triangleList = t1;
			this._triangleListLast = t1;
		} else {
			this._triangleListLast._next = t1;
			t1._prev = this._triangleListLast;
			this._triangleListLast = t1;
		}
		this._numTriangles++;
		if(this._triangleList == null) {
			this._triangleList = t2;
			this._triangleListLast = t2;
		} else {
			this._triangleListLast._next = t2;
			t2._prev = this._triangleListLast;
			this._triangleListLast = t2;
		}
		this._numTriangles++;
		if(this._triangleList == null) {
			this._triangleList = t3;
			this._triangleListLast = t3;
		} else {
			this._triangleListLast._next = t3;
			t3._prev = this._triangleListLast;
			this._triangleListLast = t3;
		}
		this._numTriangles++;
		if(this._triangleList == null) {
			this._triangleList = t4;
			this._triangleListLast = t4;
		} else {
			this._triangleListLast._next = t4;
			t4._prev = this._triangleListLast;
			this._triangleListLast = t4;
		}
		return this._status == 0;
	}
	,_addVertex: function(vertex,base) {
		this._vertices[this._numVertices++] = vertex;
		var v1 = base._vertices[0];
		this.findEdgeLoop(this._numVertices,base,vertex.v);
		if(this._status != 0) {
			return false;
		}
		var v = v1;
		var prevT = null;
		var firstT = null;
		while(true) {
			if(v._tmpEdgeLoopNext == null) {
				this._dumpAsObjModel();
				this._status = 4;
				return false;
			}
			if(v._tmpEdgeLoopOuterTriangle == null) {
				this._status = 5;
				return false;
			}
			var first = this._trianglePool;
			if(first != null) {
				this._trianglePool = first._next;
				first._next = null;
			} else {
				first = new oimo_collision_narrowphase_detector_gjkepa_EpaTriangle();
			}
			var t = first;
			if(firstT == null) {
				firstT = t;
			}
			if(!t.init(v,v._tmpEdgeLoopNext,vertex,this._center,false)) {
				this._status = 1;
			}
			if(this._status != 0) {
				return false;
			}
			this._numTriangles++;
			if(this._triangleList == null) {
				this._triangleList = t;
				this._triangleListLast = t;
			} else {
				this._triangleListLast._next = t;
				t._prev = this._triangleListLast;
				this._triangleListLast = t;
			}
			if(!t.setAdjacentTriangle(v._tmpEdgeLoopOuterTriangle)) {
				this._status = 1;
			}
			if(prevT != null) {
				if(!t.setAdjacentTriangle(prevT)) {
					this._status = 1;
				}
			}
			prevT = t;
			v = v._tmpEdgeLoopNext;
			if(!(v != v1)) {
				break;
			}
		}
		if(!prevT.setAdjacentTriangle(firstT)) {
			this._status = 1;
		}
		if(this._status == 0) {
			return this.validate();
		} else {
			return false;
		}
	}
	,_dumpAsObjModel: function() {
	}
	,__class__: oimo_collision_narrowphase_detector_gjkepa_EpaPolyhedron
};
var oimo_collision_narrowphase_detector_gjkepa_EpaPolyhedronState = function() { };
oimo_collision_narrowphase_detector_gjkepa_EpaPolyhedronState.__name__ = true;
var oimo_collision_narrowphase_detector_gjkepa_EpaTriangle = function() {
	this.id = ++oimo_collision_narrowphase_detector_gjkepa_EpaTriangle.count;
	this._next = null;
	this._prev = null;
	this._normal = new oimo_common_Vec3();
	this._distanceSq = 0;
	this._tmpDfsId = 0;
	this._tmpDfsVisible = false;
	this._vertices = new Array(3);
	this._adjacentTriangles = new Array(3);
	this._adjacentPairIndex = new Array(3);
	this.tmp = new oimo_common_Vec3();
	this._nextIndex = new Array(3);
	this._nextIndex[0] = 1;
	this._nextIndex[1] = 2;
	this._nextIndex[2] = 0;
};
oimo_collision_narrowphase_detector_gjkepa_EpaTriangle.__name__ = true;
oimo_collision_narrowphase_detector_gjkepa_EpaTriangle.prototype = {
	init: function(vertex1,vertex2,vertex3,center,autoCheck) {
		if(autoCheck == null) {
			autoCheck = false;
		}
		var v1X;
		var v1Y;
		var v1Z;
		var v2X;
		var v2Y;
		var v2Z;
		var v3X;
		var v3Y;
		var v3Z;
		var vcX;
		var vcY;
		var vcZ;
		var v = vertex1.v;
		v1X = v.x;
		v1Y = v.y;
		v1Z = v.z;
		var v = vertex2.v;
		v2X = v.x;
		v2Y = v.y;
		v2Z = v.z;
		var v = vertex3.v;
		v3X = v.x;
		v3Y = v.y;
		v3Z = v.z;
		vcX = center.x;
		vcY = center.y;
		vcZ = center.z;
		var v12X;
		var v12Y;
		var v12Z;
		var v13X;
		var v13Y;
		var v13Z;
		var vc1X;
		var vc1Y;
		var vc1Z;
		v12X = v2X - v1X;
		v12Y = v2Y - v1Y;
		v12Z = v2Z - v1Z;
		v13X = v3X - v1X;
		v13Y = v3Y - v1Y;
		v13Z = v3Z - v1Z;
		vc1X = v1X - vcX;
		vc1Y = v1Y - vcY;
		vc1Z = v1Z - vcZ;
		var inorX;
		var inorY;
		var inorZ;
		inorX = v12Y * v13Z - v12Z * v13Y;
		inorY = v12Z * v13X - v12X * v13Z;
		inorZ = v12X * v13Y - v12Y * v13X;
		var inverted = false;
		if(vc1X * inorX + vc1Y * inorY + vc1Z * inorZ < 0) {
			if(autoCheck) {
				var tmp = vertex2;
				vertex2 = vertex3;
				vertex3 = tmp;
				inorX *= -1;
				inorY *= -1;
				inorZ *= -1;
			} else {
				inverted = true;
			}
		}
		this._vertices[0] = vertex1;
		this._vertices[1] = vertex2;
		this._vertices[2] = vertex3;
		var v = this._normal;
		v.x = inorX;
		v.y = inorY;
		v.z = inorZ;
		var vec1 = vertex1.v;
		var vec2 = vertex2.v;
		var vec3 = vertex3.v;
		var out = this.tmp;
		var v1X;
		var v1Y;
		var v1Z;
		var v2X;
		var v2Y;
		var v2Z;
		var v3X;
		var v3Y;
		var v3Z;
		var v12X;
		var v12Y;
		var v12Z;
		var v23X;
		var v23Y;
		var v23Z;
		var v31X;
		var v31Y;
		var v31Z;
		v1X = vec1.x;
		v1Y = vec1.y;
		v1Z = vec1.z;
		v2X = vec2.x;
		v2Y = vec2.y;
		v2Z = vec2.z;
		v3X = vec3.x;
		v3Y = vec3.y;
		v3Z = vec3.z;
		v12X = v2X - v1X;
		v12Y = v2Y - v1Y;
		v12Z = v2Z - v1Z;
		v23X = v3X - v2X;
		v23Y = v3Y - v2Y;
		v23Z = v3Z - v2Z;
		v31X = v1X - v3X;
		v31Y = v1Y - v3Y;
		v31Z = v1Z - v3Z;
		var nX;
		var nY;
		var nZ;
		nX = v12Y * v23Z - v12Z * v23Y;
		nY = v12Z * v23X - v12X * v23Z;
		nZ = v12X * v23Y - v12Y * v23X;
		var n12X;
		var n12Y;
		var n12Z;
		var n23X;
		var n23Y;
		var n23Z;
		var n31X;
		var n31Y;
		var n31Z;
		n12X = v12Y * nZ - v12Z * nY;
		n12Y = v12Z * nX - v12X * nZ;
		n12Z = v12X * nY - v12Y * nX;
		n23X = v23Y * nZ - v23Z * nY;
		n23Y = v23Z * nX - v23X * nZ;
		n23Z = v23X * nY - v23Y * nX;
		n31X = v31Y * nZ - v31Z * nY;
		n31Y = v31Z * nX - v31X * nZ;
		n31Z = v31X * nY - v31Y * nX;
		var mind = -1;
		var minvX;
		var minvY;
		var minvZ;
		minvX = 0;
		minvY = 0;
		minvZ = 0;
		if(v1X * n12X + v1Y * n12Y + v1Z * n12Z < 0) {
			var v1X1;
			var v1Y1;
			var v1Z1;
			var v2X1;
			var v2Y1;
			var v2Z1;
			v1X1 = vec1.x;
			v1Y1 = vec1.y;
			v1Z1 = vec1.z;
			v2X1 = vec2.x;
			v2Y1 = vec2.y;
			v2Z1 = vec2.z;
			var v12X;
			var v12Y;
			var v12Z;
			v12X = v2X1 - v1X1;
			v12Y = v2Y1 - v1Y1;
			v12Z = v2Z1 - v1Z1;
			var t = v12X * v1X1 + v12Y * v1Y1 + v12Z * v1Z1;
			t = -t / (v12X * v12X + v12Y * v12Y + v12Z * v12Z);
			if(t < 0) {
				out.x = v1X1;
				out.y = v1Y1;
				out.z = v1Z1;
			} else if(t > 1) {
				out.x = v2X1;
				out.y = v2Y1;
				out.z = v2Z1;
			} else {
				var pX;
				var pY;
				var pZ;
				pX = v1X1 + v12X * t;
				pY = v1Y1 + v12Y * t;
				pZ = v1Z1 + v12Z * t;
				out.x = pX;
				out.y = pY;
				out.z = pZ;
			}
			mind = out.x * out.x + out.y * out.y + out.z * out.z;
			minvX = out.x;
			minvY = out.y;
			minvZ = out.z;
		}
		if(v2X * n23X + v2Y * n23Y + v2Z * n23Z < 0) {
			var v1X1;
			var v1Y1;
			var v1Z1;
			var v2X;
			var v2Y;
			var v2Z;
			v1X1 = vec2.x;
			v1Y1 = vec2.y;
			v1Z1 = vec2.z;
			v2X = vec3.x;
			v2Y = vec3.y;
			v2Z = vec3.z;
			var v12X;
			var v12Y;
			var v12Z;
			v12X = v2X - v1X1;
			v12Y = v2Y - v1Y1;
			v12Z = v2Z - v1Z1;
			var t = v12X * v1X1 + v12Y * v1Y1 + v12Z * v1Z1;
			t = -t / (v12X * v12X + v12Y * v12Y + v12Z * v12Z);
			if(t < 0) {
				out.x = v1X1;
				out.y = v1Y1;
				out.z = v1Z1;
			} else if(t > 1) {
				out.x = v2X;
				out.y = v2Y;
				out.z = v2Z;
			} else {
				var pX;
				var pY;
				var pZ;
				pX = v1X1 + v12X * t;
				pY = v1Y1 + v12Y * t;
				pZ = v1Z1 + v12Z * t;
				out.x = pX;
				out.y = pY;
				out.z = pZ;
			}
			var d = out.x * out.x + out.y * out.y + out.z * out.z;
			if(mind < 0 || d < mind) {
				mind = d;
				minvX = out.x;
				minvY = out.y;
				minvZ = out.z;
			}
		}
		if(v3X * n31X + v3Y * n31Y + v3Z * n31Z < 0) {
			var v1X1;
			var v1Y1;
			var v1Z1;
			var v2X;
			var v2Y;
			var v2Z;
			v1X1 = vec1.x;
			v1Y1 = vec1.y;
			v1Z1 = vec1.z;
			v2X = vec3.x;
			v2Y = vec3.y;
			v2Z = vec3.z;
			var v12X;
			var v12Y;
			var v12Z;
			v12X = v2X - v1X1;
			v12Y = v2Y - v1Y1;
			v12Z = v2Z - v1Z1;
			var t = v12X * v1X1 + v12Y * v1Y1 + v12Z * v1Z1;
			t = -t / (v12X * v12X + v12Y * v12Y + v12Z * v12Z);
			if(t < 0) {
				out.x = v1X1;
				out.y = v1Y1;
				out.z = v1Z1;
			} else if(t > 1) {
				out.x = v2X;
				out.y = v2Y;
				out.z = v2Z;
			} else {
				var pX;
				var pY;
				var pZ;
				pX = v1X1 + v12X * t;
				pY = v1Y1 + v12Y * t;
				pZ = v1Z1 + v12Z * t;
				out.x = pX;
				out.y = pY;
				out.z = pZ;
			}
			var d = out.x * out.x + out.y * out.y + out.z * out.z;
			if(mind < 0 || d < mind) {
				mind = d;
				minvX = out.x;
				minvY = out.y;
				minvZ = out.z;
			}
		}
		if(mind > 0) {
			out.x = minvX;
			out.y = minvY;
			out.z = minvZ;
		} else {
			var l = nX * nX + nY * nY + nZ * nZ;
			if(l > 0) {
				l = 1 / Math.sqrt(l);
			}
			nX *= l;
			nY *= l;
			nZ *= l;
			var l2 = nX * nX + nY * nY + nZ * nZ;
			l2 = (v1X * nX + v1Y * nY + v1Z * nZ) / l2;
			minvX = nX * l2;
			minvY = nY * l2;
			minvZ = nZ * l2;
			out.x = minvX;
			out.y = minvY;
			out.z = minvZ;
		}
		var _this = this.tmp;
		this._distanceSq = _this.x * _this.x + _this.y * _this.y + _this.z * _this.z;
		this._adjacentTriangles[0] = null;
		this._adjacentTriangles[1] = null;
		this._adjacentTriangles[2] = null;
		this._adjacentPairIndex[0] = -1;
		this._adjacentPairIndex[1] = -1;
		this._adjacentPairIndex[2] = -1;
		return !inverted;
	}
	,setAdjacentTriangle: function(triangle) {
		var count = 0;
		if(this._vertices[0] == triangle._vertices[this._nextIndex[0]] && this._vertices[this._nextIndex[0]] == triangle._vertices[0]) {
			this._adjacentTriangles[0] = triangle;
			this._adjacentPairIndex[0] = 0;
			triangle._adjacentTriangles[0] = this;
			triangle._adjacentPairIndex[0] = 0;
			count = 1;
		}
		if(this._vertices[0] == triangle._vertices[this._nextIndex[1]] && this._vertices[this._nextIndex[0]] == triangle._vertices[1]) {
			this._adjacentTriangles[0] = triangle;
			this._adjacentPairIndex[0] = 1;
			triangle._adjacentTriangles[1] = this;
			triangle._adjacentPairIndex[1] = 0;
			++count;
		}
		if(this._vertices[0] == triangle._vertices[this._nextIndex[2]] && this._vertices[this._nextIndex[0]] == triangle._vertices[2]) {
			this._adjacentTriangles[0] = triangle;
			this._adjacentPairIndex[0] = 2;
			triangle._adjacentTriangles[2] = this;
			triangle._adjacentPairIndex[2] = 0;
			++count;
		}
		if(this._vertices[1] == triangle._vertices[this._nextIndex[0]] && this._vertices[this._nextIndex[1]] == triangle._vertices[0]) {
			this._adjacentTriangles[1] = triangle;
			this._adjacentPairIndex[1] = 0;
			triangle._adjacentTriangles[0] = this;
			triangle._adjacentPairIndex[0] = 1;
			++count;
		}
		if(this._vertices[1] == triangle._vertices[this._nextIndex[1]] && this._vertices[this._nextIndex[1]] == triangle._vertices[1]) {
			this._adjacentTriangles[1] = triangle;
			this._adjacentPairIndex[1] = 1;
			triangle._adjacentTriangles[1] = this;
			triangle._adjacentPairIndex[1] = 1;
			++count;
		}
		if(this._vertices[1] == triangle._vertices[this._nextIndex[2]] && this._vertices[this._nextIndex[1]] == triangle._vertices[2]) {
			this._adjacentTriangles[1] = triangle;
			this._adjacentPairIndex[1] = 2;
			triangle._adjacentTriangles[2] = this;
			triangle._adjacentPairIndex[2] = 1;
			++count;
		}
		if(this._vertices[2] == triangle._vertices[this._nextIndex[0]] && this._vertices[this._nextIndex[2]] == triangle._vertices[0]) {
			this._adjacentTriangles[2] = triangle;
			this._adjacentPairIndex[2] = 0;
			triangle._adjacentTriangles[0] = this;
			triangle._adjacentPairIndex[0] = 2;
			++count;
		}
		if(this._vertices[2] == triangle._vertices[this._nextIndex[1]] && this._vertices[this._nextIndex[2]] == triangle._vertices[1]) {
			this._adjacentTriangles[2] = triangle;
			this._adjacentPairIndex[2] = 1;
			triangle._adjacentTriangles[1] = this;
			triangle._adjacentPairIndex[1] = 2;
			++count;
		}
		if(this._vertices[2] == triangle._vertices[this._nextIndex[2]] && this._vertices[this._nextIndex[2]] == triangle._vertices[2]) {
			this._adjacentTriangles[2] = triangle;
			this._adjacentPairIndex[2] = 2;
			triangle._adjacentTriangles[2] = this;
			triangle._adjacentPairIndex[2] = 2;
			++count;
		}
		if(count != 1) {
			return false;
		}
		return true;
	}
	,removeAdjacentTriangles: function() {
		var triangle = this._adjacentTriangles[0];
		if(triangle != null) {
			var pairIndex = this._adjacentPairIndex[0];
			triangle._adjacentTriangles[pairIndex] = null;
			triangle._adjacentPairIndex[pairIndex] = -1;
			this._adjacentTriangles[0] = null;
			this._adjacentPairIndex[0] = -1;
		}
		var triangle = this._adjacentTriangles[1];
		if(triangle != null) {
			var pairIndex = this._adjacentPairIndex[1];
			triangle._adjacentTriangles[pairIndex] = null;
			triangle._adjacentPairIndex[pairIndex] = -1;
			this._adjacentTriangles[1] = null;
			this._adjacentPairIndex[1] = -1;
		}
		var triangle = this._adjacentTriangles[2];
		if(triangle != null) {
			var pairIndex = this._adjacentPairIndex[2];
			triangle._adjacentTriangles[pairIndex] = null;
			triangle._adjacentPairIndex[pairIndex] = -1;
			this._adjacentTriangles[2] = null;
			this._adjacentPairIndex[2] = -1;
		}
	}
	,removeReferences: function() {
		this._next = null;
		this._prev = null;
		this._tmpDfsId = 0;
		this._tmpDfsVisible = false;
		this._distanceSq = 0;
		this._vertices[0] = null;
		this._vertices[1] = null;
		this._vertices[2] = null;
		this._adjacentTriangles[0] = null;
		this._adjacentTriangles[1] = null;
		this._adjacentTriangles[2] = null;
		this._adjacentPairIndex[0] = 0;
		this._adjacentPairIndex[1] = 0;
		this._adjacentPairIndex[2] = 0;
	}
	,dump: function() {
	}
	,__class__: oimo_collision_narrowphase_detector_gjkepa_EpaTriangle
};
var oimo_collision_narrowphase_detector_gjkepa_EpaVertex = function() {
	this.randId = Math.random() * 100000 | 0;
	this.v = new oimo_common_Vec3();
	this.w1 = new oimo_common_Vec3();
	this.w2 = new oimo_common_Vec3();
};
oimo_collision_narrowphase_detector_gjkepa_EpaVertex.__name__ = true;
oimo_collision_narrowphase_detector_gjkepa_EpaVertex.prototype = {
	init: function(v,w1,w2) {
		var _this = this.v;
		_this.x = v.x;
		_this.y = v.y;
		_this.z = v.z;
		var _this = this.w1;
		_this.x = w1.x;
		_this.y = w1.y;
		_this.z = w1.z;
		var _this = this.w2;
		_this.x = w2.x;
		_this.y = w2.y;
		_this.z = w2.z;
		this._next = null;
		this._tmpEdgeLoopNext = null;
		this._tmpEdgeLoopOuterTriangle = null;
		return this;
	}
	,removeReferences: function() {
		this._next = null;
		this._tmpEdgeLoopNext = null;
		this._tmpEdgeLoopOuterTriangle = null;
	}
	,__class__: oimo_collision_narrowphase_detector_gjkepa_EpaVertex
};
var oimo_collision_narrowphase_detector_gjkepa_GjkCache = function() {
	this.prevClosestDir = new oimo_common_Vec3();
};
oimo_collision_narrowphase_detector_gjkepa_GjkCache.__name__ = true;
oimo_collision_narrowphase_detector_gjkepa_GjkCache.prototype = {
	clear: function() {
		this.prevClosestDir.zero();
	}
	,__class__: oimo_collision_narrowphase_detector_gjkepa_GjkCache
};
var oimo_common_Vec3 = function(x,y,z) {
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.z = z;
	oimo_common_Vec3.numCreations++;
};
oimo_common_Vec3.__name__ = true;
oimo_common_Vec3.prototype = {
	init: function(x,y,z) {
		this.x = x;
		this.y = y;
		this.z = z;
		return this;
	}
	,zero: function() {
		this.x = 0;
		this.y = 0;
		this.z = 0;
		return this;
	}
	,add: function(v) {
		return new oimo_common_Vec3(this.x + v.x,this.y + v.y,this.z + v.z);
	}
	,add3: function(vx,vy,vz) {
		return new oimo_common_Vec3(this.x + vx,this.y + vy,this.z + vz);
	}
	,addScaled: function(v,s) {
		return new oimo_common_Vec3(this.x + v.x * s,this.y + v.y * s,this.z + v.z * s);
	}
	,sub: function(v) {
		return new oimo_common_Vec3(this.x - v.x,this.y - v.y,this.z - v.z);
	}
	,sub3: function(vx,vy,vz) {
		return new oimo_common_Vec3(this.x - vx,this.y - vy,this.z - vz);
	}
	,scale: function(s) {
		return new oimo_common_Vec3(this.x * s,this.y * s,this.z * s);
	}
	,scale3: function(sx,sy,sz) {
		return new oimo_common_Vec3(this.x * sx,this.y * sy,this.z * sz);
	}
	,dot: function(v) {
		return this.x * v.x + this.y * v.y + this.z * v.z;
	}
	,cross: function(v) {
		return new oimo_common_Vec3(this.y * v.z - this.z * v.y,this.z * v.x - this.x * v.z,this.x * v.y - this.y * v.x);
	}
	,addEq: function(v) {
		this.x += v.x;
		this.y += v.y;
		this.z += v.z;
		return this;
	}
	,add3Eq: function(vx,vy,vz) {
		this.x += vx;
		this.y += vy;
		this.z += vz;
		return this;
	}
	,addScaledEq: function(v,s) {
		this.x += v.x * s;
		this.y += v.y * s;
		this.z += v.z * s;
		return this;
	}
	,subEq: function(v) {
		this.x -= v.x;
		this.y -= v.y;
		this.z -= v.z;
		return this;
	}
	,sub3Eq: function(vx,vy,vz) {
		this.x -= vx;
		this.y -= vy;
		this.z -= vz;
		return this;
	}
	,scaleEq: function(s) {
		this.x *= s;
		this.y *= s;
		this.z *= s;
		return this;
	}
	,scale3Eq: function(sx,sy,sz) {
		this.x *= sx;
		this.y *= sy;
		this.z *= sz;
		return this;
	}
	,crossEq: function(v) {
		var y = this.z * v.x - this.x * v.z;
		var z = this.x * v.y - this.y * v.x;
		this.x = this.y * v.z - this.z * v.y;
		this.y = y;
		this.z = z;
		return this;
	}
	,mulMat3: function(m) {
		return new oimo_common_Vec3(this.x * m.e00 + this.y * m.e01 + this.z * m.e02,this.x * m.e10 + this.y * m.e11 + this.z * m.e12,this.x * m.e20 + this.y * m.e21 + this.z * m.e22);
	}
	,mulMat4: function(m) {
		return new oimo_common_Vec3(this.x * m.e00 + this.y * m.e01 + this.z * m.e02 + m.e03,this.x * m.e10 + this.y * m.e11 + this.z * m.e12 + m.e13,this.x * m.e20 + this.y * m.e21 + this.z * m.e22 + m.e23);
	}
	,mulTransform: function(tf) {
		var vX;
		var vY;
		var vZ;
		vX = this.x;
		vY = this.y;
		vZ = this.z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = tf._rotation00 * vX + tf._rotation01 * vY + tf._rotation02 * vZ;
		__tmp__Y = tf._rotation10 * vX + tf._rotation11 * vY + tf._rotation12 * vZ;
		__tmp__Z = tf._rotation20 * vX + tf._rotation21 * vY + tf._rotation22 * vZ;
		vX = __tmp__X;
		vY = __tmp__Y;
		vZ = __tmp__Z;
		vX += tf._positionX;
		vY += tf._positionY;
		vZ += tf._positionZ;
		var res = new oimo_common_Vec3();
		res.x = vX;
		res.y = vY;
		res.z = vZ;
		return res;
	}
	,mulMat3Eq: function(m) {
		var y = this.x * m.e10 + this.y * m.e11 + this.z * m.e12;
		var z = this.x * m.e20 + this.y * m.e21 + this.z * m.e22;
		this.x = this.x * m.e00 + this.y * m.e01 + this.z * m.e02;
		this.y = y;
		this.z = z;
		return this;
	}
	,mulMat4Eq: function(m) {
		var y = this.x * m.e10 + this.y * m.e11 + this.z * m.e12 + m.e13;
		var z = this.x * m.e20 + this.y * m.e21 + this.z * m.e22 + m.e23;
		this.x = this.x * m.e00 + this.y * m.e01 + this.z * m.e02 + m.e03;
		this.y = y;
		this.z = z;
		return this;
	}
	,mulTransformEq: function(tf) {
		var vX;
		var vY;
		var vZ;
		vX = this.x;
		vY = this.y;
		vZ = this.z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = tf._rotation00 * vX + tf._rotation01 * vY + tf._rotation02 * vZ;
		__tmp__Y = tf._rotation10 * vX + tf._rotation11 * vY + tf._rotation12 * vZ;
		__tmp__Z = tf._rotation20 * vX + tf._rotation21 * vY + tf._rotation22 * vZ;
		vX = __tmp__X;
		vY = __tmp__Y;
		vZ = __tmp__Z;
		vX += tf._positionX;
		vY += tf._positionY;
		vZ += tf._positionZ;
		this.x = vX;
		this.y = vY;
		this.z = vZ;
		return this;
	}
	,length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,lengthSq: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z;
	}
	,normalized: function() {
		var invLen = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
		if(invLen > 0) {
			invLen = 1 / invLen;
		}
		return new oimo_common_Vec3(this.x * invLen,this.y * invLen,this.z * invLen);
	}
	,normalize: function() {
		var invLen = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
		if(invLen > 0) {
			invLen = 1 / invLen;
		}
		this.x *= invLen;
		this.y *= invLen;
		this.z *= invLen;
		return this;
	}
	,negate: function() {
		return new oimo_common_Vec3(-this.x,-this.y,-this.z);
	}
	,negateEq: function() {
		this.x = -this.x;
		this.y = -this.y;
		this.z = -this.z;
		return this;
	}
	,copyFrom: function(v) {
		this.x = v.x;
		this.y = v.y;
		this.z = v.z;
		return this;
	}
	,clone: function() {
		return new oimo_common_Vec3(this.x,this.y,this.z);
	}
	,toString: function() {
		return "Vec3[" + (this.x > 0 ? (this.x * 10000000 + 0.5 | 0) / 10000000 : (this.x * 10000000 - 0.5 | 0) / 10000000) + ", " + (this.y > 0 ? (this.y * 10000000 + 0.5 | 0) / 10000000 : (this.y * 10000000 - 0.5 | 0) / 10000000) + ", " + (this.z > 0 ? (this.z * 10000000 + 0.5 | 0) / 10000000 : (this.z * 10000000 - 0.5 | 0) / 10000000) + "]";
	}
	,__class__: oimo_common_Vec3
};
var oimo_common_Transform = function() {
	this._positionX = 0;
	this._positionY = 0;
	this._positionZ = 0;
	this._rotation00 = 1;
	this._rotation01 = 0;
	this._rotation02 = 0;
	this._rotation10 = 0;
	this._rotation11 = 1;
	this._rotation12 = 0;
	this._rotation20 = 0;
	this._rotation21 = 0;
	this._rotation22 = 1;
};
oimo_common_Transform.__name__ = true;
oimo_common_Transform.prototype = {
	identity: function() {
		this._positionX = 0;
		this._positionY = 0;
		this._positionZ = 0;
		this._rotation00 = 1;
		this._rotation01 = 0;
		this._rotation02 = 0;
		this._rotation10 = 0;
		this._rotation11 = 1;
		this._rotation12 = 0;
		this._rotation20 = 0;
		this._rotation21 = 0;
		this._rotation22 = 1;
		return this;
	}
	,getPosition: function() {
		var position = new oimo_common_Vec3();
		position.x = this._positionX;
		position.y = this._positionY;
		position.z = this._positionZ;
		return position;
	}
	,getPositionTo: function(position) {
		position.x = this._positionX;
		position.y = this._positionY;
		position.z = this._positionZ;
	}
	,setPosition: function(position) {
		this._positionX = position.x;
		this._positionY = position.y;
		this._positionZ = position.z;
		return this;
	}
	,translate: function(translation) {
		var diffX;
		var diffY;
		var diffZ;
		diffX = translation.x;
		diffY = translation.y;
		diffZ = translation.z;
		this._positionX += diffX;
		this._positionY += diffY;
		this._positionZ += diffZ;
	}
	,getRotation: function() {
		var rotation = new oimo_common_Mat3();
		rotation.e00 = this._rotation00;
		rotation.e01 = this._rotation01;
		rotation.e02 = this._rotation02;
		rotation.e10 = this._rotation10;
		rotation.e11 = this._rotation11;
		rotation.e12 = this._rotation12;
		rotation.e20 = this._rotation20;
		rotation.e21 = this._rotation21;
		rotation.e22 = this._rotation22;
		return rotation;
	}
	,getRotationTo: function(out) {
		out.e00 = this._rotation00;
		out.e01 = this._rotation01;
		out.e02 = this._rotation02;
		out.e10 = this._rotation10;
		out.e11 = this._rotation11;
		out.e12 = this._rotation12;
		out.e20 = this._rotation20;
		out.e21 = this._rotation21;
		out.e22 = this._rotation22;
	}
	,setRotation: function(rotation) {
		this._rotation00 = rotation.e00;
		this._rotation01 = rotation.e01;
		this._rotation02 = rotation.e02;
		this._rotation10 = rotation.e10;
		this._rotation11 = rotation.e11;
		this._rotation12 = rotation.e12;
		this._rotation20 = rotation.e20;
		this._rotation21 = rotation.e21;
		this._rotation22 = rotation.e22;
		return this;
	}
	,setRotationXyz: function(eulerAngles) {
		var xyzX;
		var xyzY;
		var xyzZ;
		xyzX = eulerAngles.x;
		xyzY = eulerAngles.y;
		xyzZ = eulerAngles.z;
		var sx = Math.sin(xyzX);
		var sy = Math.sin(xyzY);
		var sz = Math.sin(xyzZ);
		var cx = Math.cos(xyzX);
		var cy = Math.cos(xyzY);
		var cz = Math.cos(xyzZ);
		this._rotation00 = cy * cz;
		this._rotation01 = -cy * sz;
		this._rotation02 = sy;
		this._rotation10 = cx * sz + cz * sx * sy;
		this._rotation11 = cx * cz - sx * sy * sz;
		this._rotation12 = -cy * sx;
		this._rotation20 = sx * sz - cx * cz * sy;
		this._rotation21 = cz * sx + cx * sy * sz;
		this._rotation22 = cx * cy;
	}
	,rotate: function(rotation) {
		var rot00;
		var rot01;
		var rot02;
		var rot10;
		var rot11;
		var rot12;
		var rot20;
		var rot21;
		var rot22;
		rot00 = rotation.e00;
		rot01 = rotation.e01;
		rot02 = rotation.e02;
		rot10 = rotation.e10;
		rot11 = rotation.e11;
		rot12 = rotation.e12;
		rot20 = rotation.e20;
		rot21 = rotation.e21;
		rot22 = rotation.e22;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = rot00 * this._rotation00 + rot01 * this._rotation10 + rot02 * this._rotation20;
		__tmp__01 = rot00 * this._rotation01 + rot01 * this._rotation11 + rot02 * this._rotation21;
		__tmp__02 = rot00 * this._rotation02 + rot01 * this._rotation12 + rot02 * this._rotation22;
		__tmp__10 = rot10 * this._rotation00 + rot11 * this._rotation10 + rot12 * this._rotation20;
		__tmp__11 = rot10 * this._rotation01 + rot11 * this._rotation11 + rot12 * this._rotation21;
		__tmp__12 = rot10 * this._rotation02 + rot11 * this._rotation12 + rot12 * this._rotation22;
		__tmp__20 = rot20 * this._rotation00 + rot21 * this._rotation10 + rot22 * this._rotation20;
		__tmp__21 = rot20 * this._rotation01 + rot21 * this._rotation11 + rot22 * this._rotation21;
		__tmp__22 = rot20 * this._rotation02 + rot21 * this._rotation12 + rot22 * this._rotation22;
		this._rotation00 = __tmp__00;
		this._rotation01 = __tmp__01;
		this._rotation02 = __tmp__02;
		this._rotation10 = __tmp__10;
		this._rotation11 = __tmp__11;
		this._rotation12 = __tmp__12;
		this._rotation20 = __tmp__20;
		this._rotation21 = __tmp__21;
		this._rotation22 = __tmp__22;
	}
	,rotateXyz: function(eulerAngles) {
		var xyzX;
		var xyzY;
		var xyzZ;
		var rot00;
		var rot01;
		var rot02;
		var rot10;
		var rot11;
		var rot12;
		var rot20;
		var rot21;
		var rot22;
		xyzX = eulerAngles.x;
		xyzY = eulerAngles.y;
		xyzZ = eulerAngles.z;
		var sx = Math.sin(xyzX);
		var sy = Math.sin(xyzY);
		var sz = Math.sin(xyzZ);
		var cx = Math.cos(xyzX);
		var cy = Math.cos(xyzY);
		var cz = Math.cos(xyzZ);
		rot00 = cy * cz;
		rot01 = -cy * sz;
		rot02 = sy;
		rot10 = cx * sz + cz * sx * sy;
		rot11 = cx * cz - sx * sy * sz;
		rot12 = -cy * sx;
		rot20 = sx * sz - cx * cz * sy;
		rot21 = cz * sx + cx * sy * sz;
		rot22 = cx * cy;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = rot00 * this._rotation00 + rot01 * this._rotation10 + rot02 * this._rotation20;
		__tmp__01 = rot00 * this._rotation01 + rot01 * this._rotation11 + rot02 * this._rotation21;
		__tmp__02 = rot00 * this._rotation02 + rot01 * this._rotation12 + rot02 * this._rotation22;
		__tmp__10 = rot10 * this._rotation00 + rot11 * this._rotation10 + rot12 * this._rotation20;
		__tmp__11 = rot10 * this._rotation01 + rot11 * this._rotation11 + rot12 * this._rotation21;
		__tmp__12 = rot10 * this._rotation02 + rot11 * this._rotation12 + rot12 * this._rotation22;
		__tmp__20 = rot20 * this._rotation00 + rot21 * this._rotation10 + rot22 * this._rotation20;
		__tmp__21 = rot20 * this._rotation01 + rot21 * this._rotation11 + rot22 * this._rotation21;
		__tmp__22 = rot20 * this._rotation02 + rot21 * this._rotation12 + rot22 * this._rotation22;
		this._rotation00 = __tmp__00;
		this._rotation01 = __tmp__01;
		this._rotation02 = __tmp__02;
		this._rotation10 = __tmp__10;
		this._rotation11 = __tmp__11;
		this._rotation12 = __tmp__12;
		this._rotation20 = __tmp__20;
		this._rotation21 = __tmp__21;
		this._rotation22 = __tmp__22;
	}
	,getOrientation: function() {
		var q = new oimo_common_Quat();
		var iqX;
		var iqY;
		var iqZ;
		var iqW;
		var e00 = this._rotation00;
		var e11 = this._rotation11;
		var e22 = this._rotation22;
		var t = e00 + e11 + e22;
		var s;
		if(t > 0) {
			s = Math.sqrt(t + 1);
			iqW = 0.5 * s;
			s = 0.5 / s;
			iqX = (this._rotation21 - this._rotation12) * s;
			iqY = (this._rotation02 - this._rotation20) * s;
			iqZ = (this._rotation10 - this._rotation01) * s;
		} else if(e00 > e11) {
			if(e00 > e22) {
				s = Math.sqrt(e00 - e11 - e22 + 1);
				iqX = 0.5 * s;
				s = 0.5 / s;
				iqY = (this._rotation01 + this._rotation10) * s;
				iqZ = (this._rotation02 + this._rotation20) * s;
				iqW = (this._rotation21 - this._rotation12) * s;
			} else {
				s = Math.sqrt(e22 - e00 - e11 + 1);
				iqZ = 0.5 * s;
				s = 0.5 / s;
				iqX = (this._rotation02 + this._rotation20) * s;
				iqY = (this._rotation12 + this._rotation21) * s;
				iqW = (this._rotation10 - this._rotation01) * s;
			}
		} else if(e11 > e22) {
			s = Math.sqrt(e11 - e22 - e00 + 1);
			iqY = 0.5 * s;
			s = 0.5 / s;
			iqX = (this._rotation01 + this._rotation10) * s;
			iqZ = (this._rotation12 + this._rotation21) * s;
			iqW = (this._rotation02 - this._rotation20) * s;
		} else {
			s = Math.sqrt(e22 - e00 - e11 + 1);
			iqZ = 0.5 * s;
			s = 0.5 / s;
			iqX = (this._rotation02 + this._rotation20) * s;
			iqY = (this._rotation12 + this._rotation21) * s;
			iqW = (this._rotation10 - this._rotation01) * s;
		}
		q.x = iqX;
		q.y = iqY;
		q.z = iqZ;
		q.w = iqW;
		return q;
	}
	,getOrientationTo: function(orientation) {
		var iqX;
		var iqY;
		var iqZ;
		var iqW;
		var e00 = this._rotation00;
		var e11 = this._rotation11;
		var e22 = this._rotation22;
		var t = e00 + e11 + e22;
		var s;
		if(t > 0) {
			s = Math.sqrt(t + 1);
			iqW = 0.5 * s;
			s = 0.5 / s;
			iqX = (this._rotation21 - this._rotation12) * s;
			iqY = (this._rotation02 - this._rotation20) * s;
			iqZ = (this._rotation10 - this._rotation01) * s;
		} else if(e00 > e11) {
			if(e00 > e22) {
				s = Math.sqrt(e00 - e11 - e22 + 1);
				iqX = 0.5 * s;
				s = 0.5 / s;
				iqY = (this._rotation01 + this._rotation10) * s;
				iqZ = (this._rotation02 + this._rotation20) * s;
				iqW = (this._rotation21 - this._rotation12) * s;
			} else {
				s = Math.sqrt(e22 - e00 - e11 + 1);
				iqZ = 0.5 * s;
				s = 0.5 / s;
				iqX = (this._rotation02 + this._rotation20) * s;
				iqY = (this._rotation12 + this._rotation21) * s;
				iqW = (this._rotation10 - this._rotation01) * s;
			}
		} else if(e11 > e22) {
			s = Math.sqrt(e11 - e22 - e00 + 1);
			iqY = 0.5 * s;
			s = 0.5 / s;
			iqX = (this._rotation01 + this._rotation10) * s;
			iqZ = (this._rotation12 + this._rotation21) * s;
			iqW = (this._rotation02 - this._rotation20) * s;
		} else {
			s = Math.sqrt(e22 - e00 - e11 + 1);
			iqZ = 0.5 * s;
			s = 0.5 / s;
			iqX = (this._rotation02 + this._rotation20) * s;
			iqY = (this._rotation12 + this._rotation21) * s;
			iqW = (this._rotation10 - this._rotation01) * s;
		}
		orientation.x = iqX;
		orientation.y = iqY;
		orientation.z = iqZ;
		orientation.w = iqW;
	}
	,setOrientation: function(quaternion) {
		var qX;
		var qY;
		var qZ;
		var qW;
		qX = quaternion.x;
		qY = quaternion.y;
		qZ = quaternion.z;
		qW = quaternion.w;
		var x = qX;
		var y = qY;
		var z = qZ;
		var w = qW;
		var x2 = 2 * x;
		var y2 = 2 * y;
		var z2 = 2 * z;
		var xx = x * x2;
		var yy = y * y2;
		var zz = z * z2;
		var xy = x * y2;
		var yz = y * z2;
		var xz = x * z2;
		var wx = w * x2;
		var wy = w * y2;
		var wz = w * z2;
		this._rotation00 = 1 - yy - zz;
		this._rotation01 = xy - wz;
		this._rotation02 = xz + wy;
		this._rotation10 = xy + wz;
		this._rotation11 = 1 - xx - zz;
		this._rotation12 = yz - wx;
		this._rotation20 = xz - wy;
		this._rotation21 = yz + wx;
		this._rotation22 = 1 - xx - yy;
		return this;
	}
	,clone: function() {
		var tf = new oimo_common_Transform();
		tf._positionX = this._positionX;
		tf._positionY = this._positionY;
		tf._positionZ = this._positionZ;
		tf._rotation00 = this._rotation00;
		tf._rotation01 = this._rotation01;
		tf._rotation02 = this._rotation02;
		tf._rotation10 = this._rotation10;
		tf._rotation11 = this._rotation11;
		tf._rotation12 = this._rotation12;
		tf._rotation20 = this._rotation20;
		tf._rotation21 = this._rotation21;
		tf._rotation22 = this._rotation22;
		return tf;
	}
	,copyFrom: function(transform) {
		this._positionX = transform._positionX;
		this._positionY = transform._positionY;
		this._positionZ = transform._positionZ;
		this._rotation00 = transform._rotation00;
		this._rotation01 = transform._rotation01;
		this._rotation02 = transform._rotation02;
		this._rotation10 = transform._rotation10;
		this._rotation11 = transform._rotation11;
		this._rotation12 = transform._rotation12;
		this._rotation20 = transform._rotation20;
		this._rotation21 = transform._rotation21;
		this._rotation22 = transform._rotation22;
		return this;
	}
	,__class__: oimo_common_Transform
};
var oimo_common_Setting = function() { };
oimo_common_Setting.__name__ = true;
var oimo_collision_narrowphase_detector_gjkepa_GjkEpa = function() {
	this.s = new Array(4);
	this.w1 = new Array(4);
	this.w2 = new Array(4);
	this.baseDirs = new Array(3);
	this.baseDirs[0] = new oimo_common_Vec3(1,0,0);
	this.baseDirs[1] = new oimo_common_Vec3(0,1,0);
	this.baseDirs[2] = new oimo_common_Vec3(0,0,1);
	this.tl1 = new oimo_common_Vec3();
	this.tl2 = new oimo_common_Vec3();
	this.rayX = new oimo_common_Vec3();
	this.rayR = new oimo_common_Vec3();
	this.tempTransform = new oimo_common_Transform();
	this.s[0] = new oimo_common_Vec3();
	this.w1[0] = new oimo_common_Vec3();
	this.w2[0] = new oimo_common_Vec3();
	this.s[1] = new oimo_common_Vec3();
	this.w1[1] = new oimo_common_Vec3();
	this.w2[1] = new oimo_common_Vec3();
	this.s[2] = new oimo_common_Vec3();
	this.w1[2] = new oimo_common_Vec3();
	this.w2[2] = new oimo_common_Vec3();
	this.s[3] = new oimo_common_Vec3();
	this.w1[3] = new oimo_common_Vec3();
	this.w2[3] = new oimo_common_Vec3();
	this.dir = new oimo_common_Vec3();
	this.closest = new oimo_common_Vec3();
	this.closestPoint1 = new oimo_common_Vec3();
	this.closestPoint2 = new oimo_common_Vec3();
	this.polyhedron = new oimo_collision_narrowphase_detector_gjkepa_EpaPolyhedron();
};
oimo_collision_narrowphase_detector_gjkepa_GjkEpa.__name__ = true;
oimo_collision_narrowphase_detector_gjkepa_GjkEpa.getInstance = function() {
	return oimo_collision_narrowphase_detector_gjkepa_GjkEpa.instance;
};
oimo_collision_narrowphase_detector_gjkepa_GjkEpa.prototype = {
	computeClosestPointsImpl: function(c1,c2,tf1,tf2,cache,useEpa) {
		this.c1 = c1;
		this.c2 = c2;
		this.tf1 = tf1;
		this.tf2 = tf2;
		var s = this.s;
		var w1 = this.w1;
		var w2 = this.w2;
		var closest = this.closest;
		var dir = this.dir;
		if(cache != null) {
			if(cache._gjkCache == null) {
				cache._gjkCache = new oimo_collision_narrowphase_detector_gjkepa_GjkCache();
			}
			this.loadCache(cache._gjkCache);
		} else {
			dir.zero();
		}
		if(dir.x * dir.x + dir.y * dir.y + dir.z * dir.z == 0) {
			var firstDirX;
			var firstDirY;
			var firstDirZ;
			firstDirX = tf2._positionX - tf1._positionX;
			firstDirY = tf2._positionY - tf1._positionY;
			firstDirZ = tf2._positionZ - tf1._positionZ;
			dir.x = firstDirX;
			dir.y = firstDirY;
			dir.z = firstDirZ;
			if(dir.x * dir.x + dir.y * dir.y + dir.z * dir.z < 1e-6) {
				dir.init(1,0,0);
			}
		}
		this.simplexSize = 0;
		this.computeWitnessPoint1(false);
		this.computeWitnessPoint2(false);
		var _this = this.s[this.simplexSize];
		var v = this.w1[this.simplexSize];
		_this.x = v.x;
		_this.y = v.y;
		_this.z = v.z;
		var v = this.w2[this.simplexSize];
		_this.x -= v.x;
		_this.y -= v.y;
		_this.z -= v.z;
		this.simplexSize = 1;
		var count = 0;
		while(count < 40) {
			var v = 0;
			switch(this.simplexSize) {
			case 1:
				var v1 = s[0];
				closest.x = v1.x;
				closest.y = v1.y;
				closest.z = v1.z;
				v = 1;
				break;
			case 2:
				var v1X;
				var v1Y;
				var v1Z;
				var v2X;
				var v2Y;
				var v2Z;
				var v2 = s[0];
				v1X = v2.x;
				v1Y = v2.y;
				v1Z = v2.z;
				var v3 = s[1];
				v2X = v3.x;
				v2Y = v3.y;
				v2Z = v3.z;
				var v12X;
				var v12Y;
				var v12Z;
				v12X = v2X - v1X;
				v12Y = v2Y - v1Y;
				v12Z = v2Z - v1Z;
				var t = v12X * v1X + v12Y * v1Y + v12Z * v1Z;
				t = -t / (v12X * v12X + v12Y * v12Y + v12Z * v12Z);
				if(t < 0) {
					closest.x = v1X;
					closest.y = v1Y;
					closest.z = v1Z;
					v = 1;
				} else if(t > 1) {
					closest.x = v2X;
					closest.y = v2Y;
					closest.z = v2Z;
					v = 2;
				} else {
					var pX;
					var pY;
					var pZ;
					pX = v1X + v12X * t;
					pY = v1Y + v12Y * t;
					pZ = v1Z + v12Z * t;
					closest.x = pX;
					closest.y = pY;
					closest.z = pZ;
					v = 3;
				}
				break;
			case 3:
				var vec1 = s[0];
				var vec2 = s[1];
				var vec3 = s[2];
				var v1X1;
				var v1Y1;
				var v1Z1;
				var v2X1;
				var v2Y1;
				var v2Z1;
				var v3X;
				var v3Y;
				var v3Z;
				var v12X1;
				var v12Y1;
				var v12Z1;
				var v23X;
				var v23Y;
				var v23Z;
				var v31X;
				var v31Y;
				var v31Z;
				v1X1 = vec1.x;
				v1Y1 = vec1.y;
				v1Z1 = vec1.z;
				v2X1 = vec2.x;
				v2Y1 = vec2.y;
				v2Z1 = vec2.z;
				v3X = vec3.x;
				v3Y = vec3.y;
				v3Z = vec3.z;
				v12X1 = v2X1 - v1X1;
				v12Y1 = v2Y1 - v1Y1;
				v12Z1 = v2Z1 - v1Z1;
				v23X = v3X - v2X1;
				v23Y = v3Y - v2Y1;
				v23Z = v3Z - v2Z1;
				v31X = v1X1 - v3X;
				v31Y = v1Y1 - v3Y;
				v31Z = v1Z1 - v3Z;
				var nX;
				var nY;
				var nZ;
				nX = v12Y1 * v23Z - v12Z1 * v23Y;
				nY = v12Z1 * v23X - v12X1 * v23Z;
				nZ = v12X1 * v23Y - v12Y1 * v23X;
				var n12X;
				var n12Y;
				var n12Z;
				var n23X;
				var n23Y;
				var n23Z;
				var n31X;
				var n31Y;
				var n31Z;
				n12X = v12Y1 * nZ - v12Z1 * nY;
				n12Y = v12Z1 * nX - v12X1 * nZ;
				n12Z = v12X1 * nY - v12Y1 * nX;
				n23X = v23Y * nZ - v23Z * nY;
				n23Y = v23Z * nX - v23X * nZ;
				n23Z = v23X * nY - v23Y * nX;
				n31X = v31Y * nZ - v31Z * nY;
				n31Y = v31Z * nX - v31X * nZ;
				n31Z = v31X * nY - v31Y * nX;
				var mind = -1;
				var minvX;
				var minvY;
				var minvZ;
				var mini = 0;
				minvX = 0;
				minvY = 0;
				minvZ = 0;
				if(v1X1 * n12X + v1Y1 * n12Y + v1Z1 * n12Z < 0) {
					var v1X2;
					var v1Y2;
					var v1Z2;
					var v2X2;
					var v2Y2;
					var v2Z2;
					v1X2 = vec1.x;
					v1Y2 = vec1.y;
					v1Z2 = vec1.z;
					v2X2 = vec2.x;
					v2Y2 = vec2.y;
					v2Z2 = vec2.z;
					var v12X2;
					var v12Y2;
					var v12Z2;
					v12X2 = v2X2 - v1X2;
					v12Y2 = v2Y2 - v1Y2;
					v12Z2 = v2Z2 - v1Z2;
					var t1 = v12X2 * v1X2 + v12Y2 * v1Y2 + v12Z2 * v1Z2;
					t1 = -t1 / (v12X2 * v12X2 + v12Y2 * v12Y2 + v12Z2 * v12Z2);
					var b;
					if(t1 < 0) {
						closest.x = v1X2;
						closest.y = v1Y2;
						closest.z = v1Z2;
						b = 1;
					} else if(t1 > 1) {
						closest.x = v2X2;
						closest.y = v2Y2;
						closest.z = v2Z2;
						b = 2;
					} else {
						var pX1;
						var pY1;
						var pZ1;
						pX1 = v1X2 + v12X2 * t1;
						pY1 = v1Y2 + v12Y2 * t1;
						pZ1 = v1Z2 + v12Z2 * t1;
						closest.x = pX1;
						closest.y = pY1;
						closest.z = pZ1;
						b = 3;
					}
					mini = b;
					mind = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
					minvX = closest.x;
					minvY = closest.y;
					minvZ = closest.z;
				}
				if(v2X1 * n23X + v2Y1 * n23Y + v2Z1 * n23Z < 0) {
					var v1X3;
					var v1Y3;
					var v1Z3;
					var v2X3;
					var v2Y3;
					var v2Z3;
					v1X3 = vec2.x;
					v1Y3 = vec2.y;
					v1Z3 = vec2.z;
					v2X3 = vec3.x;
					v2Y3 = vec3.y;
					v2Z3 = vec3.z;
					var v12X3;
					var v12Y3;
					var v12Z3;
					v12X3 = v2X3 - v1X3;
					v12Y3 = v2Y3 - v1Y3;
					v12Z3 = v2Z3 - v1Z3;
					var t2 = v12X3 * v1X3 + v12Y3 * v1Y3 + v12Z3 * v1Z3;
					t2 = -t2 / (v12X3 * v12X3 + v12Y3 * v12Y3 + v12Z3 * v12Z3);
					var b1;
					if(t2 < 0) {
						closest.x = v1X3;
						closest.y = v1Y3;
						closest.z = v1Z3;
						b1 = 1;
					} else if(t2 > 1) {
						closest.x = v2X3;
						closest.y = v2Y3;
						closest.z = v2Z3;
						b1 = 2;
					} else {
						var pX2;
						var pY2;
						var pZ2;
						pX2 = v1X3 + v12X3 * t2;
						pY2 = v1Y3 + v12Y3 * t2;
						pZ2 = v1Z3 + v12Z3 * t2;
						closest.x = pX2;
						closest.y = pY2;
						closest.z = pZ2;
						b1 = 3;
					}
					var d = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
					if(mind < 0 || d < mind) {
						mini = b1 << 1;
						mind = d;
						minvX = closest.x;
						minvY = closest.y;
						minvZ = closest.z;
					}
				}
				if(v3X * n31X + v3Y * n31Y + v3Z * n31Z < 0) {
					var v1X4;
					var v1Y4;
					var v1Z4;
					var v2X4;
					var v2Y4;
					var v2Z4;
					v1X4 = vec1.x;
					v1Y4 = vec1.y;
					v1Z4 = vec1.z;
					v2X4 = vec3.x;
					v2Y4 = vec3.y;
					v2Z4 = vec3.z;
					var v12X4;
					var v12Y4;
					var v12Z4;
					v12X4 = v2X4 - v1X4;
					v12Y4 = v2Y4 - v1Y4;
					v12Z4 = v2Z4 - v1Z4;
					var t3 = v12X4 * v1X4 + v12Y4 * v1Y4 + v12Z4 * v1Z4;
					t3 = -t3 / (v12X4 * v12X4 + v12Y4 * v12Y4 + v12Z4 * v12Z4);
					var b2;
					if(t3 < 0) {
						closest.x = v1X4;
						closest.y = v1Y4;
						closest.z = v1Z4;
						b2 = 1;
					} else if(t3 > 1) {
						closest.x = v2X4;
						closest.y = v2Y4;
						closest.z = v2Z4;
						b2 = 2;
					} else {
						var pX3;
						var pY3;
						var pZ3;
						pX3 = v1X4 + v12X4 * t3;
						pY3 = v1Y4 + v12Y4 * t3;
						pZ3 = v1Z4 + v12Z4 * t3;
						closest.x = pX3;
						closest.y = pY3;
						closest.z = pZ3;
						b2 = 3;
					}
					var d1 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
					if(mind < 0 || d1 < mind) {
						mini = b2 & 1 | (b2 & 2) << 1;
						mind = d1;
						minvX = closest.x;
						minvY = closest.y;
						minvZ = closest.z;
					}
				}
				if(mind > 0) {
					closest.x = minvX;
					closest.y = minvY;
					closest.z = minvZ;
					v = mini;
				} else {
					var l = nX * nX + nY * nY + nZ * nZ;
					if(l > 0) {
						l = 1 / Math.sqrt(l);
					}
					nX *= l;
					nY *= l;
					nZ *= l;
					var l2 = nX * nX + nY * nY + nZ * nZ;
					l2 = (v1X1 * nX + v1Y1 * nY + v1Z1 * nZ) / l2;
					minvX = nX * l2;
					minvY = nY * l2;
					minvZ = nZ * l2;
					closest.x = minvX;
					closest.y = minvY;
					closest.z = minvZ;
					v = 7;
				}
				break;
			case 4:
				var vec11 = s[0];
				var vec21 = s[1];
				var vec31 = s[2];
				var vec4 = s[3];
				var v1X5;
				var v1Y5;
				var v1Z5;
				var v2X5;
				var v2Y5;
				var v2Z5;
				var v3X1;
				var v3Y1;
				var v3Z1;
				var v4X;
				var v4Y;
				var v4Z;
				var v12X5;
				var v12Y5;
				var v12Z5;
				var v13X;
				var v13Y;
				var v13Z;
				var v14X;
				var v14Y;
				var v14Z;
				var v23X1;
				var v23Y1;
				var v23Z1;
				var v24X;
				var v24Y;
				var v24Z;
				v1X5 = vec11.x;
				v1Y5 = vec11.y;
				v1Z5 = vec11.z;
				v2X5 = vec21.x;
				v2Y5 = vec21.y;
				v2Z5 = vec21.z;
				v3X1 = vec31.x;
				v3Y1 = vec31.y;
				v3Z1 = vec31.z;
				v4X = vec4.x;
				v4Y = vec4.y;
				v4Z = vec4.z;
				v12X5 = v2X5 - v1X5;
				v12Y5 = v2Y5 - v1Y5;
				v12Z5 = v2Z5 - v1Z5;
				v13X = v3X1 - v1X5;
				v13Y = v3Y1 - v1Y5;
				v13Z = v3Z1 - v1Z5;
				v14X = v4X - v1X5;
				v14Y = v4Y - v1Y5;
				v14Z = v4Z - v1Z5;
				v23X1 = v3X1 - v2X5;
				v23Y1 = v3Y1 - v2Y5;
				v23Z1 = v3Z1 - v2Z5;
				v24X = v4X - v2X5;
				v24Y = v4Y - v2Y5;
				v24Z = v4Z - v2Z5;
				var n123X;
				var n123Y;
				var n123Z;
				var n134X;
				var n134Y;
				var n134Z;
				var n142X;
				var n142Y;
				var n142Z;
				var n243X;
				var n243Y;
				var n243Z;
				n123X = v12Y5 * v13Z - v12Z5 * v13Y;
				n123Y = v12Z5 * v13X - v12X5 * v13Z;
				n123Z = v12X5 * v13Y - v12Y5 * v13X;
				n134X = v13Y * v14Z - v13Z * v14Y;
				n134Y = v13Z * v14X - v13X * v14Z;
				n134Z = v13X * v14Y - v13Y * v14X;
				n142X = v14Y * v12Z5 - v14Z * v12Y5;
				n142Y = v14Z * v12X5 - v14X * v12Z5;
				n142Z = v14X * v12Y5 - v14Y * v12X5;
				n243X = v24Y * v23Z1 - v24Z * v23Y1;
				n243Y = v24Z * v23X1 - v24X * v23Z1;
				n243Z = v24X * v23Y1 - v24Y * v23X1;
				var sign = v12X5 * n243X + v12Y5 * n243Y + v12Z5 * n243Z > 0 ? 1 : -1;
				var mind1 = -1;
				var minvX1;
				var minvY1;
				var minvZ1;
				var mini1 = 0;
				minvX1 = 0;
				minvY1 = 0;
				minvZ1 = 0;
				if((v1X5 * n123X + v1Y5 * n123Y + v1Z5 * n123Z) * sign < 0) {
					var v1X6;
					var v1Y6;
					var v1Z6;
					var v2X6;
					var v2Y6;
					var v2Z6;
					var v3X2;
					var v3Y2;
					var v3Z2;
					var v12X6;
					var v12Y6;
					var v12Z6;
					var v23X2;
					var v23Y2;
					var v23Z2;
					var v31X1;
					var v31Y1;
					var v31Z1;
					v1X6 = vec11.x;
					v1Y6 = vec11.y;
					v1Z6 = vec11.z;
					v2X6 = vec21.x;
					v2Y6 = vec21.y;
					v2Z6 = vec21.z;
					v3X2 = vec31.x;
					v3Y2 = vec31.y;
					v3Z2 = vec31.z;
					v12X6 = v2X6 - v1X6;
					v12Y6 = v2Y6 - v1Y6;
					v12Z6 = v2Z6 - v1Z6;
					v23X2 = v3X2 - v2X6;
					v23Y2 = v3Y2 - v2Y6;
					v23Z2 = v3Z2 - v2Z6;
					v31X1 = v1X6 - v3X2;
					v31Y1 = v1Y6 - v3Y2;
					v31Z1 = v1Z6 - v3Z2;
					var nX1;
					var nY1;
					var nZ1;
					nX1 = v12Y6 * v23Z2 - v12Z6 * v23Y2;
					nY1 = v12Z6 * v23X2 - v12X6 * v23Z2;
					nZ1 = v12X6 * v23Y2 - v12Y6 * v23X2;
					var n12X1;
					var n12Y1;
					var n12Z1;
					var n23X1;
					var n23Y1;
					var n23Z1;
					var n31X1;
					var n31Y1;
					var n31Z1;
					n12X1 = v12Y6 * nZ1 - v12Z6 * nY1;
					n12Y1 = v12Z6 * nX1 - v12X6 * nZ1;
					n12Z1 = v12X6 * nY1 - v12Y6 * nX1;
					n23X1 = v23Y2 * nZ1 - v23Z2 * nY1;
					n23Y1 = v23Z2 * nX1 - v23X2 * nZ1;
					n23Z1 = v23X2 * nY1 - v23Y2 * nX1;
					n31X1 = v31Y1 * nZ1 - v31Z1 * nY1;
					n31Y1 = v31Z1 * nX1 - v31X1 * nZ1;
					n31Z1 = v31X1 * nY1 - v31Y1 * nX1;
					var mind2 = -1;
					var minvX2;
					var minvY2;
					var minvZ2;
					var mini2 = 0;
					minvX2 = 0;
					minvY2 = 0;
					minvZ2 = 0;
					if(v1X6 * n12X1 + v1Y6 * n12Y1 + v1Z6 * n12Z1 < 0) {
						var v1X7;
						var v1Y7;
						var v1Z7;
						var v2X7;
						var v2Y7;
						var v2Z7;
						v1X7 = vec11.x;
						v1Y7 = vec11.y;
						v1Z7 = vec11.z;
						v2X7 = vec21.x;
						v2Y7 = vec21.y;
						v2Z7 = vec21.z;
						var v12X7;
						var v12Y7;
						var v12Z7;
						v12X7 = v2X7 - v1X7;
						v12Y7 = v2Y7 - v1Y7;
						v12Z7 = v2Z7 - v1Z7;
						var t4 = v12X7 * v1X7 + v12Y7 * v1Y7 + v12Z7 * v1Z7;
						t4 = -t4 / (v12X7 * v12X7 + v12Y7 * v12Y7 + v12Z7 * v12Z7);
						var b3;
						if(t4 < 0) {
							closest.x = v1X7;
							closest.y = v1Y7;
							closest.z = v1Z7;
							b3 = 1;
						} else if(t4 > 1) {
							closest.x = v2X7;
							closest.y = v2Y7;
							closest.z = v2Z7;
							b3 = 2;
						} else {
							var pX4;
							var pY4;
							var pZ4;
							pX4 = v1X7 + v12X7 * t4;
							pY4 = v1Y7 + v12Y7 * t4;
							pZ4 = v1Z7 + v12Z7 * t4;
							closest.x = pX4;
							closest.y = pY4;
							closest.z = pZ4;
							b3 = 3;
						}
						mini2 = b3;
						mind2 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
						minvX2 = closest.x;
						minvY2 = closest.y;
						minvZ2 = closest.z;
					}
					if(v2X6 * n23X1 + v2Y6 * n23Y1 + v2Z6 * n23Z1 < 0) {
						var v1X8;
						var v1Y8;
						var v1Z8;
						var v2X8;
						var v2Y8;
						var v2Z8;
						v1X8 = vec21.x;
						v1Y8 = vec21.y;
						v1Z8 = vec21.z;
						v2X8 = vec31.x;
						v2Y8 = vec31.y;
						v2Z8 = vec31.z;
						var v12X8;
						var v12Y8;
						var v12Z8;
						v12X8 = v2X8 - v1X8;
						v12Y8 = v2Y8 - v1Y8;
						v12Z8 = v2Z8 - v1Z8;
						var t5 = v12X8 * v1X8 + v12Y8 * v1Y8 + v12Z8 * v1Z8;
						t5 = -t5 / (v12X8 * v12X8 + v12Y8 * v12Y8 + v12Z8 * v12Z8);
						var b4;
						if(t5 < 0) {
							closest.x = v1X8;
							closest.y = v1Y8;
							closest.z = v1Z8;
							b4 = 1;
						} else if(t5 > 1) {
							closest.x = v2X8;
							closest.y = v2Y8;
							closest.z = v2Z8;
							b4 = 2;
						} else {
							var pX5;
							var pY5;
							var pZ5;
							pX5 = v1X8 + v12X8 * t5;
							pY5 = v1Y8 + v12Y8 * t5;
							pZ5 = v1Z8 + v12Z8 * t5;
							closest.x = pX5;
							closest.y = pY5;
							closest.z = pZ5;
							b4 = 3;
						}
						var d2 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
						if(mind2 < 0 || d2 < mind2) {
							mini2 = b4 << 1;
							mind2 = d2;
							minvX2 = closest.x;
							minvY2 = closest.y;
							minvZ2 = closest.z;
						}
					}
					if(v3X2 * n31X1 + v3Y2 * n31Y1 + v3Z2 * n31Z1 < 0) {
						var v1X9;
						var v1Y9;
						var v1Z9;
						var v2X9;
						var v2Y9;
						var v2Z9;
						v1X9 = vec11.x;
						v1Y9 = vec11.y;
						v1Z9 = vec11.z;
						v2X9 = vec31.x;
						v2Y9 = vec31.y;
						v2Z9 = vec31.z;
						var v12X9;
						var v12Y9;
						var v12Z9;
						v12X9 = v2X9 - v1X9;
						v12Y9 = v2Y9 - v1Y9;
						v12Z9 = v2Z9 - v1Z9;
						var t6 = v12X9 * v1X9 + v12Y9 * v1Y9 + v12Z9 * v1Z9;
						t6 = -t6 / (v12X9 * v12X9 + v12Y9 * v12Y9 + v12Z9 * v12Z9);
						var b5;
						if(t6 < 0) {
							closest.x = v1X9;
							closest.y = v1Y9;
							closest.z = v1Z9;
							b5 = 1;
						} else if(t6 > 1) {
							closest.x = v2X9;
							closest.y = v2Y9;
							closest.z = v2Z9;
							b5 = 2;
						} else {
							var pX6;
							var pY6;
							var pZ6;
							pX6 = v1X9 + v12X9 * t6;
							pY6 = v1Y9 + v12Y9 * t6;
							pZ6 = v1Z9 + v12Z9 * t6;
							closest.x = pX6;
							closest.y = pY6;
							closest.z = pZ6;
							b5 = 3;
						}
						var d3 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
						if(mind2 < 0 || d3 < mind2) {
							mini2 = b5 & 1 | (b5 & 2) << 1;
							mind2 = d3;
							minvX2 = closest.x;
							minvY2 = closest.y;
							minvZ2 = closest.z;
						}
					}
					var b6;
					if(mind2 > 0) {
						closest.x = minvX2;
						closest.y = minvY2;
						closest.z = minvZ2;
						b6 = mini2;
					} else {
						var l1 = nX1 * nX1 + nY1 * nY1 + nZ1 * nZ1;
						if(l1 > 0) {
							l1 = 1 / Math.sqrt(l1);
						}
						nX1 *= l1;
						nY1 *= l1;
						nZ1 *= l1;
						var l21 = nX1 * nX1 + nY1 * nY1 + nZ1 * nZ1;
						l21 = (v1X6 * nX1 + v1Y6 * nY1 + v1Z6 * nZ1) / l21;
						minvX2 = nX1 * l21;
						minvY2 = nY1 * l21;
						minvZ2 = nZ1 * l21;
						closest.x = minvX2;
						closest.y = minvY2;
						closest.z = minvZ2;
						b6 = 7;
					}
					mini1 = b6;
					mind1 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
					minvX1 = closest.x;
					minvY1 = closest.y;
					minvZ1 = closest.z;
				}
				if((v1X5 * n134X + v1Y5 * n134Y + v1Z5 * n134Z) * sign < 0) {
					var v1X10;
					var v1Y10;
					var v1Z10;
					var v2X10;
					var v2Y10;
					var v2Z10;
					var v3X3;
					var v3Y3;
					var v3Z3;
					var v12X10;
					var v12Y10;
					var v12Z10;
					var v23X3;
					var v23Y3;
					var v23Z3;
					var v31X2;
					var v31Y2;
					var v31Z2;
					v1X10 = vec11.x;
					v1Y10 = vec11.y;
					v1Z10 = vec11.z;
					v2X10 = vec31.x;
					v2Y10 = vec31.y;
					v2Z10 = vec31.z;
					v3X3 = vec4.x;
					v3Y3 = vec4.y;
					v3Z3 = vec4.z;
					v12X10 = v2X10 - v1X10;
					v12Y10 = v2Y10 - v1Y10;
					v12Z10 = v2Z10 - v1Z10;
					v23X3 = v3X3 - v2X10;
					v23Y3 = v3Y3 - v2Y10;
					v23Z3 = v3Z3 - v2Z10;
					v31X2 = v1X10 - v3X3;
					v31Y2 = v1Y10 - v3Y3;
					v31Z2 = v1Z10 - v3Z3;
					var nX2;
					var nY2;
					var nZ2;
					nX2 = v12Y10 * v23Z3 - v12Z10 * v23Y3;
					nY2 = v12Z10 * v23X3 - v12X10 * v23Z3;
					nZ2 = v12X10 * v23Y3 - v12Y10 * v23X3;
					var n12X2;
					var n12Y2;
					var n12Z2;
					var n23X2;
					var n23Y2;
					var n23Z2;
					var n31X2;
					var n31Y2;
					var n31Z2;
					n12X2 = v12Y10 * nZ2 - v12Z10 * nY2;
					n12Y2 = v12Z10 * nX2 - v12X10 * nZ2;
					n12Z2 = v12X10 * nY2 - v12Y10 * nX2;
					n23X2 = v23Y3 * nZ2 - v23Z3 * nY2;
					n23Y2 = v23Z3 * nX2 - v23X3 * nZ2;
					n23Z2 = v23X3 * nY2 - v23Y3 * nX2;
					n31X2 = v31Y2 * nZ2 - v31Z2 * nY2;
					n31Y2 = v31Z2 * nX2 - v31X2 * nZ2;
					n31Z2 = v31X2 * nY2 - v31Y2 * nX2;
					var mind3 = -1;
					var minvX3;
					var minvY3;
					var minvZ3;
					var mini3 = 0;
					minvX3 = 0;
					minvY3 = 0;
					minvZ3 = 0;
					if(v1X10 * n12X2 + v1Y10 * n12Y2 + v1Z10 * n12Z2 < 0) {
						var v1X11;
						var v1Y11;
						var v1Z11;
						var v2X11;
						var v2Y11;
						var v2Z11;
						v1X11 = vec11.x;
						v1Y11 = vec11.y;
						v1Z11 = vec11.z;
						v2X11 = vec31.x;
						v2Y11 = vec31.y;
						v2Z11 = vec31.z;
						var v12X11;
						var v12Y11;
						var v12Z11;
						v12X11 = v2X11 - v1X11;
						v12Y11 = v2Y11 - v1Y11;
						v12Z11 = v2Z11 - v1Z11;
						var t7 = v12X11 * v1X11 + v12Y11 * v1Y11 + v12Z11 * v1Z11;
						t7 = -t7 / (v12X11 * v12X11 + v12Y11 * v12Y11 + v12Z11 * v12Z11);
						var b7;
						if(t7 < 0) {
							closest.x = v1X11;
							closest.y = v1Y11;
							closest.z = v1Z11;
							b7 = 1;
						} else if(t7 > 1) {
							closest.x = v2X11;
							closest.y = v2Y11;
							closest.z = v2Z11;
							b7 = 2;
						} else {
							var pX7;
							var pY7;
							var pZ7;
							pX7 = v1X11 + v12X11 * t7;
							pY7 = v1Y11 + v12Y11 * t7;
							pZ7 = v1Z11 + v12Z11 * t7;
							closest.x = pX7;
							closest.y = pY7;
							closest.z = pZ7;
							b7 = 3;
						}
						mini3 = b7;
						mind3 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
						minvX3 = closest.x;
						minvY3 = closest.y;
						minvZ3 = closest.z;
					}
					if(v2X10 * n23X2 + v2Y10 * n23Y2 + v2Z10 * n23Z2 < 0) {
						var v1X12;
						var v1Y12;
						var v1Z12;
						var v2X12;
						var v2Y12;
						var v2Z12;
						v1X12 = vec31.x;
						v1Y12 = vec31.y;
						v1Z12 = vec31.z;
						v2X12 = vec4.x;
						v2Y12 = vec4.y;
						v2Z12 = vec4.z;
						var v12X12;
						var v12Y12;
						var v12Z12;
						v12X12 = v2X12 - v1X12;
						v12Y12 = v2Y12 - v1Y12;
						v12Z12 = v2Z12 - v1Z12;
						var t8 = v12X12 * v1X12 + v12Y12 * v1Y12 + v12Z12 * v1Z12;
						t8 = -t8 / (v12X12 * v12X12 + v12Y12 * v12Y12 + v12Z12 * v12Z12);
						var b8;
						if(t8 < 0) {
							closest.x = v1X12;
							closest.y = v1Y12;
							closest.z = v1Z12;
							b8 = 1;
						} else if(t8 > 1) {
							closest.x = v2X12;
							closest.y = v2Y12;
							closest.z = v2Z12;
							b8 = 2;
						} else {
							var pX8;
							var pY8;
							var pZ8;
							pX8 = v1X12 + v12X12 * t8;
							pY8 = v1Y12 + v12Y12 * t8;
							pZ8 = v1Z12 + v12Z12 * t8;
							closest.x = pX8;
							closest.y = pY8;
							closest.z = pZ8;
							b8 = 3;
						}
						var d4 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
						if(mind3 < 0 || d4 < mind3) {
							mini3 = b8 << 1;
							mind3 = d4;
							minvX3 = closest.x;
							minvY3 = closest.y;
							minvZ3 = closest.z;
						}
					}
					if(v3X3 * n31X2 + v3Y3 * n31Y2 + v3Z3 * n31Z2 < 0) {
						var v1X13;
						var v1Y13;
						var v1Z13;
						var v2X13;
						var v2Y13;
						var v2Z13;
						v1X13 = vec11.x;
						v1Y13 = vec11.y;
						v1Z13 = vec11.z;
						v2X13 = vec4.x;
						v2Y13 = vec4.y;
						v2Z13 = vec4.z;
						var v12X13;
						var v12Y13;
						var v12Z13;
						v12X13 = v2X13 - v1X13;
						v12Y13 = v2Y13 - v1Y13;
						v12Z13 = v2Z13 - v1Z13;
						var t9 = v12X13 * v1X13 + v12Y13 * v1Y13 + v12Z13 * v1Z13;
						t9 = -t9 / (v12X13 * v12X13 + v12Y13 * v12Y13 + v12Z13 * v12Z13);
						var b9;
						if(t9 < 0) {
							closest.x = v1X13;
							closest.y = v1Y13;
							closest.z = v1Z13;
							b9 = 1;
						} else if(t9 > 1) {
							closest.x = v2X13;
							closest.y = v2Y13;
							closest.z = v2Z13;
							b9 = 2;
						} else {
							var pX9;
							var pY9;
							var pZ9;
							pX9 = v1X13 + v12X13 * t9;
							pY9 = v1Y13 + v12Y13 * t9;
							pZ9 = v1Z13 + v12Z13 * t9;
							closest.x = pX9;
							closest.y = pY9;
							closest.z = pZ9;
							b9 = 3;
						}
						var d5 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
						if(mind3 < 0 || d5 < mind3) {
							mini3 = b9 & 1 | (b9 & 2) << 1;
							mind3 = d5;
							minvX3 = closest.x;
							minvY3 = closest.y;
							minvZ3 = closest.z;
						}
					}
					var b10;
					if(mind3 > 0) {
						closest.x = minvX3;
						closest.y = minvY3;
						closest.z = minvZ3;
						b10 = mini3;
					} else {
						var l3 = nX2 * nX2 + nY2 * nY2 + nZ2 * nZ2;
						if(l3 > 0) {
							l3 = 1 / Math.sqrt(l3);
						}
						nX2 *= l3;
						nY2 *= l3;
						nZ2 *= l3;
						var l22 = nX2 * nX2 + nY2 * nY2 + nZ2 * nZ2;
						l22 = (v1X10 * nX2 + v1Y10 * nY2 + v1Z10 * nZ2) / l22;
						minvX3 = nX2 * l22;
						minvY3 = nY2 * l22;
						minvZ3 = nZ2 * l22;
						closest.x = minvX3;
						closest.y = minvY3;
						closest.z = minvZ3;
						b10 = 7;
					}
					var d6 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
					if(mind1 < 0 || d6 < mind1) {
						mini1 = b10 & 1 | (b10 & 6) << 1;
						mind1 = d6;
						minvX1 = closest.x;
						minvY1 = closest.y;
						minvZ1 = closest.z;
					}
				}
				if((v1X5 * n142X + v1Y5 * n142Y + v1Z5 * n142Z) * sign < 0) {
					var v1X14;
					var v1Y14;
					var v1Z14;
					var v2X14;
					var v2Y14;
					var v2Z14;
					var v3X4;
					var v3Y4;
					var v3Z4;
					var v12X14;
					var v12Y14;
					var v12Z14;
					var v23X4;
					var v23Y4;
					var v23Z4;
					var v31X3;
					var v31Y3;
					var v31Z3;
					v1X14 = vec11.x;
					v1Y14 = vec11.y;
					v1Z14 = vec11.z;
					v2X14 = vec21.x;
					v2Y14 = vec21.y;
					v2Z14 = vec21.z;
					v3X4 = vec4.x;
					v3Y4 = vec4.y;
					v3Z4 = vec4.z;
					v12X14 = v2X14 - v1X14;
					v12Y14 = v2Y14 - v1Y14;
					v12Z14 = v2Z14 - v1Z14;
					v23X4 = v3X4 - v2X14;
					v23Y4 = v3Y4 - v2Y14;
					v23Z4 = v3Z4 - v2Z14;
					v31X3 = v1X14 - v3X4;
					v31Y3 = v1Y14 - v3Y4;
					v31Z3 = v1Z14 - v3Z4;
					var nX3;
					var nY3;
					var nZ3;
					nX3 = v12Y14 * v23Z4 - v12Z14 * v23Y4;
					nY3 = v12Z14 * v23X4 - v12X14 * v23Z4;
					nZ3 = v12X14 * v23Y4 - v12Y14 * v23X4;
					var n12X3;
					var n12Y3;
					var n12Z3;
					var n23X3;
					var n23Y3;
					var n23Z3;
					var n31X3;
					var n31Y3;
					var n31Z3;
					n12X3 = v12Y14 * nZ3 - v12Z14 * nY3;
					n12Y3 = v12Z14 * nX3 - v12X14 * nZ3;
					n12Z3 = v12X14 * nY3 - v12Y14 * nX3;
					n23X3 = v23Y4 * nZ3 - v23Z4 * nY3;
					n23Y3 = v23Z4 * nX3 - v23X4 * nZ3;
					n23Z3 = v23X4 * nY3 - v23Y4 * nX3;
					n31X3 = v31Y3 * nZ3 - v31Z3 * nY3;
					n31Y3 = v31Z3 * nX3 - v31X3 * nZ3;
					n31Z3 = v31X3 * nY3 - v31Y3 * nX3;
					var mind4 = -1;
					var minvX4;
					var minvY4;
					var minvZ4;
					var mini4 = 0;
					minvX4 = 0;
					minvY4 = 0;
					minvZ4 = 0;
					if(v1X14 * n12X3 + v1Y14 * n12Y3 + v1Z14 * n12Z3 < 0) {
						var v1X15;
						var v1Y15;
						var v1Z15;
						var v2X15;
						var v2Y15;
						var v2Z15;
						v1X15 = vec11.x;
						v1Y15 = vec11.y;
						v1Z15 = vec11.z;
						v2X15 = vec21.x;
						v2Y15 = vec21.y;
						v2Z15 = vec21.z;
						var v12X15;
						var v12Y15;
						var v12Z15;
						v12X15 = v2X15 - v1X15;
						v12Y15 = v2Y15 - v1Y15;
						v12Z15 = v2Z15 - v1Z15;
						var t10 = v12X15 * v1X15 + v12Y15 * v1Y15 + v12Z15 * v1Z15;
						t10 = -t10 / (v12X15 * v12X15 + v12Y15 * v12Y15 + v12Z15 * v12Z15);
						var b11;
						if(t10 < 0) {
							closest.x = v1X15;
							closest.y = v1Y15;
							closest.z = v1Z15;
							b11 = 1;
						} else if(t10 > 1) {
							closest.x = v2X15;
							closest.y = v2Y15;
							closest.z = v2Z15;
							b11 = 2;
						} else {
							var pX10;
							var pY10;
							var pZ10;
							pX10 = v1X15 + v12X15 * t10;
							pY10 = v1Y15 + v12Y15 * t10;
							pZ10 = v1Z15 + v12Z15 * t10;
							closest.x = pX10;
							closest.y = pY10;
							closest.z = pZ10;
							b11 = 3;
						}
						mini4 = b11;
						mind4 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
						minvX4 = closest.x;
						minvY4 = closest.y;
						minvZ4 = closest.z;
					}
					if(v2X14 * n23X3 + v2Y14 * n23Y3 + v2Z14 * n23Z3 < 0) {
						var v1X16;
						var v1Y16;
						var v1Z16;
						var v2X16;
						var v2Y16;
						var v2Z16;
						v1X16 = vec21.x;
						v1Y16 = vec21.y;
						v1Z16 = vec21.z;
						v2X16 = vec4.x;
						v2Y16 = vec4.y;
						v2Z16 = vec4.z;
						var v12X16;
						var v12Y16;
						var v12Z16;
						v12X16 = v2X16 - v1X16;
						v12Y16 = v2Y16 - v1Y16;
						v12Z16 = v2Z16 - v1Z16;
						var t11 = v12X16 * v1X16 + v12Y16 * v1Y16 + v12Z16 * v1Z16;
						t11 = -t11 / (v12X16 * v12X16 + v12Y16 * v12Y16 + v12Z16 * v12Z16);
						var b12;
						if(t11 < 0) {
							closest.x = v1X16;
							closest.y = v1Y16;
							closest.z = v1Z16;
							b12 = 1;
						} else if(t11 > 1) {
							closest.x = v2X16;
							closest.y = v2Y16;
							closest.z = v2Z16;
							b12 = 2;
						} else {
							var pX11;
							var pY11;
							var pZ11;
							pX11 = v1X16 + v12X16 * t11;
							pY11 = v1Y16 + v12Y16 * t11;
							pZ11 = v1Z16 + v12Z16 * t11;
							closest.x = pX11;
							closest.y = pY11;
							closest.z = pZ11;
							b12 = 3;
						}
						var d7 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
						if(mind4 < 0 || d7 < mind4) {
							mini4 = b12 << 1;
							mind4 = d7;
							minvX4 = closest.x;
							minvY4 = closest.y;
							minvZ4 = closest.z;
						}
					}
					if(v3X4 * n31X3 + v3Y4 * n31Y3 + v3Z4 * n31Z3 < 0) {
						var v1X17;
						var v1Y17;
						var v1Z17;
						var v2X17;
						var v2Y17;
						var v2Z17;
						v1X17 = vec11.x;
						v1Y17 = vec11.y;
						v1Z17 = vec11.z;
						v2X17 = vec4.x;
						v2Y17 = vec4.y;
						v2Z17 = vec4.z;
						var v12X17;
						var v12Y17;
						var v12Z17;
						v12X17 = v2X17 - v1X17;
						v12Y17 = v2Y17 - v1Y17;
						v12Z17 = v2Z17 - v1Z17;
						var t12 = v12X17 * v1X17 + v12Y17 * v1Y17 + v12Z17 * v1Z17;
						t12 = -t12 / (v12X17 * v12X17 + v12Y17 * v12Y17 + v12Z17 * v12Z17);
						var b13;
						if(t12 < 0) {
							closest.x = v1X17;
							closest.y = v1Y17;
							closest.z = v1Z17;
							b13 = 1;
						} else if(t12 > 1) {
							closest.x = v2X17;
							closest.y = v2Y17;
							closest.z = v2Z17;
							b13 = 2;
						} else {
							var pX12;
							var pY12;
							var pZ12;
							pX12 = v1X17 + v12X17 * t12;
							pY12 = v1Y17 + v12Y17 * t12;
							pZ12 = v1Z17 + v12Z17 * t12;
							closest.x = pX12;
							closest.y = pY12;
							closest.z = pZ12;
							b13 = 3;
						}
						var d8 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
						if(mind4 < 0 || d8 < mind4) {
							mini4 = b13 & 1 | (b13 & 2) << 1;
							mind4 = d8;
							minvX4 = closest.x;
							minvY4 = closest.y;
							minvZ4 = closest.z;
						}
					}
					var b14;
					if(mind4 > 0) {
						closest.x = minvX4;
						closest.y = minvY4;
						closest.z = minvZ4;
						b14 = mini4;
					} else {
						var l4 = nX3 * nX3 + nY3 * nY3 + nZ3 * nZ3;
						if(l4 > 0) {
							l4 = 1 / Math.sqrt(l4);
						}
						nX3 *= l4;
						nY3 *= l4;
						nZ3 *= l4;
						var l23 = nX3 * nX3 + nY3 * nY3 + nZ3 * nZ3;
						l23 = (v1X14 * nX3 + v1Y14 * nY3 + v1Z14 * nZ3) / l23;
						minvX4 = nX3 * l23;
						minvY4 = nY3 * l23;
						minvZ4 = nZ3 * l23;
						closest.x = minvX4;
						closest.y = minvY4;
						closest.z = minvZ4;
						b14 = 7;
					}
					var d9 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
					if(mind1 < 0 || d9 < mind1) {
						mini1 = b14 & 3 | (b14 & 4) << 1;
						mind1 = d9;
						minvX1 = closest.x;
						minvY1 = closest.y;
						minvZ1 = closest.z;
					}
				}
				if((v2X5 * n243X + v2Y5 * n243Y + v2Z5 * n243Z) * sign < 0) {
					var v1X18;
					var v1Y18;
					var v1Z18;
					var v2X18;
					var v2Y18;
					var v2Z18;
					var v3X5;
					var v3Y5;
					var v3Z5;
					var v12X18;
					var v12Y18;
					var v12Z18;
					var v23X5;
					var v23Y5;
					var v23Z5;
					var v31X4;
					var v31Y4;
					var v31Z4;
					v1X18 = vec21.x;
					v1Y18 = vec21.y;
					v1Z18 = vec21.z;
					v2X18 = vec31.x;
					v2Y18 = vec31.y;
					v2Z18 = vec31.z;
					v3X5 = vec4.x;
					v3Y5 = vec4.y;
					v3Z5 = vec4.z;
					v12X18 = v2X18 - v1X18;
					v12Y18 = v2Y18 - v1Y18;
					v12Z18 = v2Z18 - v1Z18;
					v23X5 = v3X5 - v2X18;
					v23Y5 = v3Y5 - v2Y18;
					v23Z5 = v3Z5 - v2Z18;
					v31X4 = v1X18 - v3X5;
					v31Y4 = v1Y18 - v3Y5;
					v31Z4 = v1Z18 - v3Z5;
					var nX4;
					var nY4;
					var nZ4;
					nX4 = v12Y18 * v23Z5 - v12Z18 * v23Y5;
					nY4 = v12Z18 * v23X5 - v12X18 * v23Z5;
					nZ4 = v12X18 * v23Y5 - v12Y18 * v23X5;
					var n12X4;
					var n12Y4;
					var n12Z4;
					var n23X4;
					var n23Y4;
					var n23Z4;
					var n31X4;
					var n31Y4;
					var n31Z4;
					n12X4 = v12Y18 * nZ4 - v12Z18 * nY4;
					n12Y4 = v12Z18 * nX4 - v12X18 * nZ4;
					n12Z4 = v12X18 * nY4 - v12Y18 * nX4;
					n23X4 = v23Y5 * nZ4 - v23Z5 * nY4;
					n23Y4 = v23Z5 * nX4 - v23X5 * nZ4;
					n23Z4 = v23X5 * nY4 - v23Y5 * nX4;
					n31X4 = v31Y4 * nZ4 - v31Z4 * nY4;
					n31Y4 = v31Z4 * nX4 - v31X4 * nZ4;
					n31Z4 = v31X4 * nY4 - v31Y4 * nX4;
					var mind5 = -1;
					var minvX5;
					var minvY5;
					var minvZ5;
					var mini5 = 0;
					minvX5 = 0;
					minvY5 = 0;
					minvZ5 = 0;
					if(v1X18 * n12X4 + v1Y18 * n12Y4 + v1Z18 * n12Z4 < 0) {
						var v1X19;
						var v1Y19;
						var v1Z19;
						var v2X19;
						var v2Y19;
						var v2Z19;
						v1X19 = vec21.x;
						v1Y19 = vec21.y;
						v1Z19 = vec21.z;
						v2X19 = vec31.x;
						v2Y19 = vec31.y;
						v2Z19 = vec31.z;
						var v12X19;
						var v12Y19;
						var v12Z19;
						v12X19 = v2X19 - v1X19;
						v12Y19 = v2Y19 - v1Y19;
						v12Z19 = v2Z19 - v1Z19;
						var t13 = v12X19 * v1X19 + v12Y19 * v1Y19 + v12Z19 * v1Z19;
						t13 = -t13 / (v12X19 * v12X19 + v12Y19 * v12Y19 + v12Z19 * v12Z19);
						var b15;
						if(t13 < 0) {
							closest.x = v1X19;
							closest.y = v1Y19;
							closest.z = v1Z19;
							b15 = 1;
						} else if(t13 > 1) {
							closest.x = v2X19;
							closest.y = v2Y19;
							closest.z = v2Z19;
							b15 = 2;
						} else {
							var pX13;
							var pY13;
							var pZ13;
							pX13 = v1X19 + v12X19 * t13;
							pY13 = v1Y19 + v12Y19 * t13;
							pZ13 = v1Z19 + v12Z19 * t13;
							closest.x = pX13;
							closest.y = pY13;
							closest.z = pZ13;
							b15 = 3;
						}
						mini5 = b15;
						mind5 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
						minvX5 = closest.x;
						minvY5 = closest.y;
						minvZ5 = closest.z;
					}
					if(v2X18 * n23X4 + v2Y18 * n23Y4 + v2Z18 * n23Z4 < 0) {
						var v1X20;
						var v1Y20;
						var v1Z20;
						var v2X20;
						var v2Y20;
						var v2Z20;
						v1X20 = vec31.x;
						v1Y20 = vec31.y;
						v1Z20 = vec31.z;
						v2X20 = vec4.x;
						v2Y20 = vec4.y;
						v2Z20 = vec4.z;
						var v12X20;
						var v12Y20;
						var v12Z20;
						v12X20 = v2X20 - v1X20;
						v12Y20 = v2Y20 - v1Y20;
						v12Z20 = v2Z20 - v1Z20;
						var t14 = v12X20 * v1X20 + v12Y20 * v1Y20 + v12Z20 * v1Z20;
						t14 = -t14 / (v12X20 * v12X20 + v12Y20 * v12Y20 + v12Z20 * v12Z20);
						var b16;
						if(t14 < 0) {
							closest.x = v1X20;
							closest.y = v1Y20;
							closest.z = v1Z20;
							b16 = 1;
						} else if(t14 > 1) {
							closest.x = v2X20;
							closest.y = v2Y20;
							closest.z = v2Z20;
							b16 = 2;
						} else {
							var pX14;
							var pY14;
							var pZ14;
							pX14 = v1X20 + v12X20 * t14;
							pY14 = v1Y20 + v12Y20 * t14;
							pZ14 = v1Z20 + v12Z20 * t14;
							closest.x = pX14;
							closest.y = pY14;
							closest.z = pZ14;
							b16 = 3;
						}
						var d10 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
						if(mind5 < 0 || d10 < mind5) {
							mini5 = b16 << 1;
							mind5 = d10;
							minvX5 = closest.x;
							minvY5 = closest.y;
							minvZ5 = closest.z;
						}
					}
					if(v3X5 * n31X4 + v3Y5 * n31Y4 + v3Z5 * n31Z4 < 0) {
						var v1X21;
						var v1Y21;
						var v1Z21;
						var v2X21;
						var v2Y21;
						var v2Z21;
						v1X21 = vec21.x;
						v1Y21 = vec21.y;
						v1Z21 = vec21.z;
						v2X21 = vec4.x;
						v2Y21 = vec4.y;
						v2Z21 = vec4.z;
						var v12X21;
						var v12Y21;
						var v12Z21;
						v12X21 = v2X21 - v1X21;
						v12Y21 = v2Y21 - v1Y21;
						v12Z21 = v2Z21 - v1Z21;
						var t15 = v12X21 * v1X21 + v12Y21 * v1Y21 + v12Z21 * v1Z21;
						t15 = -t15 / (v12X21 * v12X21 + v12Y21 * v12Y21 + v12Z21 * v12Z21);
						var b17;
						if(t15 < 0) {
							closest.x = v1X21;
							closest.y = v1Y21;
							closest.z = v1Z21;
							b17 = 1;
						} else if(t15 > 1) {
							closest.x = v2X21;
							closest.y = v2Y21;
							closest.z = v2Z21;
							b17 = 2;
						} else {
							var pX15;
							var pY15;
							var pZ15;
							pX15 = v1X21 + v12X21 * t15;
							pY15 = v1Y21 + v12Y21 * t15;
							pZ15 = v1Z21 + v12Z21 * t15;
							closest.x = pX15;
							closest.y = pY15;
							closest.z = pZ15;
							b17 = 3;
						}
						var d11 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
						if(mind5 < 0 || d11 < mind5) {
							mini5 = b17 & 1 | (b17 & 2) << 1;
							mind5 = d11;
							minvX5 = closest.x;
							minvY5 = closest.y;
							minvZ5 = closest.z;
						}
					}
					var b18;
					if(mind5 > 0) {
						closest.x = minvX5;
						closest.y = minvY5;
						closest.z = minvZ5;
						b18 = mini5;
					} else {
						var l5 = nX4 * nX4 + nY4 * nY4 + nZ4 * nZ4;
						if(l5 > 0) {
							l5 = 1 / Math.sqrt(l5);
						}
						nX4 *= l5;
						nY4 *= l5;
						nZ4 *= l5;
						var l24 = nX4 * nX4 + nY4 * nY4 + nZ4 * nZ4;
						l24 = (v1X18 * nX4 + v1Y18 * nY4 + v1Z18 * nZ4) / l24;
						minvX5 = nX4 * l24;
						minvY5 = nY4 * l24;
						minvZ5 = nZ4 * l24;
						closest.x = minvX5;
						closest.y = minvY5;
						closest.z = minvZ5;
						b18 = 7;
					}
					var d12 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
					if(mind1 < 0 || d12 < mind1) {
						mini1 = b18 << 1;
						mind1 = d12;
						minvX1 = closest.x;
						minvY1 = closest.y;
						minvZ1 = closest.z;
					}
				}
				if(mind1 > 0) {
					closest.x = minvX1;
					closest.y = minvY1;
					closest.z = minvZ1;
					v = mini1;
				} else {
					closest.zero();
					v = 15;
				}
				break;
			}
			if(closest.x * closest.x + closest.y * closest.y + closest.z * closest.z < 1e-008) {
				if(!useEpa) {
					this.distance = 0;
					return 0;
				}
				switch(this.simplexSize) {
				case 1:
					this.pointToTetrahedron();
					break;
				case 2:
					this.lineToTetrahedron();
					break;
				case 3:
					this.triangleToTetrahedron();
					break;
				}
				if(this.simplexSize == 4) {
					var epaState = this.computeDepth(c1,c2,tf1,tf2,s,w1,w2);
					if(epaState != 0) {
						this.distance = 0;
						return epaState;
					}
					this.distance = -this.depth;
					return 0;
				}
				this.distance = 0;
				return 1;
			}
			this.shrinkSimplex(v);
			dir.x = closest.x;
			dir.y = closest.y;
			dir.z = closest.z;
			dir.x = -dir.x;
			dir.y = -dir.y;
			dir.z = -dir.z;
			this.computeWitnessPoint1(false);
			this.computeWitnessPoint2(false);
			var _this = this.s[this.simplexSize];
			var v4 = this.w1[this.simplexSize];
			_this.x = v4.x;
			_this.y = v4.y;
			_this.z = v4.z;
			var v5 = this.w2[this.simplexSize];
			_this.x -= v5.x;
			_this.y -= v5.y;
			_this.z -= v5.z;
			if(dir.x * dir.x + dir.y * dir.y + dir.z * dir.z < 1e-008) {
				throw new Error("!?");
			}
			var _this1 = s[this.simplexSize];
			if(_this1.x * dir.x + _this1.y * dir.y + _this1.z * dir.z - (closest.x * dir.x + closest.y * dir.y + closest.z * dir.z) < 1e-008) {
				this.interpolateClosestPoints();
				this.distance = Math.sqrt(closest.x * closest.x + closest.y * closest.y + closest.z * closest.z);
				if(cache != null && cache._gjkCache != null) {
					this.saveCache(cache._gjkCache);
				}
				return 0;
			}
			this.simplexSize++;
			++count;
		}
		return 2;
	}
	,convexCastImpl: function(c1,c2,tf1,tf2,tl1,tl2,hit) {
		this.c1 = c1;
		this.c2 = c2;
		this.tf1 = tf1;
		this.tf2 = tf2;
		var s = this.s;
		var closest = this.closest;
		var dir = this.dir;
		var firstDirX;
		var firstDirY;
		var firstDirZ;
		firstDirX = tf2._positionX - tf1._positionX;
		firstDirY = tf2._positionY - tf1._positionY;
		firstDirZ = tf2._positionZ - tf1._positionZ;
		dir.x = firstDirX;
		dir.y = firstDirY;
		dir.z = firstDirZ;
		if(dir.x * dir.x + dir.y * dir.y + dir.z * dir.z < 1e-6) {
			dir.init(1,0,0);
		}
		this.simplexSize = 0;
		if(this.c1 != null) {
			this.computeWitnessPoint1(true);
		} else {
			var v = this.w1[this.simplexSize];
			v.x = this.tf1._positionX;
			v.y = this.tf1._positionY;
			v.z = this.tf1._positionZ;
		}
		this.computeWitnessPoint2(true);
		var _this = this.s[this.simplexSize];
		var v = this.w1[this.simplexSize];
		_this.x = v.x;
		_this.y = v.y;
		_this.z = v.z;
		var v = this.w2[this.simplexSize];
		_this.x -= v.x;
		_this.y -= v.y;
		_this.z -= v.z;
		this.simplexSize = 1;
		var count = 0;
		var lambda = 0.0;
		var rayX = this.rayX;
		var rayR = this.rayR;
		rayX.zero();
		rayR.x = tl2.x;
		rayR.y = tl2.y;
		rayR.z = tl2.z;
		rayR.x -= tl1.x;
		rayR.y -= tl1.y;
		rayR.z -= tl1.z;
		while(count < 40) {
			var v = 0;
			switch(this.simplexSize) {
			case 1:
				var v1 = s[0];
				closest.x = v1.x;
				closest.y = v1.y;
				closest.z = v1.z;
				v = 1;
				break;
			case 2:
				var v1X;
				var v1Y;
				var v1Z;
				var v2X;
				var v2Y;
				var v2Z;
				var v2 = s[0];
				v1X = v2.x;
				v1Y = v2.y;
				v1Z = v2.z;
				var v3 = s[1];
				v2X = v3.x;
				v2Y = v3.y;
				v2Z = v3.z;
				var v12X;
				var v12Y;
				var v12Z;
				v12X = v2X - v1X;
				v12Y = v2Y - v1Y;
				v12Z = v2Z - v1Z;
				var t = v12X * v1X + v12Y * v1Y + v12Z * v1Z;
				t = -t / (v12X * v12X + v12Y * v12Y + v12Z * v12Z);
				if(t < 0) {
					closest.x = v1X;
					closest.y = v1Y;
					closest.z = v1Z;
					v = 1;
				} else if(t > 1) {
					closest.x = v2X;
					closest.y = v2Y;
					closest.z = v2Z;
					v = 2;
				} else {
					var pX;
					var pY;
					var pZ;
					pX = v1X + v12X * t;
					pY = v1Y + v12Y * t;
					pZ = v1Z + v12Z * t;
					closest.x = pX;
					closest.y = pY;
					closest.z = pZ;
					v = 3;
				}
				break;
			case 3:
				var vec1 = s[0];
				var vec2 = s[1];
				var vec3 = s[2];
				var v1X1;
				var v1Y1;
				var v1Z1;
				var v2X1;
				var v2Y1;
				var v2Z1;
				var v3X;
				var v3Y;
				var v3Z;
				var v12X1;
				var v12Y1;
				var v12Z1;
				var v23X;
				var v23Y;
				var v23Z;
				var v31X;
				var v31Y;
				var v31Z;
				v1X1 = vec1.x;
				v1Y1 = vec1.y;
				v1Z1 = vec1.z;
				v2X1 = vec2.x;
				v2Y1 = vec2.y;
				v2Z1 = vec2.z;
				v3X = vec3.x;
				v3Y = vec3.y;
				v3Z = vec3.z;
				v12X1 = v2X1 - v1X1;
				v12Y1 = v2Y1 - v1Y1;
				v12Z1 = v2Z1 - v1Z1;
				v23X = v3X - v2X1;
				v23Y = v3Y - v2Y1;
				v23Z = v3Z - v2Z1;
				v31X = v1X1 - v3X;
				v31Y = v1Y1 - v3Y;
				v31Z = v1Z1 - v3Z;
				var nX;
				var nY;
				var nZ;
				nX = v12Y1 * v23Z - v12Z1 * v23Y;
				nY = v12Z1 * v23X - v12X1 * v23Z;
				nZ = v12X1 * v23Y - v12Y1 * v23X;
				var n12X;
				var n12Y;
				var n12Z;
				var n23X;
				var n23Y;
				var n23Z;
				var n31X;
				var n31Y;
				var n31Z;
				n12X = v12Y1 * nZ - v12Z1 * nY;
				n12Y = v12Z1 * nX - v12X1 * nZ;
				n12Z = v12X1 * nY - v12Y1 * nX;
				n23X = v23Y * nZ - v23Z * nY;
				n23Y = v23Z * nX - v23X * nZ;
				n23Z = v23X * nY - v23Y * nX;
				n31X = v31Y * nZ - v31Z * nY;
				n31Y = v31Z * nX - v31X * nZ;
				n31Z = v31X * nY - v31Y * nX;
				var mind = -1;
				var minvX;
				var minvY;
				var minvZ;
				var mini = 0;
				minvX = 0;
				minvY = 0;
				minvZ = 0;
				if(v1X1 * n12X + v1Y1 * n12Y + v1Z1 * n12Z < 0) {
					var v1X2;
					var v1Y2;
					var v1Z2;
					var v2X2;
					var v2Y2;
					var v2Z2;
					v1X2 = vec1.x;
					v1Y2 = vec1.y;
					v1Z2 = vec1.z;
					v2X2 = vec2.x;
					v2Y2 = vec2.y;
					v2Z2 = vec2.z;
					var v12X2;
					var v12Y2;
					var v12Z2;
					v12X2 = v2X2 - v1X2;
					v12Y2 = v2Y2 - v1Y2;
					v12Z2 = v2Z2 - v1Z2;
					var t1 = v12X2 * v1X2 + v12Y2 * v1Y2 + v12Z2 * v1Z2;
					t1 = -t1 / (v12X2 * v12X2 + v12Y2 * v12Y2 + v12Z2 * v12Z2);
					var b;
					if(t1 < 0) {
						closest.x = v1X2;
						closest.y = v1Y2;
						closest.z = v1Z2;
						b = 1;
					} else if(t1 > 1) {
						closest.x = v2X2;
						closest.y = v2Y2;
						closest.z = v2Z2;
						b = 2;
					} else {
						var pX1;
						var pY1;
						var pZ1;
						pX1 = v1X2 + v12X2 * t1;
						pY1 = v1Y2 + v12Y2 * t1;
						pZ1 = v1Z2 + v12Z2 * t1;
						closest.x = pX1;
						closest.y = pY1;
						closest.z = pZ1;
						b = 3;
					}
					mini = b;
					mind = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
					minvX = closest.x;
					minvY = closest.y;
					minvZ = closest.z;
				}
				if(v2X1 * n23X + v2Y1 * n23Y + v2Z1 * n23Z < 0) {
					var v1X3;
					var v1Y3;
					var v1Z3;
					var v2X3;
					var v2Y3;
					var v2Z3;
					v1X3 = vec2.x;
					v1Y3 = vec2.y;
					v1Z3 = vec2.z;
					v2X3 = vec3.x;
					v2Y3 = vec3.y;
					v2Z3 = vec3.z;
					var v12X3;
					var v12Y3;
					var v12Z3;
					v12X3 = v2X3 - v1X3;
					v12Y3 = v2Y3 - v1Y3;
					v12Z3 = v2Z3 - v1Z3;
					var t2 = v12X3 * v1X3 + v12Y3 * v1Y3 + v12Z3 * v1Z3;
					t2 = -t2 / (v12X3 * v12X3 + v12Y3 * v12Y3 + v12Z3 * v12Z3);
					var b1;
					if(t2 < 0) {
						closest.x = v1X3;
						closest.y = v1Y3;
						closest.z = v1Z3;
						b1 = 1;
					} else if(t2 > 1) {
						closest.x = v2X3;
						closest.y = v2Y3;
						closest.z = v2Z3;
						b1 = 2;
					} else {
						var pX2;
						var pY2;
						var pZ2;
						pX2 = v1X3 + v12X3 * t2;
						pY2 = v1Y3 + v12Y3 * t2;
						pZ2 = v1Z3 + v12Z3 * t2;
						closest.x = pX2;
						closest.y = pY2;
						closest.z = pZ2;
						b1 = 3;
					}
					var d = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
					if(mind < 0 || d < mind) {
						mini = b1 << 1;
						mind = d;
						minvX = closest.x;
						minvY = closest.y;
						minvZ = closest.z;
					}
				}
				if(v3X * n31X + v3Y * n31Y + v3Z * n31Z < 0) {
					var v1X4;
					var v1Y4;
					var v1Z4;
					var v2X4;
					var v2Y4;
					var v2Z4;
					v1X4 = vec1.x;
					v1Y4 = vec1.y;
					v1Z4 = vec1.z;
					v2X4 = vec3.x;
					v2Y4 = vec3.y;
					v2Z4 = vec3.z;
					var v12X4;
					var v12Y4;
					var v12Z4;
					v12X4 = v2X4 - v1X4;
					v12Y4 = v2Y4 - v1Y4;
					v12Z4 = v2Z4 - v1Z4;
					var t3 = v12X4 * v1X4 + v12Y4 * v1Y4 + v12Z4 * v1Z4;
					t3 = -t3 / (v12X4 * v12X4 + v12Y4 * v12Y4 + v12Z4 * v12Z4);
					var b2;
					if(t3 < 0) {
						closest.x = v1X4;
						closest.y = v1Y4;
						closest.z = v1Z4;
						b2 = 1;
					} else if(t3 > 1) {
						closest.x = v2X4;
						closest.y = v2Y4;
						closest.z = v2Z4;
						b2 = 2;
					} else {
						var pX3;
						var pY3;
						var pZ3;
						pX3 = v1X4 + v12X4 * t3;
						pY3 = v1Y4 + v12Y4 * t3;
						pZ3 = v1Z4 + v12Z4 * t3;
						closest.x = pX3;
						closest.y = pY3;
						closest.z = pZ3;
						b2 = 3;
					}
					var d1 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
					if(mind < 0 || d1 < mind) {
						mini = b2 & 1 | (b2 & 2) << 1;
						mind = d1;
						minvX = closest.x;
						minvY = closest.y;
						minvZ = closest.z;
					}
				}
				if(mind > 0) {
					closest.x = minvX;
					closest.y = minvY;
					closest.z = minvZ;
					v = mini;
				} else {
					var l = nX * nX + nY * nY + nZ * nZ;
					if(l > 0) {
						l = 1 / Math.sqrt(l);
					}
					nX *= l;
					nY *= l;
					nZ *= l;
					var l2 = nX * nX + nY * nY + nZ * nZ;
					l2 = (v1X1 * nX + v1Y1 * nY + v1Z1 * nZ) / l2;
					minvX = nX * l2;
					minvY = nY * l2;
					minvZ = nZ * l2;
					closest.x = minvX;
					closest.y = minvY;
					closest.z = minvZ;
					v = 7;
				}
				break;
			case 4:
				var vec11 = s[0];
				var vec21 = s[1];
				var vec31 = s[2];
				var vec4 = s[3];
				var v1X5;
				var v1Y5;
				var v1Z5;
				var v2X5;
				var v2Y5;
				var v2Z5;
				var v3X1;
				var v3Y1;
				var v3Z1;
				var v4X;
				var v4Y;
				var v4Z;
				var v12X5;
				var v12Y5;
				var v12Z5;
				var v13X;
				var v13Y;
				var v13Z;
				var v14X;
				var v14Y;
				var v14Z;
				var v23X1;
				var v23Y1;
				var v23Z1;
				var v24X;
				var v24Y;
				var v24Z;
				v1X5 = vec11.x;
				v1Y5 = vec11.y;
				v1Z5 = vec11.z;
				v2X5 = vec21.x;
				v2Y5 = vec21.y;
				v2Z5 = vec21.z;
				v3X1 = vec31.x;
				v3Y1 = vec31.y;
				v3Z1 = vec31.z;
				v4X = vec4.x;
				v4Y = vec4.y;
				v4Z = vec4.z;
				v12X5 = v2X5 - v1X5;
				v12Y5 = v2Y5 - v1Y5;
				v12Z5 = v2Z5 - v1Z5;
				v13X = v3X1 - v1X5;
				v13Y = v3Y1 - v1Y5;
				v13Z = v3Z1 - v1Z5;
				v14X = v4X - v1X5;
				v14Y = v4Y - v1Y5;
				v14Z = v4Z - v1Z5;
				v23X1 = v3X1 - v2X5;
				v23Y1 = v3Y1 - v2Y5;
				v23Z1 = v3Z1 - v2Z5;
				v24X = v4X - v2X5;
				v24Y = v4Y - v2Y5;
				v24Z = v4Z - v2Z5;
				var n123X;
				var n123Y;
				var n123Z;
				var n134X;
				var n134Y;
				var n134Z;
				var n142X;
				var n142Y;
				var n142Z;
				var n243X;
				var n243Y;
				var n243Z;
				n123X = v12Y5 * v13Z - v12Z5 * v13Y;
				n123Y = v12Z5 * v13X - v12X5 * v13Z;
				n123Z = v12X5 * v13Y - v12Y5 * v13X;
				n134X = v13Y * v14Z - v13Z * v14Y;
				n134Y = v13Z * v14X - v13X * v14Z;
				n134Z = v13X * v14Y - v13Y * v14X;
				n142X = v14Y * v12Z5 - v14Z * v12Y5;
				n142Y = v14Z * v12X5 - v14X * v12Z5;
				n142Z = v14X * v12Y5 - v14Y * v12X5;
				n243X = v24Y * v23Z1 - v24Z * v23Y1;
				n243Y = v24Z * v23X1 - v24X * v23Z1;
				n243Z = v24X * v23Y1 - v24Y * v23X1;
				var sign = v12X5 * n243X + v12Y5 * n243Y + v12Z5 * n243Z > 0 ? 1 : -1;
				var mind1 = -1;
				var minvX1;
				var minvY1;
				var minvZ1;
				var mini1 = 0;
				minvX1 = 0;
				minvY1 = 0;
				minvZ1 = 0;
				if((v1X5 * n123X + v1Y5 * n123Y + v1Z5 * n123Z) * sign < 0) {
					var v1X6;
					var v1Y6;
					var v1Z6;
					var v2X6;
					var v2Y6;
					var v2Z6;
					var v3X2;
					var v3Y2;
					var v3Z2;
					var v12X6;
					var v12Y6;
					var v12Z6;
					var v23X2;
					var v23Y2;
					var v23Z2;
					var v31X1;
					var v31Y1;
					var v31Z1;
					v1X6 = vec11.x;
					v1Y6 = vec11.y;
					v1Z6 = vec11.z;
					v2X6 = vec21.x;
					v2Y6 = vec21.y;
					v2Z6 = vec21.z;
					v3X2 = vec31.x;
					v3Y2 = vec31.y;
					v3Z2 = vec31.z;
					v12X6 = v2X6 - v1X6;
					v12Y6 = v2Y6 - v1Y6;
					v12Z6 = v2Z6 - v1Z6;
					v23X2 = v3X2 - v2X6;
					v23Y2 = v3Y2 - v2Y6;
					v23Z2 = v3Z2 - v2Z6;
					v31X1 = v1X6 - v3X2;
					v31Y1 = v1Y6 - v3Y2;
					v31Z1 = v1Z6 - v3Z2;
					var nX1;
					var nY1;
					var nZ1;
					nX1 = v12Y6 * v23Z2 - v12Z6 * v23Y2;
					nY1 = v12Z6 * v23X2 - v12X6 * v23Z2;
					nZ1 = v12X6 * v23Y2 - v12Y6 * v23X2;
					var n12X1;
					var n12Y1;
					var n12Z1;
					var n23X1;
					var n23Y1;
					var n23Z1;
					var n31X1;
					var n31Y1;
					var n31Z1;
					n12X1 = v12Y6 * nZ1 - v12Z6 * nY1;
					n12Y1 = v12Z6 * nX1 - v12X6 * nZ1;
					n12Z1 = v12X6 * nY1 - v12Y6 * nX1;
					n23X1 = v23Y2 * nZ1 - v23Z2 * nY1;
					n23Y1 = v23Z2 * nX1 - v23X2 * nZ1;
					n23Z1 = v23X2 * nY1 - v23Y2 * nX1;
					n31X1 = v31Y1 * nZ1 - v31Z1 * nY1;
					n31Y1 = v31Z1 * nX1 - v31X1 * nZ1;
					n31Z1 = v31X1 * nY1 - v31Y1 * nX1;
					var mind2 = -1;
					var minvX2;
					var minvY2;
					var minvZ2;
					var mini2 = 0;
					minvX2 = 0;
					minvY2 = 0;
					minvZ2 = 0;
					if(v1X6 * n12X1 + v1Y6 * n12Y1 + v1Z6 * n12Z1 < 0) {
						var v1X7;
						var v1Y7;
						var v1Z7;
						var v2X7;
						var v2Y7;
						var v2Z7;
						v1X7 = vec11.x;
						v1Y7 = vec11.y;
						v1Z7 = vec11.z;
						v2X7 = vec21.x;
						v2Y7 = vec21.y;
						v2Z7 = vec21.z;
						var v12X7;
						var v12Y7;
						var v12Z7;
						v12X7 = v2X7 - v1X7;
						v12Y7 = v2Y7 - v1Y7;
						v12Z7 = v2Z7 - v1Z7;
						var t4 = v12X7 * v1X7 + v12Y7 * v1Y7 + v12Z7 * v1Z7;
						t4 = -t4 / (v12X7 * v12X7 + v12Y7 * v12Y7 + v12Z7 * v12Z7);
						var b3;
						if(t4 < 0) {
							closest.x = v1X7;
							closest.y = v1Y7;
							closest.z = v1Z7;
							b3 = 1;
						} else if(t4 > 1) {
							closest.x = v2X7;
							closest.y = v2Y7;
							closest.z = v2Z7;
							b3 = 2;
						} else {
							var pX4;
							var pY4;
							var pZ4;
							pX4 = v1X7 + v12X7 * t4;
							pY4 = v1Y7 + v12Y7 * t4;
							pZ4 = v1Z7 + v12Z7 * t4;
							closest.x = pX4;
							closest.y = pY4;
							closest.z = pZ4;
							b3 = 3;
						}
						mini2 = b3;
						mind2 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
						minvX2 = closest.x;
						minvY2 = closest.y;
						minvZ2 = closest.z;
					}
					if(v2X6 * n23X1 + v2Y6 * n23Y1 + v2Z6 * n23Z1 < 0) {
						var v1X8;
						var v1Y8;
						var v1Z8;
						var v2X8;
						var v2Y8;
						var v2Z8;
						v1X8 = vec21.x;
						v1Y8 = vec21.y;
						v1Z8 = vec21.z;
						v2X8 = vec31.x;
						v2Y8 = vec31.y;
						v2Z8 = vec31.z;
						var v12X8;
						var v12Y8;
						var v12Z8;
						v12X8 = v2X8 - v1X8;
						v12Y8 = v2Y8 - v1Y8;
						v12Z8 = v2Z8 - v1Z8;
						var t5 = v12X8 * v1X8 + v12Y8 * v1Y8 + v12Z8 * v1Z8;
						t5 = -t5 / (v12X8 * v12X8 + v12Y8 * v12Y8 + v12Z8 * v12Z8);
						var b4;
						if(t5 < 0) {
							closest.x = v1X8;
							closest.y = v1Y8;
							closest.z = v1Z8;
							b4 = 1;
						} else if(t5 > 1) {
							closest.x = v2X8;
							closest.y = v2Y8;
							closest.z = v2Z8;
							b4 = 2;
						} else {
							var pX5;
							var pY5;
							var pZ5;
							pX5 = v1X8 + v12X8 * t5;
							pY5 = v1Y8 + v12Y8 * t5;
							pZ5 = v1Z8 + v12Z8 * t5;
							closest.x = pX5;
							closest.y = pY5;
							closest.z = pZ5;
							b4 = 3;
						}
						var d2 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
						if(mind2 < 0 || d2 < mind2) {
							mini2 = b4 << 1;
							mind2 = d2;
							minvX2 = closest.x;
							minvY2 = closest.y;
							minvZ2 = closest.z;
						}
					}
					if(v3X2 * n31X1 + v3Y2 * n31Y1 + v3Z2 * n31Z1 < 0) {
						var v1X9;
						var v1Y9;
						var v1Z9;
						var v2X9;
						var v2Y9;
						var v2Z9;
						v1X9 = vec11.x;
						v1Y9 = vec11.y;
						v1Z9 = vec11.z;
						v2X9 = vec31.x;
						v2Y9 = vec31.y;
						v2Z9 = vec31.z;
						var v12X9;
						var v12Y9;
						var v12Z9;
						v12X9 = v2X9 - v1X9;
						v12Y9 = v2Y9 - v1Y9;
						v12Z9 = v2Z9 - v1Z9;
						var t6 = v12X9 * v1X9 + v12Y9 * v1Y9 + v12Z9 * v1Z9;
						t6 = -t6 / (v12X9 * v12X9 + v12Y9 * v12Y9 + v12Z9 * v12Z9);
						var b5;
						if(t6 < 0) {
							closest.x = v1X9;
							closest.y = v1Y9;
							closest.z = v1Z9;
							b5 = 1;
						} else if(t6 > 1) {
							closest.x = v2X9;
							closest.y = v2Y9;
							closest.z = v2Z9;
							b5 = 2;
						} else {
							var pX6;
							var pY6;
							var pZ6;
							pX6 = v1X9 + v12X9 * t6;
							pY6 = v1Y9 + v12Y9 * t6;
							pZ6 = v1Z9 + v12Z9 * t6;
							closest.x = pX6;
							closest.y = pY6;
							closest.z = pZ6;
							b5 = 3;
						}
						var d3 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
						if(mind2 < 0 || d3 < mind2) {
							mini2 = b5 & 1 | (b5 & 2) << 1;
							mind2 = d3;
							minvX2 = closest.x;
							minvY2 = closest.y;
							minvZ2 = closest.z;
						}
					}
					var b6;
					if(mind2 > 0) {
						closest.x = minvX2;
						closest.y = minvY2;
						closest.z = minvZ2;
						b6 = mini2;
					} else {
						var l1 = nX1 * nX1 + nY1 * nY1 + nZ1 * nZ1;
						if(l1 > 0) {
							l1 = 1 / Math.sqrt(l1);
						}
						nX1 *= l1;
						nY1 *= l1;
						nZ1 *= l1;
						var l21 = nX1 * nX1 + nY1 * nY1 + nZ1 * nZ1;
						l21 = (v1X6 * nX1 + v1Y6 * nY1 + v1Z6 * nZ1) / l21;
						minvX2 = nX1 * l21;
						minvY2 = nY1 * l21;
						minvZ2 = nZ1 * l21;
						closest.x = minvX2;
						closest.y = minvY2;
						closest.z = minvZ2;
						b6 = 7;
					}
					mini1 = b6;
					mind1 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
					minvX1 = closest.x;
					minvY1 = closest.y;
					minvZ1 = closest.z;
				}
				if((v1X5 * n134X + v1Y5 * n134Y + v1Z5 * n134Z) * sign < 0) {
					var v1X10;
					var v1Y10;
					var v1Z10;
					var v2X10;
					var v2Y10;
					var v2Z10;
					var v3X3;
					var v3Y3;
					var v3Z3;
					var v12X10;
					var v12Y10;
					var v12Z10;
					var v23X3;
					var v23Y3;
					var v23Z3;
					var v31X2;
					var v31Y2;
					var v31Z2;
					v1X10 = vec11.x;
					v1Y10 = vec11.y;
					v1Z10 = vec11.z;
					v2X10 = vec31.x;
					v2Y10 = vec31.y;
					v2Z10 = vec31.z;
					v3X3 = vec4.x;
					v3Y3 = vec4.y;
					v3Z3 = vec4.z;
					v12X10 = v2X10 - v1X10;
					v12Y10 = v2Y10 - v1Y10;
					v12Z10 = v2Z10 - v1Z10;
					v23X3 = v3X3 - v2X10;
					v23Y3 = v3Y3 - v2Y10;
					v23Z3 = v3Z3 - v2Z10;
					v31X2 = v1X10 - v3X3;
					v31Y2 = v1Y10 - v3Y3;
					v31Z2 = v1Z10 - v3Z3;
					var nX2;
					var nY2;
					var nZ2;
					nX2 = v12Y10 * v23Z3 - v12Z10 * v23Y3;
					nY2 = v12Z10 * v23X3 - v12X10 * v23Z3;
					nZ2 = v12X10 * v23Y3 - v12Y10 * v23X3;
					var n12X2;
					var n12Y2;
					var n12Z2;
					var n23X2;
					var n23Y2;
					var n23Z2;
					var n31X2;
					var n31Y2;
					var n31Z2;
					n12X2 = v12Y10 * nZ2 - v12Z10 * nY2;
					n12Y2 = v12Z10 * nX2 - v12X10 * nZ2;
					n12Z2 = v12X10 * nY2 - v12Y10 * nX2;
					n23X2 = v23Y3 * nZ2 - v23Z3 * nY2;
					n23Y2 = v23Z3 * nX2 - v23X3 * nZ2;
					n23Z2 = v23X3 * nY2 - v23Y3 * nX2;
					n31X2 = v31Y2 * nZ2 - v31Z2 * nY2;
					n31Y2 = v31Z2 * nX2 - v31X2 * nZ2;
					n31Z2 = v31X2 * nY2 - v31Y2 * nX2;
					var mind3 = -1;
					var minvX3;
					var minvY3;
					var minvZ3;
					var mini3 = 0;
					minvX3 = 0;
					minvY3 = 0;
					minvZ3 = 0;
					if(v1X10 * n12X2 + v1Y10 * n12Y2 + v1Z10 * n12Z2 < 0) {
						var v1X11;
						var v1Y11;
						var v1Z11;
						var v2X11;
						var v2Y11;
						var v2Z11;
						v1X11 = vec11.x;
						v1Y11 = vec11.y;
						v1Z11 = vec11.z;
						v2X11 = vec31.x;
						v2Y11 = vec31.y;
						v2Z11 = vec31.z;
						var v12X11;
						var v12Y11;
						var v12Z11;
						v12X11 = v2X11 - v1X11;
						v12Y11 = v2Y11 - v1Y11;
						v12Z11 = v2Z11 - v1Z11;
						var t7 = v12X11 * v1X11 + v12Y11 * v1Y11 + v12Z11 * v1Z11;
						t7 = -t7 / (v12X11 * v12X11 + v12Y11 * v12Y11 + v12Z11 * v12Z11);
						var b7;
						if(t7 < 0) {
							closest.x = v1X11;
							closest.y = v1Y11;
							closest.z = v1Z11;
							b7 = 1;
						} else if(t7 > 1) {
							closest.x = v2X11;
							closest.y = v2Y11;
							closest.z = v2Z11;
							b7 = 2;
						} else {
							var pX7;
							var pY7;
							var pZ7;
							pX7 = v1X11 + v12X11 * t7;
							pY7 = v1Y11 + v12Y11 * t7;
							pZ7 = v1Z11 + v12Z11 * t7;
							closest.x = pX7;
							closest.y = pY7;
							closest.z = pZ7;
							b7 = 3;
						}
						mini3 = b7;
						mind3 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
						minvX3 = closest.x;
						minvY3 = closest.y;
						minvZ3 = closest.z;
					}
					if(v2X10 * n23X2 + v2Y10 * n23Y2 + v2Z10 * n23Z2 < 0) {
						var v1X12;
						var v1Y12;
						var v1Z12;
						var v2X12;
						var v2Y12;
						var v2Z12;
						v1X12 = vec31.x;
						v1Y12 = vec31.y;
						v1Z12 = vec31.z;
						v2X12 = vec4.x;
						v2Y12 = vec4.y;
						v2Z12 = vec4.z;
						var v12X12;
						var v12Y12;
						var v12Z12;
						v12X12 = v2X12 - v1X12;
						v12Y12 = v2Y12 - v1Y12;
						v12Z12 = v2Z12 - v1Z12;
						var t8 = v12X12 * v1X12 + v12Y12 * v1Y12 + v12Z12 * v1Z12;
						t8 = -t8 / (v12X12 * v12X12 + v12Y12 * v12Y12 + v12Z12 * v12Z12);
						var b8;
						if(t8 < 0) {
							closest.x = v1X12;
							closest.y = v1Y12;
							closest.z = v1Z12;
							b8 = 1;
						} else if(t8 > 1) {
							closest.x = v2X12;
							closest.y = v2Y12;
							closest.z = v2Z12;
							b8 = 2;
						} else {
							var pX8;
							var pY8;
							var pZ8;
							pX8 = v1X12 + v12X12 * t8;
							pY8 = v1Y12 + v12Y12 * t8;
							pZ8 = v1Z12 + v12Z12 * t8;
							closest.x = pX8;
							closest.y = pY8;
							closest.z = pZ8;
							b8 = 3;
						}
						var d4 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
						if(mind3 < 0 || d4 < mind3) {
							mini3 = b8 << 1;
							mind3 = d4;
							minvX3 = closest.x;
							minvY3 = closest.y;
							minvZ3 = closest.z;
						}
					}
					if(v3X3 * n31X2 + v3Y3 * n31Y2 + v3Z3 * n31Z2 < 0) {
						var v1X13;
						var v1Y13;
						var v1Z13;
						var v2X13;
						var v2Y13;
						var v2Z13;
						v1X13 = vec11.x;
						v1Y13 = vec11.y;
						v1Z13 = vec11.z;
						v2X13 = vec4.x;
						v2Y13 = vec4.y;
						v2Z13 = vec4.z;
						var v12X13;
						var v12Y13;
						var v12Z13;
						v12X13 = v2X13 - v1X13;
						v12Y13 = v2Y13 - v1Y13;
						v12Z13 = v2Z13 - v1Z13;
						var t9 = v12X13 * v1X13 + v12Y13 * v1Y13 + v12Z13 * v1Z13;
						t9 = -t9 / (v12X13 * v12X13 + v12Y13 * v12Y13 + v12Z13 * v12Z13);
						var b9;
						if(t9 < 0) {
							closest.x = v1X13;
							closest.y = v1Y13;
							closest.z = v1Z13;
							b9 = 1;
						} else if(t9 > 1) {
							closest.x = v2X13;
							closest.y = v2Y13;
							closest.z = v2Z13;
							b9 = 2;
						} else {
							var pX9;
							var pY9;
							var pZ9;
							pX9 = v1X13 + v12X13 * t9;
							pY9 = v1Y13 + v12Y13 * t9;
							pZ9 = v1Z13 + v12Z13 * t9;
							closest.x = pX9;
							closest.y = pY9;
							closest.z = pZ9;
							b9 = 3;
						}
						var d5 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
						if(mind3 < 0 || d5 < mind3) {
							mini3 = b9 & 1 | (b9 & 2) << 1;
							mind3 = d5;
							minvX3 = closest.x;
							minvY3 = closest.y;
							minvZ3 = closest.z;
						}
					}
					var b10;
					if(mind3 > 0) {
						closest.x = minvX3;
						closest.y = minvY3;
						closest.z = minvZ3;
						b10 = mini3;
					} else {
						var l3 = nX2 * nX2 + nY2 * nY2 + nZ2 * nZ2;
						if(l3 > 0) {
							l3 = 1 / Math.sqrt(l3);
						}
						nX2 *= l3;
						nY2 *= l3;
						nZ2 *= l3;
						var l22 = nX2 * nX2 + nY2 * nY2 + nZ2 * nZ2;
						l22 = (v1X10 * nX2 + v1Y10 * nY2 + v1Z10 * nZ2) / l22;
						minvX3 = nX2 * l22;
						minvY3 = nY2 * l22;
						minvZ3 = nZ2 * l22;
						closest.x = minvX3;
						closest.y = minvY3;
						closest.z = minvZ3;
						b10 = 7;
					}
					var d6 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
					if(mind1 < 0 || d6 < mind1) {
						mini1 = b10 & 1 | (b10 & 6) << 1;
						mind1 = d6;
						minvX1 = closest.x;
						minvY1 = closest.y;
						minvZ1 = closest.z;
					}
				}
				if((v1X5 * n142X + v1Y5 * n142Y + v1Z5 * n142Z) * sign < 0) {
					var v1X14;
					var v1Y14;
					var v1Z14;
					var v2X14;
					var v2Y14;
					var v2Z14;
					var v3X4;
					var v3Y4;
					var v3Z4;
					var v12X14;
					var v12Y14;
					var v12Z14;
					var v23X4;
					var v23Y4;
					var v23Z4;
					var v31X3;
					var v31Y3;
					var v31Z3;
					v1X14 = vec11.x;
					v1Y14 = vec11.y;
					v1Z14 = vec11.z;
					v2X14 = vec21.x;
					v2Y14 = vec21.y;
					v2Z14 = vec21.z;
					v3X4 = vec4.x;
					v3Y4 = vec4.y;
					v3Z4 = vec4.z;
					v12X14 = v2X14 - v1X14;
					v12Y14 = v2Y14 - v1Y14;
					v12Z14 = v2Z14 - v1Z14;
					v23X4 = v3X4 - v2X14;
					v23Y4 = v3Y4 - v2Y14;
					v23Z4 = v3Z4 - v2Z14;
					v31X3 = v1X14 - v3X4;
					v31Y3 = v1Y14 - v3Y4;
					v31Z3 = v1Z14 - v3Z4;
					var nX3;
					var nY3;
					var nZ3;
					nX3 = v12Y14 * v23Z4 - v12Z14 * v23Y4;
					nY3 = v12Z14 * v23X4 - v12X14 * v23Z4;
					nZ3 = v12X14 * v23Y4 - v12Y14 * v23X4;
					var n12X3;
					var n12Y3;
					var n12Z3;
					var n23X3;
					var n23Y3;
					var n23Z3;
					var n31X3;
					var n31Y3;
					var n31Z3;
					n12X3 = v12Y14 * nZ3 - v12Z14 * nY3;
					n12Y3 = v12Z14 * nX3 - v12X14 * nZ3;
					n12Z3 = v12X14 * nY3 - v12Y14 * nX3;
					n23X3 = v23Y4 * nZ3 - v23Z4 * nY3;
					n23Y3 = v23Z4 * nX3 - v23X4 * nZ3;
					n23Z3 = v23X4 * nY3 - v23Y4 * nX3;
					n31X3 = v31Y3 * nZ3 - v31Z3 * nY3;
					n31Y3 = v31Z3 * nX3 - v31X3 * nZ3;
					n31Z3 = v31X3 * nY3 - v31Y3 * nX3;
					var mind4 = -1;
					var minvX4;
					var minvY4;
					var minvZ4;
					var mini4 = 0;
					minvX4 = 0;
					minvY4 = 0;
					minvZ4 = 0;
					if(v1X14 * n12X3 + v1Y14 * n12Y3 + v1Z14 * n12Z3 < 0) {
						var v1X15;
						var v1Y15;
						var v1Z15;
						var v2X15;
						var v2Y15;
						var v2Z15;
						v1X15 = vec11.x;
						v1Y15 = vec11.y;
						v1Z15 = vec11.z;
						v2X15 = vec21.x;
						v2Y15 = vec21.y;
						v2Z15 = vec21.z;
						var v12X15;
						var v12Y15;
						var v12Z15;
						v12X15 = v2X15 - v1X15;
						v12Y15 = v2Y15 - v1Y15;
						v12Z15 = v2Z15 - v1Z15;
						var t10 = v12X15 * v1X15 + v12Y15 * v1Y15 + v12Z15 * v1Z15;
						t10 = -t10 / (v12X15 * v12X15 + v12Y15 * v12Y15 + v12Z15 * v12Z15);
						var b11;
						if(t10 < 0) {
							closest.x = v1X15;
							closest.y = v1Y15;
							closest.z = v1Z15;
							b11 = 1;
						} else if(t10 > 1) {
							closest.x = v2X15;
							closest.y = v2Y15;
							closest.z = v2Z15;
							b11 = 2;
						} else {
							var pX10;
							var pY10;
							var pZ10;
							pX10 = v1X15 + v12X15 * t10;
							pY10 = v1Y15 + v12Y15 * t10;
							pZ10 = v1Z15 + v12Z15 * t10;
							closest.x = pX10;
							closest.y = pY10;
							closest.z = pZ10;
							b11 = 3;
						}
						mini4 = b11;
						mind4 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
						minvX4 = closest.x;
						minvY4 = closest.y;
						minvZ4 = closest.z;
					}
					if(v2X14 * n23X3 + v2Y14 * n23Y3 + v2Z14 * n23Z3 < 0) {
						var v1X16;
						var v1Y16;
						var v1Z16;
						var v2X16;
						var v2Y16;
						var v2Z16;
						v1X16 = vec21.x;
						v1Y16 = vec21.y;
						v1Z16 = vec21.z;
						v2X16 = vec4.x;
						v2Y16 = vec4.y;
						v2Z16 = vec4.z;
						var v12X16;
						var v12Y16;
						var v12Z16;
						v12X16 = v2X16 - v1X16;
						v12Y16 = v2Y16 - v1Y16;
						v12Z16 = v2Z16 - v1Z16;
						var t11 = v12X16 * v1X16 + v12Y16 * v1Y16 + v12Z16 * v1Z16;
						t11 = -t11 / (v12X16 * v12X16 + v12Y16 * v12Y16 + v12Z16 * v12Z16);
						var b12;
						if(t11 < 0) {
							closest.x = v1X16;
							closest.y = v1Y16;
							closest.z = v1Z16;
							b12 = 1;
						} else if(t11 > 1) {
							closest.x = v2X16;
							closest.y = v2Y16;
							closest.z = v2Z16;
							b12 = 2;
						} else {
							var pX11;
							var pY11;
							var pZ11;
							pX11 = v1X16 + v12X16 * t11;
							pY11 = v1Y16 + v12Y16 * t11;
							pZ11 = v1Z16 + v12Z16 * t11;
							closest.x = pX11;
							closest.y = pY11;
							closest.z = pZ11;
							b12 = 3;
						}
						var d7 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
						if(mind4 < 0 || d7 < mind4) {
							mini4 = b12 << 1;
							mind4 = d7;
							minvX4 = closest.x;
							minvY4 = closest.y;
							minvZ4 = closest.z;
						}
					}
					if(v3X4 * n31X3 + v3Y4 * n31Y3 + v3Z4 * n31Z3 < 0) {
						var v1X17;
						var v1Y17;
						var v1Z17;
						var v2X17;
						var v2Y17;
						var v2Z17;
						v1X17 = vec11.x;
						v1Y17 = vec11.y;
						v1Z17 = vec11.z;
						v2X17 = vec4.x;
						v2Y17 = vec4.y;
						v2Z17 = vec4.z;
						var v12X17;
						var v12Y17;
						var v12Z17;
						v12X17 = v2X17 - v1X17;
						v12Y17 = v2Y17 - v1Y17;
						v12Z17 = v2Z17 - v1Z17;
						var t12 = v12X17 * v1X17 + v12Y17 * v1Y17 + v12Z17 * v1Z17;
						t12 = -t12 / (v12X17 * v12X17 + v12Y17 * v12Y17 + v12Z17 * v12Z17);
						var b13;
						if(t12 < 0) {
							closest.x = v1X17;
							closest.y = v1Y17;
							closest.z = v1Z17;
							b13 = 1;
						} else if(t12 > 1) {
							closest.x = v2X17;
							closest.y = v2Y17;
							closest.z = v2Z17;
							b13 = 2;
						} else {
							var pX12;
							var pY12;
							var pZ12;
							pX12 = v1X17 + v12X17 * t12;
							pY12 = v1Y17 + v12Y17 * t12;
							pZ12 = v1Z17 + v12Z17 * t12;
							closest.x = pX12;
							closest.y = pY12;
							closest.z = pZ12;
							b13 = 3;
						}
						var d8 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
						if(mind4 < 0 || d8 < mind4) {
							mini4 = b13 & 1 | (b13 & 2) << 1;
							mind4 = d8;
							minvX4 = closest.x;
							minvY4 = closest.y;
							minvZ4 = closest.z;
						}
					}
					var b14;
					if(mind4 > 0) {
						closest.x = minvX4;
						closest.y = minvY4;
						closest.z = minvZ4;
						b14 = mini4;
					} else {
						var l4 = nX3 * nX3 + nY3 * nY3 + nZ3 * nZ3;
						if(l4 > 0) {
							l4 = 1 / Math.sqrt(l4);
						}
						nX3 *= l4;
						nY3 *= l4;
						nZ3 *= l4;
						var l23 = nX3 * nX3 + nY3 * nY3 + nZ3 * nZ3;
						l23 = (v1X14 * nX3 + v1Y14 * nY3 + v1Z14 * nZ3) / l23;
						minvX4 = nX3 * l23;
						minvY4 = nY3 * l23;
						minvZ4 = nZ3 * l23;
						closest.x = minvX4;
						closest.y = minvY4;
						closest.z = minvZ4;
						b14 = 7;
					}
					var d9 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
					if(mind1 < 0 || d9 < mind1) {
						mini1 = b14 & 3 | (b14 & 4) << 1;
						mind1 = d9;
						minvX1 = closest.x;
						minvY1 = closest.y;
						minvZ1 = closest.z;
					}
				}
				if((v2X5 * n243X + v2Y5 * n243Y + v2Z5 * n243Z) * sign < 0) {
					var v1X18;
					var v1Y18;
					var v1Z18;
					var v2X18;
					var v2Y18;
					var v2Z18;
					var v3X5;
					var v3Y5;
					var v3Z5;
					var v12X18;
					var v12Y18;
					var v12Z18;
					var v23X5;
					var v23Y5;
					var v23Z5;
					var v31X4;
					var v31Y4;
					var v31Z4;
					v1X18 = vec21.x;
					v1Y18 = vec21.y;
					v1Z18 = vec21.z;
					v2X18 = vec31.x;
					v2Y18 = vec31.y;
					v2Z18 = vec31.z;
					v3X5 = vec4.x;
					v3Y5 = vec4.y;
					v3Z5 = vec4.z;
					v12X18 = v2X18 - v1X18;
					v12Y18 = v2Y18 - v1Y18;
					v12Z18 = v2Z18 - v1Z18;
					v23X5 = v3X5 - v2X18;
					v23Y5 = v3Y5 - v2Y18;
					v23Z5 = v3Z5 - v2Z18;
					v31X4 = v1X18 - v3X5;
					v31Y4 = v1Y18 - v3Y5;
					v31Z4 = v1Z18 - v3Z5;
					var nX4;
					var nY4;
					var nZ4;
					nX4 = v12Y18 * v23Z5 - v12Z18 * v23Y5;
					nY4 = v12Z18 * v23X5 - v12X18 * v23Z5;
					nZ4 = v12X18 * v23Y5 - v12Y18 * v23X5;
					var n12X4;
					var n12Y4;
					var n12Z4;
					var n23X4;
					var n23Y4;
					var n23Z4;
					var n31X4;
					var n31Y4;
					var n31Z4;
					n12X4 = v12Y18 * nZ4 - v12Z18 * nY4;
					n12Y4 = v12Z18 * nX4 - v12X18 * nZ4;
					n12Z4 = v12X18 * nY4 - v12Y18 * nX4;
					n23X4 = v23Y5 * nZ4 - v23Z5 * nY4;
					n23Y4 = v23Z5 * nX4 - v23X5 * nZ4;
					n23Z4 = v23X5 * nY4 - v23Y5 * nX4;
					n31X4 = v31Y4 * nZ4 - v31Z4 * nY4;
					n31Y4 = v31Z4 * nX4 - v31X4 * nZ4;
					n31Z4 = v31X4 * nY4 - v31Y4 * nX4;
					var mind5 = -1;
					var minvX5;
					var minvY5;
					var minvZ5;
					var mini5 = 0;
					minvX5 = 0;
					minvY5 = 0;
					minvZ5 = 0;
					if(v1X18 * n12X4 + v1Y18 * n12Y4 + v1Z18 * n12Z4 < 0) {
						var v1X19;
						var v1Y19;
						var v1Z19;
						var v2X19;
						var v2Y19;
						var v2Z19;
						v1X19 = vec21.x;
						v1Y19 = vec21.y;
						v1Z19 = vec21.z;
						v2X19 = vec31.x;
						v2Y19 = vec31.y;
						v2Z19 = vec31.z;
						var v12X19;
						var v12Y19;
						var v12Z19;
						v12X19 = v2X19 - v1X19;
						v12Y19 = v2Y19 - v1Y19;
						v12Z19 = v2Z19 - v1Z19;
						var t13 = v12X19 * v1X19 + v12Y19 * v1Y19 + v12Z19 * v1Z19;
						t13 = -t13 / (v12X19 * v12X19 + v12Y19 * v12Y19 + v12Z19 * v12Z19);
						var b15;
						if(t13 < 0) {
							closest.x = v1X19;
							closest.y = v1Y19;
							closest.z = v1Z19;
							b15 = 1;
						} else if(t13 > 1) {
							closest.x = v2X19;
							closest.y = v2Y19;
							closest.z = v2Z19;
							b15 = 2;
						} else {
							var pX13;
							var pY13;
							var pZ13;
							pX13 = v1X19 + v12X19 * t13;
							pY13 = v1Y19 + v12Y19 * t13;
							pZ13 = v1Z19 + v12Z19 * t13;
							closest.x = pX13;
							closest.y = pY13;
							closest.z = pZ13;
							b15 = 3;
						}
						mini5 = b15;
						mind5 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
						minvX5 = closest.x;
						minvY5 = closest.y;
						minvZ5 = closest.z;
					}
					if(v2X18 * n23X4 + v2Y18 * n23Y4 + v2Z18 * n23Z4 < 0) {
						var v1X20;
						var v1Y20;
						var v1Z20;
						var v2X20;
						var v2Y20;
						var v2Z20;
						v1X20 = vec31.x;
						v1Y20 = vec31.y;
						v1Z20 = vec31.z;
						v2X20 = vec4.x;
						v2Y20 = vec4.y;
						v2Z20 = vec4.z;
						var v12X20;
						var v12Y20;
						var v12Z20;
						v12X20 = v2X20 - v1X20;
						v12Y20 = v2Y20 - v1Y20;
						v12Z20 = v2Z20 - v1Z20;
						var t14 = v12X20 * v1X20 + v12Y20 * v1Y20 + v12Z20 * v1Z20;
						t14 = -t14 / (v12X20 * v12X20 + v12Y20 * v12Y20 + v12Z20 * v12Z20);
						var b16;
						if(t14 < 0) {
							closest.x = v1X20;
							closest.y = v1Y20;
							closest.z = v1Z20;
							b16 = 1;
						} else if(t14 > 1) {
							closest.x = v2X20;
							closest.y = v2Y20;
							closest.z = v2Z20;
							b16 = 2;
						} else {
							var pX14;
							var pY14;
							var pZ14;
							pX14 = v1X20 + v12X20 * t14;
							pY14 = v1Y20 + v12Y20 * t14;
							pZ14 = v1Z20 + v12Z20 * t14;
							closest.x = pX14;
							closest.y = pY14;
							closest.z = pZ14;
							b16 = 3;
						}
						var d10 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
						if(mind5 < 0 || d10 < mind5) {
							mini5 = b16 << 1;
							mind5 = d10;
							minvX5 = closest.x;
							minvY5 = closest.y;
							minvZ5 = closest.z;
						}
					}
					if(v3X5 * n31X4 + v3Y5 * n31Y4 + v3Z5 * n31Z4 < 0) {
						var v1X21;
						var v1Y21;
						var v1Z21;
						var v2X21;
						var v2Y21;
						var v2Z21;
						v1X21 = vec21.x;
						v1Y21 = vec21.y;
						v1Z21 = vec21.z;
						v2X21 = vec4.x;
						v2Y21 = vec4.y;
						v2Z21 = vec4.z;
						var v12X21;
						var v12Y21;
						var v12Z21;
						v12X21 = v2X21 - v1X21;
						v12Y21 = v2Y21 - v1Y21;
						v12Z21 = v2Z21 - v1Z21;
						var t15 = v12X21 * v1X21 + v12Y21 * v1Y21 + v12Z21 * v1Z21;
						t15 = -t15 / (v12X21 * v12X21 + v12Y21 * v12Y21 + v12Z21 * v12Z21);
						var b17;
						if(t15 < 0) {
							closest.x = v1X21;
							closest.y = v1Y21;
							closest.z = v1Z21;
							b17 = 1;
						} else if(t15 > 1) {
							closest.x = v2X21;
							closest.y = v2Y21;
							closest.z = v2Z21;
							b17 = 2;
						} else {
							var pX15;
							var pY15;
							var pZ15;
							pX15 = v1X21 + v12X21 * t15;
							pY15 = v1Y21 + v12Y21 * t15;
							pZ15 = v1Z21 + v12Z21 * t15;
							closest.x = pX15;
							closest.y = pY15;
							closest.z = pZ15;
							b17 = 3;
						}
						var d11 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
						if(mind5 < 0 || d11 < mind5) {
							mini5 = b17 & 1 | (b17 & 2) << 1;
							mind5 = d11;
							minvX5 = closest.x;
							minvY5 = closest.y;
							minvZ5 = closest.z;
						}
					}
					var b18;
					if(mind5 > 0) {
						closest.x = minvX5;
						closest.y = minvY5;
						closest.z = minvZ5;
						b18 = mini5;
					} else {
						var l5 = nX4 * nX4 + nY4 * nY4 + nZ4 * nZ4;
						if(l5 > 0) {
							l5 = 1 / Math.sqrt(l5);
						}
						nX4 *= l5;
						nY4 *= l5;
						nZ4 *= l5;
						var l24 = nX4 * nX4 + nY4 * nY4 + nZ4 * nZ4;
						l24 = (v1X18 * nX4 + v1Y18 * nY4 + v1Z18 * nZ4) / l24;
						minvX5 = nX4 * l24;
						minvY5 = nY4 * l24;
						minvZ5 = nZ4 * l24;
						closest.x = minvX5;
						closest.y = minvY5;
						closest.z = minvZ5;
						b18 = 7;
					}
					var d12 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
					if(mind1 < 0 || d12 < mind1) {
						mini1 = b18 << 1;
						mind1 = d12;
						minvX1 = closest.x;
						minvY1 = closest.y;
						minvZ1 = closest.z;
					}
				}
				if(mind1 > 0) {
					closest.x = minvX1;
					closest.y = minvY1;
					closest.z = minvZ1;
					v = mini1;
				} else {
					closest.zero();
					v = 15;
				}
				break;
			}
			this.shrinkSimplex(v);
			if(closest.x * closest.x + closest.y * closest.y + closest.z * closest.z < 1e-008) {
				if(lambda == 0 || this.simplexSize == 4) {
					hit.fraction = lambda;
					return false;
				}
				this.interpolateClosestPoints();
				hit.fraction = lambda;
				var _this = hit.normal;
				_this.x = dir.x;
				_this.y = dir.y;
				_this.z = dir.z;
				var invLen = Math.sqrt(_this.x * _this.x + _this.y * _this.y + _this.z * _this.z);
				if(invLen > 0) {
					invLen = 1 / invLen;
				}
				_this.x *= invLen;
				_this.y *= invLen;
				_this.z *= invLen;
				var _this1 = hit.position;
				var v4 = this.closestPoint1;
				_this1.x = v4.x;
				_this1.y = v4.y;
				_this1.z = v4.z;
				_this1.x += tl1.x * lambda;
				_this1.y += tl1.y * lambda;
				_this1.z += tl1.z * lambda;
				return true;
			}
			dir.x = closest.x;
			dir.y = closest.y;
			dir.z = closest.z;
			dir.x = -dir.x;
			dir.y = -dir.y;
			dir.z = -dir.z;
			if(this.c1 != null) {
				this.computeWitnessPoint1(true);
			} else {
				var v5 = this.w1[this.simplexSize];
				v5.x = this.tf1._positionX;
				v5.y = this.tf1._positionY;
				v5.z = this.tf1._positionZ;
			}
			this.computeWitnessPoint2(true);
			var _this2 = this.s[this.simplexSize];
			var v6 = this.w1[this.simplexSize];
			_this2.x = v6.x;
			_this2.y = v6.y;
			_this2.z = v6.z;
			var v7 = this.w2[this.simplexSize];
			_this2.x -= v7.x;
			_this2.y -= v7.y;
			_this2.z -= v7.z;
			var _this3 = s[this.simplexSize];
			_this3.x -= rayX.x;
			_this3.y -= rayX.y;
			_this3.z -= rayX.z;
			if(dir.x * dir.x + dir.y * dir.y + dir.z * dir.z < 1e-008) {
				throw new Error("!?");
			}
			var p = s[this.simplexSize];
			var pn = p.x * dir.x + p.y * dir.y + p.z * dir.z;
			if(pn < 0) {
				if(rayR.x * dir.x + rayR.y * dir.y + rayR.z * dir.z >= 0) {
					return false;
				}
				var dLambda = pn / (rayR.x * dir.x + rayR.y * dir.y + rayR.z * dir.z);
				lambda += dLambda;
				if(lambda >= 1) {
					return false;
				}
				rayX.x += rayR.x * dLambda;
				rayX.y += rayR.y * dLambda;
				rayX.z += rayR.z * dLambda;
				var _g = 0;
				var _g1 = this.simplexSize + 1;
				while(_g < _g1) {
					var _this4 = s[_g++];
					var s1 = -dLambda;
					_this4.x += rayR.x * s1;
					_this4.y += rayR.y * s1;
					_this4.z += rayR.z * s1;
				}
			}
			var duplicate = false;
			var _g2 = 0;
			var _g3 = this.simplexSize;
			while(_g2 < _g3) {
				var i = _g2++;
				var dx = s[i].x - s[this.simplexSize].x;
				var dy = s[i].y - s[this.simplexSize].y;
				var dz = s[i].z - s[this.simplexSize].z;
				if(dx * dx + dy * dy + dz * dz < 1e-008) {
					duplicate = true;
					break;
				}
			}
			if(!duplicate) {
				this.simplexSize++;
			}
			++count;
		}
		return false;
	}
	,interpolateClosestPoints: function() {
		switch(this.simplexSize) {
		case 1:
			var _this = this.closestPoint1;
			var v = this.w1[0];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			var _this = this.closestPoint2;
			var v = this.w2[0];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			break;
		case 2:
			var cX;
			var cY;
			var cZ;
			var v = this.closest;
			cX = v.x;
			cY = v.y;
			cZ = v.z;
			var s0X;
			var s0Y;
			var s0Z;
			var w10X;
			var w10Y;
			var w10Z;
			var w20X;
			var w20Y;
			var w20Z;
			var s1X;
			var s1Y;
			var s1Z;
			var w11X;
			var w11Y;
			var w11Z;
			var w21X;
			var w21Y;
			var w21Z;
			var v = this.s[0];
			s0X = v.x;
			s0Y = v.y;
			s0Z = v.z;
			var v = this.w1[0];
			w10X = v.x;
			w10Y = v.y;
			w10Z = v.z;
			var v = this.w2[0];
			w20X = v.x;
			w20Y = v.y;
			w20Z = v.z;
			var v = this.s[1];
			s1X = v.x;
			s1Y = v.y;
			s1Z = v.z;
			var v = this.w1[1];
			w11X = v.x;
			w11Y = v.y;
			w11Z = v.z;
			var v = this.w2[1];
			w21X = v.x;
			w21Y = v.y;
			w21Z = v.z;
			var s01X;
			var s01Y;
			var s01Z;
			s01X = s1X - s0X;
			s01Y = s1Y - s0Y;
			s01Z = s1Z - s0Z;
			var invDet = s01X * s01X + s01Y * s01Y + s01Z * s01Z;
			if(invDet != 0) {
				invDet = 1 / invDet;
			}
			var s0cX;
			var s0cY;
			var s0cZ;
			s0cX = cX - s0X;
			s0cY = cY - s0Y;
			s0cZ = cZ - s0Z;
			var t = (s0cX * s01X + s0cY * s01Y + s0cZ * s01Z) * invDet;
			var diffX;
			var diffY;
			var diffZ;
			var cp1X;
			var cp1Y;
			var cp1Z;
			var cp2X;
			var cp2Y;
			var cp2Z;
			diffX = w11X - w10X;
			diffY = w11Y - w10Y;
			diffZ = w11Z - w10Z;
			cp1X = w10X + diffX * t;
			cp1Y = w10Y + diffY * t;
			cp1Z = w10Z + diffZ * t;
			diffX = w21X - w20X;
			diffY = w21Y - w20Y;
			diffZ = w21Z - w20Z;
			cp2X = w20X + diffX * t;
			cp2Y = w20Y + diffY * t;
			cp2Z = w20Z + diffZ * t;
			var v = this.closestPoint1;
			v.x = cp1X;
			v.y = cp1Y;
			v.z = cp1Z;
			var v = this.closestPoint2;
			v.x = cp2X;
			v.y = cp2Y;
			v.z = cp2Z;
			break;
		case 3:
			var cX;
			var cY;
			var cZ;
			var v = this.closest;
			cX = v.x;
			cY = v.y;
			cZ = v.z;
			var s0X;
			var s0Y;
			var s0Z;
			var w10X;
			var w10Y;
			var w10Z;
			var w20X;
			var w20Y;
			var w20Z;
			var s1X;
			var s1Y;
			var s1Z;
			var w11X;
			var w11Y;
			var w11Z;
			var w21X;
			var w21Y;
			var w21Z;
			var s2X;
			var s2Y;
			var s2Z;
			var w12X;
			var w12Y;
			var w12Z;
			var w22X;
			var w22Y;
			var w22Z;
			var v = this.s[0];
			s0X = v.x;
			s0Y = v.y;
			s0Z = v.z;
			var v = this.w1[0];
			w10X = v.x;
			w10Y = v.y;
			w10Z = v.z;
			var v = this.w2[0];
			w20X = v.x;
			w20Y = v.y;
			w20Z = v.z;
			var v = this.s[1];
			s1X = v.x;
			s1Y = v.y;
			s1Z = v.z;
			var v = this.w1[1];
			w11X = v.x;
			w11Y = v.y;
			w11Z = v.z;
			var v = this.w2[1];
			w21X = v.x;
			w21Y = v.y;
			w21Z = v.z;
			var v = this.s[2];
			s2X = v.x;
			s2Y = v.y;
			s2Z = v.z;
			var v = this.w1[2];
			w12X = v.x;
			w12Y = v.y;
			w12Z = v.z;
			var v = this.w2[2];
			w22X = v.x;
			w22Y = v.y;
			w22Z = v.z;
			var s01X;
			var s01Y;
			var s01Z;
			var s02X;
			var s02Y;
			var s02Z;
			var s0cX;
			var s0cY;
			var s0cZ;
			s01X = s1X - s0X;
			s01Y = s1Y - s0Y;
			s01Z = s1Z - s0Z;
			s02X = s2X - s0X;
			s02Y = s2Y - s0Y;
			s02Z = s2Z - s0Z;
			s0cX = cX - s0X;
			s0cY = cY - s0Y;
			s0cZ = cZ - s0Z;
			var d11 = s01X * s01X + s01Y * s01Y + s01Z * s01Z;
			var d12 = s01X * s02X + s01Y * s02Y + s01Z * s02Z;
			var d22 = s02X * s02X + s02Y * s02Y + s02Z * s02Z;
			var d1c = s01X * s0cX + s01Y * s0cY + s01Z * s0cZ;
			var d2c = s02X * s0cX + s02Y * s0cY + s02Z * s0cZ;
			var invDet = d11 * d22 - d12 * d12;
			if(invDet != 0) {
				invDet = 1 / invDet;
			}
			var s = (d1c * d22 - d2c * d12) * invDet;
			var t = (-d1c * d12 + d2c * d11) * invDet;
			var diffX;
			var diffY;
			var diffZ;
			var cp1X;
			var cp1Y;
			var cp1Z;
			var cp2X;
			var cp2Y;
			var cp2Z;
			diffX = w11X - w10X;
			diffY = w11Y - w10Y;
			diffZ = w11Z - w10Z;
			cp1X = w10X + diffX * s;
			cp1Y = w10Y + diffY * s;
			cp1Z = w10Z + diffZ * s;
			diffX = w12X - w10X;
			diffY = w12Y - w10Y;
			diffZ = w12Z - w10Z;
			cp1X += diffX * t;
			cp1Y += diffY * t;
			cp1Z += diffZ * t;
			diffX = w21X - w20X;
			diffY = w21Y - w20Y;
			diffZ = w21Z - w20Z;
			cp2X = w20X + diffX * s;
			cp2Y = w20Y + diffY * s;
			cp2Z = w20Z + diffZ * s;
			diffX = w22X - w20X;
			diffY = w22Y - w20Y;
			diffZ = w22Z - w20Z;
			cp2X += diffX * t;
			cp2Y += diffY * t;
			cp2Z += diffZ * t;
			var v = this.closestPoint1;
			v.x = cp1X;
			v.y = cp1Y;
			v.z = cp1Z;
			var v = this.closestPoint2;
			v.x = cp2X;
			v.y = cp2Y;
			v.z = cp2Z;
			break;
		default:
			throw new Error("!?");
		}
	}
	,loadCache: function(gjkCache) {
		var _this = this.dir;
		var v = gjkCache.prevClosestDir;
		_this.x = v.x;
		_this.y = v.y;
		_this.z = v.z;
	}
	,saveCache: function(gjkCache) {
		var _this = gjkCache.prevClosestDir;
		var v = this.closest;
		_this.x = v.x;
		_this.y = v.y;
		_this.z = v.z;
		_this.x = -_this.x;
		_this.y = -_this.y;
		_this.z = -_this.z;
	}
	,shrinkSimplex: function(vertexBits) {
		this.simplexSize = vertexBits;
		this.simplexSize = (this.simplexSize & 5) + (this.simplexSize >> 1 & 5);
		this.simplexSize = (this.simplexSize & 3) + (this.simplexSize >> 2 & 3);
		switch(vertexBits) {
		case 2:
			var _this = this.s[0];
			var v = this.s[1];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			var _this = this.w1[0];
			var v = this.w1[1];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			var _this = this.w2[0];
			var v = this.w2[1];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			break;
		case 4:
			var _this = this.s[0];
			var v = this.s[2];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			var _this = this.w1[0];
			var v = this.w1[2];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			var _this = this.w2[0];
			var v = this.w2[2];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			break;
		case 5:
			var _this = this.s[1];
			var v = this.s[2];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			var _this = this.w1[1];
			var v = this.w1[2];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			var _this = this.w2[1];
			var v = this.w2[2];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			break;
		case 6:
			var _this = this.s[0];
			var v = this.s[2];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			var _this = this.w1[0];
			var v = this.w1[2];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			var _this = this.w2[0];
			var v = this.w2[2];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			break;
		case 8:
			var _this = this.s[0];
			var v = this.s[3];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			var _this = this.w1[0];
			var v = this.w1[3];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			var _this = this.w2[0];
			var v = this.w2[3];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			break;
		case 9:
			var _this = this.s[1];
			var v = this.s[3];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			var _this = this.w1[1];
			var v = this.w1[3];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			var _this = this.w2[1];
			var v = this.w2[3];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			break;
		case 10:
			var _this = this.s[0];
			var v = this.s[3];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			var _this = this.w1[0];
			var v = this.w1[3];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			var _this = this.w2[0];
			var v = this.w2[3];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			break;
		case 11:
			var _this = this.s[2];
			var v = this.s[3];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			var _this = this.w1[2];
			var v = this.w1[3];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			var _this = this.w2[2];
			var v = this.w2[3];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			break;
		case 12:
			var _this = this.s[0];
			var v = this.s[2];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			var _this = this.w1[0];
			var v = this.w1[2];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			var _this = this.w2[0];
			var v = this.w2[2];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			var _this = this.s[1];
			var v = this.s[3];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			var _this = this.w1[1];
			var v = this.w1[3];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			var _this = this.w2[1];
			var v = this.w2[3];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			break;
		case 13:
			var _this = this.s[1];
			var v = this.s[3];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			var _this = this.w1[1];
			var v = this.w1[3];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			var _this = this.w2[1];
			var v = this.w2[3];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			break;
		case 14:
			var _this = this.s[0];
			var v = this.s[3];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			var _this = this.w1[0];
			var v = this.w1[3];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			var _this = this.w2[0];
			var v = this.w2[3];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			break;
		}
	}
	,computeWitnessPoint1: function(addMargin) {
		var tmpX;
		var tmpY;
		var tmpZ;
		var idirX;
		var idirY;
		var idirZ;
		var v = this.dir;
		idirX = v.x;
		idirY = v.y;
		idirZ = v.z;
		var ldir1X;
		var ldir1Y;
		var ldir1Z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = this.tf1._rotation00 * idirX + this.tf1._rotation10 * idirY + this.tf1._rotation20 * idirZ;
		__tmp__Y = this.tf1._rotation01 * idirX + this.tf1._rotation11 * idirY + this.tf1._rotation21 * idirZ;
		__tmp__Z = this.tf1._rotation02 * idirX + this.tf1._rotation12 * idirY + this.tf1._rotation22 * idirZ;
		ldir1X = __tmp__X;
		ldir1Y = __tmp__Y;
		ldir1Z = __tmp__Z;
		var iw1X;
		var iw1Y;
		var iw1Z;
		var v = this.dir;
		v.x = ldir1X;
		v.y = ldir1Y;
		v.z = ldir1Z;
		this.c1.computeLocalSupportingVertex(this.dir,this.w1[this.simplexSize]);
		if(addMargin) {
			var _this = this.dir;
			var invLen = Math.sqrt(_this.x * _this.x + _this.y * _this.y + _this.z * _this.z);
			if(invLen > 0) {
				invLen = 1 / invLen;
			}
			_this.x *= invLen;
			_this.y *= invLen;
			_this.z *= invLen;
			var _this = this.w1[this.simplexSize];
			var v = this.dir;
			var s = this.c1._gjkMargin;
			_this.x += v.x * s;
			_this.y += v.y * s;
			_this.z += v.z * s;
		}
		var v = this.w1[this.simplexSize];
		tmpX = v.x;
		tmpY = v.y;
		tmpZ = v.z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = this.tf1._rotation00 * tmpX + this.tf1._rotation01 * tmpY + this.tf1._rotation02 * tmpZ;
		__tmp__Y = this.tf1._rotation10 * tmpX + this.tf1._rotation11 * tmpY + this.tf1._rotation12 * tmpZ;
		__tmp__Z = this.tf1._rotation20 * tmpX + this.tf1._rotation21 * tmpY + this.tf1._rotation22 * tmpZ;
		iw1X = __tmp__X;
		iw1Y = __tmp__Y;
		iw1Z = __tmp__Z;
		iw1X += this.tf1._positionX;
		iw1Y += this.tf1._positionY;
		iw1Z += this.tf1._positionZ;
		var v = this.w1[this.simplexSize];
		v.x = iw1X;
		v.y = iw1Y;
		v.z = iw1Z;
		var v = this.dir;
		v.x = idirX;
		v.y = idirY;
		v.z = idirZ;
	}
	,computeWitnessPoint2: function(addMargin) {
		var tmpX;
		var tmpY;
		var tmpZ;
		var idirX;
		var idirY;
		var idirZ;
		var v = this.dir;
		idirX = v.x;
		idirY = v.y;
		idirZ = v.z;
		var ldir2X;
		var ldir2Y;
		var ldir2Z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = this.tf2._rotation00 * idirX + this.tf2._rotation10 * idirY + this.tf2._rotation20 * idirZ;
		__tmp__Y = this.tf2._rotation01 * idirX + this.tf2._rotation11 * idirY + this.tf2._rotation21 * idirZ;
		__tmp__Z = this.tf2._rotation02 * idirX + this.tf2._rotation12 * idirY + this.tf2._rotation22 * idirZ;
		ldir2X = __tmp__X;
		ldir2Y = __tmp__Y;
		ldir2Z = __tmp__Z;
		ldir2X = -ldir2X;
		ldir2Y = -ldir2Y;
		ldir2Z = -ldir2Z;
		var iw2X;
		var iw2Y;
		var iw2Z;
		var v = this.dir;
		v.x = ldir2X;
		v.y = ldir2Y;
		v.z = ldir2Z;
		this.c2.computeLocalSupportingVertex(this.dir,this.w2[this.simplexSize]);
		if(addMargin) {
			var _this = this.dir;
			var invLen = Math.sqrt(_this.x * _this.x + _this.y * _this.y + _this.z * _this.z);
			if(invLen > 0) {
				invLen = 1 / invLen;
			}
			_this.x *= invLen;
			_this.y *= invLen;
			_this.z *= invLen;
			var _this = this.w2[this.simplexSize];
			var v = this.dir;
			var s = this.c2._gjkMargin;
			_this.x += v.x * s;
			_this.y += v.y * s;
			_this.z += v.z * s;
		}
		var v = this.w2[this.simplexSize];
		tmpX = v.x;
		tmpY = v.y;
		tmpZ = v.z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = this.tf2._rotation00 * tmpX + this.tf2._rotation01 * tmpY + this.tf2._rotation02 * tmpZ;
		__tmp__Y = this.tf2._rotation10 * tmpX + this.tf2._rotation11 * tmpY + this.tf2._rotation12 * tmpZ;
		__tmp__Z = this.tf2._rotation20 * tmpX + this.tf2._rotation21 * tmpY + this.tf2._rotation22 * tmpZ;
		iw2X = __tmp__X;
		iw2Y = __tmp__Y;
		iw2Z = __tmp__Z;
		iw2X += this.tf2._positionX;
		iw2Y += this.tf2._positionY;
		iw2Z += this.tf2._positionZ;
		var v = this.w2[this.simplexSize];
		v.x = iw2X;
		v.y = iw2Y;
		v.z = iw2Z;
		var v = this.dir;
		v.x = idirX;
		v.y = idirY;
		v.z = idirZ;
	}
	,pointToTetrahedron: function() {
		var _g = 0;
		while(_g < 3) {
			var _this = this.dir;
			var v = this.baseDirs[_g++];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			this.computeWitnessPoint1(false);
			this.computeWitnessPoint2(false);
			var _this1 = this.s[this.simplexSize];
			var v1 = this.w1[this.simplexSize];
			_this1.x = v1.x;
			_this1.y = v1.y;
			_this1.z = v1.z;
			var v2 = this.w2[this.simplexSize];
			_this1.x -= v2.x;
			_this1.y -= v2.y;
			_this1.z -= v2.z;
			this.simplexSize++;
			this.lineToTetrahedron();
			if(this.simplexSize == 4) {
				break;
			}
			this.simplexSize--;
			var _this2 = this.dir;
			_this2.x = -_this2.x;
			_this2.y = -_this2.y;
			_this2.z = -_this2.z;
			this.computeWitnessPoint1(false);
			this.computeWitnessPoint2(false);
			var _this3 = this.s[this.simplexSize];
			var v3 = this.w1[this.simplexSize];
			_this3.x = v3.x;
			_this3.y = v3.y;
			_this3.z = v3.z;
			var v4 = this.w2[this.simplexSize];
			_this3.x -= v4.x;
			_this3.y -= v4.y;
			_this3.z -= v4.z;
			this.simplexSize++;
			this.lineToTetrahedron();
			if(this.simplexSize == 4) {
				break;
			}
			this.simplexSize--;
		}
	}
	,lineToTetrahedron: function() {
		var oldDirX;
		var oldDirY;
		var oldDirZ;
		var v = this.dir;
		oldDirX = v.x;
		oldDirY = v.y;
		oldDirZ = v.z;
		var s0X;
		var s0Y;
		var s0Z;
		var s1X;
		var s1Y;
		var s1Z;
		var lineDirX;
		var lineDirY;
		var lineDirZ;
		var v = this.s[0];
		s0X = v.x;
		s0Y = v.y;
		s0Z = v.z;
		var v = this.s[1];
		s1X = v.x;
		s1Y = v.y;
		s1Z = v.z;
		lineDirX = s0X - s1X;
		lineDirY = s0Y - s1Y;
		lineDirZ = s0Z - s1Z;
		var _g = 0;
		while(_g < 3) {
			var baseDirX;
			var baseDirY;
			var baseDirZ;
			var v = this.baseDirs[_g++];
			baseDirX = v.x;
			baseDirY = v.y;
			baseDirZ = v.z;
			var newDirX;
			var newDirY;
			var newDirZ;
			newDirX = lineDirY * baseDirZ - lineDirZ * baseDirY;
			newDirY = lineDirZ * baseDirX - lineDirX * baseDirZ;
			newDirZ = lineDirX * baseDirY - lineDirY * baseDirX;
			var v1 = this.dir;
			v1.x = newDirX;
			v1.y = newDirY;
			v1.z = newDirZ;
			this.computeWitnessPoint1(false);
			this.computeWitnessPoint2(false);
			var _this = this.s[this.simplexSize];
			var v2 = this.w1[this.simplexSize];
			_this.x = v2.x;
			_this.y = v2.y;
			_this.z = v2.z;
			var v3 = this.w2[this.simplexSize];
			_this.x -= v3.x;
			_this.y -= v3.y;
			_this.z -= v3.z;
			this.simplexSize++;
			this.triangleToTetrahedron();
			if(this.simplexSize == 4) {
				break;
			}
			this.simplexSize--;
			var _this1 = this.dir;
			_this1.x = -_this1.x;
			_this1.y = -_this1.y;
			_this1.z = -_this1.z;
			this.computeWitnessPoint1(false);
			this.computeWitnessPoint2(false);
			var _this2 = this.s[this.simplexSize];
			var v4 = this.w1[this.simplexSize];
			_this2.x = v4.x;
			_this2.y = v4.y;
			_this2.z = v4.z;
			var v5 = this.w2[this.simplexSize];
			_this2.x -= v5.x;
			_this2.y -= v5.y;
			_this2.z -= v5.z;
			this.simplexSize++;
			this.triangleToTetrahedron();
			if(this.simplexSize == 4) {
				break;
			}
			this.simplexSize--;
		}
		var v = this.dir;
		v.x = oldDirX;
		v.y = oldDirY;
		v.z = oldDirZ;
	}
	,triangleToTetrahedron: function() {
		var oldDirX;
		var oldDirY;
		var oldDirZ;
		var v = this.dir;
		oldDirX = v.x;
		oldDirY = v.y;
		oldDirZ = v.z;
		while(true) {
			var s0X;
			var s0Y;
			var s0Z;
			var s1X;
			var s1Y;
			var s1Z;
			var s2X;
			var s2Y;
			var s2Z;
			var s01X;
			var s01Y;
			var s01Z;
			var s02X;
			var s02Y;
			var s02Z;
			var v = this.s[0];
			s0X = v.x;
			s0Y = v.y;
			s0Z = v.z;
			var v1 = this.s[1];
			s1X = v1.x;
			s1Y = v1.y;
			s1Z = v1.z;
			var v2 = this.s[2];
			s2X = v2.x;
			s2Y = v2.y;
			s2Z = v2.z;
			s01X = s1X - s0X;
			s01Y = s1Y - s0Y;
			s01Z = s1Z - s0Z;
			s02X = s2X - s0X;
			s02Y = s2Y - s0Y;
			s02Z = s2Z - s0Z;
			var nX;
			var nY;
			var nZ;
			nX = s01Y * s02Z - s01Z * s02Y;
			nY = s01Z * s02X - s01X * s02Z;
			nZ = s01X * s02Y - s01Y * s02X;
			var v3 = this.dir;
			v3.x = nX;
			v3.y = nY;
			v3.z = nZ;
			this.computeWitnessPoint1(false);
			this.computeWitnessPoint2(false);
			var _this = this.s[this.simplexSize];
			var v4 = this.w1[this.simplexSize];
			_this.x = v4.x;
			_this.y = v4.y;
			_this.z = v4.z;
			var v5 = this.w2[this.simplexSize];
			_this.x -= v5.x;
			_this.y -= v5.y;
			_this.z -= v5.z;
			this.simplexSize++;
			if(this.isValidTetrahedron()) {
				break;
			}
			this.simplexSize--;
			var _this1 = this.dir;
			_this1.x = -_this1.x;
			_this1.y = -_this1.y;
			_this1.z = -_this1.z;
			this.computeWitnessPoint1(false);
			this.computeWitnessPoint2(false);
			var _this2 = this.s[this.simplexSize];
			var v6 = this.w1[this.simplexSize];
			_this2.x = v6.x;
			_this2.y = v6.y;
			_this2.z = v6.z;
			var v7 = this.w2[this.simplexSize];
			_this2.x -= v7.x;
			_this2.y -= v7.y;
			_this2.z -= v7.z;
			this.simplexSize++;
			if(this.isValidTetrahedron()) {
				break;
			}
			this.simplexSize--;
			break;
		}
		var v = this.dir;
		v.x = oldDirX;
		v.y = oldDirY;
		v.z = oldDirZ;
	}
	,isValidTetrahedron: function() {
		var e10 = this.s[2].x - this.s[0].x;
		var e11 = this.s[2].y - this.s[0].y;
		var e12 = this.s[2].z - this.s[0].z;
		var e20 = this.s[3].x - this.s[0].x;
		var e21 = this.s[3].y - this.s[0].y;
		var e22 = this.s[3].z - this.s[0].z;
		var det = (this.s[1].x - this.s[0].x) * (e11 * e22 - e12 * e21) - (this.s[1].y - this.s[0].y) * (e10 * e22 - e12 * e20) + (this.s[1].z - this.s[0].z) * (e10 * e21 - e11 * e20);
		if(!(det > 1e-12)) {
			return det < -1e-12;
		} else {
			return true;
		}
	}
	,computeDepth: function(convex1,convex2,tf1,tf2,initialPolyhedron,initialPolyhedron1,initialPolyhedron2) {
		var _this = this.polyhedron;
		while(_this._numTriangles > 0) {
			var t = _this._triangleList;
			_this._numTriangles--;
			var prev = t._prev;
			var next = t._next;
			if(prev != null) {
				prev._next = next;
			}
			if(next != null) {
				next._prev = prev;
			}
			if(t == _this._triangleList) {
				_this._triangleList = _this._triangleList._next;
			}
			if(t == _this._triangleListLast) {
				_this._triangleListLast = _this._triangleListLast._prev;
			}
			t._next = null;
			t._prev = null;
			t.removeReferences();
			t._next = _this._trianglePool;
			_this._trianglePool = t;
		}
		while(_this._numVertices > 0) {
			var v = _this._vertices[--_this._numVertices];
			v.removeReferences();
			v._next = _this._vertexPool;
			_this._vertexPool = v;
		}
		var tmp = this.polyhedron;
		var _this = this.polyhedron;
		var first = _this._vertexPool;
		if(first != null) {
			_this._vertexPool = first._next;
			first._next = null;
		} else {
			first = new oimo_collision_narrowphase_detector_gjkepa_EpaVertex();
		}
		var tmp1 = first.init(initialPolyhedron[0],initialPolyhedron1[0],initialPolyhedron2[0]);
		var _this = this.polyhedron;
		var first = _this._vertexPool;
		if(first != null) {
			_this._vertexPool = first._next;
			first._next = null;
		} else {
			first = new oimo_collision_narrowphase_detector_gjkepa_EpaVertex();
		}
		var tmp2 = first.init(initialPolyhedron[1],initialPolyhedron1[1],initialPolyhedron2[1]);
		var _this = this.polyhedron;
		var first = _this._vertexPool;
		if(first != null) {
			_this._vertexPool = first._next;
			first._next = null;
		} else {
			first = new oimo_collision_narrowphase_detector_gjkepa_EpaVertex();
		}
		var tmp3 = first.init(initialPolyhedron[2],initialPolyhedron1[2],initialPolyhedron2[2]);
		var _this = this.polyhedron;
		var first = _this._vertexPool;
		if(first != null) {
			_this._vertexPool = first._next;
			first._next = null;
		} else {
			first = new oimo_collision_narrowphase_detector_gjkepa_EpaVertex();
		}
		if(!tmp._init(tmp1,tmp2,tmp3,first.init(initialPolyhedron[3],initialPolyhedron1[3],initialPolyhedron2[3]))) {
			return oimo_collision_narrowphase_detector_gjkepa_GjkEpaResultState.EPA_FAILED_TO_INIT;
		}
		this.simplexSize = 0;
		var supportingVertex = this.s[0];
		var witness1 = this.w1[0];
		var witness2 = this.w2[0];
		var count = 0;
		while(count < 40) {
			var f = this.polyhedron._triangleList;
			var mind = 1e65536;
			var minf = null;
			while(f != null) {
				if(f._distanceSq < mind) {
					mind = f._distanceSq;
					minf = f;
				}
				f = f._next;
			}
			var face = minf;
			var _this = this.dir;
			var v = face._normal;
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			var invLen = Math.sqrt(_this.x * _this.x + _this.y * _this.y + _this.z * _this.z);
			if(invLen > 0) {
				invLen = 1 / invLen;
			}
			_this.x *= invLen;
			_this.y *= invLen;
			_this.z *= invLen;
			this.computeWitnessPoint1(false);
			this.computeWitnessPoint2(false);
			var _this1 = this.s[this.simplexSize];
			var v1 = this.w1[this.simplexSize];
			_this1.x = v1.x;
			_this1.y = v1.y;
			_this1.z = v1.z;
			var v2 = this.w2[this.simplexSize];
			_this1.x -= v2.x;
			_this1.y -= v2.y;
			_this1.z -= v2.z;
			var v0 = face._vertices[0];
			var v11 = face._vertices[1];
			var v21 = face._vertices[2];
			var _this2 = v0.v;
			var v3 = this.dir;
			var v4 = this.dir;
			if(supportingVertex.x * v4.x + supportingVertex.y * v4.y + supportingVertex.z * v4.z - (_this2.x * v3.x + _this2.y * v3.y + _this2.z * v3.z) < 1e-6 || count == 39) {
				var _this3 = this.closest;
				var v5 = this.dir;
				_this3.x = v5.x;
				_this3.y = v5.y;
				_this3.z = v5.z;
				var _this4 = this.dir;
				var v6 = v0.v;
				var _this5 = this.dir;
				var s = (_this4.x * v6.x + _this4.y * v6.y + _this4.z * v6.z) / (_this5.x * _this5.x + _this5.y * _this5.y + _this5.z * _this5.z);
				_this3.x *= s;
				_this3.y *= s;
				_this3.z *= s;
				var cX;
				var cY;
				var cZ;
				var v7 = this.closest;
				cX = v7.x;
				cY = v7.y;
				cZ = v7.z;
				var s0X;
				var s0Y;
				var s0Z;
				var w10X;
				var w10Y;
				var w10Z;
				var w20X;
				var w20Y;
				var w20Z;
				var s1X;
				var s1Y;
				var s1Z;
				var w11X;
				var w11Y;
				var w11Z;
				var w21X;
				var w21Y;
				var w21Z;
				var s2X;
				var s2Y;
				var s2Z;
				var w12X;
				var w12Y;
				var w12Z;
				var w22X;
				var w22Y;
				var w22Z;
				var v8 = v0.v;
				s0X = v8.x;
				s0Y = v8.y;
				s0Z = v8.z;
				var v9 = v0.w1;
				w10X = v9.x;
				w10Y = v9.y;
				w10Z = v9.z;
				var v10 = v0.w2;
				w20X = v10.x;
				w20Y = v10.y;
				w20Z = v10.z;
				var v12 = v11.v;
				s1X = v12.x;
				s1Y = v12.y;
				s1Z = v12.z;
				var v13 = v11.w1;
				w11X = v13.x;
				w11Y = v13.y;
				w11Z = v13.z;
				var v14 = v11.w2;
				w21X = v14.x;
				w21Y = v14.y;
				w21Z = v14.z;
				var v15 = v21.v;
				s2X = v15.x;
				s2Y = v15.y;
				s2Z = v15.z;
				var v16 = v21.w1;
				w12X = v16.x;
				w12Y = v16.y;
				w12Z = v16.z;
				var v17 = v21.w2;
				w22X = v17.x;
				w22Y = v17.y;
				w22Z = v17.z;
				var s01X;
				var s01Y;
				var s01Z;
				var s02X;
				var s02Y;
				var s02Z;
				var s0cX;
				var s0cY;
				var s0cZ;
				s01X = s1X - s0X;
				s01Y = s1Y - s0Y;
				s01Z = s1Z - s0Z;
				s02X = s2X - s0X;
				s02Y = s2Y - s0Y;
				s02Z = s2Z - s0Z;
				s0cX = cX - s0X;
				s0cY = cY - s0Y;
				s0cZ = cZ - s0Z;
				var d11 = s01X * s01X + s01Y * s01Y + s01Z * s01Z;
				var d12 = s01X * s02X + s01Y * s02Y + s01Z * s02Z;
				var d22 = s02X * s02X + s02Y * s02Y + s02Z * s02Z;
				var d1c = s01X * s0cX + s01Y * s0cY + s01Z * s0cZ;
				var d2c = s02X * s0cX + s02Y * s0cY + s02Z * s0cZ;
				var invDet = d11 * d22 - d12 * d12;
				if(invDet != 0) {
					invDet = 1 / invDet;
				}
				var s1 = (d1c * d22 - d2c * d12) * invDet;
				var t = (-d1c * d12 + d2c * d11) * invDet;
				var diffX;
				var diffY;
				var diffZ;
				var cp1X;
				var cp1Y;
				var cp1Z;
				var cp2X;
				var cp2Y;
				var cp2Z;
				diffX = w11X - w10X;
				diffY = w11Y - w10Y;
				diffZ = w11Z - w10Z;
				cp1X = w10X + diffX * s1;
				cp1Y = w10Y + diffY * s1;
				cp1Z = w10Z + diffZ * s1;
				diffX = w12X - w10X;
				diffY = w12Y - w10Y;
				diffZ = w12Z - w10Z;
				cp1X += diffX * t;
				cp1Y += diffY * t;
				cp1Z += diffZ * t;
				diffX = w21X - w20X;
				diffY = w21Y - w20Y;
				diffZ = w21Z - w20Z;
				cp2X = w20X + diffX * s1;
				cp2Y = w20Y + diffY * s1;
				cp2Z = w20Z + diffZ * s1;
				diffX = w22X - w20X;
				diffY = w22Y - w20Y;
				diffZ = w22Z - w20Z;
				cp2X += diffX * t;
				cp2Y += diffY * t;
				cp2Z += diffZ * t;
				var v18 = this.closestPoint1;
				v18.x = cp1X;
				v18.y = cp1Y;
				v18.z = cp1Z;
				var v19 = this.closestPoint2;
				v19.x = cp2X;
				v19.y = cp2Y;
				v19.z = cp2Z;
				var _this6 = this.closest;
				this.depth = Math.sqrt(_this6.x * _this6.x + _this6.y * _this6.y + _this6.z * _this6.z);
				return oimo_collision_narrowphase_detector_gjkepa_GjkEpaResultState.SUCCEEDED;
			}
			var _this7 = this.polyhedron;
			var first = _this7._vertexPool;
			if(first != null) {
				_this7._vertexPool = first._next;
				first._next = null;
			} else {
				first = new oimo_collision_narrowphase_detector_gjkepa_EpaVertex();
			}
			var epaVertex = first.init(supportingVertex,witness1,witness2);
			if(!this.polyhedron._addVertex(epaVertex,face)) {
				return oimo_collision_narrowphase_detector_gjkepa_GjkEpaResultState.EPA_FAILED_TO_ADD_VERTEX;
			}
			++count;
		}
		return oimo_collision_narrowphase_detector_gjkepa_GjkEpaResultState.EPA_DID_NOT_CONVERGE;
	}
	,computeClosestPoints: function(c1,c2,tf1,tf2,cache) {
		return this.computeClosestPointsImpl(c1,c2,tf1,tf2,cache,true);
	}
	,computeDistance: function(c1,c2,tf1,tf2,cache) {
		return this.computeClosestPointsImpl(c1,c2,tf1,tf2,cache,false);
	}
	,convexCast: function(c1,c2,tf1,tf2,tl1,tl2,hit) {
		return this.convexCastImpl(c1,c2,tf1,tf2,tl1,tl2,hit);
	}
	,rayCast: function(c,tf,begin,end,hit) {
		var tf1 = this.tempTransform;
		tf1._positionX = begin.x;
		tf1._positionY = begin.y;
		tf1._positionZ = begin.z;
		var tl1 = this.tl1;
		var tl2 = this.tl2;
		tl1.x = end.x;
		tl1.y = end.y;
		tl1.z = end.z;
		tl1.x -= begin.x;
		tl1.y -= begin.y;
		tl1.z -= begin.z;
		tl2.zero();
		return this.convexCastImpl(null,c,tf1,tf,tl1,tl2,hit);
	}
	,__class__: oimo_collision_narrowphase_detector_gjkepa_GjkEpa
};
var oimo_collision_narrowphase_detector_gjkepa_GjkEpaLog = function() { };
oimo_collision_narrowphase_detector_gjkepa_GjkEpaLog.__name__ = true;
var oimo_collision_narrowphase_detector_gjkepa_GjkEpaResultState = function() { };
oimo_collision_narrowphase_detector_gjkepa_GjkEpaResultState.__name__ = true;
var oimo_collision_narrowphase_detector_gjkepa_SimplexUtil = function() { };
oimo_collision_narrowphase_detector_gjkepa_SimplexUtil.__name__ = true;
oimo_collision_narrowphase_detector_gjkepa_SimplexUtil.projectOrigin2 = function(vec1,vec2,out) {
	var v1X;
	var v1Y;
	var v1Z;
	var v2X;
	var v2Y;
	var v2Z;
	v1X = vec1.x;
	v1Y = vec1.y;
	v1Z = vec1.z;
	v2X = vec2.x;
	v2Y = vec2.y;
	v2Z = vec2.z;
	var v12X;
	var v12Y;
	var v12Z;
	v12X = v2X - v1X;
	v12Y = v2Y - v1Y;
	v12Z = v2Z - v1Z;
	var t = v12X * v1X + v12Y * v1Y + v12Z * v1Z;
	t = -t / (v12X * v12X + v12Y * v12Y + v12Z * v12Z);
	if(t < 0) {
		out.x = v1X;
		out.y = v1Y;
		out.z = v1Z;
		return 1;
	}
	if(t > 1) {
		out.x = v2X;
		out.y = v2Y;
		out.z = v2Z;
		return 2;
	}
	var pX;
	var pY;
	var pZ;
	pX = v1X + v12X * t;
	pY = v1Y + v12Y * t;
	pZ = v1Z + v12Z * t;
	out.x = pX;
	out.y = pY;
	out.z = pZ;
	return 3;
};
oimo_collision_narrowphase_detector_gjkepa_SimplexUtil.projectOrigin3 = function(vec1,vec2,vec3,out) {
	var v1X;
	var v1Y;
	var v1Z;
	var v2X;
	var v2Y;
	var v2Z;
	var v3X;
	var v3Y;
	var v3Z;
	var v12X;
	var v12Y;
	var v12Z;
	var v23X;
	var v23Y;
	var v23Z;
	var v31X;
	var v31Y;
	var v31Z;
	v1X = vec1.x;
	v1Y = vec1.y;
	v1Z = vec1.z;
	v2X = vec2.x;
	v2Y = vec2.y;
	v2Z = vec2.z;
	v3X = vec3.x;
	v3Y = vec3.y;
	v3Z = vec3.z;
	v12X = v2X - v1X;
	v12Y = v2Y - v1Y;
	v12Z = v2Z - v1Z;
	v23X = v3X - v2X;
	v23Y = v3Y - v2Y;
	v23Z = v3Z - v2Z;
	v31X = v1X - v3X;
	v31Y = v1Y - v3Y;
	v31Z = v1Z - v3Z;
	var nX;
	var nY;
	var nZ;
	nX = v12Y * v23Z - v12Z * v23Y;
	nY = v12Z * v23X - v12X * v23Z;
	nZ = v12X * v23Y - v12Y * v23X;
	var n12X;
	var n12Y;
	var n12Z;
	var n23X;
	var n23Y;
	var n23Z;
	var n31X;
	var n31Y;
	var n31Z;
	n12X = v12Y * nZ - v12Z * nY;
	n12Y = v12Z * nX - v12X * nZ;
	n12Z = v12X * nY - v12Y * nX;
	n23X = v23Y * nZ - v23Z * nY;
	n23Y = v23Z * nX - v23X * nZ;
	n23Z = v23X * nY - v23Y * nX;
	n31X = v31Y * nZ - v31Z * nY;
	n31Y = v31Z * nX - v31X * nZ;
	n31Z = v31X * nY - v31Y * nX;
	var mind = -1;
	var minvX;
	var minvY;
	var minvZ;
	var mini = 0;
	minvX = 0;
	minvY = 0;
	minvZ = 0;
	if(v1X * n12X + v1Y * n12Y + v1Z * n12Z < 0) {
		var v1X1;
		var v1Y1;
		var v1Z1;
		var v2X1;
		var v2Y1;
		var v2Z1;
		v1X1 = vec1.x;
		v1Y1 = vec1.y;
		v1Z1 = vec1.z;
		v2X1 = vec2.x;
		v2Y1 = vec2.y;
		v2Z1 = vec2.z;
		var v12X;
		var v12Y;
		var v12Z;
		v12X = v2X1 - v1X1;
		v12Y = v2Y1 - v1Y1;
		v12Z = v2Z1 - v1Z1;
		var t = v12X * v1X1 + v12Y * v1Y1 + v12Z * v1Z1;
		t = -t / (v12X * v12X + v12Y * v12Y + v12Z * v12Z);
		var b;
		if(t < 0) {
			out.x = v1X1;
			out.y = v1Y1;
			out.z = v1Z1;
			b = 1;
		} else if(t > 1) {
			out.x = v2X1;
			out.y = v2Y1;
			out.z = v2Z1;
			b = 2;
		} else {
			var pX;
			var pY;
			var pZ;
			pX = v1X1 + v12X * t;
			pY = v1Y1 + v12Y * t;
			pZ = v1Z1 + v12Z * t;
			out.x = pX;
			out.y = pY;
			out.z = pZ;
			b = 3;
		}
		mini = b;
		mind = out.x * out.x + out.y * out.y + out.z * out.z;
		minvX = out.x;
		minvY = out.y;
		minvZ = out.z;
	}
	if(v2X * n23X + v2Y * n23Y + v2Z * n23Z < 0) {
		var v1X1;
		var v1Y1;
		var v1Z1;
		var v2X;
		var v2Y;
		var v2Z;
		v1X1 = vec2.x;
		v1Y1 = vec2.y;
		v1Z1 = vec2.z;
		v2X = vec3.x;
		v2Y = vec3.y;
		v2Z = vec3.z;
		var v12X;
		var v12Y;
		var v12Z;
		v12X = v2X - v1X1;
		v12Y = v2Y - v1Y1;
		v12Z = v2Z - v1Z1;
		var t = v12X * v1X1 + v12Y * v1Y1 + v12Z * v1Z1;
		t = -t / (v12X * v12X + v12Y * v12Y + v12Z * v12Z);
		var b;
		if(t < 0) {
			out.x = v1X1;
			out.y = v1Y1;
			out.z = v1Z1;
			b = 1;
		} else if(t > 1) {
			out.x = v2X;
			out.y = v2Y;
			out.z = v2Z;
			b = 2;
		} else {
			var pX;
			var pY;
			var pZ;
			pX = v1X1 + v12X * t;
			pY = v1Y1 + v12Y * t;
			pZ = v1Z1 + v12Z * t;
			out.x = pX;
			out.y = pY;
			out.z = pZ;
			b = 3;
		}
		var d = out.x * out.x + out.y * out.y + out.z * out.z;
		if(mind < 0 || d < mind) {
			mini = b << 1;
			mind = d;
			minvX = out.x;
			minvY = out.y;
			minvZ = out.z;
		}
	}
	if(v3X * n31X + v3Y * n31Y + v3Z * n31Z < 0) {
		var v1X1;
		var v1Y1;
		var v1Z1;
		var v2X;
		var v2Y;
		var v2Z;
		v1X1 = vec1.x;
		v1Y1 = vec1.y;
		v1Z1 = vec1.z;
		v2X = vec3.x;
		v2Y = vec3.y;
		v2Z = vec3.z;
		var v12X;
		var v12Y;
		var v12Z;
		v12X = v2X - v1X1;
		v12Y = v2Y - v1Y1;
		v12Z = v2Z - v1Z1;
		var t = v12X * v1X1 + v12Y * v1Y1 + v12Z * v1Z1;
		t = -t / (v12X * v12X + v12Y * v12Y + v12Z * v12Z);
		var b;
		if(t < 0) {
			out.x = v1X1;
			out.y = v1Y1;
			out.z = v1Z1;
			b = 1;
		} else if(t > 1) {
			out.x = v2X;
			out.y = v2Y;
			out.z = v2Z;
			b = 2;
		} else {
			var pX;
			var pY;
			var pZ;
			pX = v1X1 + v12X * t;
			pY = v1Y1 + v12Y * t;
			pZ = v1Z1 + v12Z * t;
			out.x = pX;
			out.y = pY;
			out.z = pZ;
			b = 3;
		}
		var d = out.x * out.x + out.y * out.y + out.z * out.z;
		if(mind < 0 || d < mind) {
			mini = b & 1 | (b & 2) << 1;
			mind = d;
			minvX = out.x;
			minvY = out.y;
			minvZ = out.z;
		}
	}
	if(mind > 0) {
		out.x = minvX;
		out.y = minvY;
		out.z = minvZ;
		return mini;
	}
	var l = nX * nX + nY * nY + nZ * nZ;
	if(l > 0) {
		l = 1 / Math.sqrt(l);
	}
	nX *= l;
	nY *= l;
	nZ *= l;
	var l2 = nX * nX + nY * nY + nZ * nZ;
	l2 = (v1X * nX + v1Y * nY + v1Z * nZ) / l2;
	minvX = nX * l2;
	minvY = nY * l2;
	minvZ = nZ * l2;
	out.x = minvX;
	out.y = minvY;
	out.z = minvZ;
	return 7;
};
oimo_collision_narrowphase_detector_gjkepa_SimplexUtil.projectOrigin4 = function(vec1,vec2,vec3,vec4,out) {
	var v1X;
	var v1Y;
	var v1Z;
	var v2X;
	var v2Y;
	var v2Z;
	var v3X;
	var v3Y;
	var v3Z;
	var v4X;
	var v4Y;
	var v4Z;
	var v12X;
	var v12Y;
	var v12Z;
	var v13X;
	var v13Y;
	var v13Z;
	var v14X;
	var v14Y;
	var v14Z;
	var v23X;
	var v23Y;
	var v23Z;
	var v24X;
	var v24Y;
	var v24Z;
	v1X = vec1.x;
	v1Y = vec1.y;
	v1Z = vec1.z;
	v2X = vec2.x;
	v2Y = vec2.y;
	v2Z = vec2.z;
	v3X = vec3.x;
	v3Y = vec3.y;
	v3Z = vec3.z;
	v4X = vec4.x;
	v4Y = vec4.y;
	v4Z = vec4.z;
	v12X = v2X - v1X;
	v12Y = v2Y - v1Y;
	v12Z = v2Z - v1Z;
	v13X = v3X - v1X;
	v13Y = v3Y - v1Y;
	v13Z = v3Z - v1Z;
	v14X = v4X - v1X;
	v14Y = v4Y - v1Y;
	v14Z = v4Z - v1Z;
	v23X = v3X - v2X;
	v23Y = v3Y - v2Y;
	v23Z = v3Z - v2Z;
	v24X = v4X - v2X;
	v24Y = v4Y - v2Y;
	v24Z = v4Z - v2Z;
	var n123X;
	var n123Y;
	var n123Z;
	var n134X;
	var n134Y;
	var n134Z;
	var n142X;
	var n142Y;
	var n142Z;
	var n243X;
	var n243Y;
	var n243Z;
	n123X = v12Y * v13Z - v12Z * v13Y;
	n123Y = v12Z * v13X - v12X * v13Z;
	n123Z = v12X * v13Y - v12Y * v13X;
	n134X = v13Y * v14Z - v13Z * v14Y;
	n134Y = v13Z * v14X - v13X * v14Z;
	n134Z = v13X * v14Y - v13Y * v14X;
	n142X = v14Y * v12Z - v14Z * v12Y;
	n142Y = v14Z * v12X - v14X * v12Z;
	n142Z = v14X * v12Y - v14Y * v12X;
	n243X = v24Y * v23Z - v24Z * v23Y;
	n243Y = v24Z * v23X - v24X * v23Z;
	n243Z = v24X * v23Y - v24Y * v23X;
	var sign = v12X * n243X + v12Y * n243Y + v12Z * n243Z > 0 ? 1 : -1;
	var mind = -1;
	var minvX;
	var minvY;
	var minvZ;
	var mini = 0;
	minvX = 0;
	minvY = 0;
	minvZ = 0;
	if((v1X * n123X + v1Y * n123Y + v1Z * n123Z) * sign < 0) {
		var v1X1;
		var v1Y1;
		var v1Z1;
		var v2X1;
		var v2Y1;
		var v2Z1;
		var v3X;
		var v3Y;
		var v3Z;
		var v12X;
		var v12Y;
		var v12Z;
		var v23X;
		var v23Y;
		var v23Z;
		var v31X;
		var v31Y;
		var v31Z;
		v1X1 = vec1.x;
		v1Y1 = vec1.y;
		v1Z1 = vec1.z;
		v2X1 = vec2.x;
		v2Y1 = vec2.y;
		v2Z1 = vec2.z;
		v3X = vec3.x;
		v3Y = vec3.y;
		v3Z = vec3.z;
		v12X = v2X1 - v1X1;
		v12Y = v2Y1 - v1Y1;
		v12Z = v2Z1 - v1Z1;
		v23X = v3X - v2X1;
		v23Y = v3Y - v2Y1;
		v23Z = v3Z - v2Z1;
		v31X = v1X1 - v3X;
		v31Y = v1Y1 - v3Y;
		v31Z = v1Z1 - v3Z;
		var nX;
		var nY;
		var nZ;
		nX = v12Y * v23Z - v12Z * v23Y;
		nY = v12Z * v23X - v12X * v23Z;
		nZ = v12X * v23Y - v12Y * v23X;
		var n12X;
		var n12Y;
		var n12Z;
		var n23X;
		var n23Y;
		var n23Z;
		var n31X;
		var n31Y;
		var n31Z;
		n12X = v12Y * nZ - v12Z * nY;
		n12Y = v12Z * nX - v12X * nZ;
		n12Z = v12X * nY - v12Y * nX;
		n23X = v23Y * nZ - v23Z * nY;
		n23Y = v23Z * nX - v23X * nZ;
		n23Z = v23X * nY - v23Y * nX;
		n31X = v31Y * nZ - v31Z * nY;
		n31Y = v31Z * nX - v31X * nZ;
		n31Z = v31X * nY - v31Y * nX;
		var mind1 = -1;
		var minvX1;
		var minvY1;
		var minvZ1;
		var mini1 = 0;
		minvX1 = 0;
		minvY1 = 0;
		minvZ1 = 0;
		if(v1X1 * n12X + v1Y1 * n12Y + v1Z1 * n12Z < 0) {
			var v1X2;
			var v1Y2;
			var v1Z2;
			var v2X2;
			var v2Y2;
			var v2Z2;
			v1X2 = vec1.x;
			v1Y2 = vec1.y;
			v1Z2 = vec1.z;
			v2X2 = vec2.x;
			v2Y2 = vec2.y;
			v2Z2 = vec2.z;
			var v12X;
			var v12Y;
			var v12Z;
			v12X = v2X2 - v1X2;
			v12Y = v2Y2 - v1Y2;
			v12Z = v2Z2 - v1Z2;
			var t = v12X * v1X2 + v12Y * v1Y2 + v12Z * v1Z2;
			t = -t / (v12X * v12X + v12Y * v12Y + v12Z * v12Z);
			var b;
			if(t < 0) {
				out.x = v1X2;
				out.y = v1Y2;
				out.z = v1Z2;
				b = 1;
			} else if(t > 1) {
				out.x = v2X2;
				out.y = v2Y2;
				out.z = v2Z2;
				b = 2;
			} else {
				var pX;
				var pY;
				var pZ;
				pX = v1X2 + v12X * t;
				pY = v1Y2 + v12Y * t;
				pZ = v1Z2 + v12Z * t;
				out.x = pX;
				out.y = pY;
				out.z = pZ;
				b = 3;
			}
			mini1 = b;
			mind1 = out.x * out.x + out.y * out.y + out.z * out.z;
			minvX1 = out.x;
			minvY1 = out.y;
			minvZ1 = out.z;
		}
		if(v2X1 * n23X + v2Y1 * n23Y + v2Z1 * n23Z < 0) {
			var v1X2;
			var v1Y2;
			var v1Z2;
			var v2X1;
			var v2Y1;
			var v2Z1;
			v1X2 = vec2.x;
			v1Y2 = vec2.y;
			v1Z2 = vec2.z;
			v2X1 = vec3.x;
			v2Y1 = vec3.y;
			v2Z1 = vec3.z;
			var v12X;
			var v12Y;
			var v12Z;
			v12X = v2X1 - v1X2;
			v12Y = v2Y1 - v1Y2;
			v12Z = v2Z1 - v1Z2;
			var t = v12X * v1X2 + v12Y * v1Y2 + v12Z * v1Z2;
			t = -t / (v12X * v12X + v12Y * v12Y + v12Z * v12Z);
			var b;
			if(t < 0) {
				out.x = v1X2;
				out.y = v1Y2;
				out.z = v1Z2;
				b = 1;
			} else if(t > 1) {
				out.x = v2X1;
				out.y = v2Y1;
				out.z = v2Z1;
				b = 2;
			} else {
				var pX;
				var pY;
				var pZ;
				pX = v1X2 + v12X * t;
				pY = v1Y2 + v12Y * t;
				pZ = v1Z2 + v12Z * t;
				out.x = pX;
				out.y = pY;
				out.z = pZ;
				b = 3;
			}
			var d = out.x * out.x + out.y * out.y + out.z * out.z;
			if(mind1 < 0 || d < mind1) {
				mini1 = b << 1;
				mind1 = d;
				minvX1 = out.x;
				minvY1 = out.y;
				minvZ1 = out.z;
			}
		}
		if(v3X * n31X + v3Y * n31Y + v3Z * n31Z < 0) {
			var v1X2;
			var v1Y2;
			var v1Z2;
			var v2X1;
			var v2Y1;
			var v2Z1;
			v1X2 = vec1.x;
			v1Y2 = vec1.y;
			v1Z2 = vec1.z;
			v2X1 = vec3.x;
			v2Y1 = vec3.y;
			v2Z1 = vec3.z;
			var v12X;
			var v12Y;
			var v12Z;
			v12X = v2X1 - v1X2;
			v12Y = v2Y1 - v1Y2;
			v12Z = v2Z1 - v1Z2;
			var t = v12X * v1X2 + v12Y * v1Y2 + v12Z * v1Z2;
			t = -t / (v12X * v12X + v12Y * v12Y + v12Z * v12Z);
			var b;
			if(t < 0) {
				out.x = v1X2;
				out.y = v1Y2;
				out.z = v1Z2;
				b = 1;
			} else if(t > 1) {
				out.x = v2X1;
				out.y = v2Y1;
				out.z = v2Z1;
				b = 2;
			} else {
				var pX;
				var pY;
				var pZ;
				pX = v1X2 + v12X * t;
				pY = v1Y2 + v12Y * t;
				pZ = v1Z2 + v12Z * t;
				out.x = pX;
				out.y = pY;
				out.z = pZ;
				b = 3;
			}
			var d = out.x * out.x + out.y * out.y + out.z * out.z;
			if(mind1 < 0 || d < mind1) {
				mini1 = b & 1 | (b & 2) << 1;
				mind1 = d;
				minvX1 = out.x;
				minvY1 = out.y;
				minvZ1 = out.z;
			}
		}
		var b;
		if(mind1 > 0) {
			out.x = minvX1;
			out.y = minvY1;
			out.z = minvZ1;
			b = mini1;
		} else {
			var l = nX * nX + nY * nY + nZ * nZ;
			if(l > 0) {
				l = 1 / Math.sqrt(l);
			}
			nX *= l;
			nY *= l;
			nZ *= l;
			var l2 = nX * nX + nY * nY + nZ * nZ;
			l2 = (v1X1 * nX + v1Y1 * nY + v1Z1 * nZ) / l2;
			minvX1 = nX * l2;
			minvY1 = nY * l2;
			minvZ1 = nZ * l2;
			out.x = minvX1;
			out.y = minvY1;
			out.z = minvZ1;
			b = 7;
		}
		mini = b;
		mind = out.x * out.x + out.y * out.y + out.z * out.z;
		minvX = out.x;
		minvY = out.y;
		minvZ = out.z;
	}
	if((v1X * n134X + v1Y * n134Y + v1Z * n134Z) * sign < 0) {
		var v1X1;
		var v1Y1;
		var v1Z1;
		var v2X1;
		var v2Y1;
		var v2Z1;
		var v3X;
		var v3Y;
		var v3Z;
		var v12X;
		var v12Y;
		var v12Z;
		var v23X;
		var v23Y;
		var v23Z;
		var v31X;
		var v31Y;
		var v31Z;
		v1X1 = vec1.x;
		v1Y1 = vec1.y;
		v1Z1 = vec1.z;
		v2X1 = vec3.x;
		v2Y1 = vec3.y;
		v2Z1 = vec3.z;
		v3X = vec4.x;
		v3Y = vec4.y;
		v3Z = vec4.z;
		v12X = v2X1 - v1X1;
		v12Y = v2Y1 - v1Y1;
		v12Z = v2Z1 - v1Z1;
		v23X = v3X - v2X1;
		v23Y = v3Y - v2Y1;
		v23Z = v3Z - v2Z1;
		v31X = v1X1 - v3X;
		v31Y = v1Y1 - v3Y;
		v31Z = v1Z1 - v3Z;
		var nX;
		var nY;
		var nZ;
		nX = v12Y * v23Z - v12Z * v23Y;
		nY = v12Z * v23X - v12X * v23Z;
		nZ = v12X * v23Y - v12Y * v23X;
		var n12X;
		var n12Y;
		var n12Z;
		var n23X;
		var n23Y;
		var n23Z;
		var n31X;
		var n31Y;
		var n31Z;
		n12X = v12Y * nZ - v12Z * nY;
		n12Y = v12Z * nX - v12X * nZ;
		n12Z = v12X * nY - v12Y * nX;
		n23X = v23Y * nZ - v23Z * nY;
		n23Y = v23Z * nX - v23X * nZ;
		n23Z = v23X * nY - v23Y * nX;
		n31X = v31Y * nZ - v31Z * nY;
		n31Y = v31Z * nX - v31X * nZ;
		n31Z = v31X * nY - v31Y * nX;
		var mind1 = -1;
		var minvX1;
		var minvY1;
		var minvZ1;
		var mini1 = 0;
		minvX1 = 0;
		minvY1 = 0;
		minvZ1 = 0;
		if(v1X1 * n12X + v1Y1 * n12Y + v1Z1 * n12Z < 0) {
			var v1X2;
			var v1Y2;
			var v1Z2;
			var v2X2;
			var v2Y2;
			var v2Z2;
			v1X2 = vec1.x;
			v1Y2 = vec1.y;
			v1Z2 = vec1.z;
			v2X2 = vec3.x;
			v2Y2 = vec3.y;
			v2Z2 = vec3.z;
			var v12X;
			var v12Y;
			var v12Z;
			v12X = v2X2 - v1X2;
			v12Y = v2Y2 - v1Y2;
			v12Z = v2Z2 - v1Z2;
			var t = v12X * v1X2 + v12Y * v1Y2 + v12Z * v1Z2;
			t = -t / (v12X * v12X + v12Y * v12Y + v12Z * v12Z);
			var b;
			if(t < 0) {
				out.x = v1X2;
				out.y = v1Y2;
				out.z = v1Z2;
				b = 1;
			} else if(t > 1) {
				out.x = v2X2;
				out.y = v2Y2;
				out.z = v2Z2;
				b = 2;
			} else {
				var pX;
				var pY;
				var pZ;
				pX = v1X2 + v12X * t;
				pY = v1Y2 + v12Y * t;
				pZ = v1Z2 + v12Z * t;
				out.x = pX;
				out.y = pY;
				out.z = pZ;
				b = 3;
			}
			mini1 = b;
			mind1 = out.x * out.x + out.y * out.y + out.z * out.z;
			minvX1 = out.x;
			minvY1 = out.y;
			minvZ1 = out.z;
		}
		if(v2X1 * n23X + v2Y1 * n23Y + v2Z1 * n23Z < 0) {
			var v1X2;
			var v1Y2;
			var v1Z2;
			var v2X1;
			var v2Y1;
			var v2Z1;
			v1X2 = vec3.x;
			v1Y2 = vec3.y;
			v1Z2 = vec3.z;
			v2X1 = vec4.x;
			v2Y1 = vec4.y;
			v2Z1 = vec4.z;
			var v12X;
			var v12Y;
			var v12Z;
			v12X = v2X1 - v1X2;
			v12Y = v2Y1 - v1Y2;
			v12Z = v2Z1 - v1Z2;
			var t = v12X * v1X2 + v12Y * v1Y2 + v12Z * v1Z2;
			t = -t / (v12X * v12X + v12Y * v12Y + v12Z * v12Z);
			var b;
			if(t < 0) {
				out.x = v1X2;
				out.y = v1Y2;
				out.z = v1Z2;
				b = 1;
			} else if(t > 1) {
				out.x = v2X1;
				out.y = v2Y1;
				out.z = v2Z1;
				b = 2;
			} else {
				var pX;
				var pY;
				var pZ;
				pX = v1X2 + v12X * t;
				pY = v1Y2 + v12Y * t;
				pZ = v1Z2 + v12Z * t;
				out.x = pX;
				out.y = pY;
				out.z = pZ;
				b = 3;
			}
			var d = out.x * out.x + out.y * out.y + out.z * out.z;
			if(mind1 < 0 || d < mind1) {
				mini1 = b << 1;
				mind1 = d;
				minvX1 = out.x;
				minvY1 = out.y;
				minvZ1 = out.z;
			}
		}
		if(v3X * n31X + v3Y * n31Y + v3Z * n31Z < 0) {
			var v1X2;
			var v1Y2;
			var v1Z2;
			var v2X1;
			var v2Y1;
			var v2Z1;
			v1X2 = vec1.x;
			v1Y2 = vec1.y;
			v1Z2 = vec1.z;
			v2X1 = vec4.x;
			v2Y1 = vec4.y;
			v2Z1 = vec4.z;
			var v12X;
			var v12Y;
			var v12Z;
			v12X = v2X1 - v1X2;
			v12Y = v2Y1 - v1Y2;
			v12Z = v2Z1 - v1Z2;
			var t = v12X * v1X2 + v12Y * v1Y2 + v12Z * v1Z2;
			t = -t / (v12X * v12X + v12Y * v12Y + v12Z * v12Z);
			var b;
			if(t < 0) {
				out.x = v1X2;
				out.y = v1Y2;
				out.z = v1Z2;
				b = 1;
			} else if(t > 1) {
				out.x = v2X1;
				out.y = v2Y1;
				out.z = v2Z1;
				b = 2;
			} else {
				var pX;
				var pY;
				var pZ;
				pX = v1X2 + v12X * t;
				pY = v1Y2 + v12Y * t;
				pZ = v1Z2 + v12Z * t;
				out.x = pX;
				out.y = pY;
				out.z = pZ;
				b = 3;
			}
			var d = out.x * out.x + out.y * out.y + out.z * out.z;
			if(mind1 < 0 || d < mind1) {
				mini1 = b & 1 | (b & 2) << 1;
				mind1 = d;
				minvX1 = out.x;
				minvY1 = out.y;
				minvZ1 = out.z;
			}
		}
		var b;
		if(mind1 > 0) {
			out.x = minvX1;
			out.y = minvY1;
			out.z = minvZ1;
			b = mini1;
		} else {
			var l = nX * nX + nY * nY + nZ * nZ;
			if(l > 0) {
				l = 1 / Math.sqrt(l);
			}
			nX *= l;
			nY *= l;
			nZ *= l;
			var l2 = nX * nX + nY * nY + nZ * nZ;
			l2 = (v1X1 * nX + v1Y1 * nY + v1Z1 * nZ) / l2;
			minvX1 = nX * l2;
			minvY1 = nY * l2;
			minvZ1 = nZ * l2;
			out.x = minvX1;
			out.y = minvY1;
			out.z = minvZ1;
			b = 7;
		}
		var d = out.x * out.x + out.y * out.y + out.z * out.z;
		if(mind < 0 || d < mind) {
			mini = b & 1 | (b & 6) << 1;
			mind = d;
			minvX = out.x;
			minvY = out.y;
			minvZ = out.z;
		}
	}
	if((v1X * n142X + v1Y * n142Y + v1Z * n142Z) * sign < 0) {
		var v1X;
		var v1Y;
		var v1Z;
		var v2X1;
		var v2Y1;
		var v2Z1;
		var v3X;
		var v3Y;
		var v3Z;
		var v12X;
		var v12Y;
		var v12Z;
		var v23X;
		var v23Y;
		var v23Z;
		var v31X;
		var v31Y;
		var v31Z;
		v1X = vec1.x;
		v1Y = vec1.y;
		v1Z = vec1.z;
		v2X1 = vec2.x;
		v2Y1 = vec2.y;
		v2Z1 = vec2.z;
		v3X = vec4.x;
		v3Y = vec4.y;
		v3Z = vec4.z;
		v12X = v2X1 - v1X;
		v12Y = v2Y1 - v1Y;
		v12Z = v2Z1 - v1Z;
		v23X = v3X - v2X1;
		v23Y = v3Y - v2Y1;
		v23Z = v3Z - v2Z1;
		v31X = v1X - v3X;
		v31Y = v1Y - v3Y;
		v31Z = v1Z - v3Z;
		var nX;
		var nY;
		var nZ;
		nX = v12Y * v23Z - v12Z * v23Y;
		nY = v12Z * v23X - v12X * v23Z;
		nZ = v12X * v23Y - v12Y * v23X;
		var n12X;
		var n12Y;
		var n12Z;
		var n23X;
		var n23Y;
		var n23Z;
		var n31X;
		var n31Y;
		var n31Z;
		n12X = v12Y * nZ - v12Z * nY;
		n12Y = v12Z * nX - v12X * nZ;
		n12Z = v12X * nY - v12Y * nX;
		n23X = v23Y * nZ - v23Z * nY;
		n23Y = v23Z * nX - v23X * nZ;
		n23Z = v23X * nY - v23Y * nX;
		n31X = v31Y * nZ - v31Z * nY;
		n31Y = v31Z * nX - v31X * nZ;
		n31Z = v31X * nY - v31Y * nX;
		var mind1 = -1;
		var minvX1;
		var minvY1;
		var minvZ1;
		var mini1 = 0;
		minvX1 = 0;
		minvY1 = 0;
		minvZ1 = 0;
		if(v1X * n12X + v1Y * n12Y + v1Z * n12Z < 0) {
			var v1X1;
			var v1Y1;
			var v1Z1;
			var v2X2;
			var v2Y2;
			var v2Z2;
			v1X1 = vec1.x;
			v1Y1 = vec1.y;
			v1Z1 = vec1.z;
			v2X2 = vec2.x;
			v2Y2 = vec2.y;
			v2Z2 = vec2.z;
			var v12X;
			var v12Y;
			var v12Z;
			v12X = v2X2 - v1X1;
			v12Y = v2Y2 - v1Y1;
			v12Z = v2Z2 - v1Z1;
			var t = v12X * v1X1 + v12Y * v1Y1 + v12Z * v1Z1;
			t = -t / (v12X * v12X + v12Y * v12Y + v12Z * v12Z);
			var b;
			if(t < 0) {
				out.x = v1X1;
				out.y = v1Y1;
				out.z = v1Z1;
				b = 1;
			} else if(t > 1) {
				out.x = v2X2;
				out.y = v2Y2;
				out.z = v2Z2;
				b = 2;
			} else {
				var pX;
				var pY;
				var pZ;
				pX = v1X1 + v12X * t;
				pY = v1Y1 + v12Y * t;
				pZ = v1Z1 + v12Z * t;
				out.x = pX;
				out.y = pY;
				out.z = pZ;
				b = 3;
			}
			mini1 = b;
			mind1 = out.x * out.x + out.y * out.y + out.z * out.z;
			minvX1 = out.x;
			minvY1 = out.y;
			minvZ1 = out.z;
		}
		if(v2X1 * n23X + v2Y1 * n23Y + v2Z1 * n23Z < 0) {
			var v1X1;
			var v1Y1;
			var v1Z1;
			var v2X1;
			var v2Y1;
			var v2Z1;
			v1X1 = vec2.x;
			v1Y1 = vec2.y;
			v1Z1 = vec2.z;
			v2X1 = vec4.x;
			v2Y1 = vec4.y;
			v2Z1 = vec4.z;
			var v12X;
			var v12Y;
			var v12Z;
			v12X = v2X1 - v1X1;
			v12Y = v2Y1 - v1Y1;
			v12Z = v2Z1 - v1Z1;
			var t = v12X * v1X1 + v12Y * v1Y1 + v12Z * v1Z1;
			t = -t / (v12X * v12X + v12Y * v12Y + v12Z * v12Z);
			var b;
			if(t < 0) {
				out.x = v1X1;
				out.y = v1Y1;
				out.z = v1Z1;
				b = 1;
			} else if(t > 1) {
				out.x = v2X1;
				out.y = v2Y1;
				out.z = v2Z1;
				b = 2;
			} else {
				var pX;
				var pY;
				var pZ;
				pX = v1X1 + v12X * t;
				pY = v1Y1 + v12Y * t;
				pZ = v1Z1 + v12Z * t;
				out.x = pX;
				out.y = pY;
				out.z = pZ;
				b = 3;
			}
			var d = out.x * out.x + out.y * out.y + out.z * out.z;
			if(mind1 < 0 || d < mind1) {
				mini1 = b << 1;
				mind1 = d;
				minvX1 = out.x;
				minvY1 = out.y;
				minvZ1 = out.z;
			}
		}
		if(v3X * n31X + v3Y * n31Y + v3Z * n31Z < 0) {
			var v1X1;
			var v1Y1;
			var v1Z1;
			var v2X1;
			var v2Y1;
			var v2Z1;
			v1X1 = vec1.x;
			v1Y1 = vec1.y;
			v1Z1 = vec1.z;
			v2X1 = vec4.x;
			v2Y1 = vec4.y;
			v2Z1 = vec4.z;
			var v12X;
			var v12Y;
			var v12Z;
			v12X = v2X1 - v1X1;
			v12Y = v2Y1 - v1Y1;
			v12Z = v2Z1 - v1Z1;
			var t = v12X * v1X1 + v12Y * v1Y1 + v12Z * v1Z1;
			t = -t / (v12X * v12X + v12Y * v12Y + v12Z * v12Z);
			var b;
			if(t < 0) {
				out.x = v1X1;
				out.y = v1Y1;
				out.z = v1Z1;
				b = 1;
			} else if(t > 1) {
				out.x = v2X1;
				out.y = v2Y1;
				out.z = v2Z1;
				b = 2;
			} else {
				var pX;
				var pY;
				var pZ;
				pX = v1X1 + v12X * t;
				pY = v1Y1 + v12Y * t;
				pZ = v1Z1 + v12Z * t;
				out.x = pX;
				out.y = pY;
				out.z = pZ;
				b = 3;
			}
			var d = out.x * out.x + out.y * out.y + out.z * out.z;
			if(mind1 < 0 || d < mind1) {
				mini1 = b & 1 | (b & 2) << 1;
				mind1 = d;
				minvX1 = out.x;
				minvY1 = out.y;
				minvZ1 = out.z;
			}
		}
		var b;
		if(mind1 > 0) {
			out.x = minvX1;
			out.y = minvY1;
			out.z = minvZ1;
			b = mini1;
		} else {
			var l = nX * nX + nY * nY + nZ * nZ;
			if(l > 0) {
				l = 1 / Math.sqrt(l);
			}
			nX *= l;
			nY *= l;
			nZ *= l;
			var l2 = nX * nX + nY * nY + nZ * nZ;
			l2 = (v1X * nX + v1Y * nY + v1Z * nZ) / l2;
			minvX1 = nX * l2;
			minvY1 = nY * l2;
			minvZ1 = nZ * l2;
			out.x = minvX1;
			out.y = minvY1;
			out.z = minvZ1;
			b = 7;
		}
		var d = out.x * out.x + out.y * out.y + out.z * out.z;
		if(mind < 0 || d < mind) {
			mini = b & 3 | (b & 4) << 1;
			mind = d;
			minvX = out.x;
			minvY = out.y;
			minvZ = out.z;
		}
	}
	if((v2X * n243X + v2Y * n243Y + v2Z * n243Z) * sign < 0) {
		var v1X;
		var v1Y;
		var v1Z;
		var v2X;
		var v2Y;
		var v2Z;
		var v3X;
		var v3Y;
		var v3Z;
		var v12X;
		var v12Y;
		var v12Z;
		var v23X;
		var v23Y;
		var v23Z;
		var v31X;
		var v31Y;
		var v31Z;
		v1X = vec2.x;
		v1Y = vec2.y;
		v1Z = vec2.z;
		v2X = vec3.x;
		v2Y = vec3.y;
		v2Z = vec3.z;
		v3X = vec4.x;
		v3Y = vec4.y;
		v3Z = vec4.z;
		v12X = v2X - v1X;
		v12Y = v2Y - v1Y;
		v12Z = v2Z - v1Z;
		v23X = v3X - v2X;
		v23Y = v3Y - v2Y;
		v23Z = v3Z - v2Z;
		v31X = v1X - v3X;
		v31Y = v1Y - v3Y;
		v31Z = v1Z - v3Z;
		var nX;
		var nY;
		var nZ;
		nX = v12Y * v23Z - v12Z * v23Y;
		nY = v12Z * v23X - v12X * v23Z;
		nZ = v12X * v23Y - v12Y * v23X;
		var n12X;
		var n12Y;
		var n12Z;
		var n23X;
		var n23Y;
		var n23Z;
		var n31X;
		var n31Y;
		var n31Z;
		n12X = v12Y * nZ - v12Z * nY;
		n12Y = v12Z * nX - v12X * nZ;
		n12Z = v12X * nY - v12Y * nX;
		n23X = v23Y * nZ - v23Z * nY;
		n23Y = v23Z * nX - v23X * nZ;
		n23Z = v23X * nY - v23Y * nX;
		n31X = v31Y * nZ - v31Z * nY;
		n31Y = v31Z * nX - v31X * nZ;
		n31Z = v31X * nY - v31Y * nX;
		var mind1 = -1;
		var minvX1;
		var minvY1;
		var minvZ1;
		var mini1 = 0;
		minvX1 = 0;
		minvY1 = 0;
		minvZ1 = 0;
		if(v1X * n12X + v1Y * n12Y + v1Z * n12Z < 0) {
			var v1X1;
			var v1Y1;
			var v1Z1;
			var v2X1;
			var v2Y1;
			var v2Z1;
			v1X1 = vec2.x;
			v1Y1 = vec2.y;
			v1Z1 = vec2.z;
			v2X1 = vec3.x;
			v2Y1 = vec3.y;
			v2Z1 = vec3.z;
			var v12X;
			var v12Y;
			var v12Z;
			v12X = v2X1 - v1X1;
			v12Y = v2Y1 - v1Y1;
			v12Z = v2Z1 - v1Z1;
			var t = v12X * v1X1 + v12Y * v1Y1 + v12Z * v1Z1;
			t = -t / (v12X * v12X + v12Y * v12Y + v12Z * v12Z);
			var b;
			if(t < 0) {
				out.x = v1X1;
				out.y = v1Y1;
				out.z = v1Z1;
				b = 1;
			} else if(t > 1) {
				out.x = v2X1;
				out.y = v2Y1;
				out.z = v2Z1;
				b = 2;
			} else {
				var pX;
				var pY;
				var pZ;
				pX = v1X1 + v12X * t;
				pY = v1Y1 + v12Y * t;
				pZ = v1Z1 + v12Z * t;
				out.x = pX;
				out.y = pY;
				out.z = pZ;
				b = 3;
			}
			mini1 = b;
			mind1 = out.x * out.x + out.y * out.y + out.z * out.z;
			minvX1 = out.x;
			minvY1 = out.y;
			minvZ1 = out.z;
		}
		if(v2X * n23X + v2Y * n23Y + v2Z * n23Z < 0) {
			var v1X1;
			var v1Y1;
			var v1Z1;
			var v2X;
			var v2Y;
			var v2Z;
			v1X1 = vec3.x;
			v1Y1 = vec3.y;
			v1Z1 = vec3.z;
			v2X = vec4.x;
			v2Y = vec4.y;
			v2Z = vec4.z;
			var v12X;
			var v12Y;
			var v12Z;
			v12X = v2X - v1X1;
			v12Y = v2Y - v1Y1;
			v12Z = v2Z - v1Z1;
			var t = v12X * v1X1 + v12Y * v1Y1 + v12Z * v1Z1;
			t = -t / (v12X * v12X + v12Y * v12Y + v12Z * v12Z);
			var b;
			if(t < 0) {
				out.x = v1X1;
				out.y = v1Y1;
				out.z = v1Z1;
				b = 1;
			} else if(t > 1) {
				out.x = v2X;
				out.y = v2Y;
				out.z = v2Z;
				b = 2;
			} else {
				var pX;
				var pY;
				var pZ;
				pX = v1X1 + v12X * t;
				pY = v1Y1 + v12Y * t;
				pZ = v1Z1 + v12Z * t;
				out.x = pX;
				out.y = pY;
				out.z = pZ;
				b = 3;
			}
			var d = out.x * out.x + out.y * out.y + out.z * out.z;
			if(mind1 < 0 || d < mind1) {
				mini1 = b << 1;
				mind1 = d;
				minvX1 = out.x;
				minvY1 = out.y;
				minvZ1 = out.z;
			}
		}
		if(v3X * n31X + v3Y * n31Y + v3Z * n31Z < 0) {
			var v1X1;
			var v1Y1;
			var v1Z1;
			var v2X;
			var v2Y;
			var v2Z;
			v1X1 = vec2.x;
			v1Y1 = vec2.y;
			v1Z1 = vec2.z;
			v2X = vec4.x;
			v2Y = vec4.y;
			v2Z = vec4.z;
			var v12X;
			var v12Y;
			var v12Z;
			v12X = v2X - v1X1;
			v12Y = v2Y - v1Y1;
			v12Z = v2Z - v1Z1;
			var t = v12X * v1X1 + v12Y * v1Y1 + v12Z * v1Z1;
			t = -t / (v12X * v12X + v12Y * v12Y + v12Z * v12Z);
			var b;
			if(t < 0) {
				out.x = v1X1;
				out.y = v1Y1;
				out.z = v1Z1;
				b = 1;
			} else if(t > 1) {
				out.x = v2X;
				out.y = v2Y;
				out.z = v2Z;
				b = 2;
			} else {
				var pX;
				var pY;
				var pZ;
				pX = v1X1 + v12X * t;
				pY = v1Y1 + v12Y * t;
				pZ = v1Z1 + v12Z * t;
				out.x = pX;
				out.y = pY;
				out.z = pZ;
				b = 3;
			}
			var d = out.x * out.x + out.y * out.y + out.z * out.z;
			if(mind1 < 0 || d < mind1) {
				mini1 = b & 1 | (b & 2) << 1;
				mind1 = d;
				minvX1 = out.x;
				minvY1 = out.y;
				minvZ1 = out.z;
			}
		}
		var b;
		if(mind1 > 0) {
			out.x = minvX1;
			out.y = minvY1;
			out.z = minvZ1;
			b = mini1;
		} else {
			var l = nX * nX + nY * nY + nZ * nZ;
			if(l > 0) {
				l = 1 / Math.sqrt(l);
			}
			nX *= l;
			nY *= l;
			nZ *= l;
			var l2 = nX * nX + nY * nY + nZ * nZ;
			l2 = (v1X * nX + v1Y * nY + v1Z * nZ) / l2;
			minvX1 = nX * l2;
			minvY1 = nY * l2;
			minvZ1 = nZ * l2;
			out.x = minvX1;
			out.y = minvY1;
			out.z = minvZ1;
			b = 7;
		}
		var d = out.x * out.x + out.y * out.y + out.z * out.z;
		if(mind < 0 || d < mind) {
			mini = b << 1;
			mind = d;
			minvX = out.x;
			minvY = out.y;
			minvZ = out.z;
		}
	}
	if(mind > 0) {
		out.x = minvX;
		out.y = minvY;
		out.z = minvZ;
		return mini;
	}
	out.zero();
	return 15;
};
var oimo_common_Mat3 = function(e00,e01,e02,e10,e11,e12,e20,e21,e22) {
	if(e22 == null) {
		e22 = 1;
	}
	if(e21 == null) {
		e21 = 0;
	}
	if(e20 == null) {
		e20 = 0;
	}
	if(e12 == null) {
		e12 = 0;
	}
	if(e11 == null) {
		e11 = 1;
	}
	if(e10 == null) {
		e10 = 0;
	}
	if(e02 == null) {
		e02 = 0;
	}
	if(e01 == null) {
		e01 = 0;
	}
	if(e00 == null) {
		e00 = 1;
	}
	this.e00 = e00;
	this.e01 = e01;
	this.e02 = e02;
	this.e10 = e10;
	this.e11 = e11;
	this.e12 = e12;
	this.e20 = e20;
	this.e21 = e21;
	this.e22 = e22;
	oimo_common_Mat3.numCreations++;
};
oimo_common_Mat3.__name__ = true;
oimo_common_Mat3.prototype = {
	init: function(e00,e01,e02,e10,e11,e12,e20,e21,e22) {
		this.e00 = e00;
		this.e01 = e01;
		this.e02 = e02;
		this.e10 = e10;
		this.e11 = e11;
		this.e12 = e12;
		this.e20 = e20;
		this.e21 = e21;
		this.e22 = e22;
		return this;
	}
	,identity: function() {
		this.e00 = 1;
		this.e01 = 0;
		this.e02 = 0;
		this.e10 = 0;
		this.e11 = 1;
		this.e12 = 0;
		this.e20 = 0;
		this.e21 = 0;
		this.e22 = 1;
		return this;
	}
	,add: function(m) {
		return new oimo_common_Mat3(this.e00 + m.e00,this.e01 + m.e01,this.e02 + m.e02,this.e10 + m.e10,this.e11 + m.e11,this.e12 + m.e12,this.e20 + m.e20,this.e21 + m.e21,this.e22 + m.e22);
	}
	,sub: function(m) {
		return new oimo_common_Mat3(this.e00 - m.e00,this.e01 - m.e01,this.e02 - m.e02,this.e10 - m.e10,this.e11 - m.e11,this.e12 - m.e12,this.e20 - m.e20,this.e21 - m.e21,this.e22 - m.e22);
	}
	,scale: function(s) {
		return new oimo_common_Mat3(this.e00 * s,this.e01 * s,this.e02 * s,this.e10 * s,this.e11 * s,this.e12 * s,this.e20 * s,this.e21 * s,this.e22 * s);
	}
	,mul: function(m) {
		return new oimo_common_Mat3(this.e00 * m.e00 + this.e01 * m.e10 + this.e02 * m.e20,this.e00 * m.e01 + this.e01 * m.e11 + this.e02 * m.e21,this.e00 * m.e02 + this.e01 * m.e12 + this.e02 * m.e22,this.e10 * m.e00 + this.e11 * m.e10 + this.e12 * m.e20,this.e10 * m.e01 + this.e11 * m.e11 + this.e12 * m.e21,this.e10 * m.e02 + this.e11 * m.e12 + this.e12 * m.e22,this.e20 * m.e00 + this.e21 * m.e10 + this.e22 * m.e20,this.e20 * m.e01 + this.e21 * m.e11 + this.e22 * m.e21,this.e20 * m.e02 + this.e21 * m.e12 + this.e22 * m.e22);
	}
	,addEq: function(m) {
		this.e00 += m.e00;
		this.e01 += m.e01;
		this.e02 += m.e02;
		this.e10 += m.e10;
		this.e11 += m.e11;
		this.e12 += m.e12;
		this.e20 += m.e20;
		this.e21 += m.e21;
		this.e22 += m.e22;
		return this;
	}
	,subEq: function(m) {
		this.e00 -= m.e00;
		this.e01 -= m.e01;
		this.e02 -= m.e02;
		this.e10 -= m.e10;
		this.e11 -= m.e11;
		this.e12 -= m.e12;
		this.e20 -= m.e20;
		this.e21 -= m.e21;
		this.e22 -= m.e22;
		return this;
	}
	,scaleEq: function(s) {
		this.e00 *= s;
		this.e01 *= s;
		this.e02 *= s;
		this.e10 *= s;
		this.e11 *= s;
		this.e12 *= s;
		this.e20 *= s;
		this.e21 *= s;
		this.e22 *= s;
		return this;
	}
	,mulEq: function(m) {
		var e01 = this.e00 * m.e01 + this.e01 * m.e11 + this.e02 * m.e21;
		var e02 = this.e00 * m.e02 + this.e01 * m.e12 + this.e02 * m.e22;
		var e10 = this.e10 * m.e00 + this.e11 * m.e10 + this.e12 * m.e20;
		var e11 = this.e10 * m.e01 + this.e11 * m.e11 + this.e12 * m.e21;
		var e12 = this.e10 * m.e02 + this.e11 * m.e12 + this.e12 * m.e22;
		var e20 = this.e20 * m.e00 + this.e21 * m.e10 + this.e22 * m.e20;
		var e21 = this.e20 * m.e01 + this.e21 * m.e11 + this.e22 * m.e21;
		var e22 = this.e20 * m.e02 + this.e21 * m.e12 + this.e22 * m.e22;
		this.e00 = this.e00 * m.e00 + this.e01 * m.e10 + this.e02 * m.e20;
		this.e01 = e01;
		this.e02 = e02;
		this.e10 = e10;
		this.e11 = e11;
		this.e12 = e12;
		this.e20 = e20;
		this.e21 = e21;
		this.e22 = e22;
		return this;
	}
	,prependScale: function(sx,sy,sz) {
		return new oimo_common_Mat3(this.e00 * sx,this.e01 * sx,this.e02 * sx,this.e10 * sy,this.e11 * sy,this.e12 * sy,this.e20 * sz,this.e21 * sz,this.e22 * sz);
	}
	,appendScale: function(sx,sy,sz) {
		return new oimo_common_Mat3(this.e00 * sx,this.e01 * sy,this.e02 * sz,this.e10 * sx,this.e11 * sy,this.e12 * sz,this.e20 * sx,this.e21 * sy,this.e22 * sz);
	}
	,prependRotation: function(rad,axisX,axisY,axisZ) {
		var s = Math.sin(rad);
		var c = Math.cos(rad);
		var c1 = 1 - c;
		var r00 = axisX * axisX * c1 + c;
		var r01 = axisX * axisY * c1 - axisZ * s;
		var r02 = axisX * axisZ * c1 + axisY * s;
		var r10 = axisY * axisX * c1 + axisZ * s;
		var r11 = axisY * axisY * c1 + c;
		var r12 = axisY * axisZ * c1 - axisX * s;
		var r20 = axisZ * axisX * c1 - axisY * s;
		var r21 = axisZ * axisY * c1 + axisX * s;
		var r22 = axisZ * axisZ * c1 + c;
		return new oimo_common_Mat3(r00 * this.e00 + r01 * this.e10 + r02 * this.e20,r00 * this.e01 + r01 * this.e11 + r02 * this.e21,r00 * this.e02 + r01 * this.e12 + r02 * this.e22,r10 * this.e00 + r11 * this.e10 + r12 * this.e20,r10 * this.e01 + r11 * this.e11 + r12 * this.e21,r10 * this.e02 + r11 * this.e12 + r12 * this.e22,r20 * this.e00 + r21 * this.e10 + r22 * this.e20,r20 * this.e01 + r21 * this.e11 + r22 * this.e21,r20 * this.e02 + r21 * this.e12 + r22 * this.e22);
	}
	,appendRotation: function(rad,axisX,axisY,axisZ) {
		var s = Math.sin(rad);
		var c = Math.cos(rad);
		var c1 = 1 - c;
		var r00 = axisX * axisX * c1 + c;
		var r01 = axisX * axisY * c1 - axisZ * s;
		var r02 = axisX * axisZ * c1 + axisY * s;
		var r10 = axisY * axisX * c1 + axisZ * s;
		var r11 = axisY * axisY * c1 + c;
		var r12 = axisY * axisZ * c1 - axisX * s;
		var r20 = axisZ * axisX * c1 - axisY * s;
		var r21 = axisZ * axisY * c1 + axisX * s;
		var r22 = axisZ * axisZ * c1 + c;
		return new oimo_common_Mat3(this.e00 * r00 + this.e01 * r10 + this.e02 * r20,this.e00 * r01 + this.e01 * r11 + this.e02 * r21,this.e00 * r02 + this.e01 * r12 + this.e02 * r22,this.e10 * r00 + this.e11 * r10 + this.e12 * r20,this.e10 * r01 + this.e11 * r11 + this.e12 * r21,this.e10 * r02 + this.e11 * r12 + this.e12 * r22,this.e20 * r00 + this.e21 * r10 + this.e22 * r20,this.e20 * r01 + this.e21 * r11 + this.e22 * r21,this.e20 * r02 + this.e21 * r12 + this.e22 * r22);
	}
	,prependScaleEq: function(sx,sy,sz) {
		this.e00 *= sx;
		this.e01 *= sx;
		this.e02 *= sx;
		this.e10 *= sy;
		this.e11 *= sy;
		this.e12 *= sy;
		this.e20 *= sz;
		this.e21 *= sz;
		this.e22 *= sz;
		return this;
	}
	,appendScaleEq: function(sx,sy,sz) {
		this.e00 *= sx;
		this.e01 *= sy;
		this.e02 *= sz;
		this.e10 *= sx;
		this.e11 *= sy;
		this.e12 *= sz;
		this.e20 *= sx;
		this.e21 *= sy;
		this.e22 *= sz;
		return this;
	}
	,prependRotationEq: function(rad,axisX,axisY,axisZ) {
		var s = Math.sin(rad);
		var c = Math.cos(rad);
		var c1 = 1 - c;
		var r00 = axisX * axisX * c1 + c;
		var r01 = axisX * axisY * c1 - axisZ * s;
		var r02 = axisX * axisZ * c1 + axisY * s;
		var r10 = axisY * axisX * c1 + axisZ * s;
		var r11 = axisY * axisY * c1 + c;
		var r12 = axisY * axisZ * c1 - axisX * s;
		var r20 = axisZ * axisX * c1 - axisY * s;
		var r21 = axisZ * axisY * c1 + axisX * s;
		var r22 = axisZ * axisZ * c1 + c;
		var e10 = r10 * this.e00 + r11 * this.e10 + r12 * this.e20;
		var e11 = r10 * this.e01 + r11 * this.e11 + r12 * this.e21;
		var e12 = r10 * this.e02 + r11 * this.e12 + r12 * this.e22;
		var e20 = r20 * this.e00 + r21 * this.e10 + r22 * this.e20;
		var e21 = r20 * this.e01 + r21 * this.e11 + r22 * this.e21;
		var e22 = r20 * this.e02 + r21 * this.e12 + r22 * this.e22;
		this.e00 = r00 * this.e00 + r01 * this.e10 + r02 * this.e20;
		this.e01 = r00 * this.e01 + r01 * this.e11 + r02 * this.e21;
		this.e02 = r00 * this.e02 + r01 * this.e12 + r02 * this.e22;
		this.e10 = e10;
		this.e11 = e11;
		this.e12 = e12;
		this.e20 = e20;
		this.e21 = e21;
		this.e22 = e22;
		return this;
	}
	,appendRotationEq: function(rad,axisX,axisY,axisZ) {
		var s = Math.sin(rad);
		var c = Math.cos(rad);
		var c1 = 1 - c;
		var r00 = axisX * axisX * c1 + c;
		var r01 = axisX * axisY * c1 - axisZ * s;
		var r02 = axisX * axisZ * c1 + axisY * s;
		var r10 = axisY * axisX * c1 + axisZ * s;
		var r11 = axisY * axisY * c1 + c;
		var r12 = axisY * axisZ * c1 - axisX * s;
		var r20 = axisZ * axisX * c1 - axisY * s;
		var r21 = axisZ * axisY * c1 + axisX * s;
		var r22 = axisZ * axisZ * c1 + c;
		var e01 = this.e00 * r01 + this.e01 * r11 + this.e02 * r21;
		var e02 = this.e00 * r02 + this.e01 * r12 + this.e02 * r22;
		var e11 = this.e10 * r01 + this.e11 * r11 + this.e12 * r21;
		var e12 = this.e10 * r02 + this.e11 * r12 + this.e12 * r22;
		var e21 = this.e20 * r01 + this.e21 * r11 + this.e22 * r21;
		var e22 = this.e20 * r02 + this.e21 * r12 + this.e22 * r22;
		this.e00 = this.e00 * r00 + this.e01 * r10 + this.e02 * r20;
		this.e01 = e01;
		this.e02 = e02;
		this.e10 = this.e10 * r00 + this.e11 * r10 + this.e12 * r20;
		this.e11 = e11;
		this.e12 = e12;
		this.e20 = this.e20 * r00 + this.e21 * r10 + this.e22 * r20;
		this.e21 = e21;
		this.e22 = e22;
		return this;
	}
	,transpose: function() {
		return new oimo_common_Mat3(this.e00,this.e10,this.e20,this.e01,this.e11,this.e21,this.e02,this.e12,this.e22);
	}
	,transposeEq: function() {
		var e10 = this.e01;
		var e20 = this.e02;
		var e21 = this.e12;
		this.e00 = this.e00;
		this.e01 = this.e10;
		this.e02 = this.e20;
		this.e10 = e10;
		this.e11 = this.e11;
		this.e12 = this.e21;
		this.e20 = e20;
		this.e21 = e21;
		this.e22 = this.e22;
		return this;
	}
	,determinant: function() {
		return this.e00 * (this.e11 * this.e22 - this.e12 * this.e21) - this.e01 * (this.e10 * this.e22 - this.e12 * this.e20) + this.e02 * (this.e10 * this.e21 - this.e11 * this.e20);
	}
	,trace: function() {
		return this.e00 + this.e11 + this.e22;
	}
	,inverse: function() {
		var d00 = this.e11 * this.e22 - this.e12 * this.e21;
		var d01 = this.e10 * this.e22 - this.e12 * this.e20;
		var d02 = this.e10 * this.e21 - this.e11 * this.e20;
		var invDet = this.e00 * d00 - this.e01 * d01 + this.e02 * d02;
		if(invDet != 0) {
			invDet = 1 / invDet;
		}
		return new oimo_common_Mat3(d00 * invDet,-(this.e01 * this.e22 - this.e02 * this.e21) * invDet,(this.e01 * this.e12 - this.e02 * this.e11) * invDet,-d01 * invDet,(this.e00 * this.e22 - this.e02 * this.e20) * invDet,-(this.e00 * this.e12 - this.e02 * this.e10) * invDet,d02 * invDet,-(this.e00 * this.e21 - this.e01 * this.e20) * invDet,(this.e00 * this.e11 - this.e01 * this.e10) * invDet);
	}
	,inverseEq: function() {
		var d00 = this.e11 * this.e22 - this.e12 * this.e21;
		var d01 = this.e10 * this.e22 - this.e12 * this.e20;
		var d02 = this.e10 * this.e21 - this.e11 * this.e20;
		var invDet = this.e00 * d00 - this.e01 * d01 + this.e02 * d02;
		if(invDet != 0) {
			invDet = 1 / invDet;
		}
		var t02 = (this.e01 * this.e12 - this.e02 * this.e11) * invDet;
		var t11 = (this.e00 * this.e22 - this.e02 * this.e20) * invDet;
		var t12 = -(this.e00 * this.e12 - this.e02 * this.e10) * invDet;
		var t21 = -(this.e00 * this.e21 - this.e01 * this.e20) * invDet;
		var t22 = (this.e00 * this.e11 - this.e01 * this.e10) * invDet;
		this.e00 = d00 * invDet;
		this.e01 = -(this.e01 * this.e22 - this.e02 * this.e21) * invDet;
		this.e02 = t02;
		this.e10 = -d01 * invDet;
		this.e11 = t11;
		this.e12 = t12;
		this.e20 = d02 * invDet;
		this.e21 = t21;
		this.e22 = t22;
		return this;
	}
	,toArray: function(columnMajor) {
		if(columnMajor == null) {
			columnMajor = false;
		}
		if(columnMajor) {
			return [this.e00,this.e10,this.e20,this.e01,this.e11,this.e21,this.e02,this.e12,this.e22];
		} else {
			return [this.e00,this.e01,this.e02,this.e10,this.e11,this.e12,this.e20,this.e21,this.e22];
		}
	}
	,copyFrom: function(m) {
		this.e00 = m.e00;
		this.e01 = m.e01;
		this.e02 = m.e02;
		this.e10 = m.e10;
		this.e11 = m.e11;
		this.e12 = m.e12;
		this.e20 = m.e20;
		this.e21 = m.e21;
		this.e22 = m.e22;
		return this;
	}
	,clone: function() {
		return new oimo_common_Mat3(this.e00,this.e01,this.e02,this.e10,this.e11,this.e12,this.e20,this.e21,this.e22);
	}
	,fromQuat: function(q) {
		var x = q.x;
		var y = q.y;
		var z = q.z;
		var w = q.w;
		var x2 = 2 * x;
		var y2 = 2 * y;
		var z2 = 2 * z;
		var xx = x * x2;
		var yy = y * y2;
		var zz = z * z2;
		var xy = x * y2;
		var yz = y * z2;
		var xz = x * z2;
		var wx = w * x2;
		var wy = w * y2;
		var wz = w * z2;
		this.e00 = 1 - yy - zz;
		this.e01 = xy - wz;
		this.e02 = xz + wy;
		this.e10 = xy + wz;
		this.e11 = 1 - xx - zz;
		this.e12 = yz - wx;
		this.e20 = xz - wy;
		this.e21 = yz + wx;
		this.e22 = 1 - xx - yy;
		return this;
	}
	,toQuat: function() {
		var _this = new oimo_common_Quat();
		var e00 = this.e00;
		var e11 = this.e11;
		var e22 = this.e22;
		var t = e00 + e11 + e22;
		var s;
		if(t > 0) {
			s = Math.sqrt(t + 1);
			_this.w = 0.5 * s;
			s = 0.5 / s;
			_this.x = (this.e21 - this.e12) * s;
			_this.y = (this.e02 - this.e20) * s;
			_this.z = (this.e10 - this.e01) * s;
		} else if(e00 > e11) {
			if(e00 > e22) {
				s = Math.sqrt(e00 - e11 - e22 + 1);
				_this.x = 0.5 * s;
				s = 0.5 / s;
				_this.y = (this.e01 + this.e10) * s;
				_this.z = (this.e02 + this.e20) * s;
				_this.w = (this.e21 - this.e12) * s;
			} else {
				s = Math.sqrt(e22 - e00 - e11 + 1);
				_this.z = 0.5 * s;
				s = 0.5 / s;
				_this.x = (this.e02 + this.e20) * s;
				_this.y = (this.e12 + this.e21) * s;
				_this.w = (this.e10 - this.e01) * s;
			}
		} else if(e11 > e22) {
			s = Math.sqrt(e11 - e22 - e00 + 1);
			_this.y = 0.5 * s;
			s = 0.5 / s;
			_this.x = (this.e01 + this.e10) * s;
			_this.z = (this.e12 + this.e21) * s;
			_this.w = (this.e02 - this.e20) * s;
		} else {
			s = Math.sqrt(e22 - e00 - e11 + 1);
			_this.z = 0.5 * s;
			s = 0.5 / s;
			_this.x = (this.e02 + this.e20) * s;
			_this.y = (this.e12 + this.e21) * s;
			_this.w = (this.e10 - this.e01) * s;
		}
		return _this;
	}
	,fromEulerXyz: function(eulerAngles) {
		var sx = Math.sin(eulerAngles.x);
		var sy = Math.sin(eulerAngles.y);
		var sz = Math.sin(eulerAngles.z);
		var cx = Math.cos(eulerAngles.x);
		var cy = Math.cos(eulerAngles.y);
		var cz = Math.cos(eulerAngles.z);
		this.e00 = cy * cz;
		this.e01 = -cy * sz;
		this.e02 = sy;
		this.e10 = cx * sz + cz * sx * sy;
		this.e11 = cx * cz - sx * sy * sz;
		this.e12 = -cy * sx;
		this.e20 = sx * sz - cx * cz * sy;
		this.e21 = cz * sx + cx * sy * sz;
		this.e22 = cx * cy;
		return this;
	}
	,toEulerXyz: function() {
		var sy = this.e02;
		if(sy <= -1) {
			var xSubZ = Math.atan2(this.e21,this.e11);
			return new oimo_common_Vec3(xSubZ * 0.5,-1.570796326794895,-xSubZ * 0.5);
		}
		if(sy >= 1) {
			var xAddZ = Math.atan2(this.e21,this.e11);
			return new oimo_common_Vec3(xAddZ * 0.5,1.570796326794895,xAddZ * 0.5);
		}
		return new oimo_common_Vec3(Math.atan2(-this.e12,this.e22),Math.asin(sy),Math.atan2(-this.e01,this.e00));
	}
	,getRow: function(index) {
		if(index == 0) {
			return new oimo_common_Vec3(this.e00,this.e01,this.e02);
		} else if(index == 1) {
			return new oimo_common_Vec3(this.e10,this.e11,this.e12);
		} else if(index == 2) {
			return new oimo_common_Vec3(this.e20,this.e21,this.e22);
		} else {
			return null;
		}
	}
	,getCol: function(index) {
		if(index == 0) {
			return new oimo_common_Vec3(this.e00,this.e10,this.e20);
		} else if(index == 1) {
			return new oimo_common_Vec3(this.e01,this.e11,this.e21);
		} else if(index == 2) {
			return new oimo_common_Vec3(this.e02,this.e12,this.e22);
		} else {
			return null;
		}
	}
	,getRowTo: function(index,dst) {
		if(index == 0) {
			dst.init(this.e00,this.e01,this.e02);
		} else if(index == 1) {
			dst.init(this.e10,this.e11,this.e12);
		} else if(index == 2) {
			dst.init(this.e20,this.e21,this.e22);
		} else {
			dst.zero();
		}
	}
	,getColTo: function(index,dst) {
		if(index == 0) {
			dst.init(this.e00,this.e10,this.e20);
		} else if(index == 1) {
			dst.init(this.e01,this.e11,this.e21);
		} else if(index == 2) {
			dst.init(this.e02,this.e12,this.e22);
		} else {
			dst.zero();
		}
	}
	,fromRows: function(row0,row1,row2) {
		this.e00 = row0.x;
		this.e01 = row0.y;
		this.e02 = row0.z;
		this.e10 = row1.x;
		this.e11 = row1.y;
		this.e12 = row1.z;
		this.e20 = row2.x;
		this.e21 = row2.y;
		this.e22 = row2.z;
		return this;
	}
	,fromCols: function(col0,col1,col2) {
		this.e00 = col0.x;
		this.e01 = col1.x;
		this.e02 = col2.x;
		this.e10 = col0.y;
		this.e11 = col1.y;
		this.e12 = col2.y;
		this.e20 = col0.z;
		this.e21 = col1.z;
		this.e22 = col2.z;
		return this;
	}
	,toString: function() {
		return "Mat3[" + (this.e00 > 0 ? (this.e00 * 10000000 + 0.5 | 0) / 10000000 : (this.e00 * 10000000 - 0.5 | 0) / 10000000) + ", " + (this.e01 > 0 ? (this.e01 * 10000000 + 0.5 | 0) / 10000000 : (this.e01 * 10000000 - 0.5 | 0) / 10000000) + ", " + (this.e02 > 0 ? (this.e02 * 10000000 + 0.5 | 0) / 10000000 : (this.e02 * 10000000 - 0.5 | 0) / 10000000) + ",\n" + "     " + (this.e10 > 0 ? (this.e10 * 10000000 + 0.5 | 0) / 10000000 : (this.e10 * 10000000 - 0.5 | 0) / 10000000) + ", " + (this.e11 > 0 ? (this.e11 * 10000000 + 0.5 | 0) / 10000000 : (this.e11 * 10000000 - 0.5 | 0) / 10000000) + ", " + (this.e12 > 0 ? (this.e12 * 10000000 + 0.5 | 0) / 10000000 : (this.e12 * 10000000 - 0.5 | 0) / 10000000) + ",\n" + "     " + (this.e20 > 0 ? (this.e20 * 10000000 + 0.5 | 0) / 10000000 : (this.e20 * 10000000 - 0.5 | 0) / 10000000) + ", " + (this.e21 > 0 ? (this.e21 * 10000000 + 0.5 | 0) / 10000000 : (this.e21 * 10000000 - 0.5 | 0) / 10000000) + ", " + (this.e22 > 0 ? (this.e22 * 10000000 + 0.5 | 0) / 10000000 : (this.e22 * 10000000 - 0.5 | 0) / 10000000) + "]";
	}
	,__class__: oimo_common_Mat3
};
var oimo_common_Mat4 = function(e00,e01,e02,e03,e10,e11,e12,e13,e20,e21,e22,e23,e30,e31,e32,e33) {
	if(e33 == null) {
		e33 = 1;
	}
	if(e32 == null) {
		e32 = 0;
	}
	if(e31 == null) {
		e31 = 0;
	}
	if(e30 == null) {
		e30 = 0;
	}
	if(e23 == null) {
		e23 = 0;
	}
	if(e22 == null) {
		e22 = 1;
	}
	if(e21 == null) {
		e21 = 0;
	}
	if(e20 == null) {
		e20 = 0;
	}
	if(e13 == null) {
		e13 = 0;
	}
	if(e12 == null) {
		e12 = 0;
	}
	if(e11 == null) {
		e11 = 1;
	}
	if(e10 == null) {
		e10 = 0;
	}
	if(e03 == null) {
		e03 = 0;
	}
	if(e02 == null) {
		e02 = 0;
	}
	if(e01 == null) {
		e01 = 0;
	}
	if(e00 == null) {
		e00 = 1;
	}
	this.e00 = e00;
	this.e01 = e01;
	this.e02 = e02;
	this.e03 = e03;
	this.e10 = e10;
	this.e11 = e11;
	this.e12 = e12;
	this.e13 = e13;
	this.e20 = e20;
	this.e21 = e21;
	this.e22 = e22;
	this.e23 = e23;
	this.e30 = e30;
	this.e31 = e31;
	this.e32 = e32;
	this.e33 = e33;
	oimo_common_Mat4.numCreations++;
};
oimo_common_Mat4.__name__ = true;
oimo_common_Mat4.prototype = {
	init: function(e00,e01,e02,e03,e10,e11,e12,e13,e20,e21,e22,e23,e30,e31,e32,e33) {
		this.e00 = e00;
		this.e01 = e01;
		this.e02 = e02;
		this.e03 = e03;
		this.e10 = e10;
		this.e11 = e11;
		this.e12 = e12;
		this.e13 = e13;
		this.e20 = e20;
		this.e21 = e21;
		this.e22 = e22;
		this.e23 = e23;
		this.e30 = e30;
		this.e31 = e31;
		this.e32 = e32;
		this.e33 = e33;
		return this;
	}
	,identity: function() {
		this.e00 = 1;
		this.e01 = 0;
		this.e02 = 0;
		this.e03 = 0;
		this.e10 = 0;
		this.e11 = 1;
		this.e12 = 0;
		this.e13 = 0;
		this.e20 = 0;
		this.e21 = 0;
		this.e22 = 1;
		this.e23 = 0;
		this.e30 = 0;
		this.e31 = 0;
		this.e32 = 0;
		this.e33 = 1;
		return this;
	}
	,add: function(m) {
		return new oimo_common_Mat4(this.e00 + m.e00,this.e01 + m.e01,this.e02 + m.e02,this.e03 + m.e03,this.e10 + m.e10,this.e11 + m.e11,this.e12 + m.e12,this.e13 + m.e13,this.e20 + m.e20,this.e21 + m.e21,this.e22 + m.e22,this.e23 + m.e23,this.e30 + m.e30,this.e31 + m.e31,this.e32 + m.e32,this.e33 + m.e33);
	}
	,sub: function(m) {
		return new oimo_common_Mat4(this.e00 - m.e00,this.e01 - m.e01,this.e02 - m.e02,this.e03 - m.e03,this.e10 - m.e10,this.e11 - m.e11,this.e12 - m.e12,this.e13 - m.e13,this.e20 - m.e20,this.e21 - m.e21,this.e22 - m.e22,this.e23 - m.e23,this.e30 - m.e30,this.e31 - m.e31,this.e32 - m.e32,this.e33 - m.e33);
	}
	,scale: function(s) {
		return new oimo_common_Mat4(this.e00 * s,this.e01 * s,this.e02 * s,this.e03 * s,this.e10 * s,this.e11 * s,this.e12 * s,this.e13 * s,this.e20 * s,this.e21 * s,this.e22 * s,this.e23 * s,this.e30 * s,this.e31 * s,this.e32 * s,this.e33 * s);
	}
	,mul: function(m) {
		return new oimo_common_Mat4(this.e00 * m.e00 + this.e01 * m.e10 + this.e02 * m.e20 + this.e03 * m.e30,this.e00 * m.e01 + this.e01 * m.e11 + this.e02 * m.e21 + this.e03 * m.e31,this.e00 * m.e02 + this.e01 * m.e12 + this.e02 * m.e22 + this.e03 * m.e32,this.e00 * m.e03 + this.e01 * m.e13 + this.e02 * m.e23 + this.e03 * m.e33,this.e10 * m.e00 + this.e11 * m.e10 + this.e12 * m.e20 + this.e13 * m.e30,this.e10 * m.e01 + this.e11 * m.e11 + this.e12 * m.e21 + this.e13 * m.e31,this.e10 * m.e02 + this.e11 * m.e12 + this.e12 * m.e22 + this.e13 * m.e32,this.e10 * m.e03 + this.e11 * m.e13 + this.e12 * m.e23 + this.e13 * m.e33,this.e20 * m.e00 + this.e21 * m.e10 + this.e22 * m.e20 + this.e23 * m.e30,this.e20 * m.e01 + this.e21 * m.e11 + this.e22 * m.e21 + this.e23 * m.e31,this.e20 * m.e02 + this.e21 * m.e12 + this.e22 * m.e22 + this.e23 * m.e32,this.e20 * m.e03 + this.e21 * m.e13 + this.e22 * m.e23 + this.e23 * m.e33,this.e30 * m.e00 + this.e31 * m.e10 + this.e32 * m.e20 + this.e33 * m.e30,this.e30 * m.e01 + this.e31 * m.e11 + this.e32 * m.e21 + this.e33 * m.e31,this.e30 * m.e02 + this.e31 * m.e12 + this.e32 * m.e22 + this.e33 * m.e32,this.e30 * m.e03 + this.e31 * m.e13 + this.e32 * m.e23 + this.e33 * m.e33);
	}
	,addEq: function(m) {
		this.e00 += m.e00;
		this.e01 += m.e01;
		this.e02 += m.e02;
		this.e03 += m.e03;
		this.e10 += m.e10;
		this.e11 += m.e11;
		this.e12 += m.e12;
		this.e13 += m.e13;
		this.e20 += m.e20;
		this.e21 += m.e21;
		this.e22 += m.e22;
		this.e23 += m.e23;
		this.e30 += m.e30;
		this.e31 += m.e31;
		this.e32 += m.e32;
		this.e33 += m.e33;
		return this;
	}
	,subEq: function(m) {
		this.e00 -= m.e00;
		this.e01 -= m.e01;
		this.e02 -= m.e02;
		this.e03 -= m.e03;
		this.e10 -= m.e10;
		this.e11 -= m.e11;
		this.e12 -= m.e12;
		this.e13 -= m.e13;
		this.e20 -= m.e20;
		this.e21 -= m.e21;
		this.e22 -= m.e22;
		this.e23 -= m.e23;
		this.e30 -= m.e30;
		this.e31 -= m.e31;
		this.e32 -= m.e32;
		this.e33 -= m.e33;
		return this;
	}
	,scaleEq: function(s) {
		this.e00 *= s;
		this.e01 *= s;
		this.e02 *= s;
		this.e03 *= s;
		this.e10 *= s;
		this.e11 *= s;
		this.e12 *= s;
		this.e13 *= s;
		this.e20 *= s;
		this.e21 *= s;
		this.e22 *= s;
		this.e23 *= s;
		this.e30 *= s;
		this.e31 *= s;
		this.e32 *= s;
		this.e33 *= s;
		return this;
	}
	,mulEq: function(m) {
		var e01 = this.e00 * m.e01 + this.e01 * m.e11 + this.e02 * m.e21 + this.e03 * m.e31;
		var e02 = this.e00 * m.e02 + this.e01 * m.e12 + this.e02 * m.e22 + this.e03 * m.e32;
		var e03 = this.e00 * m.e03 + this.e01 * m.e13 + this.e02 * m.e23 + this.e03 * m.e33;
		var e10 = this.e10 * m.e00 + this.e11 * m.e10 + this.e12 * m.e20 + this.e13 * m.e30;
		var e11 = this.e10 * m.e01 + this.e11 * m.e11 + this.e12 * m.e21 + this.e13 * m.e31;
		var e12 = this.e10 * m.e02 + this.e11 * m.e12 + this.e12 * m.e22 + this.e13 * m.e32;
		var e13 = this.e10 * m.e03 + this.e11 * m.e13 + this.e12 * m.e23 + this.e13 * m.e33;
		var e20 = this.e20 * m.e00 + this.e21 * m.e10 + this.e22 * m.e20 + this.e23 * m.e30;
		var e21 = this.e20 * m.e01 + this.e21 * m.e11 + this.e22 * m.e21 + this.e23 * m.e31;
		var e22 = this.e20 * m.e02 + this.e21 * m.e12 + this.e22 * m.e22 + this.e23 * m.e32;
		var e23 = this.e20 * m.e03 + this.e21 * m.e13 + this.e22 * m.e23 + this.e23 * m.e33;
		var e30 = this.e30 * m.e00 + this.e31 * m.e10 + this.e32 * m.e20 + this.e33 * m.e30;
		var e31 = this.e30 * m.e01 + this.e31 * m.e11 + this.e32 * m.e21 + this.e33 * m.e31;
		var e32 = this.e30 * m.e02 + this.e31 * m.e12 + this.e32 * m.e22 + this.e33 * m.e32;
		var e33 = this.e30 * m.e03 + this.e31 * m.e13 + this.e32 * m.e23 + this.e33 * m.e33;
		this.e00 = this.e00 * m.e00 + this.e01 * m.e10 + this.e02 * m.e20 + this.e03 * m.e30;
		this.e01 = e01;
		this.e02 = e02;
		this.e03 = e03;
		this.e10 = e10;
		this.e11 = e11;
		this.e12 = e12;
		this.e13 = e13;
		this.e20 = e20;
		this.e21 = e21;
		this.e22 = e22;
		this.e23 = e23;
		this.e30 = e30;
		this.e31 = e31;
		this.e32 = e32;
		this.e33 = e33;
		return this;
	}
	,prependScale: function(sx,sy,sz) {
		return new oimo_common_Mat4(this.e00 * sx,this.e01 * sx,this.e02 * sx,this.e03 * sx,this.e10 * sy,this.e11 * sy,this.e12 * sy,this.e13 * sy,this.e20 * sz,this.e21 * sz,this.e22 * sz,this.e23 * sz,this.e30,this.e31,this.e32,this.e33);
	}
	,appendScale: function(sx,sy,sz) {
		return new oimo_common_Mat4(this.e00 * sx,this.e01 * sy,this.e02 * sz,this.e03,this.e10 * sx,this.e11 * sy,this.e12 * sz,this.e13,this.e20 * sx,this.e21 * sy,this.e22 * sz,this.e23,this.e30 * sx,this.e31 * sy,this.e32 * sz,this.e33);
	}
	,prependRotation: function(rad,axisX,axisY,axisZ) {
		var s = Math.sin(rad);
		var c = Math.cos(rad);
		var c1 = 1 - c;
		var r00 = axisX * axisX * c1 + c;
		var r01 = axisX * axisY * c1 - axisZ * s;
		var r02 = axisX * axisZ * c1 + axisY * s;
		var r10 = axisY * axisX * c1 + axisZ * s;
		var r11 = axisY * axisY * c1 + c;
		var r12 = axisY * axisZ * c1 - axisX * s;
		var r20 = axisZ * axisX * c1 - axisY * s;
		var r21 = axisZ * axisY * c1 + axisX * s;
		var r22 = axisZ * axisZ * c1 + c;
		return new oimo_common_Mat4(r00 * this.e00 + r01 * this.e10 + r02 * this.e20,r00 * this.e01 + r01 * this.e11 + r02 * this.e21,r00 * this.e02 + r01 * this.e12 + r02 * this.e22,r00 * this.e03 + r01 * this.e13 + r02 * this.e23,r10 * this.e00 + r11 * this.e10 + r12 * this.e20,r10 * this.e01 + r11 * this.e11 + r12 * this.e21,r10 * this.e02 + r11 * this.e12 + r12 * this.e22,r10 * this.e03 + r11 * this.e13 + r12 * this.e23,r20 * this.e00 + r21 * this.e10 + r22 * this.e20,r20 * this.e01 + r21 * this.e11 + r22 * this.e21,r20 * this.e02 + r21 * this.e12 + r22 * this.e22,r20 * this.e03 + r21 * this.e13 + r22 * this.e23,this.e30,this.e31,this.e32,this.e33);
	}
	,appendRotation: function(rad,axisX,axisY,axisZ) {
		var s = Math.sin(rad);
		var c = Math.cos(rad);
		var c1 = 1 - c;
		var r00 = axisX * axisX * c1 + c;
		var r01 = axisX * axisY * c1 - axisZ * s;
		var r02 = axisX * axisZ * c1 + axisY * s;
		var r10 = axisY * axisX * c1 + axisZ * s;
		var r11 = axisY * axisY * c1 + c;
		var r12 = axisY * axisZ * c1 - axisX * s;
		var r20 = axisZ * axisX * c1 - axisY * s;
		var r21 = axisZ * axisY * c1 + axisX * s;
		var r22 = axisZ * axisZ * c1 + c;
		return new oimo_common_Mat4(this.e00 * r00 + this.e01 * r10 + this.e02 * r20,this.e00 * r01 + this.e01 * r11 + this.e02 * r21,this.e00 * r02 + this.e01 * r12 + this.e02 * r22,this.e03,this.e10 * r00 + this.e11 * r10 + this.e12 * r20,this.e10 * r01 + this.e11 * r11 + this.e12 * r21,this.e10 * r02 + this.e11 * r12 + this.e12 * r22,this.e13,this.e20 * r00 + this.e21 * r10 + this.e22 * r20,this.e20 * r01 + this.e21 * r11 + this.e22 * r21,this.e20 * r02 + this.e21 * r12 + this.e22 * r22,this.e23,this.e30 * r00 + this.e31 * r10 + this.e32 * r20,this.e30 * r01 + this.e31 * r11 + this.e32 * r21,this.e30 * r02 + this.e31 * r12 + this.e32 * r22,this.e33);
	}
	,prependTranslation: function(tx,ty,tz) {
		return new oimo_common_Mat4(this.e00 + tx * this.e30,this.e01 + tx * this.e31,this.e02 + tx * this.e32,this.e03 + tx * this.e33,this.e10 + ty * this.e30,this.e11 + ty * this.e31,this.e12 + ty * this.e32,this.e13 + ty * this.e33,this.e20 + tz * this.e30,this.e21 + tz * this.e31,this.e22 + tz * this.e32,this.e23 + tz * this.e33,this.e30,this.e31,this.e32,this.e33);
	}
	,appendTranslation: function(tx,ty,tz) {
		return new oimo_common_Mat4(this.e00,this.e01,this.e02,this.e00 * tx + this.e01 * ty + this.e02 * tz + this.e03,this.e10,this.e11,this.e12,this.e10 * tx + this.e11 * ty + this.e12 * tz + this.e13,this.e20,this.e21,this.e22,this.e20 * tx + this.e21 * ty + this.e22 * tz + this.e23,this.e30,this.e31,this.e32,this.e30 * tx + this.e31 * ty + this.e32 * tz + this.e33);
	}
	,prependScaleEq: function(sx,sy,sz) {
		this.e00 *= sx;
		this.e01 *= sx;
		this.e02 *= sx;
		this.e03 *= sx;
		this.e10 *= sy;
		this.e11 *= sy;
		this.e12 *= sy;
		this.e13 *= sy;
		this.e20 *= sz;
		this.e21 *= sz;
		this.e22 *= sz;
		this.e23 *= sz;
		this.e30 = this.e30;
		this.e31 = this.e31;
		this.e32 = this.e32;
		this.e33 = this.e33;
		return this;
	}
	,appendScaleEq: function(sx,sy,sz) {
		this.e00 *= sx;
		this.e01 *= sy;
		this.e02 *= sz;
		this.e03 = this.e03;
		this.e10 *= sx;
		this.e11 *= sy;
		this.e12 *= sz;
		this.e13 = this.e13;
		this.e20 *= sx;
		this.e21 *= sy;
		this.e22 *= sz;
		this.e23 = this.e23;
		this.e30 *= sx;
		this.e31 *= sy;
		this.e32 *= sz;
		this.e33 = this.e33;
		return this;
	}
	,prependRotationEq: function(rad,axisX,axisY,axisZ) {
		var s = Math.sin(rad);
		var c = Math.cos(rad);
		var c1 = 1 - c;
		var r00 = axisX * axisX * c1 + c;
		var r01 = axisX * axisY * c1 - axisZ * s;
		var r02 = axisX * axisZ * c1 + axisY * s;
		var r10 = axisY * axisX * c1 + axisZ * s;
		var r11 = axisY * axisY * c1 + c;
		var r12 = axisY * axisZ * c1 - axisX * s;
		var r20 = axisZ * axisX * c1 - axisY * s;
		var r21 = axisZ * axisY * c1 + axisX * s;
		var r22 = axisZ * axisZ * c1 + c;
		var e10 = r10 * this.e00 + r11 * this.e10 + r12 * this.e20;
		var e11 = r10 * this.e01 + r11 * this.e11 + r12 * this.e21;
		var e12 = r10 * this.e02 + r11 * this.e12 + r12 * this.e22;
		var e13 = r10 * this.e03 + r11 * this.e13 + r12 * this.e23;
		var e20 = r20 * this.e00 + r21 * this.e10 + r22 * this.e20;
		var e21 = r20 * this.e01 + r21 * this.e11 + r22 * this.e21;
		var e22 = r20 * this.e02 + r21 * this.e12 + r22 * this.e22;
		var e23 = r20 * this.e03 + r21 * this.e13 + r22 * this.e23;
		this.e00 = r00 * this.e00 + r01 * this.e10 + r02 * this.e20;
		this.e01 = r00 * this.e01 + r01 * this.e11 + r02 * this.e21;
		this.e02 = r00 * this.e02 + r01 * this.e12 + r02 * this.e22;
		this.e03 = r00 * this.e03 + r01 * this.e13 + r02 * this.e23;
		this.e10 = e10;
		this.e11 = e11;
		this.e12 = e12;
		this.e13 = e13;
		this.e20 = e20;
		this.e21 = e21;
		this.e22 = e22;
		this.e23 = e23;
		this.e30 = this.e30;
		this.e31 = this.e31;
		this.e32 = this.e32;
		this.e33 = this.e33;
		return this;
	}
	,appendRotationEq: function(rad,axisX,axisY,axisZ) {
		var s = Math.sin(rad);
		var c = Math.cos(rad);
		var c1 = 1 - c;
		var r00 = axisX * axisX * c1 + c;
		var r01 = axisX * axisY * c1 - axisZ * s;
		var r02 = axisX * axisZ * c1 + axisY * s;
		var r10 = axisY * axisX * c1 + axisZ * s;
		var r11 = axisY * axisY * c1 + c;
		var r12 = axisY * axisZ * c1 - axisX * s;
		var r20 = axisZ * axisX * c1 - axisY * s;
		var r21 = axisZ * axisY * c1 + axisX * s;
		var r22 = axisZ * axisZ * c1 + c;
		var e01 = this.e00 * r01 + this.e01 * r11 + this.e02 * r21;
		var e02 = this.e00 * r02 + this.e01 * r12 + this.e02 * r22;
		var e11 = this.e10 * r01 + this.e11 * r11 + this.e12 * r21;
		var e12 = this.e10 * r02 + this.e11 * r12 + this.e12 * r22;
		var e21 = this.e20 * r01 + this.e21 * r11 + this.e22 * r21;
		var e22 = this.e20 * r02 + this.e21 * r12 + this.e22 * r22;
		var e31 = this.e30 * r01 + this.e31 * r11 + this.e32 * r21;
		var e32 = this.e30 * r02 + this.e31 * r12 + this.e32 * r22;
		this.e00 = this.e00 * r00 + this.e01 * r10 + this.e02 * r20;
		this.e01 = e01;
		this.e02 = e02;
		this.e03 = this.e03;
		this.e10 = this.e10 * r00 + this.e11 * r10 + this.e12 * r20;
		this.e11 = e11;
		this.e12 = e12;
		this.e13 = this.e13;
		this.e20 = this.e20 * r00 + this.e21 * r10 + this.e22 * r20;
		this.e21 = e21;
		this.e22 = e22;
		this.e23 = this.e23;
		this.e30 = this.e30 * r00 + this.e31 * r10 + this.e32 * r20;
		this.e31 = e31;
		this.e32 = e32;
		this.e33 = this.e33;
		return this;
	}
	,prependTranslationEq: function(tx,ty,tz) {
		this.e00 += tx * this.e30;
		this.e01 += tx * this.e31;
		this.e02 += tx * this.e32;
		this.e03 += tx * this.e33;
		this.e10 += ty * this.e30;
		this.e11 += ty * this.e31;
		this.e12 += ty * this.e32;
		this.e13 += ty * this.e33;
		this.e20 += tz * this.e30;
		this.e21 += tz * this.e31;
		this.e22 += tz * this.e32;
		this.e23 += tz * this.e33;
		this.e30 = this.e30;
		this.e31 = this.e31;
		this.e32 = this.e32;
		this.e33 = this.e33;
		return this;
	}
	,appendTranslationEq: function(tx,ty,tz) {
		var e03 = this.e00 * tx + this.e01 * ty + this.e02 * tz + this.e03;
		var e13 = this.e10 * tx + this.e11 * ty + this.e12 * tz + this.e13;
		var e23 = this.e20 * tx + this.e21 * ty + this.e22 * tz + this.e23;
		var e33 = this.e30 * tx + this.e31 * ty + this.e32 * tz + this.e33;
		this.e00 = this.e00;
		this.e01 = this.e01;
		this.e02 = this.e02;
		this.e03 = e03;
		this.e10 = this.e10;
		this.e11 = this.e11;
		this.e12 = this.e12;
		this.e13 = e13;
		this.e20 = this.e20;
		this.e21 = this.e21;
		this.e22 = this.e22;
		this.e23 = e23;
		this.e30 = this.e30;
		this.e31 = this.e31;
		this.e32 = this.e32;
		this.e33 = e33;
		return this;
	}
	,transpose: function() {
		return new oimo_common_Mat4(this.e00,this.e10,this.e20,this.e30,this.e01,this.e11,this.e21,this.e31,this.e02,this.e12,this.e22,this.e32,this.e03,this.e13,this.e23,this.e33);
	}
	,transposeEq: function() {
		var e10 = this.e01;
		var e20 = this.e02;
		var e21 = this.e12;
		var e30 = this.e03;
		var e31 = this.e13;
		var e32 = this.e23;
		this.e00 = this.e00;
		this.e01 = this.e10;
		this.e02 = this.e20;
		this.e03 = this.e30;
		this.e10 = e10;
		this.e11 = this.e11;
		this.e12 = this.e21;
		this.e13 = this.e31;
		this.e20 = e20;
		this.e21 = e21;
		this.e22 = this.e22;
		this.e23 = this.e32;
		this.e30 = e30;
		this.e31 = e31;
		this.e32 = e32;
		this.e33 = this.e33;
		return this;
	}
	,determinant: function() {
		var d23_01 = this.e20 * this.e31 - this.e21 * this.e30;
		var d23_02 = this.e20 * this.e32 - this.e22 * this.e30;
		var d23_03 = this.e20 * this.e33 - this.e23 * this.e30;
		var d23_12 = this.e21 * this.e32 - this.e22 * this.e31;
		var d23_13 = this.e21 * this.e33 - this.e23 * this.e31;
		var d23_23 = this.e22 * this.e33 - this.e23 * this.e32;
		return this.e00 * (this.e11 * d23_23 - this.e12 * d23_13 + this.e13 * d23_12) - this.e01 * (this.e10 * d23_23 - this.e12 * d23_03 + this.e13 * d23_02) + this.e02 * (this.e10 * d23_13 - this.e11 * d23_03 + this.e13 * d23_01) - this.e03 * (this.e10 * d23_12 - this.e11 * d23_02 + this.e12 * d23_01);
	}
	,trace: function() {
		return this.e00 + this.e11 + this.e22 + this.e33;
	}
	,inverse: function() {
		var d01_01 = this.e00 * this.e11 - this.e01 * this.e10;
		var d01_02 = this.e00 * this.e12 - this.e02 * this.e10;
		var d01_03 = this.e00 * this.e13 - this.e03 * this.e10;
		var d01_12 = this.e01 * this.e12 - this.e02 * this.e11;
		var d01_13 = this.e01 * this.e13 - this.e03 * this.e11;
		var d01_23 = this.e02 * this.e13 - this.e03 * this.e12;
		var d23_01 = this.e20 * this.e31 - this.e21 * this.e30;
		var d23_02 = this.e20 * this.e32 - this.e22 * this.e30;
		var d23_03 = this.e20 * this.e33 - this.e23 * this.e30;
		var d23_12 = this.e21 * this.e32 - this.e22 * this.e31;
		var d23_13 = this.e21 * this.e33 - this.e23 * this.e31;
		var d23_23 = this.e22 * this.e33 - this.e23 * this.e32;
		var d00 = this.e11 * d23_23 - this.e12 * d23_13 + this.e13 * d23_12;
		var d01 = this.e10 * d23_23 - this.e12 * d23_03 + this.e13 * d23_02;
		var d02 = this.e10 * d23_13 - this.e11 * d23_03 + this.e13 * d23_01;
		var d03 = this.e10 * d23_12 - this.e11 * d23_02 + this.e12 * d23_01;
		var invDet = this.e00 * d00 - this.e01 * d01 + this.e02 * d02 - this.e03 * d03;
		if(invDet != 0) {
			invDet = 1 / invDet;
		}
		return new oimo_common_Mat4(d00 * invDet,-(this.e01 * d23_23 - this.e02 * d23_13 + this.e03 * d23_12) * invDet,(this.e31 * d01_23 - this.e32 * d01_13 + this.e33 * d01_12) * invDet,-(this.e21 * d01_23 - this.e22 * d01_13 + this.e23 * d01_12) * invDet,-d01 * invDet,(this.e00 * d23_23 - this.e02 * d23_03 + this.e03 * d23_02) * invDet,-(this.e30 * d01_23 - this.e32 * d01_03 + this.e33 * d01_02) * invDet,(this.e20 * d01_23 - this.e22 * d01_03 + this.e23 * d01_02) * invDet,d02 * invDet,-(this.e00 * d23_13 - this.e01 * d23_03 + this.e03 * d23_01) * invDet,(this.e30 * d01_13 - this.e31 * d01_03 + this.e33 * d01_01) * invDet,-(this.e20 * d01_13 - this.e21 * d01_03 + this.e23 * d01_01) * invDet,-d03 * invDet,(this.e00 * d23_12 - this.e01 * d23_02 + this.e02 * d23_01) * invDet,-(this.e30 * d01_12 - this.e31 * d01_02 + this.e32 * d01_01) * invDet,(this.e20 * d01_12 - this.e21 * d01_02 + this.e22 * d01_01) * invDet);
	}
	,inverseEq: function() {
		var d01_01 = this.e00 * this.e11 - this.e01 * this.e10;
		var d01_02 = this.e00 * this.e12 - this.e02 * this.e10;
		var d01_03 = this.e00 * this.e13 - this.e03 * this.e10;
		var d01_12 = this.e01 * this.e12 - this.e02 * this.e11;
		var d01_13 = this.e01 * this.e13 - this.e03 * this.e11;
		var d01_23 = this.e02 * this.e13 - this.e03 * this.e12;
		var d23_01 = this.e20 * this.e31 - this.e21 * this.e30;
		var d23_02 = this.e20 * this.e32 - this.e22 * this.e30;
		var d23_03 = this.e20 * this.e33 - this.e23 * this.e30;
		var d23_12 = this.e21 * this.e32 - this.e22 * this.e31;
		var d23_13 = this.e21 * this.e33 - this.e23 * this.e31;
		var d23_23 = this.e22 * this.e33 - this.e23 * this.e32;
		var d00 = this.e11 * d23_23 - this.e12 * d23_13 + this.e13 * d23_12;
		var d01 = this.e10 * d23_23 - this.e12 * d23_03 + this.e13 * d23_02;
		var d02 = this.e10 * d23_13 - this.e11 * d23_03 + this.e13 * d23_01;
		var d03 = this.e10 * d23_12 - this.e11 * d23_02 + this.e12 * d23_01;
		var invDet = this.e00 * d00 - this.e01 * d01 + this.e02 * d02 - this.e03 * d03;
		if(invDet != 0) {
			invDet = 1 / invDet;
		}
		var t11 = (this.e00 * d23_23 - this.e02 * d23_03 + this.e03 * d23_02) * invDet;
		var t21 = -(this.e00 * d23_13 - this.e01 * d23_03 + this.e03 * d23_01) * invDet;
		var t23 = -(this.e20 * d01_13 - this.e21 * d01_03 + this.e23 * d01_01) * invDet;
		var t31 = (this.e00 * d23_12 - this.e01 * d23_02 + this.e02 * d23_01) * invDet;
		var t32 = -(this.e30 * d01_12 - this.e31 * d01_02 + this.e32 * d01_01) * invDet;
		var t33 = (this.e20 * d01_12 - this.e21 * d01_02 + this.e22 * d01_01) * invDet;
		this.e00 = d00 * invDet;
		this.e01 = -(this.e01 * d23_23 - this.e02 * d23_13 + this.e03 * d23_12) * invDet;
		this.e02 = (this.e31 * d01_23 - this.e32 * d01_13 + this.e33 * d01_12) * invDet;
		this.e03 = -(this.e21 * d01_23 - this.e22 * d01_13 + this.e23 * d01_12) * invDet;
		this.e10 = -d01 * invDet;
		this.e11 = t11;
		this.e12 = -(this.e30 * d01_23 - this.e32 * d01_03 + this.e33 * d01_02) * invDet;
		this.e13 = (this.e20 * d01_23 - this.e22 * d01_03 + this.e23 * d01_02) * invDet;
		this.e20 = d02 * invDet;
		this.e21 = t21;
		this.e22 = (this.e30 * d01_13 - this.e31 * d01_03 + this.e33 * d01_01) * invDet;
		this.e23 = t23;
		this.e30 = -d03 * invDet;
		this.e31 = t31;
		this.e32 = t32;
		this.e33 = t33;
		return this;
	}
	,lookAt: function(eyeX,eyeY,eyeZ,atX,atY,atZ,upX,upY,upZ) {
		var zx = eyeX - atX;
		var zy = eyeY - atY;
		var zz = eyeZ - atZ;
		var tmp = 1 / Math.sqrt(zx * zx + zy * zy + zz * zz);
		zx *= tmp;
		zy *= tmp;
		zz *= tmp;
		var xx = upY * zz - upZ * zy;
		var xy = upZ * zx - upX * zz;
		var xz = upX * zy - upY * zx;
		tmp = 1 / Math.sqrt(xx * xx + xy * xy + xz * xz);
		xx *= tmp;
		xy *= tmp;
		xz *= tmp;
		var yx = zy * xz - zz * xy;
		var yy = zz * xx - zx * xz;
		var yz = zx * xy - zy * xx;
		this.e00 = xx;
		this.e01 = xy;
		this.e02 = xz;
		this.e03 = -(xx * eyeX + xy * eyeY + xz * eyeZ);
		this.e10 = yx;
		this.e11 = yy;
		this.e12 = yz;
		this.e13 = -(yx * eyeX + yy * eyeY + yz * eyeZ);
		this.e20 = zx;
		this.e21 = zy;
		this.e22 = zz;
		this.e23 = -(zx * eyeX + zy * eyeY + zz * eyeZ);
		this.e30 = 0;
		this.e31 = 0;
		this.e32 = 0;
		this.e33 = 1;
		return this;
	}
	,perspective: function(fovY,aspect,near,far) {
		var h = 1 / Math.tan(fovY * 0.5);
		var fnf = far / (near - far);
		this.e00 = h / aspect;
		this.e01 = 0;
		this.e02 = 0;
		this.e03 = 0;
		this.e10 = 0;
		this.e11 = h;
		this.e12 = 0;
		this.e13 = 0;
		this.e20 = 0;
		this.e21 = 0;
		this.e22 = fnf;
		this.e23 = near * fnf;
		this.e30 = 0;
		this.e31 = 0;
		this.e32 = -1;
		this.e33 = 0;
		return this;
	}
	,ortho: function(width,height,near,far) {
		var nf = 1 / (near - far);
		this.e00 = 2 / width;
		this.e01 = 0;
		this.e02 = 0;
		this.e03 = 0;
		this.e10 = 0;
		this.e11 = 2 / height;
		this.e12 = 0;
		this.e13 = 0;
		this.e20 = 0;
		this.e21 = 0;
		this.e22 = nf;
		this.e23 = near * nf;
		this.e30 = 0;
		this.e31 = 0;
		this.e32 = 0;
		this.e33 = 1;
		return this;
	}
	,toArray: function(columnMajor) {
		if(columnMajor == null) {
			columnMajor = false;
		}
		if(columnMajor) {
			return [this.e00,this.e10,this.e20,this.e30,this.e01,this.e11,this.e21,this.e31,this.e02,this.e12,this.e22,this.e32,this.e03,this.e13,this.e23,this.e33];
		} else {
			return [this.e00,this.e01,this.e02,this.e03,this.e10,this.e11,this.e12,this.e13,this.e20,this.e21,this.e22,this.e23,this.e30,this.e31,this.e32,this.e33];
		}
	}
	,copyFrom: function(m) {
		this.e00 = m.e00;
		this.e01 = m.e01;
		this.e02 = m.e02;
		this.e03 = m.e03;
		this.e10 = m.e10;
		this.e11 = m.e11;
		this.e12 = m.e12;
		this.e13 = m.e13;
		this.e20 = m.e20;
		this.e21 = m.e21;
		this.e22 = m.e22;
		this.e23 = m.e23;
		this.e30 = m.e30;
		this.e31 = m.e31;
		this.e32 = m.e32;
		this.e33 = m.e33;
		return this;
	}
	,fromMat3: function(m) {
		this.e00 = m.e00;
		this.e01 = m.e01;
		this.e02 = m.e02;
		this.e03 = 0;
		this.e10 = m.e10;
		this.e11 = m.e11;
		this.e12 = m.e12;
		this.e13 = 0;
		this.e20 = m.e20;
		this.e21 = m.e21;
		this.e22 = m.e22;
		this.e23 = 0;
		this.e30 = 0;
		this.e31 = 0;
		this.e32 = 0;
		this.e33 = 1;
		return this;
	}
	,fromTransform: function(transform) {
		this.e00 = transform._rotation00;
		this.e01 = transform._rotation01;
		this.e02 = transform._rotation02;
		this.e10 = transform._rotation10;
		this.e11 = transform._rotation11;
		this.e12 = transform._rotation12;
		this.e20 = transform._rotation20;
		this.e21 = transform._rotation21;
		this.e22 = transform._rotation22;
		this.e03 = transform._positionX;
		this.e13 = transform._positionY;
		this.e23 = transform._positionZ;
		this.e30 = 0;
		this.e31 = 0;
		this.e32 = 0;
		this.e33 = 1;
		return this;
	}
	,clone: function() {
		return new oimo_common_Mat4(this.e00,this.e01,this.e02,this.e03,this.e10,this.e11,this.e12,this.e13,this.e20,this.e21,this.e22,this.e23,this.e30,this.e31,this.e32,this.e33);
	}
	,toString: function() {
		return "Mat4[" + (this.e00 > 0 ? (this.e00 * 10000000 + 0.5 | 0) / 10000000 : (this.e00 * 10000000 - 0.5 | 0) / 10000000) + ", " + (this.e01 > 0 ? (this.e01 * 10000000 + 0.5 | 0) / 10000000 : (this.e01 * 10000000 - 0.5 | 0) / 10000000) + ", " + (this.e02 > 0 ? (this.e02 * 10000000 + 0.5 | 0) / 10000000 : (this.e02 * 10000000 - 0.5 | 0) / 10000000) + ", " + (this.e03 > 0 ? (this.e03 * 10000000 + 0.5 | 0) / 10000000 : (this.e03 * 10000000 - 0.5 | 0) / 10000000) + ",\n" + "    " + (this.e10 > 0 ? (this.e10 * 10000000 + 0.5 | 0) / 10000000 : (this.e10 * 10000000 - 0.5 | 0) / 10000000) + ", " + (this.e11 > 0 ? (this.e11 * 10000000 + 0.5 | 0) / 10000000 : (this.e11 * 10000000 - 0.5 | 0) / 10000000) + ", " + (this.e12 > 0 ? (this.e12 * 10000000 + 0.5 | 0) / 10000000 : (this.e12 * 10000000 - 0.5 | 0) / 10000000) + ", " + (this.e13 > 0 ? (this.e13 * 10000000 + 0.5 | 0) / 10000000 : (this.e13 * 10000000 - 0.5 | 0) / 10000000) + ",\n" + "    " + (this.e20 > 0 ? (this.e20 * 10000000 + 0.5 | 0) / 10000000 : (this.e20 * 10000000 - 0.5 | 0) / 10000000) + ", " + (this.e21 > 0 ? (this.e21 * 10000000 + 0.5 | 0) / 10000000 : (this.e21 * 10000000 - 0.5 | 0) / 10000000) + ", " + (this.e22 > 0 ? (this.e22 * 10000000 + 0.5 | 0) / 10000000 : (this.e22 * 10000000 - 0.5 | 0) / 10000000) + ", " + (this.e23 > 0 ? (this.e23 * 10000000 + 0.5 | 0) / 10000000 : (this.e23 * 10000000 - 0.5 | 0) / 10000000) + ",\n" + "    " + (this.e30 > 0 ? (this.e30 * 10000000 + 0.5 | 0) / 10000000 : (this.e30 * 10000000 - 0.5 | 0) / 10000000) + ", " + (this.e31 > 0 ? (this.e31 * 10000000 + 0.5 | 0) / 10000000 : (this.e31 * 10000000 - 0.5 | 0) / 10000000) + ", " + (this.e32 > 0 ? (this.e32 * 10000000 + 0.5 | 0) / 10000000 : (this.e32 * 10000000 - 0.5 | 0) / 10000000) + ", " + (this.e33 > 0 ? (this.e33 * 10000000 + 0.5 | 0) / 10000000 : (this.e33 * 10000000 - 0.5 | 0) / 10000000) + "]";
	}
	,__class__: oimo_common_Mat4
};
var oimo_common_MathUtil = function() { };
oimo_common_MathUtil.__name__ = true;
oimo_common_MathUtil.abs = function(x) {
	if(x > 0) {
		return x;
	} else {
		return -x;
	}
};
oimo_common_MathUtil.sin = function(x) {
	return Math.sin(x);
};
oimo_common_MathUtil.cos = function(x) {
	return Math.cos(x);
};
oimo_common_MathUtil.tan = function(x) {
	return Math.tan(x);
};
oimo_common_MathUtil.asin = function(x) {
	return Math.asin(x);
};
oimo_common_MathUtil.acos = function(x) {
	return Math.acos(x);
};
oimo_common_MathUtil.atan = function(x) {
	return Math.atan(x);
};
oimo_common_MathUtil.safeAsin = function(x) {
	if(x <= -1) {
		return -1.570796326794895;
	}
	if(x >= 1) {
		return 1.570796326794895;
	}
	return Math.asin(x);
};
oimo_common_MathUtil.safeAcos = function(x) {
	if(x <= -1) {
		return 3.14159265358979;
	}
	if(x >= 1) {
		return 0;
	}
	return Math.acos(x);
};
oimo_common_MathUtil.atan2 = function(y,x) {
	return Math.atan2(y,x);
};
oimo_common_MathUtil.sqrt = function(x) {
	return Math.sqrt(x);
};
oimo_common_MathUtil.clamp = function(x,min,max) {
	if(x < min) {
		return min;
	} else if(x > max) {
		return max;
	} else {
		return x;
	}
};
oimo_common_MathUtil.rand = function() {
	return Math.random();
};
oimo_common_MathUtil.randIn = function(min,max) {
	return min + Math.random() * (max - min);
};
oimo_common_MathUtil.randVec3In = function(min,max) {
	return new oimo_common_Vec3(min + Math.random() * (max - min),min + Math.random() * (max - min),min + Math.random() * (max - min));
};
oimo_common_MathUtil.randVec3 = function() {
	return new oimo_common_Vec3(-1 + Math.random() * 2,-1 + Math.random() * 2,-1 + Math.random() * 2);
};
var oimo_common_Pool = function() {
	this.stackVec3 = new Array(256);
	this.sizeVec3 = 0;
	this.stackMat3 = new Array(256);
	this.sizeMat3 = 0;
	this.stackMat4 = new Array(256);
	this.sizeMat4 = 0;
	this.stackQuat = new Array(256);
	this.sizeQuat = 0;
};
oimo_common_Pool.__name__ = true;
oimo_common_Pool.prototype = {
	vec3: function() {
		if(this.sizeVec3 == 0) {
			return new oimo_common_Vec3();
		} else {
			return this.stackVec3[--this.sizeVec3];
		}
	}
	,mat3: function() {
		if(this.sizeMat3 == 0) {
			return new oimo_common_Mat3();
		} else {
			return this.stackMat3[--this.sizeMat3];
		}
	}
	,mat4: function() {
		if(this.sizeMat4 == 0) {
			return new oimo_common_Mat4();
		} else {
			return this.stackMat4[--this.sizeMat4];
		}
	}
	,quat: function() {
		if(this.sizeQuat == 0) {
			return new oimo_common_Quat();
		} else {
			return this.stackQuat[--this.sizeQuat];
		}
	}
	,dispose: function(vec3,mat3,mat4,quat) {
		if(vec3 != null) {
			vec3.zero();
			if(this.sizeVec3 == this.stackVec3.length) {
				var newArray = new Array(this.sizeVec3 << 1);
				var _g = 0;
				var _g1 = this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = this.stackVec3[i];
					this.stackVec3[i] = null;
				}
				this.stackVec3 = newArray;
			}
			this.stackVec3[this.sizeVec3++] = vec3;
		}
		if(mat3 != null) {
			mat3.e00 = 1;
			mat3.e01 = 0;
			mat3.e02 = 0;
			mat3.e10 = 0;
			mat3.e11 = 1;
			mat3.e12 = 0;
			mat3.e20 = 0;
			mat3.e21 = 0;
			mat3.e22 = 1;
			if(this.sizeMat3 == this.stackMat3.length) {
				var newArray = new Array(this.sizeMat3 << 1);
				var _g = 0;
				var _g1 = this.sizeMat3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = this.stackMat3[i];
					this.stackMat3[i] = null;
				}
				this.stackMat3 = newArray;
			}
			this.stackMat3[this.sizeMat3++] = mat3;
		}
		if(mat4 != null) {
			mat4.e00 = 1;
			mat4.e01 = 0;
			mat4.e02 = 0;
			mat4.e03 = 0;
			mat4.e10 = 0;
			mat4.e11 = 1;
			mat4.e12 = 0;
			mat4.e13 = 0;
			mat4.e20 = 0;
			mat4.e21 = 0;
			mat4.e22 = 1;
			mat4.e23 = 0;
			mat4.e30 = 0;
			mat4.e31 = 0;
			mat4.e32 = 0;
			mat4.e33 = 1;
			if(this.sizeMat4 == this.stackMat4.length) {
				var newArray = new Array(this.sizeMat4 << 1);
				var _g = 0;
				var _g1 = this.sizeMat4;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = this.stackMat4[i];
					this.stackMat4[i] = null;
				}
				this.stackMat4 = newArray;
			}
			this.stackMat4[this.sizeMat4++] = mat4;
		}
		if(quat != null) {
			quat.x = 0;
			quat.y = 0;
			quat.z = 0;
			quat.w = 1;
			if(this.sizeQuat == this.stackQuat.length) {
				var newArray = new Array(this.sizeQuat << 1);
				var _g = 0;
				var _g1 = this.sizeQuat;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = this.stackQuat[i];
					this.stackQuat[i] = null;
				}
				this.stackQuat = newArray;
			}
			this.stackQuat[this.sizeQuat++] = quat;
		}
	}
	,disposeVec3: function(v) {
		v.zero();
		if(this.sizeVec3 == this.stackVec3.length) {
			var newArray = new Array(this.sizeVec3 << 1);
			var _g = 0;
			var _g1 = this.sizeVec3;
			while(_g < _g1) {
				var i = _g++;
				newArray[i] = this.stackVec3[i];
				this.stackVec3[i] = null;
			}
			this.stackVec3 = newArray;
		}
		this.stackVec3[this.sizeVec3++] = v;
	}
	,disposeMat3: function(m) {
		m.e00 = 1;
		m.e01 = 0;
		m.e02 = 0;
		m.e10 = 0;
		m.e11 = 1;
		m.e12 = 0;
		m.e20 = 0;
		m.e21 = 0;
		m.e22 = 1;
		if(this.sizeMat3 == this.stackMat3.length) {
			var newArray = new Array(this.sizeMat3 << 1);
			var _g = 0;
			var _g1 = this.sizeMat3;
			while(_g < _g1) {
				var i = _g++;
				newArray[i] = this.stackMat3[i];
				this.stackMat3[i] = null;
			}
			this.stackMat3 = newArray;
		}
		this.stackMat3[this.sizeMat3++] = m;
	}
	,disposeMat4: function(m) {
		m.e00 = 1;
		m.e01 = 0;
		m.e02 = 0;
		m.e03 = 0;
		m.e10 = 0;
		m.e11 = 1;
		m.e12 = 0;
		m.e13 = 0;
		m.e20 = 0;
		m.e21 = 0;
		m.e22 = 1;
		m.e23 = 0;
		m.e30 = 0;
		m.e31 = 0;
		m.e32 = 0;
		m.e33 = 1;
		if(this.sizeMat4 == this.stackMat4.length) {
			var newArray = new Array(this.sizeMat4 << 1);
			var _g = 0;
			var _g1 = this.sizeMat4;
			while(_g < _g1) {
				var i = _g++;
				newArray[i] = this.stackMat4[i];
				this.stackMat4[i] = null;
			}
			this.stackMat4 = newArray;
		}
		this.stackMat4[this.sizeMat4++] = m;
	}
	,disposeQuat: function(q) {
		q.x = 0;
		q.y = 0;
		q.z = 0;
		q.w = 1;
		if(this.sizeQuat == this.stackQuat.length) {
			var newArray = new Array(this.sizeQuat << 1);
			var _g = 0;
			var _g1 = this.sizeQuat;
			while(_g < _g1) {
				var i = _g++;
				newArray[i] = this.stackQuat[i];
				this.stackQuat[i] = null;
			}
			this.stackQuat = newArray;
		}
		this.stackQuat[this.sizeQuat++] = q;
	}
	,__class__: oimo_common_Pool
};
var oimo_common_Quat = function(x,y,z,w) {
	if(w == null) {
		w = 1;
	}
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.z = z;
	this.w = w;
	oimo_common_Quat.numCreations++;
};
oimo_common_Quat.__name__ = true;
oimo_common_Quat.prototype = {
	identity: function() {
		this.x = 0;
		this.y = 0;
		this.z = 0;
		this.w = 1;
		return this;
	}
	,init: function(x,y,z,w) {
		this.x = x;
		this.y = y;
		this.z = z;
		this.w = w;
		return this;
	}
	,add: function(q) {
		return new oimo_common_Quat(this.x + q.x,this.y + q.y,this.z + q.z,this.w + q.w);
	}
	,sub: function(q) {
		return new oimo_common_Quat(this.x - q.x,this.y - q.y,this.z - q.z,this.w - q.w);
	}
	,scale: function(s) {
		return new oimo_common_Quat(this.x * s,this.y * s,this.z * s,this.w * s);
	}
	,addEq: function(q) {
		this.x += q.x;
		this.y += q.y;
		this.z += q.z;
		this.w += q.w;
		return this;
	}
	,subEq: function(q) {
		this.x -= q.x;
		this.y -= q.y;
		this.z -= q.z;
		this.w -= q.w;
		return this;
	}
	,scaleEq: function(s) {
		this.x *= s;
		this.y *= s;
		this.z *= s;
		this.w *= s;
		return this;
	}
	,length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
	}
	,lengthSq: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
	}
	,dot: function(q) {
		return this.x * q.x + this.y * q.y + this.z * q.z + this.w * q.w;
	}
	,normalized: function() {
		var invLen = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
		if(invLen > 0) {
			invLen = 1 / invLen;
		}
		return new oimo_common_Quat(this.x * invLen,this.y * invLen,this.z * invLen,this.w * invLen);
	}
	,normalize: function() {
		var invLen = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
		if(invLen > 0) {
			invLen = 1 / invLen;
		}
		this.x *= invLen;
		this.y *= invLen;
		this.z *= invLen;
		this.w *= invLen;
		return this;
	}
	,setArc: function(v1,v2) {
		var x1 = v1.x;
		var y1 = v1.y;
		var z1 = v1.z;
		var x2 = v2.x;
		var y2 = v2.y;
		var z2 = v2.z;
		var d = x1 * x2 + y1 * y2 + z1 * z2;
		this.w = Math.sqrt((1 + d) * 0.5);
		if(this.w == 0) {
			x2 = x1 * x1;
			y2 = y1 * y1;
			z2 = z1 * z1;
			if(x2 < y2) {
				if(x2 < z2) {
					d = 1 / Math.sqrt(y2 + z2);
					this.x = 0;
					this.y = z1 * d;
					this.z = -y1 * d;
				} else {
					d = 1 / Math.sqrt(x2 + y2);
					this.z = 0;
					this.x = y1 * d;
					this.y = -x1 * d;
				}
			} else if(y2 < z2) {
				d = 1 / Math.sqrt(z2 + x2);
				this.y = 0;
				this.z = x1 * d;
				this.x = -z1 * d;
			} else {
				d = 1 / Math.sqrt(x2 + y2);
				this.z = 0;
				this.x = y1 * d;
				this.y = -x1 * d;
			}
			return this;
		}
		d = 0.5 / this.w;
		this.x = (y1 * z2 - z1 * y2) * d;
		this.y = (z1 * x2 - x1 * z2) * d;
		this.z = (x1 * y2 - y1 * x2) * d;
		return this;
	}
	,slerp: function(q,t) {
		var qx;
		var qy;
		var qz;
		var qw;
		var d = this.x * q.x + this.y * q.y + this.z * q.z + this.w * q.w;
		if(d < 0) {
			d = -d;
			qx = -q.x;
			qy = -q.y;
			qz = -q.z;
			qw = -q.w;
		} else {
			qx = q.x;
			qy = q.y;
			qz = q.z;
			qw = q.w;
		}
		if(d > 0.999999) {
			var _this = new oimo_common_Quat(this.x + (qx - this.x) * t,this.y + (qy - this.y) * t,this.z + (qz - this.z) * t,this.w + (qw - this.w) * t);
			var invLen = Math.sqrt(_this.x * _this.x + _this.y * _this.y + _this.z * _this.z + _this.w * _this.w);
			if(invLen > 0) {
				invLen = 1 / invLen;
			}
			_this.x *= invLen;
			_this.y *= invLen;
			_this.z *= invLen;
			_this.w *= invLen;
			return _this;
		}
		var theta = t * Math.acos(d);
		qx -= this.x * d;
		qy -= this.y * d;
		qz -= this.z * d;
		qw -= this.w * d;
		var invLen = 1 / Math.sqrt(qx * qx + qy * qy + qz * qz + qw * qw);
		qx *= invLen;
		qy *= invLen;
		qz *= invLen;
		qw *= invLen;
		var sin = Math.sin(theta);
		var cos = Math.cos(theta);
		return new oimo_common_Quat(this.x * cos + qx * sin,this.y * cos + qy * sin,this.z * cos + qz * sin,this.w * cos + qw * sin);
	}
	,copyFrom: function(q) {
		this.x = q.x;
		this.y = q.y;
		this.z = q.z;
		this.w = q.w;
		return this;
	}
	,clone: function() {
		return new oimo_common_Quat(this.x,this.y,this.z,this.w);
	}
	,fromMat3: function(m) {
		var e00 = m.e00;
		var e11 = m.e11;
		var e22 = m.e22;
		var t = e00 + e11 + e22;
		var s;
		if(t > 0) {
			s = Math.sqrt(t + 1);
			this.w = 0.5 * s;
			s = 0.5 / s;
			this.x = (m.e21 - m.e12) * s;
			this.y = (m.e02 - m.e20) * s;
			this.z = (m.e10 - m.e01) * s;
		} else if(e00 > e11) {
			if(e00 > e22) {
				s = Math.sqrt(e00 - e11 - e22 + 1);
				this.x = 0.5 * s;
				s = 0.5 / s;
				this.y = (m.e01 + m.e10) * s;
				this.z = (m.e02 + m.e20) * s;
				this.w = (m.e21 - m.e12) * s;
			} else {
				s = Math.sqrt(e22 - e00 - e11 + 1);
				this.z = 0.5 * s;
				s = 0.5 / s;
				this.x = (m.e02 + m.e20) * s;
				this.y = (m.e12 + m.e21) * s;
				this.w = (m.e10 - m.e01) * s;
			}
		} else if(e11 > e22) {
			s = Math.sqrt(e11 - e22 - e00 + 1);
			this.y = 0.5 * s;
			s = 0.5 / s;
			this.x = (m.e01 + m.e10) * s;
			this.z = (m.e12 + m.e21) * s;
			this.w = (m.e02 - m.e20) * s;
		} else {
			s = Math.sqrt(e22 - e00 - e11 + 1);
			this.z = 0.5 * s;
			s = 0.5 / s;
			this.x = (m.e02 + m.e20) * s;
			this.y = (m.e12 + m.e21) * s;
			this.w = (m.e10 - m.e01) * s;
		}
		return this;
	}
	,toMat3: function() {
		var _this = new oimo_common_Mat3();
		var x = this.x;
		var y = this.y;
		var z = this.z;
		var w = this.w;
		var x2 = 2 * x;
		var y2 = 2 * y;
		var z2 = 2 * z;
		var xx = x * x2;
		var yy = y * y2;
		var zz = z * z2;
		var xy = x * y2;
		var yz = y * z2;
		var xz = x * z2;
		var wx = w * x2;
		var wy = w * y2;
		var wz = w * z2;
		_this.e00 = 1 - yy - zz;
		_this.e01 = xy - wz;
		_this.e02 = xz + wy;
		_this.e10 = xy + wz;
		_this.e11 = 1 - xx - zz;
		_this.e12 = yz - wx;
		_this.e20 = xz - wy;
		_this.e21 = yz + wx;
		_this.e22 = 1 - xx - yy;
		return _this;
	}
	,toString: function() {
		return "Quat[" + (this.x > 0 ? (this.x * 10000000 + 0.5 | 0) / 10000000 : (this.x * 10000000 - 0.5 | 0) / 10000000) + " i,\n" + "    " + (this.y > 0 ? (this.y * 10000000 + 0.5 | 0) / 10000000 : (this.y * 10000000 - 0.5 | 0) / 10000000) + " j,\n" + "    " + (this.z > 0 ? (this.z * 10000000 + 0.5 | 0) / 10000000 : (this.z * 10000000 - 0.5 | 0) / 10000000) + " k,\n" + "    " + (this.w > 0 ? (this.w * 10000000 + 0.5 | 0) / 10000000 : (this.w * 10000000 - 0.5 | 0) / 10000000) + "]";
	}
	,__class__: oimo_common_Quat
};
var oimo_dynamics_Contact = function() {
	this._next = null;
	this._prev = null;
	this._link1 = new oimo_dynamics_ContactLink();
	this._link2 = new oimo_dynamics_ContactLink();
	this._s1 = null;
	this._s2 = null;
	this._b1 = null;
	this._b2 = null;
	this._detector = null;
	this._cachedDetectorData = new oimo_collision_narrowphase_detector_CachedDetectorData();
	this._detectorResult = new oimo_collision_narrowphase_DetectorResult();
	this._latest = false;
	this._shouldBeSkipped = false;
	this._manifold = new oimo_dynamics_constraint_contact_Manifold();
	this._updater = new oimo_dynamics_constraint_contact_ManifoldUpdater(this._manifold);
	this._contactConstraint = new oimo_dynamics_constraint_contact_ContactConstraint(this._manifold);
	this._touching = false;
};
oimo_dynamics_Contact.__name__ = true;
oimo_dynamics_Contact.prototype = {
	_updateManifold: function() {
		if(this._detector == null) {
			return;
		}
		var ptouching = this._touching;
		var result = this._detectorResult;
		this._detector.detect(result,this._s1._geom,this._s2._geom,this._s1._transform,this._s2._transform,this._cachedDetectorData);
		this._touching = result.numPoints > 0;
		if(this._touching) {
			this._manifold._buildBasis(result.normal);
			if(result.getMaxDepth() > oimo_common_Setting.contactUseAlternativePositionCorrectionAlgorithmDepthThreshold) {
				this._contactConstraint._positionCorrectionAlgorithm = oimo_common_Setting.alternativeContactPositionCorrectionAlgorithm;
			} else {
				this._contactConstraint._positionCorrectionAlgorithm = oimo_common_Setting.defaultContactPositionCorrectionAlgorithm;
			}
			if(result.incremental) {
				this._updater.incrementalUpdate(result,this._b1._transform,this._b2._transform);
			} else {
				this._updater.totalUpdate(result,this._b1._transform,this._b2._transform);
			}
		} else {
			this._manifold._clear();
		}
		if(this._touching && !ptouching) {
			var cc1 = this._s1._contactCallback;
			var cc2 = this._s2._contactCallback;
			if(cc1 == cc2) {
				cc2 = null;
			}
			if(cc1 != null) {
				cc1.beginContact(this);
			}
			if(cc2 != null) {
				cc2.beginContact(this);
			}
		}
		if(!this._touching && ptouching) {
			var cc1 = this._s1._contactCallback;
			var cc2 = this._s2._contactCallback;
			if(cc1 == cc2) {
				cc2 = null;
			}
			if(cc1 != null) {
				cc1.endContact(this);
			}
			if(cc2 != null) {
				cc2.endContact(this);
			}
		}
		if(this._touching) {
			var cc1 = this._s1._contactCallback;
			var cc2 = this._s2._contactCallback;
			if(cc1 == cc2) {
				cc2 = null;
			}
			if(cc1 != null) {
				cc1.preSolve(this);
			}
			if(cc2 != null) {
				cc2.preSolve(this);
			}
		}
	}
	,_postSolve: function() {
		var cc1 = this._s1._contactCallback;
		var cc2 = this._s2._contactCallback;
		if(cc1 == cc2) {
			cc2 = null;
		}
		if(cc1 != null) {
			cc1.postSolve(this);
		}
		if(cc2 != null) {
			cc2.postSolve(this);
		}
	}
	,getShape1: function() {
		return this._s1;
	}
	,getShape2: function() {
		return this._s2;
	}
	,isTouching: function() {
		return this._touching;
	}
	,getManifold: function() {
		return this._manifold;
	}
	,getContactConstraint: function() {
		return this._contactConstraint;
	}
	,getPrev: function() {
		return this._prev;
	}
	,getNext: function() {
		return this._next;
	}
	,__class__: oimo_dynamics_Contact
};
var oimo_dynamics_ContactLink = function() {
	this._prev = null;
	this._next = null;
	this._contact = null;
	this._other = null;
};
oimo_dynamics_ContactLink.__name__ = true;
oimo_dynamics_ContactLink.prototype = {
	getContact: function() {
		return this._contact;
	}
	,getOther: function() {
		return this._other;
	}
	,getPrev: function() {
		return this._prev;
	}
	,getNext: function() {
		return this._next;
	}
	,__class__: oimo_dynamics_ContactLink
};
var oimo_dynamics_ContactManager = function(broadPhase) {
	this._broadPhase = broadPhase;
	this._collisionMatrix = new oimo_collision_narrowphase_CollisionMatrix();
	this._numContacts = 0;
};
oimo_dynamics_ContactManager.__name__ = true;
oimo_dynamics_ContactManager.prototype = {
	createContacts: function() {
		var pp = this._broadPhase._proxyPairList;
		while(pp != null) {
			var n = pp._next;
			while(true) {
				var s1;
				var s2;
				if(pp._p1._id < pp._p2._id) {
					s1 = pp._p1.userData;
					s2 = pp._p2.userData;
				} else {
					s1 = pp._p2.userData;
					s2 = pp._p1.userData;
				}
				if(!this.shouldCollide(s1,s2)) {
					break;
				}
				var b1 = s1._rigidBody;
				var b2 = s2._rigidBody;
				var l;
				if(b1._numContactLinks < b2._numContactLinks) {
					l = b1._contactLinkList;
				} else {
					l = b2._contactLinkList;
				}
				var id1 = s1._id;
				var id2 = s2._id;
				var found = false;
				while(l != null) {
					var c = l._contact;
					if(c._s1._id == id1 && c._s2._id == id2) {
						c._latest = true;
						found = true;
						break;
					}
					l = l._next;
				}
				if(!found) {
					var first = this._contactPool;
					if(first != null) {
						this._contactPool = first._next;
						first._next = null;
					} else {
						first = new oimo_dynamics_Contact();
					}
					var c1 = first;
					if(this._contactList == null) {
						this._contactList = c1;
						this._contactListLast = c1;
					} else {
						this._contactListLast._next = c1;
						c1._prev = this._contactListLast;
						this._contactListLast = c1;
					}
					c1._latest = true;
					var detector = this._collisionMatrix.detectors[s1._geom._type][s2._geom._type];
					c1._s1 = s1;
					c1._s2 = s2;
					c1._b1 = s1._rigidBody;
					c1._b2 = s2._rigidBody;
					c1._touching = false;
					if(c1._b1._contactLinkList == null) {
						c1._b1._contactLinkList = c1._link1;
						c1._b1._contactLinkListLast = c1._link1;
					} else {
						c1._b1._contactLinkListLast._next = c1._link1;
						c1._link1._prev = c1._b1._contactLinkListLast;
						c1._b1._contactLinkListLast = c1._link1;
					}
					if(c1._b2._contactLinkList == null) {
						c1._b2._contactLinkList = c1._link2;
						c1._b2._contactLinkListLast = c1._link2;
					} else {
						c1._b2._contactLinkListLast._next = c1._link2;
						c1._link2._prev = c1._b2._contactLinkListLast;
						c1._b2._contactLinkListLast = c1._link2;
					}
					c1._b1._numContactLinks++;
					c1._b2._numContactLinks++;
					c1._link1._other = c1._b2;
					c1._link2._other = c1._b1;
					c1._link1._contact = c1;
					c1._link2._contact = c1;
					c1._detector = detector;
					var _this = c1._contactConstraint;
					_this._s1 = s1;
					_this._s2 = s2;
					_this._b1 = _this._s1._rigidBody;
					_this._b2 = _this._s2._rigidBody;
					_this._tf1 = _this._b1._transform;
					_this._tf2 = _this._b2._transform;
					this._numContacts++;
				}
				break;
			}
			pp = n;
		}
	}
	,destroyOutdatedContacts: function() {
		var incremental = this._broadPhase._incremental;
		var c = this._contactList;
		while(c != null) {
			var n = c._next;
			while(true) {
				if(c._latest) {
					c._latest = false;
					c._shouldBeSkipped = false;
					break;
				}
				if(!incremental) {
					var prev = c._prev;
					var next = c._next;
					if(prev != null) {
						prev._next = next;
					}
					if(next != null) {
						next._prev = prev;
					}
					if(c == this._contactList) {
						this._contactList = this._contactList._next;
					}
					if(c == this._contactListLast) {
						this._contactListLast = this._contactListLast._prev;
					}
					c._next = null;
					c._prev = null;
					if(c._touching) {
						var cc1 = c._s1._contactCallback;
						var cc2 = c._s2._contactCallback;
						if(cc1 == cc2) {
							cc2 = null;
						}
						if(cc1 != null) {
							cc1.endContact(c);
						}
						if(cc2 != null) {
							cc2.endContact(c);
						}
					}
					var prev1 = c._link1._prev;
					var next1 = c._link1._next;
					if(prev1 != null) {
						prev1._next = next1;
					}
					if(next1 != null) {
						next1._prev = prev1;
					}
					if(c._link1 == c._b1._contactLinkList) {
						c._b1._contactLinkList = c._b1._contactLinkList._next;
					}
					if(c._link1 == c._b1._contactLinkListLast) {
						c._b1._contactLinkListLast = c._b1._contactLinkListLast._prev;
					}
					c._link1._next = null;
					c._link1._prev = null;
					var prev2 = c._link2._prev;
					var next2 = c._link2._next;
					if(prev2 != null) {
						prev2._next = next2;
					}
					if(next2 != null) {
						next2._prev = prev2;
					}
					if(c._link2 == c._b2._contactLinkList) {
						c._b2._contactLinkList = c._b2._contactLinkList._next;
					}
					if(c._link2 == c._b2._contactLinkListLast) {
						c._b2._contactLinkListLast = c._b2._contactLinkListLast._prev;
					}
					c._link2._next = null;
					c._link2._prev = null;
					c._b1._numContactLinks--;
					c._b2._numContactLinks--;
					c._link1._other = null;
					c._link2._other = null;
					c._link1._contact = null;
					c._link2._contact = null;
					c._s1 = null;
					c._s2 = null;
					c._b1 = null;
					c._b2 = null;
					c._touching = false;
					c._cachedDetectorData._clear();
					c._manifold._clear();
					c._detector = null;
					var _this = c._contactConstraint;
					_this._s1 = null;
					_this._s2 = null;
					_this._b1 = null;
					_this._b2 = null;
					_this._tf1 = null;
					_this._tf2 = null;
					c._next = this._contactPool;
					this._contactPool = c;
					this._numContacts--;
					break;
				}
				var s1 = c._s1;
				var s2 = c._s2;
				var r1 = s1._rigidBody;
				var r2 = s2._rigidBody;
				if(!(!r1._sleeping && r1._type != 1) && !(!r2._sleeping && r2._type != 1)) {
					c._shouldBeSkipped = true;
					break;
				}
				var aabb1 = s1._aabb;
				var aabb2 = s2._aabb;
				var proxy1 = s1._proxy;
				var proxy2 = s2._proxy;
				if(!(proxy1._aabbMinX < proxy2._aabbMaxX && proxy1._aabbMaxX > proxy2._aabbMinX && proxy1._aabbMinY < proxy2._aabbMaxY && proxy1._aabbMaxY > proxy2._aabbMinY && proxy1._aabbMinZ < proxy2._aabbMaxZ && proxy1._aabbMaxZ > proxy2._aabbMinZ) || !this.shouldCollide(s1,s2)) {
					var prev3 = c._prev;
					var next3 = c._next;
					if(prev3 != null) {
						prev3._next = next3;
					}
					if(next3 != null) {
						next3._prev = prev3;
					}
					if(c == this._contactList) {
						this._contactList = this._contactList._next;
					}
					if(c == this._contactListLast) {
						this._contactListLast = this._contactListLast._prev;
					}
					c._next = null;
					c._prev = null;
					if(c._touching) {
						var cc11 = c._s1._contactCallback;
						var cc21 = c._s2._contactCallback;
						if(cc11 == cc21) {
							cc21 = null;
						}
						if(cc11 != null) {
							cc11.endContact(c);
						}
						if(cc21 != null) {
							cc21.endContact(c);
						}
					}
					var prev4 = c._link1._prev;
					var next4 = c._link1._next;
					if(prev4 != null) {
						prev4._next = next4;
					}
					if(next4 != null) {
						next4._prev = prev4;
					}
					if(c._link1 == c._b1._contactLinkList) {
						c._b1._contactLinkList = c._b1._contactLinkList._next;
					}
					if(c._link1 == c._b1._contactLinkListLast) {
						c._b1._contactLinkListLast = c._b1._contactLinkListLast._prev;
					}
					c._link1._next = null;
					c._link1._prev = null;
					var prev5 = c._link2._prev;
					var next5 = c._link2._next;
					if(prev5 != null) {
						prev5._next = next5;
					}
					if(next5 != null) {
						next5._prev = prev5;
					}
					if(c._link2 == c._b2._contactLinkList) {
						c._b2._contactLinkList = c._b2._contactLinkList._next;
					}
					if(c._link2 == c._b2._contactLinkListLast) {
						c._b2._contactLinkListLast = c._b2._contactLinkListLast._prev;
					}
					c._link2._next = null;
					c._link2._prev = null;
					c._b1._numContactLinks--;
					c._b2._numContactLinks--;
					c._link1._other = null;
					c._link2._other = null;
					c._link1._contact = null;
					c._link2._contact = null;
					c._s1 = null;
					c._s2 = null;
					c._b1 = null;
					c._b2 = null;
					c._touching = false;
					c._cachedDetectorData._clear();
					c._manifold._clear();
					c._detector = null;
					var _this1 = c._contactConstraint;
					_this1._s1 = null;
					_this1._s2 = null;
					_this1._b1 = null;
					_this1._b2 = null;
					_this1._tf1 = null;
					_this1._tf2 = null;
					c._next = this._contactPool;
					this._contactPool = c;
					this._numContacts--;
					break;
				}
				c._shouldBeSkipped = !(aabb1._minX < aabb2._maxX && aabb1._maxX > aabb2._minX && aabb1._minY < aabb2._maxY && aabb1._maxY > aabb2._minY && aabb1._minZ < aabb2._maxZ && aabb1._maxZ > aabb2._minZ);
				break;
			}
			c = n;
		}
	}
	,shouldCollide: function(s1,s2) {
		var r1 = s1._rigidBody;
		var r2 = s2._rigidBody;
		if(r1 == r2) {
			return false;
		}
		if(r1._type != 0 && r2._type != 0) {
			return false;
		}
		if((s1._collisionGroup & s2._collisionMask) == 0 || (s2._collisionGroup & s1._collisionMask) == 0) {
			return false;
		}
		var jl;
		var other;
		if(r1._numJointLinks < r2._numJointLinks) {
			jl = r1._jointLinkList;
			other = r2;
		} else {
			jl = r2._jointLinkList;
			other = r1;
		}
		while(jl != null) {
			if(jl._other == other && !jl._joint._allowCollision) {
				return false;
			}
			jl = jl._next;
		}
		return true;
	}
	,_updateContacts: function() {
		this._broadPhase.collectPairs();
		this.createContacts();
		this.destroyOutdatedContacts();
	}
	,_postSolve: function() {
		var c = this._contactList;
		while(c != null) {
			var n = c._next;
			if(c._touching) {
				c._postSolve();
			}
			c = n;
		}
	}
	,getNumContacts: function() {
		return this._numContacts;
	}
	,getContactList: function() {
		return this._contactList;
	}
	,__class__: oimo_dynamics_ContactManager
};
var oimo_dynamics_Island = function() {
	this.rigidBodies = new Array(oimo_common_Setting.islandInitialRigidBodyArraySize);
	this.solvers = new Array(oimo_common_Setting.islandInitialConstraintArraySize);
	this.solversSi = new Array(oimo_common_Setting.islandInitialConstraintArraySize);
	this.solversNgs = new Array(oimo_common_Setting.islandInitialConstraintArraySize);
	this.numRigidBodies = 0;
	this.numSolvers = 0;
	this.numSolversSi = 0;
	this.numSolversNgs = 0;
};
oimo_dynamics_Island.__name__ = true;
oimo_dynamics_Island.prototype = {
	_clear: function() {
		while(this.numRigidBodies > 0) this.rigidBodies[--this.numRigidBodies] = null;
		while(this.numSolvers > 0) this.solvers[--this.numSolvers] = null;
		while(this.numSolversSi > 0) this.solversSi[--this.numSolversSi] = null;
		while(this.numSolversNgs > 0) this.solversNgs[--this.numSolversNgs] = null;
	}
	,_addRigidBody: function(rigidBody) {
		if(this.numRigidBodies == this.rigidBodies.length) {
			var newArray = new Array(this.numRigidBodies << 1);
			var _g = 0;
			var _g1 = this.numRigidBodies;
			while(_g < _g1) {
				var i = _g++;
				newArray[i] = this.rigidBodies[i];
				this.rigidBodies[i] = null;
			}
			this.rigidBodies = newArray;
		}
		rigidBody._addedToIsland = true;
		this.rigidBodies[this.numRigidBodies++] = rigidBody;
	}
	,_addConstraintSolver: function(solver,positionCorrection) {
		if(this.numSolvers == this.solvers.length) {
			var newArray = new Array(this.numSolvers << 1);
			var _g = 0;
			var _g1 = this.numSolvers;
			while(_g < _g1) {
				var i = _g++;
				newArray[i] = this.solvers[i];
				this.solvers[i] = null;
			}
			this.solvers = newArray;
		}
		solver._addedToIsland = true;
		this.solvers[this.numSolvers++] = solver;
		if(positionCorrection == oimo_dynamics_constraint_PositionCorrectionAlgorithm.SPLIT_IMPULSE) {
			if(this.numSolversSi == this.solversSi.length) {
				var newArray = new Array(this.numSolversSi << 1);
				var _g = 0;
				var _g1 = this.numSolversSi;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = this.solversSi[i];
					this.solversSi[i] = null;
				}
				this.solversSi = newArray;
			}
			this.solversSi[this.numSolversSi++] = solver;
		}
		if(positionCorrection == oimo_dynamics_constraint_PositionCorrectionAlgorithm.NGS) {
			if(this.numSolversNgs == this.solversNgs.length) {
				var newArray = new Array(this.numSolversNgs << 1);
				var _g = 0;
				var _g1 = this.numSolversNgs;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = this.solversNgs[i];
					this.solversNgs[i] = null;
				}
				this.solversNgs = newArray;
			}
			this.solversNgs[this.numSolversNgs++] = solver;
		}
	}
	,_stepSingleRigidBody: function(timeStep,rb) {
		var dt = timeStep.dt;
		var dst = rb._ptransform;
		var src = rb._transform;
		dst._positionX = src._positionX;
		dst._positionY = src._positionY;
		dst._positionZ = src._positionZ;
		dst._rotation00 = src._rotation00;
		dst._rotation01 = src._rotation01;
		dst._rotation02 = src._rotation02;
		dst._rotation10 = src._rotation10;
		dst._rotation11 = src._rotation11;
		dst._rotation12 = src._rotation12;
		dst._rotation20 = src._rotation20;
		dst._rotation21 = src._rotation21;
		dst._rotation22 = src._rotation22;
		rb._linearContactImpulseX = 0;
		rb._linearContactImpulseY = 0;
		rb._linearContactImpulseZ = 0;
		rb._angularContactImpulseX = 0;
		rb._angularContactImpulseY = 0;
		rb._angularContactImpulseZ = 0;
		if(rb._autoSleep && rb._velX * rb._velX + rb._velY * rb._velY + rb._velZ * rb._velZ < oimo_common_Setting.sleepingVelocityThreshold * oimo_common_Setting.sleepingVelocityThreshold && rb._angVelX * rb._angVelX + rb._angVelY * rb._angVelY + rb._angVelZ * rb._angVelZ < oimo_common_Setting.sleepingAngularVelocityThreshold * oimo_common_Setting.sleepingAngularVelocityThreshold) {
			rb._sleepTime += dt;
			if(rb._sleepTime > oimo_common_Setting.sleepingTimeThreshold) {
				rb._sleeping = true;
				rb._sleepTime = 0;
			}
		} else {
			rb._sleepTime = 0;
		}
		if(!rb._sleeping) {
			if(rb._type == 0) {
				var x = dt * rb._linearDamping;
				var x2 = x * x;
				var linScale = 1 / (1 + x + x2 * (0.5 + x * 0.16666666666666666 + x2 * 0.041666666666666664));
				var x = dt * rb._angularDamping;
				var x2 = x * x;
				var angScale = 1 / (1 + x + x2 * (0.5 + x * 0.16666666666666666 + x2 * 0.041666666666666664));
				var linAccX;
				var linAccY;
				var linAccZ;
				var angAccX;
				var angAccY;
				var angAccZ;
				linAccX = this.gravityX * rb._gravityScale;
				linAccY = this.gravityY * rb._gravityScale;
				linAccZ = this.gravityZ * rb._gravityScale;
				linAccX += rb._forceX * rb._invMass;
				linAccY += rb._forceY * rb._invMass;
				linAccZ += rb._forceZ * rb._invMass;
				var __tmp__X;
				var __tmp__Y;
				var __tmp__Z;
				__tmp__X = rb._invInertia00 * rb._torqueX + rb._invInertia01 * rb._torqueY + rb._invInertia02 * rb._torqueZ;
				__tmp__Y = rb._invInertia10 * rb._torqueX + rb._invInertia11 * rb._torqueY + rb._invInertia12 * rb._torqueZ;
				__tmp__Z = rb._invInertia20 * rb._torqueX + rb._invInertia21 * rb._torqueY + rb._invInertia22 * rb._torqueZ;
				angAccX = __tmp__X;
				angAccY = __tmp__Y;
				angAccZ = __tmp__Z;
				rb._velX += linAccX * dt;
				rb._velY += linAccY * dt;
				rb._velZ += linAccZ * dt;
				rb._velX *= linScale;
				rb._velY *= linScale;
				rb._velZ *= linScale;
				rb._angVelX += angAccX * dt;
				rb._angVelY += angAccY * dt;
				rb._angVelZ += angAccZ * dt;
				rb._angVelX *= angScale;
				rb._angVelY *= angScale;
				rb._angVelZ *= angScale;
			}
			rb._integrate(dt);
			var s = rb._shapeList;
			while(s != null) {
				var n = s._next;
				var tf1 = rb._ptransform;
				var tf2 = rb._transform;
				var dst = s._ptransform;
				var src1 = s._localTransform;
				var __tmp__00;
				var __tmp__01;
				var __tmp__02;
				var __tmp__10;
				var __tmp__11;
				var __tmp__12;
				var __tmp__20;
				var __tmp__21;
				var __tmp__22;
				__tmp__00 = tf1._rotation00 * src1._rotation00 + tf1._rotation01 * src1._rotation10 + tf1._rotation02 * src1._rotation20;
				__tmp__01 = tf1._rotation00 * src1._rotation01 + tf1._rotation01 * src1._rotation11 + tf1._rotation02 * src1._rotation21;
				__tmp__02 = tf1._rotation00 * src1._rotation02 + tf1._rotation01 * src1._rotation12 + tf1._rotation02 * src1._rotation22;
				__tmp__10 = tf1._rotation10 * src1._rotation00 + tf1._rotation11 * src1._rotation10 + tf1._rotation12 * src1._rotation20;
				__tmp__11 = tf1._rotation10 * src1._rotation01 + tf1._rotation11 * src1._rotation11 + tf1._rotation12 * src1._rotation21;
				__tmp__12 = tf1._rotation10 * src1._rotation02 + tf1._rotation11 * src1._rotation12 + tf1._rotation12 * src1._rotation22;
				__tmp__20 = tf1._rotation20 * src1._rotation00 + tf1._rotation21 * src1._rotation10 + tf1._rotation22 * src1._rotation20;
				__tmp__21 = tf1._rotation20 * src1._rotation01 + tf1._rotation21 * src1._rotation11 + tf1._rotation22 * src1._rotation21;
				__tmp__22 = tf1._rotation20 * src1._rotation02 + tf1._rotation21 * src1._rotation12 + tf1._rotation22 * src1._rotation22;
				dst._rotation00 = __tmp__00;
				dst._rotation01 = __tmp__01;
				dst._rotation02 = __tmp__02;
				dst._rotation10 = __tmp__10;
				dst._rotation11 = __tmp__11;
				dst._rotation12 = __tmp__12;
				dst._rotation20 = __tmp__20;
				dst._rotation21 = __tmp__21;
				dst._rotation22 = __tmp__22;
				var __tmp__X;
				var __tmp__Y;
				var __tmp__Z;
				__tmp__X = tf1._rotation00 * src1._positionX + tf1._rotation01 * src1._positionY + tf1._rotation02 * src1._positionZ;
				__tmp__Y = tf1._rotation10 * src1._positionX + tf1._rotation11 * src1._positionY + tf1._rotation12 * src1._positionZ;
				__tmp__Z = tf1._rotation20 * src1._positionX + tf1._rotation21 * src1._positionY + tf1._rotation22 * src1._positionZ;
				dst._positionX = __tmp__X;
				dst._positionY = __tmp__Y;
				dst._positionZ = __tmp__Z;
				dst._positionX += tf1._positionX;
				dst._positionY += tf1._positionY;
				dst._positionZ += tf1._positionZ;
				var dst1 = s._transform;
				var src11 = s._localTransform;
				var __tmp__001;
				var __tmp__011;
				var __tmp__021;
				var __tmp__101;
				var __tmp__111;
				var __tmp__121;
				var __tmp__201;
				var __tmp__211;
				var __tmp__221;
				__tmp__001 = tf2._rotation00 * src11._rotation00 + tf2._rotation01 * src11._rotation10 + tf2._rotation02 * src11._rotation20;
				__tmp__011 = tf2._rotation00 * src11._rotation01 + tf2._rotation01 * src11._rotation11 + tf2._rotation02 * src11._rotation21;
				__tmp__021 = tf2._rotation00 * src11._rotation02 + tf2._rotation01 * src11._rotation12 + tf2._rotation02 * src11._rotation22;
				__tmp__101 = tf2._rotation10 * src11._rotation00 + tf2._rotation11 * src11._rotation10 + tf2._rotation12 * src11._rotation20;
				__tmp__111 = tf2._rotation10 * src11._rotation01 + tf2._rotation11 * src11._rotation11 + tf2._rotation12 * src11._rotation21;
				__tmp__121 = tf2._rotation10 * src11._rotation02 + tf2._rotation11 * src11._rotation12 + tf2._rotation12 * src11._rotation22;
				__tmp__201 = tf2._rotation20 * src11._rotation00 + tf2._rotation21 * src11._rotation10 + tf2._rotation22 * src11._rotation20;
				__tmp__211 = tf2._rotation20 * src11._rotation01 + tf2._rotation21 * src11._rotation11 + tf2._rotation22 * src11._rotation21;
				__tmp__221 = tf2._rotation20 * src11._rotation02 + tf2._rotation21 * src11._rotation12 + tf2._rotation22 * src11._rotation22;
				dst1._rotation00 = __tmp__001;
				dst1._rotation01 = __tmp__011;
				dst1._rotation02 = __tmp__021;
				dst1._rotation10 = __tmp__101;
				dst1._rotation11 = __tmp__111;
				dst1._rotation12 = __tmp__121;
				dst1._rotation20 = __tmp__201;
				dst1._rotation21 = __tmp__211;
				dst1._rotation22 = __tmp__221;
				var __tmp__X1;
				var __tmp__Y1;
				var __tmp__Z1;
				__tmp__X1 = tf2._rotation00 * src11._positionX + tf2._rotation01 * src11._positionY + tf2._rotation02 * src11._positionZ;
				__tmp__Y1 = tf2._rotation10 * src11._positionX + tf2._rotation11 * src11._positionY + tf2._rotation12 * src11._positionZ;
				__tmp__Z1 = tf2._rotation20 * src11._positionX + tf2._rotation21 * src11._positionY + tf2._rotation22 * src11._positionZ;
				dst1._positionX = __tmp__X1;
				dst1._positionY = __tmp__Y1;
				dst1._positionZ = __tmp__Z1;
				dst1._positionX += tf2._positionX;
				dst1._positionY += tf2._positionY;
				dst1._positionZ += tf2._positionZ;
				var minX;
				var minY;
				var minZ;
				var maxX;
				var maxY;
				var maxZ;
				s._geom._computeAabb(s._aabb,s._ptransform);
				minX = s._aabb._minX;
				minY = s._aabb._minY;
				minZ = s._aabb._minZ;
				maxX = s._aabb._maxX;
				maxY = s._aabb._maxY;
				maxZ = s._aabb._maxZ;
				s._geom._computeAabb(s._aabb,s._transform);
				s._aabb._minX = minX < s._aabb._minX ? minX : s._aabb._minX;
				s._aabb._minY = minY < s._aabb._minY ? minY : s._aabb._minY;
				s._aabb._minZ = minZ < s._aabb._minZ ? minZ : s._aabb._minZ;
				s._aabb._maxX = maxX > s._aabb._maxX ? maxX : s._aabb._maxX;
				s._aabb._maxY = maxY > s._aabb._maxY ? maxY : s._aabb._maxY;
				s._aabb._maxZ = maxZ > s._aabb._maxZ ? maxZ : s._aabb._maxZ;
				if(s._proxy != null) {
					var dX;
					var dY;
					var dZ;
					dX = s._transform._positionX - s._ptransform._positionX;
					dY = s._transform._positionY - s._ptransform._positionY;
					dZ = s._transform._positionZ - s._ptransform._positionZ;
					var v = s.displacement;
					v.x = dX;
					v.y = dY;
					v.z = dZ;
					s._rigidBody._world._broadPhase.moveProxy(s._proxy,s._aabb,s.displacement);
				}
				s = n;
			}
		}
	}
	,_step: function(timeStep,numVelocityIterations,numPositionIterations) {
		var dt = timeStep.dt;
		var sleepIsland = true;
		var _g = 0;
		var _g1 = this.numRigidBodies;
		while(_g < _g1) {
			var rb = this.rigidBodies[_g++];
			var dst = rb._ptransform;
			var src = rb._transform;
			dst._positionX = src._positionX;
			dst._positionY = src._positionY;
			dst._positionZ = src._positionZ;
			dst._rotation00 = src._rotation00;
			dst._rotation01 = src._rotation01;
			dst._rotation02 = src._rotation02;
			dst._rotation10 = src._rotation10;
			dst._rotation11 = src._rotation11;
			dst._rotation12 = src._rotation12;
			dst._rotation20 = src._rotation20;
			dst._rotation21 = src._rotation21;
			dst._rotation22 = src._rotation22;
			rb._linearContactImpulseX = 0;
			rb._linearContactImpulseY = 0;
			rb._linearContactImpulseZ = 0;
			rb._angularContactImpulseX = 0;
			rb._angularContactImpulseY = 0;
			rb._angularContactImpulseZ = 0;
			rb._sleeping = false;
			if(rb._autoSleep && rb._velX * rb._velX + rb._velY * rb._velY + rb._velZ * rb._velZ < oimo_common_Setting.sleepingVelocityThreshold * oimo_common_Setting.sleepingVelocityThreshold && rb._angVelX * rb._angVelX + rb._angVelY * rb._angVelY + rb._angVelZ * rb._angVelZ < oimo_common_Setting.sleepingAngularVelocityThreshold * oimo_common_Setting.sleepingAngularVelocityThreshold) {
				rb._sleepTime += dt;
			} else {
				rb._sleepTime = 0;
			}
			if(rb._sleepTime < oimo_common_Setting.sleepingTimeThreshold) {
				sleepIsland = false;
			}
			if(rb._type == 0) {
				var x = dt * rb._linearDamping;
				var x2 = x * x;
				var linScale = 1 / (1 + x + x2 * (0.5 + x * 0.16666666666666666 + x2 * 0.041666666666666664));
				var x1 = dt * rb._angularDamping;
				var x21 = x1 * x1;
				var angScale = 1 / (1 + x1 + x21 * (0.5 + x1 * 0.16666666666666666 + x21 * 0.041666666666666664));
				var linAccX;
				var linAccY;
				var linAccZ;
				var angAccX;
				var angAccY;
				var angAccZ;
				linAccX = this.gravityX * rb._gravityScale;
				linAccY = this.gravityY * rb._gravityScale;
				linAccZ = this.gravityZ * rb._gravityScale;
				linAccX += rb._forceX * rb._invMass;
				linAccY += rb._forceY * rb._invMass;
				linAccZ += rb._forceZ * rb._invMass;
				var __tmp__X;
				var __tmp__Y;
				var __tmp__Z;
				__tmp__X = rb._invInertia00 * rb._torqueX + rb._invInertia01 * rb._torqueY + rb._invInertia02 * rb._torqueZ;
				__tmp__Y = rb._invInertia10 * rb._torqueX + rb._invInertia11 * rb._torqueY + rb._invInertia12 * rb._torqueZ;
				__tmp__Z = rb._invInertia20 * rb._torqueX + rb._invInertia21 * rb._torqueY + rb._invInertia22 * rb._torqueZ;
				angAccX = __tmp__X;
				angAccY = __tmp__Y;
				angAccZ = __tmp__Z;
				rb._velX += linAccX * dt;
				rb._velY += linAccY * dt;
				rb._velZ += linAccZ * dt;
				rb._velX *= linScale;
				rb._velY *= linScale;
				rb._velZ *= linScale;
				rb._angVelX += angAccX * dt;
				rb._angVelY += angAccY * dt;
				rb._angVelZ += angAccZ * dt;
				rb._angVelX *= angScale;
				rb._angVelY *= angScale;
				rb._angVelZ *= angScale;
			}
		}
		if(sleepIsland) {
			var _g = 0;
			var _g1 = this.numRigidBodies;
			while(_g < _g1) {
				var rb = this.rigidBodies[_g++];
				rb._sleeping = true;
				rb._sleepTime = 0;
			}
			return;
		}
		var _g = 0;
		var _g1 = this.numSolvers;
		while(_g < _g1) this.solvers[_g++].preSolveVelocity(timeStep);
		var _g = 0;
		var _g1 = this.numSolvers;
		while(_g < _g1) this.solvers[_g++].warmStart(timeStep);
		var _g = 0;
		while(_g < numVelocityIterations) {
			++_g;
			var _g1 = 0;
			var _g2 = this.numSolvers;
			while(_g1 < _g2) this.solvers[_g1++].solveVelocity();
		}
		var _g = 0;
		var _g1 = this.numSolvers;
		while(_g < _g1) this.solvers[_g++].postSolveVelocity(timeStep);
		var _g = 0;
		var _g1 = this.numRigidBodies;
		while(_g < _g1) this.rigidBodies[_g++]._integrate(dt);
		var _g = 0;
		var _g1 = this.numSolversSi;
		while(_g < _g1) this.solversSi[_g++].preSolvePosition(timeStep);
		var _g = 0;
		while(_g < numPositionIterations) {
			++_g;
			var _g1 = 0;
			var _g2 = this.numSolversSi;
			while(_g1 < _g2) this.solversSi[_g1++].solvePositionSplitImpulse();
		}
		var _g = 0;
		var _g1 = this.numRigidBodies;
		while(_g < _g1) this.rigidBodies[_g++]._integratePseudoVelocity();
		var _g = 0;
		var _g1 = this.numSolversNgs;
		while(_g < _g1) this.solversNgs[_g++].preSolvePosition(timeStep);
		var _g = 0;
		while(_g < numPositionIterations) {
			++_g;
			var _g1 = 0;
			var _g2 = this.numSolversNgs;
			while(_g1 < _g2) this.solversNgs[_g1++].solvePositionNgs(timeStep);
		}
		var _g = 0;
		var _g1 = this.numSolvers;
		while(_g < _g1) this.solvers[_g++].postSolve();
		var _g = 0;
		var _g1 = this.numRigidBodies;
		while(_g < _g1) {
			var rb = this.rigidBodies[_g++];
			var s = rb._shapeList;
			while(s != null) {
				var n = s._next;
				var tf1 = rb._ptransform;
				var tf2 = rb._transform;
				var dst = s._ptransform;
				var src1 = s._localTransform;
				var __tmp__00;
				var __tmp__01;
				var __tmp__02;
				var __tmp__10;
				var __tmp__11;
				var __tmp__12;
				var __tmp__20;
				var __tmp__21;
				var __tmp__22;
				__tmp__00 = tf1._rotation00 * src1._rotation00 + tf1._rotation01 * src1._rotation10 + tf1._rotation02 * src1._rotation20;
				__tmp__01 = tf1._rotation00 * src1._rotation01 + tf1._rotation01 * src1._rotation11 + tf1._rotation02 * src1._rotation21;
				__tmp__02 = tf1._rotation00 * src1._rotation02 + tf1._rotation01 * src1._rotation12 + tf1._rotation02 * src1._rotation22;
				__tmp__10 = tf1._rotation10 * src1._rotation00 + tf1._rotation11 * src1._rotation10 + tf1._rotation12 * src1._rotation20;
				__tmp__11 = tf1._rotation10 * src1._rotation01 + tf1._rotation11 * src1._rotation11 + tf1._rotation12 * src1._rotation21;
				__tmp__12 = tf1._rotation10 * src1._rotation02 + tf1._rotation11 * src1._rotation12 + tf1._rotation12 * src1._rotation22;
				__tmp__20 = tf1._rotation20 * src1._rotation00 + tf1._rotation21 * src1._rotation10 + tf1._rotation22 * src1._rotation20;
				__tmp__21 = tf1._rotation20 * src1._rotation01 + tf1._rotation21 * src1._rotation11 + tf1._rotation22 * src1._rotation21;
				__tmp__22 = tf1._rotation20 * src1._rotation02 + tf1._rotation21 * src1._rotation12 + tf1._rotation22 * src1._rotation22;
				dst._rotation00 = __tmp__00;
				dst._rotation01 = __tmp__01;
				dst._rotation02 = __tmp__02;
				dst._rotation10 = __tmp__10;
				dst._rotation11 = __tmp__11;
				dst._rotation12 = __tmp__12;
				dst._rotation20 = __tmp__20;
				dst._rotation21 = __tmp__21;
				dst._rotation22 = __tmp__22;
				var __tmp__X;
				var __tmp__Y;
				var __tmp__Z;
				__tmp__X = tf1._rotation00 * src1._positionX + tf1._rotation01 * src1._positionY + tf1._rotation02 * src1._positionZ;
				__tmp__Y = tf1._rotation10 * src1._positionX + tf1._rotation11 * src1._positionY + tf1._rotation12 * src1._positionZ;
				__tmp__Z = tf1._rotation20 * src1._positionX + tf1._rotation21 * src1._positionY + tf1._rotation22 * src1._positionZ;
				dst._positionX = __tmp__X;
				dst._positionY = __tmp__Y;
				dst._positionZ = __tmp__Z;
				dst._positionX += tf1._positionX;
				dst._positionY += tf1._positionY;
				dst._positionZ += tf1._positionZ;
				var dst1 = s._transform;
				var src11 = s._localTransform;
				var __tmp__001;
				var __tmp__011;
				var __tmp__021;
				var __tmp__101;
				var __tmp__111;
				var __tmp__121;
				var __tmp__201;
				var __tmp__211;
				var __tmp__221;
				__tmp__001 = tf2._rotation00 * src11._rotation00 + tf2._rotation01 * src11._rotation10 + tf2._rotation02 * src11._rotation20;
				__tmp__011 = tf2._rotation00 * src11._rotation01 + tf2._rotation01 * src11._rotation11 + tf2._rotation02 * src11._rotation21;
				__tmp__021 = tf2._rotation00 * src11._rotation02 + tf2._rotation01 * src11._rotation12 + tf2._rotation02 * src11._rotation22;
				__tmp__101 = tf2._rotation10 * src11._rotation00 + tf2._rotation11 * src11._rotation10 + tf2._rotation12 * src11._rotation20;
				__tmp__111 = tf2._rotation10 * src11._rotation01 + tf2._rotation11 * src11._rotation11 + tf2._rotation12 * src11._rotation21;
				__tmp__121 = tf2._rotation10 * src11._rotation02 + tf2._rotation11 * src11._rotation12 + tf2._rotation12 * src11._rotation22;
				__tmp__201 = tf2._rotation20 * src11._rotation00 + tf2._rotation21 * src11._rotation10 + tf2._rotation22 * src11._rotation20;
				__tmp__211 = tf2._rotation20 * src11._rotation01 + tf2._rotation21 * src11._rotation11 + tf2._rotation22 * src11._rotation21;
				__tmp__221 = tf2._rotation20 * src11._rotation02 + tf2._rotation21 * src11._rotation12 + tf2._rotation22 * src11._rotation22;
				dst1._rotation00 = __tmp__001;
				dst1._rotation01 = __tmp__011;
				dst1._rotation02 = __tmp__021;
				dst1._rotation10 = __tmp__101;
				dst1._rotation11 = __tmp__111;
				dst1._rotation12 = __tmp__121;
				dst1._rotation20 = __tmp__201;
				dst1._rotation21 = __tmp__211;
				dst1._rotation22 = __tmp__221;
				var __tmp__X1;
				var __tmp__Y1;
				var __tmp__Z1;
				__tmp__X1 = tf2._rotation00 * src11._positionX + tf2._rotation01 * src11._positionY + tf2._rotation02 * src11._positionZ;
				__tmp__Y1 = tf2._rotation10 * src11._positionX + tf2._rotation11 * src11._positionY + tf2._rotation12 * src11._positionZ;
				__tmp__Z1 = tf2._rotation20 * src11._positionX + tf2._rotation21 * src11._positionY + tf2._rotation22 * src11._positionZ;
				dst1._positionX = __tmp__X1;
				dst1._positionY = __tmp__Y1;
				dst1._positionZ = __tmp__Z1;
				dst1._positionX += tf2._positionX;
				dst1._positionY += tf2._positionY;
				dst1._positionZ += tf2._positionZ;
				var minX;
				var minY;
				var minZ;
				var maxX;
				var maxY;
				var maxZ;
				s._geom._computeAabb(s._aabb,s._ptransform);
				minX = s._aabb._minX;
				minY = s._aabb._minY;
				minZ = s._aabb._minZ;
				maxX = s._aabb._maxX;
				maxY = s._aabb._maxY;
				maxZ = s._aabb._maxZ;
				s._geom._computeAabb(s._aabb,s._transform);
				s._aabb._minX = minX < s._aabb._minX ? minX : s._aabb._minX;
				s._aabb._minY = minY < s._aabb._minY ? minY : s._aabb._minY;
				s._aabb._minZ = minZ < s._aabb._minZ ? minZ : s._aabb._minZ;
				s._aabb._maxX = maxX > s._aabb._maxX ? maxX : s._aabb._maxX;
				s._aabb._maxY = maxY > s._aabb._maxY ? maxY : s._aabb._maxY;
				s._aabb._maxZ = maxZ > s._aabb._maxZ ? maxZ : s._aabb._maxZ;
				if(s._proxy != null) {
					var dX;
					var dY;
					var dZ;
					dX = s._transform._positionX - s._ptransform._positionX;
					dY = s._transform._positionY - s._ptransform._positionY;
					dZ = s._transform._positionZ - s._ptransform._positionZ;
					var v = s.displacement;
					v.x = dX;
					v.y = dY;
					v.z = dZ;
					s._rigidBody._world._broadPhase.moveProxy(s._proxy,s._aabb,s.displacement);
				}
				s = n;
			}
		}
	}
	,__class__: oimo_dynamics_Island
};
var oimo_dynamics_TimeStep = function() {
	this.dt = 0;
	this.invDt = 0;
	this.dtRatio = 1;
};
oimo_dynamics_TimeStep.__name__ = true;
oimo_dynamics_TimeStep.prototype = {
	__class__: oimo_dynamics_TimeStep
};
var oimo_dynamics_World = function(broadPhaseType,gravity) {
	if(broadPhaseType == null) {
		broadPhaseType = 2;
	}
	switch(broadPhaseType) {
	case 1:
		this._broadPhase = new oimo_collision_broadphase_bruteforce_BruteForceBroadPhase();
		break;
	case 2:
		this._broadPhase = new oimo_collision_broadphase_bvh_BvhBroadPhase();
		break;
	}
	this._contactManager = new oimo_dynamics_ContactManager(this._broadPhase);
	if(gravity == null) {
		gravity = new oimo_common_Vec3(0,-9.80665,0);
	}
	this._gravity = new oimo_common_Vec3(gravity.x,gravity.y,gravity.z);
	this._rigidBodyList = null;
	this._rigidBodyListLast = null;
	this._jointList = null;
	this._jointListLast = null;
	this._numRigidBodies = 0;
	this._numShapes = 0;
	this._numJoints = 0;
	this._numIslands = 0;
	this._numVelocityIterations = 10;
	this._numPositionIterations = 5;
	this._rayCastWrapper = new oimo_dynamics__$World_RayCastWrapper();
	this._convexCastWrapper = new oimo_dynamics__$World_ConvexCastWrapper();
	this._aabbTestWrapper = new oimo_dynamics__$World_AabbTestWrapper();
	this._island = new oimo_dynamics_Island();
	this._solversInIslands = new Array(oimo_common_Setting.islandInitialConstraintArraySize);
	this._rigidBodyStack = new Array(oimo_common_Setting.islandInitialRigidBodyArraySize);
	this._timeStep = new oimo_dynamics_TimeStep();
	this._pool = new oimo_common_Pool();
	this._shapeIdCount = 0;
};
oimo_dynamics_World.__name__ = true;
oimo_dynamics_World.prototype = {
	_updateContacts: function() {
		var st = HxOverrides.now() / 1000;
		this._contactManager._updateContacts();
		oimo_dynamics_common_Performance.broadPhaseCollisionTime = (HxOverrides.now() / 1000 - st) * 1000;
		var st = HxOverrides.now() / 1000;
		var c = this._contactManager._contactList;
		while(c != null) {
			var n = c._next;
			if(!c._shouldBeSkipped) {
				c._updateManifold();
			}
			c = n;
		}
		oimo_dynamics_common_Performance.narrowPhaseCollisionTime = (HxOverrides.now() / 1000 - st) * 1000;
	}
	,_solveIslands: function() {
		var st = HxOverrides.now() / 1000;
		if(oimo_common_Setting.disableSleeping) {
			var b = this._rigidBodyList;
			while(b != null) {
				b._sleeping = false;
				b._sleepTime = 0;
				b = b._next;
			}
		}
		if(this._rigidBodyStack.length < this._numRigidBodies) {
			var newStackSize = this._rigidBodyStack.length << 1;
			while(newStackSize < this._numRigidBodies) newStackSize <<= 1;
			this._rigidBodyStack = new Array(newStackSize);
		}
		this._numIslands = 0;
		var _this = this._island;
		var gravity = this._gravity;
		_this.gravityX = gravity.x;
		_this.gravityY = gravity.y;
		_this.gravityZ = gravity.z;
		var b = this._rigidBodyList;
		this._numSolversInIslands = 0;
		while(b != null) {
			var n = b._next;
			while(!(b._addedToIsland || b._sleeping || b._type == 1)) {
				if(b._numContactLinks == 0 && b._numJointLinks == 0) {
					this._island._stepSingleRigidBody(this._timeStep,b);
					this._numIslands++;
					break;
				}
				this.buildIsland(b);
				this._island._step(this._timeStep,this._numVelocityIterations,this._numPositionIterations);
				this._island._clear();
				this._numIslands++;
				break;
			}
			b = n;
		}
		this._contactManager._postSolve();
		b = this._rigidBodyList;
		while(b != null) {
			b._addedToIsland = false;
			b = b._next;
		}
		b = this._rigidBodyList;
		while(b != null) {
			b._forceX = 0;
			b._forceY = 0;
			b._forceZ = 0;
			b._torqueX = 0;
			b._torqueY = 0;
			b._torqueZ = 0;
			b = b._next;
		}
		while(this._numSolversInIslands > 0) {
			this._solversInIslands[--this._numSolversInIslands]._addedToIsland = false;
			this._solversInIslands[this._numSolversInIslands] = null;
		}
		oimo_dynamics_common_Performance.dynamicsTime = (HxOverrides.now() / 1000 - st) * 1000;
	}
	,buildIsland: function(base) {
		var stackCount = 1;
		this._island._addRigidBody(base);
		this._rigidBodyStack[0] = base;
		while(stackCount > 0) {
			var rb = this._rigidBodyStack[--stackCount];
			this._rigidBodyStack[stackCount] = null;
			if(rb._type == 1) {
				continue;
			}
			var cl = rb._contactLinkList;
			while(cl != null) {
				var n = cl._next;
				var cc = cl._contact._contactConstraint;
				var ccs = cl._contact._contactConstraint._solver;
				if(cc.isTouching() && !ccs._addedToIsland) {
					if(this._solversInIslands.length == this._numSolversInIslands) {
						var newArray = new Array(this._numSolversInIslands << 1);
						var _g = 0;
						var _g1 = this._numSolversInIslands;
						while(_g < _g1) {
							var i = _g++;
							newArray[i] = this._solversInIslands[i];
							this._solversInIslands[i] = null;
						}
						this._solversInIslands = newArray;
					}
					this._solversInIslands[this._numSolversInIslands++] = ccs;
					this._island._addConstraintSolver(ccs,cc._positionCorrectionAlgorithm);
					var other = cl._other;
					if(!other._addedToIsland) {
						this._island._addRigidBody(other);
						this._rigidBodyStack[stackCount++] = other;
					}
				}
				cl = n;
			}
			var jl = rb._jointLinkList;
			while(jl != null) {
				var n1 = jl._next;
				var j = jl._joint;
				var js = j._solver;
				if(!js._addedToIsland) {
					if(this._solversInIslands.length == this._numSolversInIslands) {
						var newArray1 = new Array(this._numSolversInIslands << 1);
						var _g2 = 0;
						var _g3 = this._numSolversInIslands;
						while(_g2 < _g3) {
							var i1 = _g2++;
							newArray1[i1] = this._solversInIslands[i1];
							this._solversInIslands[i1] = null;
						}
						this._solversInIslands = newArray1;
					}
					this._solversInIslands[this._numSolversInIslands++] = js;
					this._island._addConstraintSolver(js,j._positionCorrectionAlgorithm);
					var other1 = jl._other;
					if(!other1._addedToIsland) {
						this._island._addRigidBody(other1);
						this._rigidBodyStack[stackCount++] = other1;
					}
				}
				jl = n1;
			}
		}
	}
	,_drawBvh: function(d,tree) {
		if(d.drawBvh) {
			this._drawBvhNode(d,tree._root,0,d.style.bvhNodeColor);
		}
	}
	,_drawBvhNode: function(d,node,level,color) {
		if(node == null) {
			return;
		}
		if(level >= d.drawBvhMinLevel && level <= d.drawBvhMaxLevel) {
			var _this = this._pool;
			var min = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
			var _this = this._pool;
			var max = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
			var v = min;
			v.x = node._aabbMinX;
			v.y = node._aabbMinY;
			v.z = node._aabbMinZ;
			var v = max;
			v.x = node._aabbMaxX;
			v.y = node._aabbMaxY;
			v.z = node._aabbMaxZ;
			d.aabb(min,max,color);
			var _this = this._pool;
			if(min != null) {
				min.zero();
				if(_this.sizeVec3 == _this.stackVec3.length) {
					var newArray = new Array(_this.sizeVec3 << 1);
					var _g = 0;
					var _g1 = _this.sizeVec3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackVec3[i];
						_this.stackVec3[i] = null;
					}
					_this.stackVec3 = newArray;
				}
				_this.stackVec3[_this.sizeVec3++] = min;
			}
			var _this = this._pool;
			if(max != null) {
				max.zero();
				if(_this.sizeVec3 == _this.stackVec3.length) {
					var newArray = new Array(_this.sizeVec3 << 1);
					var _g = 0;
					var _g1 = _this.sizeVec3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackVec3[i];
						_this.stackVec3[i] = null;
					}
					_this.stackVec3 = newArray;
				}
				_this.stackVec3[_this.sizeVec3++] = max;
			}
		}
		this._drawBvhNode(d,node._children[0],level + 1,color);
		this._drawBvhNode(d,node._children[1],level + 1,color);
	}
	,_drawRigidBodies: function(d) {
		var style = d.style;
		var r = this._rigidBodyList;
		while(r != null) {
			var n = r._next;
			if(d.drawBases) {
				var style1 = d.style;
				d.basis(r._transform,style1.basisLength,style1.basisColorX,style1.basisColorY,style1.basisColorZ);
			}
			var shapeColor = null;
			var isDynamic = r._type == 0;
			if(!isDynamic) {
				shapeColor = r._type == 2 ? style.kinematicShapeColor : style.staticShapeColor;
			}
			var s = r._shapeList;
			while(s != null) {
				var n1 = s._next;
				if(isDynamic) {
					if((s._id & 1) == 0) {
						shapeColor = r._sleeping ? style.sleepingShapeColor1 : r._sleepTime > oimo_common_Setting.sleepingTimeThreshold ? style.sleepyShapeColor1 : style.shapeColor1;
					} else {
						shapeColor = r._sleeping ? style.sleepingShapeColor2 : r._sleepTime > oimo_common_Setting.sleepingTimeThreshold ? style.sleepyShapeColor2 : style.shapeColor2;
					}
				}
				if(d.drawShapes) {
					var geom = s._geom;
					var tf = s._transform;
					switch(geom._type) {
					case 0:
						d.sphere(tf,geom._radius,shapeColor);
						break;
					case 1:
						var g = geom;
						var _this = this._pool;
						var hx = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
						var v = hx;
						v.x = g._halfExtentsX;
						v.y = g._halfExtentsY;
						v.z = g._halfExtentsZ;
						d.box(tf,hx,shapeColor);
						var _this1 = this._pool;
						if(hx != null) {
							hx.zero();
							if(_this1.sizeVec3 == _this1.stackVec3.length) {
								var newArray = new Array(_this1.sizeVec3 << 1);
								var _g = 0;
								var _g1 = _this1.sizeVec3;
								while(_g < _g1) {
									var i = _g++;
									newArray[i] = _this1.stackVec3[i];
									_this1.stackVec3[i] = null;
								}
								_this1.stackVec3 = newArray;
							}
							_this1.stackVec3[_this1.sizeVec3++] = hx;
						}
						break;
					case 2:
						var g1 = geom;
						d.cylinder(tf,g1._radius,g1._halfHeight,shapeColor);
						break;
					case 3:
						var g2 = geom;
						d.cone(tf,g2._radius,g2._halfHeight,shapeColor);
						break;
					case 4:
						var g3 = geom;
						d.capsule(tf,g3._radius,g3._halfHeight,shapeColor);
						break;
					case 5:
						var g4 = geom;
						var n2 = g4._numVertices;
						var _this2 = this._pool;
						var v1 = _this2.sizeVec3 == 0 ? new oimo_common_Vec3() : _this2.stackVec3[--_this2.sizeVec3];
						var _this3 = this._pool;
						var v2 = _this3.sizeVec3 == 0 ? new oimo_common_Vec3() : _this3.stackVec3[--_this3.sizeVec3];
						var _this4 = this._pool;
						var v3 = _this4.sizeVec3 == 0 ? new oimo_common_Vec3() : _this4.stackVec3[--_this4.sizeVec3];
						var _this5 = this._pool;
						var v12 = _this5.sizeVec3 == 0 ? new oimo_common_Vec3() : _this5.stackVec3[--_this5.sizeVec3];
						var _this6 = this._pool;
						var v13 = _this6.sizeVec3 == 0 ? new oimo_common_Vec3() : _this6.stackVec3[--_this6.sizeVec3];
						var _this7 = this._pool;
						var normal = _this7.sizeVec3 == 0 ? new oimo_common_Vec3() : _this7.stackVec3[--_this7.sizeVec3];
						var _this8 = this._pool;
						var m = _this8.sizeMat3 == 0 ? new oimo_common_Mat3() : _this8.stackMat3[--_this8.sizeMat3];
						var _this9 = this._pool;
						var o = _this9.sizeVec3 == 0 ? new oimo_common_Vec3() : _this9.stackVec3[--_this9.sizeVec3];
						var m1 = m;
						m1.e00 = tf._rotation00;
						m1.e01 = tf._rotation01;
						m1.e02 = tf._rotation02;
						m1.e10 = tf._rotation10;
						m1.e11 = tf._rotation11;
						m1.e12 = tf._rotation12;
						m1.e20 = tf._rotation20;
						m1.e21 = tf._rotation21;
						m1.e22 = tf._rotation22;
						var v4 = o;
						v4.x = tf._positionX;
						v4.y = tf._positionY;
						v4.z = tf._positionZ;
						var _g2 = 0;
						while(_g2 < n2) {
							var i1 = _g2++;
							var _this10 = g4._tmpVertices[i1];
							var v5 = g4._vertices[i1];
							_this10.x = v5.x;
							_this10.y = v5.y;
							_this10.z = v5.z;
							var y = _this10.x * m.e10 + _this10.y * m.e11 + _this10.z * m.e12;
							var z = _this10.x * m.e20 + _this10.y * m.e21 + _this10.z * m.e22;
							_this10.x = _this10.x * m.e00 + _this10.y * m.e01 + _this10.z * m.e02;
							_this10.y = y;
							_this10.z = z;
							_this10.x += o.x;
							_this10.y += o.y;
							_this10.z += o.z;
						}
						if(n2 > 30) {
							var _g3 = 0;
							while(_g3 < n2) {
								var i2 = _g3++;
								var v6 = g4._tmpVertices[i2];
								v1.x = v6.x;
								v1.y = v6.y;
								v1.z = v6.z;
								var v7 = g4._tmpVertices[(i2 + 1) % n2];
								v2.x = v7.x;
								v2.y = v7.y;
								v2.z = v7.z;
								d.line(v1,v2,shapeColor);
							}
						} else if(this._debugDraw.wireframe || n2 > 10) {
							var _g4 = 0;
							while(_g4 < n2) {
								var i3 = _g4++;
								var v8 = g4._tmpVertices[i3];
								v1.x = v8.x;
								v1.y = v8.y;
								v1.z = v8.z;
								var _g5 = 0;
								while(_g5 < i3) {
									var v9 = g4._tmpVertices[_g5++];
									v2.x = v9.x;
									v2.y = v9.y;
									v2.z = v9.z;
									d.line(v1,v2,shapeColor);
								}
							}
						} else {
							var _g6 = 0;
							while(_g6 < n2) {
								var i4 = _g6++;
								var v10 = g4._tmpVertices[i4];
								v1.x = v10.x;
								v1.y = v10.y;
								v1.z = v10.z;
								var _g7 = 0;
								while(_g7 < i4) {
									var j = _g7++;
									var v11 = g4._tmpVertices[j];
									v2.x = v11.x;
									v2.y = v11.y;
									v2.z = v11.z;
									var _g8 = 0;
									while(_g8 < j) {
										var v14 = g4._tmpVertices[_g8++];
										v3.x = v14.x;
										v3.y = v14.y;
										v3.z = v14.z;
										v12.x = v2.x;
										v12.y = v2.y;
										v12.z = v2.z;
										var _this11 = v12;
										_this11.x -= v1.x;
										_this11.y -= v1.y;
										_this11.z -= v1.z;
										v13.x = v3.x;
										v13.y = v3.y;
										v13.z = v3.z;
										var _this12 = v13;
										_this12.x -= v1.x;
										_this12.y -= v1.y;
										_this12.z -= v1.z;
										normal.x = v12.x;
										normal.y = v12.y;
										normal.z = v12.z;
										var _this13 = normal;
										var y1 = _this13.z * v13.x - _this13.x * v13.z;
										var z1 = _this13.x * v13.y - _this13.y * v13.x;
										_this13.x = _this13.y * v13.z - _this13.z * v13.y;
										_this13.y = y1;
										_this13.z = z1;
										var invLen = Math.sqrt(_this13.x * _this13.x + _this13.y * _this13.y + _this13.z * _this13.z);
										if(invLen > 0) {
											invLen = 1 / invLen;
										}
										_this13.x *= invLen;
										_this13.y *= invLen;
										_this13.z *= invLen;
										d.triangle(v1,v2,v3,normal,normal,normal,shapeColor);
										normal.x = -normal.x;
										normal.y = -normal.y;
										normal.z = -normal.z;
										d.triangle(v1,v3,v2,normal,normal,normal,shapeColor);
									}
								}
							}
						}
						var _this14 = this._pool;
						if(v1 != null) {
							v1.zero();
							if(_this14.sizeVec3 == _this14.stackVec3.length) {
								var newArray1 = new Array(_this14.sizeVec3 << 1);
								var _g9 = 0;
								var _g11 = _this14.sizeVec3;
								while(_g9 < _g11) {
									var i5 = _g9++;
									newArray1[i5] = _this14.stackVec3[i5];
									_this14.stackVec3[i5] = null;
								}
								_this14.stackVec3 = newArray1;
							}
							_this14.stackVec3[_this14.sizeVec3++] = v1;
						}
						var _this15 = this._pool;
						if(v2 != null) {
							v2.zero();
							if(_this15.sizeVec3 == _this15.stackVec3.length) {
								var newArray2 = new Array(_this15.sizeVec3 << 1);
								var _g10 = 0;
								var _g12 = _this15.sizeVec3;
								while(_g10 < _g12) {
									var i6 = _g10++;
									newArray2[i6] = _this15.stackVec3[i6];
									_this15.stackVec3[i6] = null;
								}
								_this15.stackVec3 = newArray2;
							}
							_this15.stackVec3[_this15.sizeVec3++] = v2;
						}
						var _this16 = this._pool;
						if(v3 != null) {
							v3.zero();
							if(_this16.sizeVec3 == _this16.stackVec3.length) {
								var newArray3 = new Array(_this16.sizeVec3 << 1);
								var _g13 = 0;
								var _g14 = _this16.sizeVec3;
								while(_g13 < _g14) {
									var i7 = _g13++;
									newArray3[i7] = _this16.stackVec3[i7];
									_this16.stackVec3[i7] = null;
								}
								_this16.stackVec3 = newArray3;
							}
							_this16.stackVec3[_this16.sizeVec3++] = v3;
						}
						var _this17 = this._pool;
						if(v12 != null) {
							v12.zero();
							if(_this17.sizeVec3 == _this17.stackVec3.length) {
								var newArray4 = new Array(_this17.sizeVec3 << 1);
								var _g15 = 0;
								var _g16 = _this17.sizeVec3;
								while(_g15 < _g16) {
									var i8 = _g15++;
									newArray4[i8] = _this17.stackVec3[i8];
									_this17.stackVec3[i8] = null;
								}
								_this17.stackVec3 = newArray4;
							}
							_this17.stackVec3[_this17.sizeVec3++] = v12;
						}
						var _this18 = this._pool;
						if(v13 != null) {
							v13.zero();
							if(_this18.sizeVec3 == _this18.stackVec3.length) {
								var newArray5 = new Array(_this18.sizeVec3 << 1);
								var _g17 = 0;
								var _g18 = _this18.sizeVec3;
								while(_g17 < _g18) {
									var i9 = _g17++;
									newArray5[i9] = _this18.stackVec3[i9];
									_this18.stackVec3[i9] = null;
								}
								_this18.stackVec3 = newArray5;
							}
							_this18.stackVec3[_this18.sizeVec3++] = v13;
						}
						var _this19 = this._pool;
						if(normal != null) {
							normal.zero();
							if(_this19.sizeVec3 == _this19.stackVec3.length) {
								var newArray6 = new Array(_this19.sizeVec3 << 1);
								var _g19 = 0;
								var _g110 = _this19.sizeVec3;
								while(_g19 < _g110) {
									var i10 = _g19++;
									newArray6[i10] = _this19.stackVec3[i10];
									_this19.stackVec3[i10] = null;
								}
								_this19.stackVec3 = newArray6;
							}
							_this19.stackVec3[_this19.sizeVec3++] = normal;
						}
						var _this20 = this._pool;
						if(m != null) {
							m.e00 = 1;
							m.e01 = 0;
							m.e02 = 0;
							m.e10 = 0;
							m.e11 = 1;
							m.e12 = 0;
							m.e20 = 0;
							m.e21 = 0;
							m.e22 = 1;
							if(_this20.sizeMat3 == _this20.stackMat3.length) {
								var newArray7 = new Array(_this20.sizeMat3 << 1);
								var _g20 = 0;
								var _g111 = _this20.sizeMat3;
								while(_g20 < _g111) {
									var i11 = _g20++;
									newArray7[i11] = _this20.stackMat3[i11];
									_this20.stackMat3[i11] = null;
								}
								_this20.stackMat3 = newArray7;
							}
							_this20.stackMat3[_this20.sizeMat3++] = m;
						}
						var _this21 = this._pool;
						if(o != null) {
							o.zero();
							if(_this21.sizeVec3 == _this21.stackVec3.length) {
								var newArray8 = new Array(_this21.sizeVec3 << 1);
								var _g21 = 0;
								var _g112 = _this21.sizeVec3;
								while(_g21 < _g112) {
									var i12 = _g21++;
									newArray8[i12] = _this21.stackVec3[i12];
									_this21.stackVec3[i12] = null;
								}
								_this21.stackVec3 = newArray8;
							}
							_this21.stackVec3[_this21.sizeVec3++] = o;
						}
						break;
					}
				}
				if(d.drawAabbs) {
					var aabb = s._aabb;
					var color = style.aabbColor;
					var _this22 = this._pool;
					var min = _this22.sizeVec3 == 0 ? new oimo_common_Vec3() : _this22.stackVec3[--_this22.sizeVec3];
					var _this23 = this._pool;
					var max = _this23.sizeVec3 == 0 ? new oimo_common_Vec3() : _this23.stackVec3[--_this23.sizeVec3];
					var v15 = min;
					v15.x = aabb._minX;
					v15.y = aabb._minY;
					v15.z = aabb._minZ;
					var v16 = max;
					v16.x = aabb._maxX;
					v16.y = aabb._maxY;
					v16.z = aabb._maxZ;
					d.aabb(min,max,color);
					var _this24 = this._pool;
					if(min != null) {
						min.zero();
						if(_this24.sizeVec3 == _this24.stackVec3.length) {
							var newArray9 = new Array(_this24.sizeVec3 << 1);
							var _g22 = 0;
							var _g113 = _this24.sizeVec3;
							while(_g22 < _g113) {
								var i13 = _g22++;
								newArray9[i13] = _this24.stackVec3[i13];
								_this24.stackVec3[i13] = null;
							}
							_this24.stackVec3 = newArray9;
						}
						_this24.stackVec3[_this24.sizeVec3++] = min;
					}
					var _this25 = this._pool;
					if(max != null) {
						max.zero();
						if(_this25.sizeVec3 == _this25.stackVec3.length) {
							var newArray10 = new Array(_this25.sizeVec3 << 1);
							var _g23 = 0;
							var _g114 = _this25.sizeVec3;
							while(_g23 < _g114) {
								var i14 = _g23++;
								newArray10[i14] = _this25.stackVec3[i14];
								_this25.stackVec3[i14] = null;
							}
							_this25.stackVec3 = newArray10;
						}
						_this25.stackVec3[_this25.sizeVec3++] = max;
					}
				}
				s = n1;
			}
			r = n;
		}
	}
	,_drawConstraints: function(d) {
		var style = d.style;
		if(d.drawPairs || d.drawContacts) {
			var c = this._contactManager._contactList;
			while(c != null) {
				var n = c._next;
				if(d.drawPairs) {
					var color = style.pairColor;
					var _this = this._pool;
					var v1 = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
					var _this1 = this._pool;
					var v2 = _this1.sizeVec3 == 0 ? new oimo_common_Vec3() : _this1.stackVec3[--_this1.sizeVec3];
					var v = v1;
					v.x = c._s1._transform._positionX;
					v.y = c._s1._transform._positionY;
					v.z = c._s1._transform._positionZ;
					var v3 = v2;
					v3.x = c._s2._transform._positionX;
					v3.y = c._s2._transform._positionY;
					v3.z = c._s2._transform._positionZ;
					d.line(v1,v2,color);
					var _this2 = this._pool;
					if(v1 != null) {
						v1.zero();
						if(_this2.sizeVec3 == _this2.stackVec3.length) {
							var newArray = new Array(_this2.sizeVec3 << 1);
							var _g = 0;
							var _g1 = _this2.sizeVec3;
							while(_g < _g1) {
								var i = _g++;
								newArray[i] = _this2.stackVec3[i];
								_this2.stackVec3[i] = null;
							}
							_this2.stackVec3 = newArray;
						}
						_this2.stackVec3[_this2.sizeVec3++] = v1;
					}
					var _this3 = this._pool;
					if(v2 != null) {
						v2.zero();
						if(_this3.sizeVec3 == _this3.stackVec3.length) {
							var newArray1 = new Array(_this3.sizeVec3 << 1);
							var _g2 = 0;
							var _g11 = _this3.sizeVec3;
							while(_g2 < _g11) {
								var i1 = _g2++;
								newArray1[i1] = _this3.stackVec3[i1];
								_this3.stackVec3[i1] = null;
							}
							_this3.stackVec3 = newArray1;
						}
						_this3.stackVec3[_this3.sizeVec3++] = v2;
					}
				}
				if(d.drawContacts) {
					var cc = c._contactConstraint;
					var ps = c._contactConstraint._manifold._points;
					var _g3 = 0;
					var _g4 = c._contactConstraint._manifold._numPoints;
					while(_g3 < _g4) {
						var p = ps[_g3++];
						var style1 = d.style;
						var _this4 = this._pool;
						var pos1 = _this4.sizeVec3 == 0 ? new oimo_common_Vec3() : _this4.stackVec3[--_this4.sizeVec3];
						var _this5 = this._pool;
						var pos2 = _this5.sizeVec3 == 0 ? new oimo_common_Vec3() : _this5.stackVec3[--_this5.sizeVec3];
						var _this6 = this._pool;
						var normal = _this6.sizeVec3 == 0 ? new oimo_common_Vec3() : _this6.stackVec3[--_this6.sizeVec3];
						var _this7 = this._pool;
						var tangent = _this7.sizeVec3 == 0 ? new oimo_common_Vec3() : _this7.stackVec3[--_this7.sizeVec3];
						var _this8 = this._pool;
						var binormal = _this8.sizeVec3 == 0 ? new oimo_common_Vec3() : _this8.stackVec3[--_this8.sizeVec3];
						var v4 = pos1;
						v4.x = p._pos1X;
						v4.y = p._pos1Y;
						v4.z = p._pos1Z;
						var v5 = pos2;
						v5.x = p._pos2X;
						v5.y = p._pos2Y;
						v5.z = p._pos2Z;
						var v6 = normal;
						v6.x = cc._manifold._normalX;
						v6.y = cc._manifold._normalY;
						v6.z = cc._manifold._normalZ;
						var v7 = tangent;
						v7.x = cc._manifold._tangentX;
						v7.y = cc._manifold._tangentY;
						v7.z = cc._manifold._tangentZ;
						var v8 = binormal;
						v8.x = cc._manifold._binormalX;
						v8.y = cc._manifold._binormalY;
						v8.z = cc._manifold._binormalZ;
						if(p._disabled) {
							d.point(pos1,style1.disabledContactColor);
							d.point(pos2,style1.disabledContactColor);
							d.line(pos1,pos2,style1.disabledContactColor);
						} else if(p._warmStarted) {
							var color1;
							switch(p._id & 3) {
							case 0:
								color1 = style1.contactColor;
								break;
							case 1:
								color1 = style1.contactColor2;
								break;
							case 2:
								color1 = style1.contactColor3;
								break;
							default:
								color1 = style1.contactColor4;
							}
							d.point(pos1,color1);
							d.point(pos2,color1);
							d.line(pos1,pos2,style1.contactColor);
						} else {
							d.point(pos1,style1.newContactColor);
							d.point(pos2,style1.newContactColor);
							d.line(pos1,pos2,style1.newContactColor);
						}
						pos2.x = pos1.x;
						pos2.y = pos1.y;
						pos2.z = pos1.z;
						var _this9 = pos2;
						var s = style1.contactNormalLength;
						_this9.x += normal.x * s;
						_this9.y += normal.y * s;
						_this9.z += normal.z * s;
						d.line(pos1,pos2,style1.contactNormalColor);
						if(d.drawContactBases) {
							pos2.x = pos1.x;
							pos2.y = pos1.y;
							pos2.z = pos1.z;
							var _this10 = pos2;
							var s1 = style1.contactTangentLength;
							_this10.x += tangent.x * s1;
							_this10.y += tangent.y * s1;
							_this10.z += tangent.z * s1;
							d.line(pos1,pos2,style1.contactTangentColor);
							pos2.x = pos1.x;
							pos2.y = pos1.y;
							pos2.z = pos1.z;
							var _this11 = pos2;
							var s2 = style1.contactBinormalLength;
							_this11.x += binormal.x * s2;
							_this11.y += binormal.y * s2;
							_this11.z += binormal.z * s2;
							d.line(pos1,pos2,style1.contactBinormalColor);
						}
						var _this12 = this._pool;
						if(pos1 != null) {
							pos1.zero();
							if(_this12.sizeVec3 == _this12.stackVec3.length) {
								var newArray2 = new Array(_this12.sizeVec3 << 1);
								var _g5 = 0;
								var _g12 = _this12.sizeVec3;
								while(_g5 < _g12) {
									var i2 = _g5++;
									newArray2[i2] = _this12.stackVec3[i2];
									_this12.stackVec3[i2] = null;
								}
								_this12.stackVec3 = newArray2;
							}
							_this12.stackVec3[_this12.sizeVec3++] = pos1;
						}
						var _this13 = this._pool;
						if(pos2 != null) {
							pos2.zero();
							if(_this13.sizeVec3 == _this13.stackVec3.length) {
								var newArray3 = new Array(_this13.sizeVec3 << 1);
								var _g6 = 0;
								var _g13 = _this13.sizeVec3;
								while(_g6 < _g13) {
									var i3 = _g6++;
									newArray3[i3] = _this13.stackVec3[i3];
									_this13.stackVec3[i3] = null;
								}
								_this13.stackVec3 = newArray3;
							}
							_this13.stackVec3[_this13.sizeVec3++] = pos2;
						}
						var _this14 = this._pool;
						if(normal != null) {
							normal.zero();
							if(_this14.sizeVec3 == _this14.stackVec3.length) {
								var newArray4 = new Array(_this14.sizeVec3 << 1);
								var _g7 = 0;
								var _g14 = _this14.sizeVec3;
								while(_g7 < _g14) {
									var i4 = _g7++;
									newArray4[i4] = _this14.stackVec3[i4];
									_this14.stackVec3[i4] = null;
								}
								_this14.stackVec3 = newArray4;
							}
							_this14.stackVec3[_this14.sizeVec3++] = normal;
						}
						var _this15 = this._pool;
						if(tangent != null) {
							tangent.zero();
							if(_this15.sizeVec3 == _this15.stackVec3.length) {
								var newArray5 = new Array(_this15.sizeVec3 << 1);
								var _g8 = 0;
								var _g15 = _this15.sizeVec3;
								while(_g8 < _g15) {
									var i5 = _g8++;
									newArray5[i5] = _this15.stackVec3[i5];
									_this15.stackVec3[i5] = null;
								}
								_this15.stackVec3 = newArray5;
							}
							_this15.stackVec3[_this15.sizeVec3++] = tangent;
						}
						var _this16 = this._pool;
						if(binormal != null) {
							binormal.zero();
							if(_this16.sizeVec3 == _this16.stackVec3.length) {
								var newArray6 = new Array(_this16.sizeVec3 << 1);
								var _g9 = 0;
								var _g16 = _this16.sizeVec3;
								while(_g9 < _g16) {
									var i6 = _g9++;
									newArray6[i6] = _this16.stackVec3[i6];
									_this16.stackVec3[i6] = null;
								}
								_this16.stackVec3 = newArray6;
							}
							_this16.stackVec3[_this16.sizeVec3++] = binormal;
						}
					}
				}
				c = n;
			}
		}
		if(d.drawJoints) {
			var j = this._jointList;
			while(j != null) {
				var n = j._next;
				var _this = this._pool;
				var p1 = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
				var _this1 = this._pool;
				var p2 = _this1.sizeVec3 == 0 ? new oimo_common_Vec3() : _this1.stackVec3[--_this1.sizeVec3];
				var v = p1;
				v.x = j._b1._transform._positionX;
				v.y = j._b1._transform._positionY;
				v.z = j._b1._transform._positionZ;
				var v1 = p2;
				v1.x = j._b2._transform._positionX;
				v1.y = j._b2._transform._positionY;
				v1.z = j._b2._transform._positionZ;
				var _this2 = this._pool;
				var anchor1 = _this2.sizeVec3 == 0 ? new oimo_common_Vec3() : _this2.stackVec3[--_this2.sizeVec3];
				var _this3 = this._pool;
				var anchor2 = _this3.sizeVec3 == 0 ? new oimo_common_Vec3() : _this3.stackVec3[--_this3.sizeVec3];
				var _this4 = this._pool;
				var basisX1 = _this4.sizeVec3 == 0 ? new oimo_common_Vec3() : _this4.stackVec3[--_this4.sizeVec3];
				var _this5 = this._pool;
				var basisY1 = _this5.sizeVec3 == 0 ? new oimo_common_Vec3() : _this5.stackVec3[--_this5.sizeVec3];
				var _this6 = this._pool;
				var basisZ1 = _this6.sizeVec3 == 0 ? new oimo_common_Vec3() : _this6.stackVec3[--_this6.sizeVec3];
				var _this7 = this._pool;
				var basisX2 = _this7.sizeVec3 == 0 ? new oimo_common_Vec3() : _this7.stackVec3[--_this7.sizeVec3];
				var _this8 = this._pool;
				var basisY2 = _this8.sizeVec3 == 0 ? new oimo_common_Vec3() : _this8.stackVec3[--_this8.sizeVec3];
				var _this9 = this._pool;
				var basisZ2 = _this9.sizeVec3 == 0 ? new oimo_common_Vec3() : _this9.stackVec3[--_this9.sizeVec3];
				var v2 = anchor1;
				v2.x = j._anchor1X;
				v2.y = j._anchor1Y;
				v2.z = j._anchor1Z;
				var v3 = anchor2;
				v3.x = j._anchor2X;
				v3.y = j._anchor2Y;
				v3.z = j._anchor2Z;
				var v4 = basisX1;
				v4.x = j._basisX1X;
				v4.y = j._basisX1Y;
				v4.z = j._basisX1Z;
				var v5 = basisY1;
				v5.x = j._basisY1X;
				v5.y = j._basisY1Y;
				v5.z = j._basisY1Z;
				var v6 = basisZ1;
				v6.x = j._basisZ1X;
				v6.y = j._basisZ1Y;
				v6.z = j._basisZ1Z;
				var v7 = basisX2;
				v7.x = j._basisX2X;
				v7.y = j._basisX2Y;
				v7.z = j._basisX2Z;
				var v8 = basisY2;
				v8.x = j._basisY2X;
				v8.y = j._basisY2Y;
				v8.z = j._basisY2Z;
				var v9 = basisZ2;
				v9.x = j._basisZ2X;
				v9.y = j._basisZ2Y;
				v9.z = j._basisZ2Z;
				d.line(p1,anchor1,d.style.jointLineColor);
				d.line(p2,anchor2,d.style.jointLineColor);
				if(d.drawJointLimits) {
					switch(j._type) {
					case 0:
						break;
					case 1:
						var lm = j._lm;
						this._drawRotationalLimit(d,anchor1,basisY1,basisZ1,basisY2,d.style.jointRotationalConstraintRadius,lm.lowerLimit,lm.upperLimit,d.style.jointLineColor);
						break;
					case 2:
						var j1 = j;
						var color = d.style.jointLineColor;
						var rlm = j1._rotLm;
						var tlm = j1._translLm;
						this._drawRotationalLimit(d,anchor2,basisY1,basisZ1,basisY2,d.style.jointRotationalConstraintRadius,rlm.lowerLimit,rlm.upperLimit,color);
						this._drawTranslationalLimit(d,anchor1,basisX1,tlm.lowerLimit,tlm.upperLimit,color);
						break;
					case 3:
						var lm1 = j._lm;
						this._drawTranslationalLimit(d,anchor1,basisX1,lm1.lowerLimit,lm1.upperLimit,d.style.jointLineColor);
						break;
					case 4:
						var j2 = j;
						var radius = d.style.jointRotationalConstraintRadius;
						var color1 = d.style.jointLineColor;
						var lm11 = j2._lm1;
						var lm2 = j2._lm2;
						this._drawRotationalLimit(d,anchor1,basisY1,basisZ1,basisY1,radius,j2._angleX - lm11.upperLimit,j2._angleX - lm11.lowerLimit,color1);
						this._drawRotationalLimit(d,anchor2,basisX2,basisY2,basisX2,radius,lm2.lowerLimit - j2._angleZ,lm2.upperLimit - j2._angleZ,color1);
						break;
					case 5:
						var j3 = j;
						var radius1 = d.style.jointRotationalConstraintRadius;
						var color2 = d.style.jointLineColor;
						var lm3 = j3._twistLm;
						this._drawRotationalLimit(d,anchor2,basisY2,basisZ2,basisY2,radius1,lm3.lowerLimit - j3._twistAngle,lm3.upperLimit - j3._twistAngle,color2);
						this._drawEllipseOnSphere(d,anchor1,basisX1,basisY1,basisZ1,j3._maxSwingAngle1,j3._maxSwingAngle2,radius1,color2);
						var _this10 = this._pool;
						var _this11 = _this10.sizeVec3 == 0 ? new oimo_common_Vec3() : _this10.stackVec3[--_this10.sizeVec3];
						_this11.x = anchor2.x;
						_this11.y = anchor2.y;
						_this11.z = anchor2.z;
						var _this12 = _this11;
						_this12.x += basisX2.x * radius1;
						_this12.y += basisX2.y * radius1;
						_this12.z += basisX2.z * radius1;
						d.line(anchor2,_this12,color2);
						var _this13 = this._pool;
						if(_this12 != null) {
							_this12.zero();
							if(_this13.sizeVec3 == _this13.stackVec3.length) {
								var newArray = new Array(_this13.sizeVec3 << 1);
								var _g = 0;
								var _g1 = _this13.sizeVec3;
								while(_g < _g1) {
									var i = _g++;
									newArray[i] = _this13.stackVec3[i];
									_this13.stackVec3[i] = null;
								}
								_this13.stackVec3 = newArray;
							}
							_this13.stackVec3[_this13.sizeVec3++] = _this12;
						}
						break;
					case 6:
						var j4 = j;
						var radius2 = d.style.jointRotationalConstraintRadius;
						var color3 = d.style.jointLineColor;
						var rxlm = j4._rotLms[0];
						var rylm = j4._rotLms[1];
						var rzlm = j4._rotLms[2];
						this._drawTranslationalLimit3D(d,anchor1,basisX1,basisY1,basisZ1,j4._translLms[0],j4._translLms[1],j4._translLms[2],color3);
						var _this14 = this._pool;
						var rotYAxis = _this14.sizeVec3 == 0 ? new oimo_common_Vec3() : _this14.stackVec3[--_this14.sizeVec3];
						var v10 = rotYAxis;
						v10.x = j4._axisYX;
						v10.y = j4._axisYY;
						v10.z = j4._axisYZ;
						var _this15 = this._pool;
						var _this16 = _this15.sizeVec3 == 0 ? new oimo_common_Vec3() : _this15.stackVec3[--_this15.sizeVec3];
						_this16.x = basisX1.x;
						_this16.y = basisX1.y;
						_this16.z = basisX1.z;
						var rotYBasisX = _this16;
						var _this17 = this._pool;
						var _this18 = _this17.sizeVec3 == 0 ? new oimo_common_Vec3() : _this17.stackVec3[--_this17.sizeVec3];
						_this18.x = basisX1.x;
						_this18.y = basisX1.y;
						_this18.z = basisX1.z;
						var _this19 = _this18;
						var y = _this19.z * rotYAxis.x - _this19.x * rotYAxis.z;
						var z = _this19.x * rotYAxis.y - _this19.y * rotYAxis.x;
						_this19.x = _this19.y * rotYAxis.z - _this19.z * rotYAxis.y;
						_this19.y = y;
						_this19.z = z;
						this._drawRotationalLimit(d,anchor2,basisY1,basisZ1,basisY1,radius2,j4._angleX - rxlm.upperLimit,j4._angleX - rxlm.lowerLimit,color3);
						this._drawRotationalLimit(d,anchor2,rotYBasisX,_this19,rotYBasisX,radius2,rylm.lowerLimit - j4._angleY,rylm.upperLimit - j4._angleY,color3);
						this._drawRotationalLimit(d,anchor2,basisX2,basisY2,basisX2,radius2,rzlm.lowerLimit - j4._angleZ,rzlm.upperLimit - j4._angleZ,color3);
						break;
					}
				}
				d.line(anchor1,anchor2,d.style.jointErrorColor);
				var _this20 = this._pool;
				if(p1 != null) {
					p1.zero();
					if(_this20.sizeVec3 == _this20.stackVec3.length) {
						var newArray1 = new Array(_this20.sizeVec3 << 1);
						var _g2 = 0;
						var _g11 = _this20.sizeVec3;
						while(_g2 < _g11) {
							var i1 = _g2++;
							newArray1[i1] = _this20.stackVec3[i1];
							_this20.stackVec3[i1] = null;
						}
						_this20.stackVec3 = newArray1;
					}
					_this20.stackVec3[_this20.sizeVec3++] = p1;
				}
				var _this21 = this._pool;
				if(p2 != null) {
					p2.zero();
					if(_this21.sizeVec3 == _this21.stackVec3.length) {
						var newArray2 = new Array(_this21.sizeVec3 << 1);
						var _g3 = 0;
						var _g12 = _this21.sizeVec3;
						while(_g3 < _g12) {
							var i2 = _g3++;
							newArray2[i2] = _this21.stackVec3[i2];
							_this21.stackVec3[i2] = null;
						}
						_this21.stackVec3 = newArray2;
					}
					_this21.stackVec3[_this21.sizeVec3++] = p2;
				}
				var _this22 = this._pool;
				if(anchor1 != null) {
					anchor1.zero();
					if(_this22.sizeVec3 == _this22.stackVec3.length) {
						var newArray3 = new Array(_this22.sizeVec3 << 1);
						var _g4 = 0;
						var _g13 = _this22.sizeVec3;
						while(_g4 < _g13) {
							var i3 = _g4++;
							newArray3[i3] = _this22.stackVec3[i3];
							_this22.stackVec3[i3] = null;
						}
						_this22.stackVec3 = newArray3;
					}
					_this22.stackVec3[_this22.sizeVec3++] = anchor1;
				}
				var _this23 = this._pool;
				if(anchor2 != null) {
					anchor2.zero();
					if(_this23.sizeVec3 == _this23.stackVec3.length) {
						var newArray4 = new Array(_this23.sizeVec3 << 1);
						var _g5 = 0;
						var _g14 = _this23.sizeVec3;
						while(_g5 < _g14) {
							var i4 = _g5++;
							newArray4[i4] = _this23.stackVec3[i4];
							_this23.stackVec3[i4] = null;
						}
						_this23.stackVec3 = newArray4;
					}
					_this23.stackVec3[_this23.sizeVec3++] = anchor2;
				}
				var _this24 = this._pool;
				if(basisX1 != null) {
					basisX1.zero();
					if(_this24.sizeVec3 == _this24.stackVec3.length) {
						var newArray5 = new Array(_this24.sizeVec3 << 1);
						var _g6 = 0;
						var _g15 = _this24.sizeVec3;
						while(_g6 < _g15) {
							var i5 = _g6++;
							newArray5[i5] = _this24.stackVec3[i5];
							_this24.stackVec3[i5] = null;
						}
						_this24.stackVec3 = newArray5;
					}
					_this24.stackVec3[_this24.sizeVec3++] = basisX1;
				}
				var _this25 = this._pool;
				if(basisY1 != null) {
					basisY1.zero();
					if(_this25.sizeVec3 == _this25.stackVec3.length) {
						var newArray6 = new Array(_this25.sizeVec3 << 1);
						var _g7 = 0;
						var _g16 = _this25.sizeVec3;
						while(_g7 < _g16) {
							var i6 = _g7++;
							newArray6[i6] = _this25.stackVec3[i6];
							_this25.stackVec3[i6] = null;
						}
						_this25.stackVec3 = newArray6;
					}
					_this25.stackVec3[_this25.sizeVec3++] = basisY1;
				}
				var _this26 = this._pool;
				if(basisZ1 != null) {
					basisZ1.zero();
					if(_this26.sizeVec3 == _this26.stackVec3.length) {
						var newArray7 = new Array(_this26.sizeVec3 << 1);
						var _g8 = 0;
						var _g17 = _this26.sizeVec3;
						while(_g8 < _g17) {
							var i7 = _g8++;
							newArray7[i7] = _this26.stackVec3[i7];
							_this26.stackVec3[i7] = null;
						}
						_this26.stackVec3 = newArray7;
					}
					_this26.stackVec3[_this26.sizeVec3++] = basisZ1;
				}
				var _this27 = this._pool;
				if(basisX2 != null) {
					basisX2.zero();
					if(_this27.sizeVec3 == _this27.stackVec3.length) {
						var newArray8 = new Array(_this27.sizeVec3 << 1);
						var _g9 = 0;
						var _g18 = _this27.sizeVec3;
						while(_g9 < _g18) {
							var i8 = _g9++;
							newArray8[i8] = _this27.stackVec3[i8];
							_this27.stackVec3[i8] = null;
						}
						_this27.stackVec3 = newArray8;
					}
					_this27.stackVec3[_this27.sizeVec3++] = basisX2;
				}
				var _this28 = this._pool;
				if(basisY2 != null) {
					basisY2.zero();
					if(_this28.sizeVec3 == _this28.stackVec3.length) {
						var newArray9 = new Array(_this28.sizeVec3 << 1);
						var _g10 = 0;
						var _g19 = _this28.sizeVec3;
						while(_g10 < _g19) {
							var i9 = _g10++;
							newArray9[i9] = _this28.stackVec3[i9];
							_this28.stackVec3[i9] = null;
						}
						_this28.stackVec3 = newArray9;
					}
					_this28.stackVec3[_this28.sizeVec3++] = basisY2;
				}
				var _this29 = this._pool;
				if(basisZ2 != null) {
					basisZ2.zero();
					if(_this29.sizeVec3 == _this29.stackVec3.length) {
						var newArray10 = new Array(_this29.sizeVec3 << 1);
						var _g20 = 0;
						var _g110 = _this29.sizeVec3;
						while(_g20 < _g110) {
							var i10 = _g20++;
							newArray10[i10] = _this29.stackVec3[i10];
							_this29.stackVec3[i10] = null;
						}
						_this29.stackVec3 = newArray10;
					}
					_this29.stackVec3[_this29.sizeVec3++] = basisZ2;
				}
				j = n;
			}
		}
	}
	,_drawRotationalLimit: function(d,center,ex,ey,needle,radius,min,max,color) {
		if(min != max) {
			var _this = this._pool;
			var _this1 = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
			_this1.x = center.x;
			_this1.y = center.y;
			_this1.z = center.z;
			var _this = _this1;
			_this.x += needle.x * radius;
			_this.y += needle.y * radius;
			_this.z += needle.z * radius;
			d.line(center,_this,color);
			var _this1 = this._pool;
			if(_this != null) {
				_this.zero();
				if(_this1.sizeVec3 == _this1.stackVec3.length) {
					var newArray = new Array(_this1.sizeVec3 << 1);
					var _g = 0;
					var _g1 = _this1.sizeVec3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this1.stackVec3[i];
						_this1.stackVec3[i] = null;
					}
					_this1.stackVec3 = newArray;
				}
				_this1.stackVec3[_this1.sizeVec3++] = _this;
			}
			if(min > max) {
				d.ellipse(center,ex,ey,radius,radius,color);
			} else {
				d.arc(center,ex,ey,radius,radius,min,max,true,color);
			}
		}
	}
	,_drawTranslationalLimit: function(d,center,ex,min,max,color) {
		if(min < max) {
			var _this = this._pool;
			var _this1 = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
			_this1.x = center.x;
			_this1.y = center.y;
			_this1.z = center.z;
			var _this = _this1;
			_this.x += ex.x * min;
			_this.y += ex.y * min;
			_this.z += ex.z * min;
			var _this1 = this._pool;
			var _this2 = _this1.sizeVec3 == 0 ? new oimo_common_Vec3() : _this1.stackVec3[--_this1.sizeVec3];
			_this2.x = center.x;
			_this2.y = center.y;
			_this2.z = center.z;
			var _this1 = _this2;
			_this1.x += ex.x * max;
			_this1.y += ex.y * max;
			_this1.z += ex.z * max;
			d.line(_this,_this1,color);
			var _this2 = this._pool;
			if(_this != null) {
				_this.zero();
				if(_this2.sizeVec3 == _this2.stackVec3.length) {
					var newArray = new Array(_this2.sizeVec3 << 1);
					var _g = 0;
					var _g1 = _this2.sizeVec3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this2.stackVec3[i];
						_this2.stackVec3[i] = null;
					}
					_this2.stackVec3 = newArray;
				}
				_this2.stackVec3[_this2.sizeVec3++] = _this;
			}
			var _this = this._pool;
			if(_this1 != null) {
				_this1.zero();
				if(_this.sizeVec3 == _this.stackVec3.length) {
					var newArray = new Array(_this.sizeVec3 << 1);
					var _g = 0;
					var _g1 = _this.sizeVec3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackVec3[i];
						_this.stackVec3[i] = null;
					}
					_this.stackVec3 = newArray;
				}
				_this.stackVec3[_this.sizeVec3++] = _this1;
			}
		}
	}
	,_drawTranslationalLimit3D: function(d,center,ex,ey,ez,xlm,ylm,zlm,color) {
		var minx = xlm.lowerLimit;
		var maxx = xlm.upperLimit;
		var miny = ylm.lowerLimit;
		var maxy = ylm.upperLimit;
		var minz = zlm.lowerLimit;
		var maxz = zlm.upperLimit;
		var _this = this._pool;
		if(_this.sizeVec3 == 0) {
			new oimo_common_Vec3();
		} else {
			--_this.sizeVec3;
		}
		var _this = this._pool;
		if(_this.sizeVec3 == 0) {
			new oimo_common_Vec3();
		} else {
			--_this.sizeVec3;
		}
		var _this = this._pool;
		var _this1 = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		_this1.x = center.x;
		_this1.y = center.y;
		_this1.z = center.z;
		var _this = _this1;
		_this.x += ex.x * minx;
		_this.y += ex.y * minx;
		_this.z += ex.z * minx;
		_this.x += ey.x * miny;
		_this.y += ey.y * miny;
		_this.z += ey.z * miny;
		_this.x += ez.x * minz;
		_this.y += ez.y * minz;
		_this.z += ez.z * minz;
		var _this1 = this._pool;
		var _this2 = _this1.sizeVec3 == 0 ? new oimo_common_Vec3() : _this1.stackVec3[--_this1.sizeVec3];
		_this2.x = center.x;
		_this2.y = center.y;
		_this2.z = center.z;
		var _this1 = _this2;
		_this1.x += ex.x * minx;
		_this1.y += ex.y * minx;
		_this1.z += ex.z * minx;
		_this1.x += ey.x * miny;
		_this1.y += ey.y * miny;
		_this1.z += ey.z * miny;
		_this1.x += ez.x * maxz;
		_this1.y += ez.y * maxz;
		_this1.z += ez.z * maxz;
		var _this2 = this._pool;
		var _this3 = _this2.sizeVec3 == 0 ? new oimo_common_Vec3() : _this2.stackVec3[--_this2.sizeVec3];
		_this3.x = center.x;
		_this3.y = center.y;
		_this3.z = center.z;
		var _this2 = _this3;
		_this2.x += ex.x * minx;
		_this2.y += ex.y * minx;
		_this2.z += ex.z * minx;
		_this2.x += ey.x * maxy;
		_this2.y += ey.y * maxy;
		_this2.z += ey.z * maxy;
		_this2.x += ez.x * minz;
		_this2.y += ez.y * minz;
		_this2.z += ez.z * minz;
		var _this3 = this._pool;
		var _this4 = _this3.sizeVec3 == 0 ? new oimo_common_Vec3() : _this3.stackVec3[--_this3.sizeVec3];
		_this4.x = center.x;
		_this4.y = center.y;
		_this4.z = center.z;
		var _this3 = _this4;
		_this3.x += ex.x * minx;
		_this3.y += ex.y * minx;
		_this3.z += ex.z * minx;
		_this3.x += ey.x * maxy;
		_this3.y += ey.y * maxy;
		_this3.z += ey.z * maxy;
		_this3.x += ez.x * maxz;
		_this3.y += ez.y * maxz;
		_this3.z += ez.z * maxz;
		var _this4 = this._pool;
		var _this5 = _this4.sizeVec3 == 0 ? new oimo_common_Vec3() : _this4.stackVec3[--_this4.sizeVec3];
		_this5.x = center.x;
		_this5.y = center.y;
		_this5.z = center.z;
		var _this4 = _this5;
		_this4.x += ex.x * maxx;
		_this4.y += ex.y * maxx;
		_this4.z += ex.z * maxx;
		_this4.x += ey.x * miny;
		_this4.y += ey.y * miny;
		_this4.z += ey.z * miny;
		_this4.x += ez.x * minz;
		_this4.y += ez.y * minz;
		_this4.z += ez.z * minz;
		var _this5 = this._pool;
		var _this6 = _this5.sizeVec3 == 0 ? new oimo_common_Vec3() : _this5.stackVec3[--_this5.sizeVec3];
		_this6.x = center.x;
		_this6.y = center.y;
		_this6.z = center.z;
		var _this5 = _this6;
		_this5.x += ex.x * maxx;
		_this5.y += ex.y * maxx;
		_this5.z += ex.z * maxx;
		_this5.x += ey.x * miny;
		_this5.y += ey.y * miny;
		_this5.z += ey.z * miny;
		_this5.x += ez.x * maxz;
		_this5.y += ez.y * maxz;
		_this5.z += ez.z * maxz;
		var _this6 = this._pool;
		var _this7 = _this6.sizeVec3 == 0 ? new oimo_common_Vec3() : _this6.stackVec3[--_this6.sizeVec3];
		_this7.x = center.x;
		_this7.y = center.y;
		_this7.z = center.z;
		var _this6 = _this7;
		_this6.x += ex.x * maxx;
		_this6.y += ex.y * maxx;
		_this6.z += ex.z * maxx;
		_this6.x += ey.x * maxy;
		_this6.y += ey.y * maxy;
		_this6.z += ey.z * maxy;
		_this6.x += ez.x * minz;
		_this6.y += ez.y * minz;
		_this6.z += ez.z * minz;
		var _this7 = this._pool;
		var _this8 = _this7.sizeVec3 == 0 ? new oimo_common_Vec3() : _this7.stackVec3[--_this7.sizeVec3];
		_this8.x = center.x;
		_this8.y = center.y;
		_this8.z = center.z;
		var _this7 = _this8;
		_this7.x += ex.x * maxx;
		_this7.y += ex.y * maxx;
		_this7.z += ex.z * maxx;
		_this7.x += ey.x * maxy;
		_this7.y += ey.y * maxy;
		_this7.z += ey.z * maxy;
		_this7.x += ez.x * maxz;
		_this7.y += ez.y * maxz;
		_this7.z += ez.z * maxz;
		d.line(_this,_this4,color);
		d.line(_this2,_this6,color);
		d.line(_this1,_this5,color);
		d.line(_this3,_this7,color);
		d.line(_this,_this2,color);
		d.line(_this4,_this6,color);
		d.line(_this1,_this3,color);
		d.line(_this5,_this7,color);
		d.line(_this,_this1,color);
		d.line(_this4,_this5,color);
		d.line(_this2,_this3,color);
		d.line(_this6,_this7,color);
		var _this8 = this._pool;
		if(_this != null) {
			_this.zero();
			if(_this8.sizeVec3 == _this8.stackVec3.length) {
				var newArray = new Array(_this8.sizeVec3 << 1);
				var _g = 0;
				var _g1 = _this8.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this8.stackVec3[i];
					_this8.stackVec3[i] = null;
				}
				_this8.stackVec3 = newArray;
			}
			_this8.stackVec3[_this8.sizeVec3++] = _this;
		}
		var _this = this._pool;
		if(_this1 != null) {
			_this1.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newArray = new Array(_this.sizeVec3 << 1);
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = _this1;
		}
		var _this = this._pool;
		if(_this2 != null) {
			_this2.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newArray = new Array(_this.sizeVec3 << 1);
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = _this2;
		}
		var _this = this._pool;
		if(_this3 != null) {
			_this3.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newArray = new Array(_this.sizeVec3 << 1);
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = _this3;
		}
		var _this = this._pool;
		if(_this4 != null) {
			_this4.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newArray = new Array(_this.sizeVec3 << 1);
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = _this4;
		}
		var _this = this._pool;
		if(_this5 != null) {
			_this5.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newArray = new Array(_this.sizeVec3 << 1);
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = _this5;
		}
		var _this = this._pool;
		if(_this6 != null) {
			_this6.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newArray = new Array(_this.sizeVec3 << 1);
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = _this6;
		}
		var _this = this._pool;
		if(_this7 != null) {
			_this7.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newArray = new Array(_this.sizeVec3 << 1);
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = _this7;
		}
	}
	,_drawEllipseOnSphere: function(d,center,normal,x,y,radiansX,radiansY,radius,color) {
		var theta = 0;
		var _this = this._pool;
		var rotVec = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		var _this = this._pool;
		var rotQ = _this.sizeQuat == 0 ? new oimo_common_Quat() : _this.stackQuat[--_this.sizeQuat];
		var _this = this._pool;
		var rotM = _this.sizeMat3 == 0 ? new oimo_common_Mat3() : _this.stackMat3[--_this.sizeMat3];
		var _this = this._pool;
		var prevV = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		var _g = 0;
		while(_g < 17) {
			var i = _g++;
			var rx = Math.cos(theta) * radiansX;
			var ry = Math.sin(theta) * radiansY;
			var halfRotAng = Math.sqrt(rx * rx + ry * ry);
			var rotSin = Math.sin(halfRotAng * 0.5);
			var rotCos = Math.cos(halfRotAng * 0.5);
			var _this = rotVec.zero();
			_this.x += x.x * rx;
			_this.y += x.y * rx;
			_this.z += x.z * rx;
			_this.x += y.x * ry;
			_this.y += y.y * ry;
			_this.z += y.z * ry;
			var s = 1 / halfRotAng * rotSin;
			rotVec.x *= s;
			rotVec.y *= s;
			rotVec.z *= s;
			rotQ.x = rotVec.x;
			rotQ.y = rotVec.y;
			rotQ.z = rotVec.z;
			rotQ.w = rotCos;
			var x1 = rotQ.x;
			var y1 = rotQ.y;
			var z = rotQ.z;
			var w = rotQ.w;
			var x2 = 2 * x1;
			var y2 = 2 * y1;
			var z2 = 2 * z;
			var xx = x1 * x2;
			var yy = y1 * y2;
			var zz = z * z2;
			var xy = x1 * y2;
			var yz = y1 * z2;
			var xz = x1 * z2;
			var wx = w * x2;
			var wy = w * y2;
			var wz = w * z2;
			rotM.e00 = 1 - yy - zz;
			rotM.e01 = xy - wz;
			rotM.e02 = xz + wy;
			rotM.e10 = xy + wz;
			rotM.e11 = 1 - xx - zz;
			rotM.e12 = yz - wx;
			rotM.e20 = xz - wy;
			rotM.e21 = yz + wx;
			rotM.e22 = 1 - xx - yy;
			var _this1 = this._pool;
			var _this2 = _this1.sizeVec3 == 0 ? new oimo_common_Vec3() : _this1.stackVec3[--_this1.sizeVec3];
			_this2.x += normal.x * radius;
			_this2.y += normal.y * radius;
			_this2.z += normal.z * radius;
			var v = _this2;
			var y3 = v.x * rotM.e10 + v.y * rotM.e11 + v.z * rotM.e12;
			var z1 = v.x * rotM.e20 + v.y * rotM.e21 + v.z * rotM.e22;
			v.x = v.x * rotM.e00 + v.y * rotM.e01 + v.z * rotM.e02;
			v.y = y3;
			v.z = z1;
			v.x += center.x;
			v.y += center.y;
			v.z += center.z;
			if(i >= 1) {
				d.line(prevV,v,color);
			}
			var _this3 = this._pool;
			if(prevV != null) {
				prevV.zero();
				if(_this3.sizeVec3 == _this3.stackVec3.length) {
					var newArray = new Array(_this3.sizeVec3 << 1);
					var _g1 = 0;
					var _g11 = _this3.sizeVec3;
					while(_g1 < _g11) {
						var i1 = _g1++;
						newArray[i1] = _this3.stackVec3[i1];
						_this3.stackVec3[i1] = null;
					}
					_this3.stackVec3 = newArray;
				}
				_this3.stackVec3[_this3.sizeVec3++] = prevV;
			}
			prevV = v;
			theta += 0.39269908169872375;
		}
		var _this = this._pool;
		if(rotVec != null) {
			rotVec.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newArray = new Array(_this.sizeVec3 << 1);
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = rotVec;
		}
		var _this = this._pool;
		if(rotQ != null) {
			rotQ.x = 0;
			rotQ.y = 0;
			rotQ.z = 0;
			rotQ.w = 1;
			if(_this.sizeQuat == _this.stackQuat.length) {
				var newArray = new Array(_this.sizeQuat << 1);
				var _g = 0;
				var _g1 = _this.sizeQuat;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackQuat[i];
					_this.stackQuat[i] = null;
				}
				_this.stackQuat = newArray;
			}
			_this.stackQuat[_this.sizeQuat++] = rotQ;
		}
		var _this = this._pool;
		if(rotM != null) {
			rotM.e00 = 1;
			rotM.e01 = 0;
			rotM.e02 = 0;
			rotM.e10 = 0;
			rotM.e11 = 1;
			rotM.e12 = 0;
			rotM.e20 = 0;
			rotM.e21 = 0;
			rotM.e22 = 1;
			if(_this.sizeMat3 == _this.stackMat3.length) {
				var newArray = new Array(_this.sizeMat3 << 1);
				var _g = 0;
				var _g1 = _this.sizeMat3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat3[i];
					_this.stackMat3[i] = null;
				}
				_this.stackMat3 = newArray;
			}
			_this.stackMat3[_this.sizeMat3++] = rotM;
		}
		var _this = this._pool;
		if(prevV != null) {
			prevV.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newArray = new Array(_this.sizeVec3 << 1);
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = prevV;
		}
	}
	,step: function(timeStep) {
		if(this._timeStep.dt > 0) {
			this._timeStep.dtRatio = timeStep / this._timeStep.dt;
		}
		this._timeStep.dt = timeStep;
		this._timeStep.invDt = 1 / timeStep;
		var st = HxOverrides.now() / 1000;
		this._updateContacts();
		this._solveIslands();
		oimo_dynamics_common_Performance.totalTime = (HxOverrides.now() / 1000 - st) * 1000;
	}
	,addRigidBody: function(rigidBody) {
		if(rigidBody._world != null) {
			throw new Error("A rigid body cannot belong to multiple worlds.");
		}
		if(this._rigidBodyList == null) {
			this._rigidBodyList = rigidBody;
			this._rigidBodyListLast = rigidBody;
		} else {
			this._rigidBodyListLast._next = rigidBody;
			rigidBody._prev = this._rigidBodyListLast;
			this._rigidBodyListLast = rigidBody;
		}
		rigidBody._world = this;
		var s = rigidBody._shapeList;
		while(s != null) {
			var n = s._next;
			s._proxy = this._broadPhase.createProxy(s,s._aabb);
			s._id = this._shapeIdCount++;
			this._numShapes++;
			s = n;
		}
		this._numRigidBodies++;
	}
	,removeRigidBody: function(rigidBody) {
		if(rigidBody._world != this) {
			throw new Error("The rigid body doesn't belong to the world.");
		}
		var prev = rigidBody._prev;
		var next = rigidBody._next;
		if(prev != null) {
			prev._next = next;
		}
		if(next != null) {
			next._prev = prev;
		}
		if(rigidBody == this._rigidBodyList) {
			this._rigidBodyList = this._rigidBodyList._next;
		}
		if(rigidBody == this._rigidBodyListLast) {
			this._rigidBodyListLast = this._rigidBodyListLast._prev;
		}
		rigidBody._next = null;
		rigidBody._prev = null;
		rigidBody._world = null;
		var s = rigidBody._shapeList;
		while(s != null) {
			var n = s._next;
			this._broadPhase.destroyProxy(s._proxy);
			s._proxy = null;
			s._id = -1;
			var cl = s._rigidBody._contactLinkList;
			while(cl != null) {
				var n1 = cl._next;
				var c = cl._contact;
				if(c._s1 == s || c._s2 == s) {
					var _this = cl._other;
					_this._sleeping = false;
					_this._sleepTime = 0;
					var _this1 = this._contactManager;
					var prev = c._prev;
					var next = c._next;
					if(prev != null) {
						prev._next = next;
					}
					if(next != null) {
						next._prev = prev;
					}
					if(c == _this1._contactList) {
						_this1._contactList = _this1._contactList._next;
					}
					if(c == _this1._contactListLast) {
						_this1._contactListLast = _this1._contactListLast._prev;
					}
					c._next = null;
					c._prev = null;
					if(c._touching) {
						var cc1 = c._s1._contactCallback;
						var cc2 = c._s2._contactCallback;
						if(cc1 == cc2) {
							cc2 = null;
						}
						if(cc1 != null) {
							cc1.endContact(c);
						}
						if(cc2 != null) {
							cc2.endContact(c);
						}
					}
					var prev1 = c._link1._prev;
					var next1 = c._link1._next;
					if(prev1 != null) {
						prev1._next = next1;
					}
					if(next1 != null) {
						next1._prev = prev1;
					}
					if(c._link1 == c._b1._contactLinkList) {
						c._b1._contactLinkList = c._b1._contactLinkList._next;
					}
					if(c._link1 == c._b1._contactLinkListLast) {
						c._b1._contactLinkListLast = c._b1._contactLinkListLast._prev;
					}
					c._link1._next = null;
					c._link1._prev = null;
					var prev2 = c._link2._prev;
					var next2 = c._link2._next;
					if(prev2 != null) {
						prev2._next = next2;
					}
					if(next2 != null) {
						next2._prev = prev2;
					}
					if(c._link2 == c._b2._contactLinkList) {
						c._b2._contactLinkList = c._b2._contactLinkList._next;
					}
					if(c._link2 == c._b2._contactLinkListLast) {
						c._b2._contactLinkListLast = c._b2._contactLinkListLast._prev;
					}
					c._link2._next = null;
					c._link2._prev = null;
					c._b1._numContactLinks--;
					c._b2._numContactLinks--;
					c._link1._other = null;
					c._link2._other = null;
					c._link1._contact = null;
					c._link2._contact = null;
					c._s1 = null;
					c._s2 = null;
					c._b1 = null;
					c._b2 = null;
					c._touching = false;
					c._cachedDetectorData._clear();
					c._manifold._clear();
					c._detector = null;
					var _this2 = c._contactConstraint;
					_this2._s1 = null;
					_this2._s2 = null;
					_this2._b1 = null;
					_this2._b2 = null;
					_this2._tf1 = null;
					_this2._tf2 = null;
					c._next = _this1._contactPool;
					_this1._contactPool = c;
					_this1._numContacts--;
				}
				cl = n1;
			}
			this._numShapes--;
			s = n;
		}
		this._numRigidBodies--;
	}
	,addJoint: function(joint) {
		if(joint._world != null) {
			throw new Error("A joint cannot belong to multiple worlds.");
		}
		if(this._jointList == null) {
			this._jointList = joint;
			this._jointListLast = joint;
		} else {
			this._jointListLast._next = joint;
			joint._prev = this._jointListLast;
			this._jointListLast = joint;
		}
		joint._world = this;
		joint._link1._other = joint._b2;
		joint._link2._other = joint._b1;
		if(joint._b1._jointLinkList == null) {
			joint._b1._jointLinkList = joint._link1;
			joint._b1._jointLinkListLast = joint._link1;
		} else {
			joint._b1._jointLinkListLast._next = joint._link1;
			joint._link1._prev = joint._b1._jointLinkListLast;
			joint._b1._jointLinkListLast = joint._link1;
		}
		if(joint._b2._jointLinkList == null) {
			joint._b2._jointLinkList = joint._link2;
			joint._b2._jointLinkListLast = joint._link2;
		} else {
			joint._b2._jointLinkListLast._next = joint._link2;
			joint._link2._prev = joint._b2._jointLinkListLast;
			joint._b2._jointLinkListLast = joint._link2;
		}
		joint._b1._numJointLinks++;
		joint._b2._numJointLinks++;
		var _this = joint._b1;
		_this._sleeping = false;
		_this._sleepTime = 0;
		var _this = joint._b2;
		_this._sleeping = false;
		_this._sleepTime = 0;
		joint._syncAnchors();
		this._numJoints++;
	}
	,removeJoint: function(joint) {
		if(joint._world != this) {
			throw new Error("The joint doesn't belong to the world.");
		}
		var prev = joint._prev;
		var next = joint._next;
		if(prev != null) {
			prev._next = next;
		}
		if(next != null) {
			next._prev = prev;
		}
		if(joint == this._jointList) {
			this._jointList = this._jointList._next;
		}
		if(joint == this._jointListLast) {
			this._jointListLast = this._jointListLast._prev;
		}
		joint._next = null;
		joint._prev = null;
		joint._world = null;
		var prev = joint._link1._prev;
		var next = joint._link1._next;
		if(prev != null) {
			prev._next = next;
		}
		if(next != null) {
			next._prev = prev;
		}
		if(joint._link1 == joint._b1._jointLinkList) {
			joint._b1._jointLinkList = joint._b1._jointLinkList._next;
		}
		if(joint._link1 == joint._b1._jointLinkListLast) {
			joint._b1._jointLinkListLast = joint._b1._jointLinkListLast._prev;
		}
		joint._link1._next = null;
		joint._link1._prev = null;
		var prev = joint._link2._prev;
		var next = joint._link2._next;
		if(prev != null) {
			prev._next = next;
		}
		if(next != null) {
			next._prev = prev;
		}
		if(joint._link2 == joint._b2._jointLinkList) {
			joint._b2._jointLinkList = joint._b2._jointLinkList._next;
		}
		if(joint._link2 == joint._b2._jointLinkListLast) {
			joint._b2._jointLinkListLast = joint._b2._jointLinkListLast._prev;
		}
		joint._link2._next = null;
		joint._link2._prev = null;
		joint._link1._other = null;
		joint._link2._other = null;
		joint._b1._numJointLinks--;
		joint._b2._numJointLinks--;
		var _this = joint._b1;
		_this._sleeping = false;
		_this._sleepTime = 0;
		var _this = joint._b2;
		_this._sleeping = false;
		_this._sleepTime = 0;
		this._numJoints--;
	}
	,setDebugDraw: function(debugDraw) {
		this._debugDraw = debugDraw;
	}
	,getDebugDraw: function() {
		return this._debugDraw;
	}
	,debugDraw: function() {
		if(this._debugDraw != null) {
			if(this._broadPhase._type == 2) {
				this._drawBvh(this._debugDraw,this._broadPhase._tree);
			}
			this._drawRigidBodies(this._debugDraw);
			this._drawConstraints(this._debugDraw);
		}
	}
	,rayCast: function(begin,end,callback) {
		var _this = this._rayCastWrapper.begin;
		_this.x = begin.x;
		_this.y = begin.y;
		_this.z = begin.z;
		var _this = this._rayCastWrapper.end;
		_this.x = end.x;
		_this.y = end.y;
		_this.z = end.z;
		this._rayCastWrapper.callback = callback;
		this._broadPhase.rayCast(begin,end,this._rayCastWrapper);
	}
	,convexCast: function(convex,begin,translation,callback) {
		this._convexCastWrapper.convex = convex;
		var _this = this._convexCastWrapper.begin;
		_this._positionX = begin._positionX;
		_this._positionY = begin._positionY;
		_this._positionZ = begin._positionZ;
		_this._rotation00 = begin._rotation00;
		_this._rotation01 = begin._rotation01;
		_this._rotation02 = begin._rotation02;
		_this._rotation10 = begin._rotation10;
		_this._rotation11 = begin._rotation11;
		_this._rotation12 = begin._rotation12;
		_this._rotation20 = begin._rotation20;
		_this._rotation21 = begin._rotation21;
		_this._rotation22 = begin._rotation22;
		var _this = this._convexCastWrapper.translation;
		_this.x = translation.x;
		_this.y = translation.y;
		_this.z = translation.z;
		this._convexCastWrapper.callback = callback;
		this._broadPhase.convexCast(convex,begin,translation,this._convexCastWrapper);
	}
	,aabbTest: function(aabb,callback) {
		this._aabbTestWrapper._aabb.copyFrom(aabb);
		this._aabbTestWrapper._callback = callback;
		this._broadPhase.aabbTest(aabb,this._aabbTestWrapper);
	}
	,getRigidBodyList: function() {
		return this._rigidBodyList;
	}
	,getJointList: function() {
		return this._jointList;
	}
	,getBroadPhase: function() {
		return this._broadPhase;
	}
	,getContactManager: function() {
		return this._contactManager;
	}
	,getNumRigidBodies: function() {
		return this._numRigidBodies;
	}
	,getNumJoints: function() {
		return this._numJoints;
	}
	,getNumShapes: function() {
		return this._numShapes;
	}
	,getNumIslands: function() {
		return this._numIslands;
	}
	,getNumVelocityIterations: function() {
		return this._numVelocityIterations;
	}
	,setNumVelocityIterations: function(numVelocityIterations) {
		this._numVelocityIterations = numVelocityIterations;
	}
	,getNumPositionIterations: function() {
		return this._numPositionIterations;
	}
	,setNumPositionIterations: function(numPositionIterations) {
		this._numPositionIterations = numPositionIterations;
	}
	,getGravity: function() {
		return this._gravity;
	}
	,setGravity: function(gravity) {
		var _this = this._gravity;
		_this.x = gravity.x;
		_this.y = gravity.y;
		_this.z = gravity.z;
	}
	,__class__: oimo_dynamics_World
};
var oimo_dynamics__$World_RayCastWrapper = function() {
	oimo_collision_broadphase_BroadPhaseProxyCallback.call(this);
	this.rayCastHit = new oimo_collision_geometry_RayCastHit();
	this.begin = new oimo_common_Vec3();
	this.end = new oimo_common_Vec3();
	this.callback = null;
};
oimo_dynamics__$World_RayCastWrapper.__name__ = true;
oimo_dynamics__$World_RayCastWrapper.__super__ = oimo_collision_broadphase_BroadPhaseProxyCallback;
oimo_dynamics__$World_RayCastWrapper.prototype = $extend(oimo_collision_broadphase_BroadPhaseProxyCallback.prototype,{
	process: function(proxy) {
		var shape = proxy.userData;
		if(shape._geom.rayCast(this.begin,this.end,shape._transform,this.rayCastHit)) {
			this.callback.process(shape,this.rayCastHit);
		}
	}
	,__class__: oimo_dynamics__$World_RayCastWrapper
});
var oimo_dynamics__$World_ConvexCastWrapper = function() {
	oimo_collision_broadphase_BroadPhaseProxyCallback.call(this);
	this.rayCastHit = new oimo_collision_geometry_RayCastHit();
	this.begin = new oimo_common_Transform();
	this.translation = new oimo_common_Vec3();
	this.zero = new oimo_common_Vec3();
	this.callback = null;
	this.convex = null;
};
oimo_dynamics__$World_ConvexCastWrapper.__name__ = true;
oimo_dynamics__$World_ConvexCastWrapper.__super__ = oimo_collision_broadphase_BroadPhaseProxyCallback;
oimo_dynamics__$World_ConvexCastWrapper.prototype = $extend(oimo_collision_broadphase_BroadPhaseProxyCallback.prototype,{
	process: function(proxy) {
		var shape = proxy.userData;
		var type = shape._geom._type;
		if(type < 0 || type > 5) {
			return;
		}
		if(oimo_collision_narrowphase_detector_gjkepa_GjkEpa.instance.convexCast(this.convex,shape._geom,this.begin,shape._transform,this.translation,this.zero,this.rayCastHit)) {
			this.callback.process(shape,this.rayCastHit);
		}
	}
	,__class__: oimo_dynamics__$World_ConvexCastWrapper
});
var oimo_dynamics__$World_AabbTestWrapper = function() {
	oimo_collision_broadphase_BroadPhaseProxyCallback.call(this);
	this._aabb = new oimo_collision_geometry_Aabb();
	this._callback = null;
};
oimo_dynamics__$World_AabbTestWrapper.__name__ = true;
oimo_dynamics__$World_AabbTestWrapper.__super__ = oimo_collision_broadphase_BroadPhaseProxyCallback;
oimo_dynamics__$World_AabbTestWrapper.prototype = $extend(oimo_collision_broadphase_BroadPhaseProxyCallback.prototype,{
	process: function(proxy) {
		var shape = proxy.userData;
		var shapeAabb = shape._aabb;
		if(shapeAabb._minX < this._aabb._maxX && shapeAabb._maxX > this._aabb._minX && shapeAabb._minY < this._aabb._maxY && shapeAabb._maxY > this._aabb._minY && shapeAabb._minZ < this._aabb._maxZ && shapeAabb._maxZ > this._aabb._minZ) {
			this._callback.process(shape);
		}
	}
	,__class__: oimo_dynamics__$World_AabbTestWrapper
});
var oimo_dynamics_callback_AabbTestCallback = function() {
};
oimo_dynamics_callback_AabbTestCallback.__name__ = true;
oimo_dynamics_callback_AabbTestCallback.prototype = {
	process: function(shape) {
	}
	,__class__: oimo_dynamics_callback_AabbTestCallback
};
var oimo_dynamics_callback_ContactCallback = function() {
};
oimo_dynamics_callback_ContactCallback.__name__ = true;
oimo_dynamics_callback_ContactCallback.prototype = {
	beginContact: function(c) {
	}
	,preSolve: function(c) {
	}
	,postSolve: function(c) {
	}
	,endContact: function(c) {
	}
	,__class__: oimo_dynamics_callback_ContactCallback
};
var oimo_dynamics_callback_RayCastCallback = function() {
};
oimo_dynamics_callback_RayCastCallback.__name__ = true;
oimo_dynamics_callback_RayCastCallback.prototype = {
	process: function(shape,hit) {
	}
	,__class__: oimo_dynamics_callback_RayCastCallback
};
var oimo_dynamics_callback_RayCastClosest = function() {
	oimo_dynamics_callback_RayCastCallback.call(this);
	this.position = new oimo_common_Vec3();
	this.normal = new oimo_common_Vec3();
	this.shape = null;
	this.fraction = 1;
	this.position.zero();
	this.normal.zero();
	this.hit = false;
};
oimo_dynamics_callback_RayCastClosest.__name__ = true;
oimo_dynamics_callback_RayCastClosest.__super__ = oimo_dynamics_callback_RayCastCallback;
oimo_dynamics_callback_RayCastClosest.prototype = $extend(oimo_dynamics_callback_RayCastCallback.prototype,{
	clear: function() {
		this.shape = null;
		this.fraction = 1;
		this.position.zero();
		this.normal.zero();
		this.hit = false;
	}
	,process: function(shape,hit) {
		if(hit.fraction < this.fraction) {
			this.shape = shape;
			this.hit = true;
			this.fraction = hit.fraction;
			var _this = this.position;
			var v = hit.position;
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			var _this = this.normal;
			var v = hit.normal;
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
		}
	}
	,__class__: oimo_dynamics_callback_RayCastClosest
});
var oimo_dynamics_common_DebugDrawStyle = function() {
	this.basisColorZ = new oimo_common_Vec3(0.0,0.0,1.0);
	this.basisColorY = new oimo_common_Vec3(0.0,1.0,0.0);
	this.basisColorX = new oimo_common_Vec3(1.0,0.0,0.0);
	this.basisLength = 0.5;
	this.jointRotationalConstraintRadius = 0.3;
	this.jointErrorColor = new oimo_common_Vec3(1.0,0.1,0.1);
	this.jointLineColor = new oimo_common_Vec3(0.8,0.8,0.8);
	this.contactBinormalLength = 0.5;
	this.contactTangentLength = 0.5;
	this.contactNormalLength = 0.5;
	this.contactBinormalColor = new oimo_common_Vec3(0.2,0.2,1.0);
	this.contactTangentColor = new oimo_common_Vec3(0.1,0.8,0.1);
	this.contactNormalColor = new oimo_common_Vec3(1.0,0.1,0.1);
	this.disabledContactColor = new oimo_common_Vec3(0.5,0.1,0.1);
	this.newContactColor = new oimo_common_Vec3(1.0,1.0,0.1);
	this.contactColor4 = new oimo_common_Vec3(0.8,0.1,1.0);
	this.contactColor3 = new oimo_common_Vec3(0.1,0.8,0.6);
	this.contactColor2 = new oimo_common_Vec3(1.0,0.6,0.1);
	this.contactColor = new oimo_common_Vec3(1.0,0.1,0.1);
	this.pairColor = new oimo_common_Vec3(1.0,1.0,0.1);
	this.bvhNodeColor = new oimo_common_Vec3(0.4,0.4,0.4);
	this.aabbColor = new oimo_common_Vec3(1.0,0.1,0.1);
	this.kinematicShapeColor = new oimo_common_Vec3(1.0,0.5,0.1);
	this.staticShapeColor = new oimo_common_Vec3(0.7,0.7,0.7);
	this.sleepingShapeColor2 = new oimo_common_Vec3(0.2,0.8,0.5);
	this.sleepingShapeColor1 = new oimo_common_Vec3(0.3,0.3,0.8);
	this.sleepyShapeColor2 = new oimo_common_Vec3(0.6,0.8,0.3);
	this.sleepyShapeColor1 = new oimo_common_Vec3(0.5,0.25,0.6);
	this.shapeColor2 = new oimo_common_Vec3(1.0,0.8,0.1);
	this.shapeColor1 = new oimo_common_Vec3(0.7,0.2,0.4);
};
oimo_dynamics_common_DebugDrawStyle.__name__ = true;
oimo_dynamics_common_DebugDrawStyle.prototype = {
	__class__: oimo_dynamics_common_DebugDrawStyle
};
var oimo_dynamics_common_Performance = function() { };
oimo_dynamics_common_Performance.__name__ = true;
var oimo_dynamics_constraint_ConstraintSolver = function() {
	this._b1 = null;
	this._b2 = null;
	this._addedToIsland = false;
};
oimo_dynamics_constraint_ConstraintSolver.__name__ = true;
oimo_dynamics_constraint_ConstraintSolver.prototype = {
	preSolveVelocity: function(timeStep) {
	}
	,warmStart: function(timeStep) {
	}
	,solveVelocity: function() {
	}
	,postSolveVelocity: function(timeStep) {
	}
	,preSolvePosition: function(timeStep) {
	}
	,solvePositionSplitImpulse: function() {
	}
	,solvePositionNgs: function(timeStep) {
	}
	,postSolve: function() {
	}
	,__class__: oimo_dynamics_constraint_ConstraintSolver
};
var oimo_dynamics_constraint_PositionCorrectionAlgorithm = function() { };
oimo_dynamics_constraint_PositionCorrectionAlgorithm.__name__ = true;
var oimo_dynamics_constraint_contact_ContactConstraint = function(manifold) {
	this._solver = new oimo_dynamics_constraint_solver_pgs_PgsContactConstraintSolver(this);
	this._manifold = manifold;
};
oimo_dynamics_constraint_contact_ContactConstraint.__name__ = true;
oimo_dynamics_constraint_contact_ContactConstraint.prototype = {
	_getVelocitySolverInfo: function(timeStep,info) {
		info.b1 = this._b1;
		info.b2 = this._b2;
		var normalX;
		var normalY;
		var normalZ;
		var tangentX;
		var tangentY;
		var tangentZ;
		var binormalX;
		var binormalY;
		var binormalZ;
		normalX = this._manifold._normalX;
		normalY = this._manifold._normalY;
		normalZ = this._manifold._normalZ;
		tangentX = this._manifold._tangentX;
		tangentY = this._manifold._tangentY;
		tangentZ = this._manifold._tangentZ;
		binormalX = this._manifold._binormalX;
		binormalY = this._manifold._binormalY;
		binormalZ = this._manifold._binormalZ;
		var friction = Math.sqrt(this._s1._friction * this._s2._friction);
		var restitution = Math.sqrt(this._s1._restitution * this._s2._restitution);
		var num = this._manifold._numPoints;
		info.numRows = 0;
		var _g = 0;
		while(_g < num) {
			var p = this._manifold._points[_g++];
			if(p._depth < 0) {
				p._disabled = true;
				var _this = p._impulse;
				_this.impulseN = 0;
				_this.impulseT = 0;
				_this.impulseB = 0;
				_this.impulseP = 0;
				_this.impulseLX = 0;
				_this.impulseLY = 0;
				_this.impulseLZ = 0;
				continue;
			} else {
				p._disabled = false;
			}
			var row = info.rows[info.numRows++];
			row.friction = friction;
			row.cfm = 0;
			var j = row.jacobianN;
			j.lin1X = normalX;
			j.lin1Y = normalY;
			j.lin1Z = normalZ;
			j.lin2X = normalX;
			j.lin2Y = normalY;
			j.lin2Z = normalZ;
			j.ang1X = p._relPos1Y * normalZ - p._relPos1Z * normalY;
			j.ang1Y = p._relPos1Z * normalX - p._relPos1X * normalZ;
			j.ang1Z = p._relPos1X * normalY - p._relPos1Y * normalX;
			j.ang2X = p._relPos2Y * normalZ - p._relPos2Z * normalY;
			j.ang2Y = p._relPos2Z * normalX - p._relPos2X * normalZ;
			j.ang2Z = p._relPos2X * normalY - p._relPos2Y * normalX;
			j = row.jacobianT;
			j.lin1X = tangentX;
			j.lin1Y = tangentY;
			j.lin1Z = tangentZ;
			j.lin2X = tangentX;
			j.lin2Y = tangentY;
			j.lin2Z = tangentZ;
			j.ang1X = p._relPos1Y * tangentZ - p._relPos1Z * tangentY;
			j.ang1Y = p._relPos1Z * tangentX - p._relPos1X * tangentZ;
			j.ang1Z = p._relPos1X * tangentY - p._relPos1Y * tangentX;
			j.ang2X = p._relPos2Y * tangentZ - p._relPos2Z * tangentY;
			j.ang2Y = p._relPos2Z * tangentX - p._relPos2X * tangentZ;
			j.ang2Z = p._relPos2X * tangentY - p._relPos2Y * tangentX;
			j = row.jacobianB;
			j.lin1X = binormalX;
			j.lin1Y = binormalY;
			j.lin1Z = binormalZ;
			j.lin2X = binormalX;
			j.lin2Y = binormalY;
			j.lin2Z = binormalZ;
			j.ang1X = p._relPos1Y * binormalZ - p._relPos1Z * binormalY;
			j.ang1Y = p._relPos1Z * binormalX - p._relPos1X * binormalZ;
			j.ang1Z = p._relPos1X * binormalY - p._relPos1Y * binormalX;
			j.ang2X = p._relPos2Y * binormalZ - p._relPos2Z * binormalY;
			j.ang2Y = p._relPos2Z * binormalX - p._relPos2X * binormalZ;
			j.ang2Z = p._relPos2X * binormalY - p._relPos2Y * binormalX;
			j = row.jacobianN;
			var rvn = j.lin1X * this._b1._velX + j.lin1Y * this._b1._velY + j.lin1Z * this._b1._velZ + (j.ang1X * this._b1._angVelX + j.ang1Y * this._b1._angVelY + j.ang1Z * this._b1._angVelZ) - (j.lin2X * this._b2._velX + j.lin2Y * this._b2._velY + j.lin2Z * this._b2._velZ + (j.ang2X * this._b2._angVelX + j.ang2Y * this._b2._angVelY + j.ang2Z * this._b2._angVelZ));
			if(rvn < -oimo_common_Setting.contactEnableBounceThreshold && !p._warmStarted) {
				row.rhs = -rvn * restitution;
			} else {
				row.rhs = 0;
			}
			if(this._positionCorrectionAlgorithm == oimo_dynamics_constraint_PositionCorrectionAlgorithm.BAUMGARTE) {
				if(p._depth > oimo_common_Setting.linearSlop) {
					var minRhs = (p._depth - oimo_common_Setting.linearSlop) * oimo_common_Setting.velocityBaumgarte * timeStep.invDt;
					if(row.rhs < minRhs) {
						row.rhs = minRhs;
					}
				}
			}
			if(!p._warmStarted) {
				var _this1 = p._impulse;
				_this1.impulseN = 0;
				_this1.impulseT = 0;
				_this1.impulseB = 0;
				_this1.impulseP = 0;
				_this1.impulseLX = 0;
				_this1.impulseLY = 0;
				_this1.impulseLZ = 0;
			}
			row.impulse = p._impulse;
		}
	}
	,_getPositionSolverInfo: function(info) {
		info.b1 = this._b1;
		info.b2 = this._b2;
		var normalX;
		var normalY;
		var normalZ;
		normalX = this._manifold._normalX;
		normalY = this._manifold._normalY;
		normalZ = this._manifold._normalZ;
		var num = this._manifold._numPoints;
		info.numRows = 0;
		var _g = 0;
		while(_g < num) {
			var p = this._manifold._points[_g++];
			if(p._disabled) {
				continue;
			}
			var row = info.rows[info.numRows++];
			var j = row.jacobianN;
			j.lin1X = normalX;
			j.lin1Y = normalY;
			j.lin1Z = normalZ;
			j.lin2X = normalX;
			j.lin2Y = normalY;
			j.lin2Z = normalZ;
			j.ang1X = p._relPos1Y * normalZ - p._relPos1Z * normalY;
			j.ang1Y = p._relPos1Z * normalX - p._relPos1X * normalZ;
			j.ang1Z = p._relPos1X * normalY - p._relPos1Y * normalX;
			j.ang2X = p._relPos2Y * normalZ - p._relPos2Z * normalY;
			j.ang2Y = p._relPos2Z * normalX - p._relPos2X * normalZ;
			j.ang2Z = p._relPos2X * normalY - p._relPos2Y * normalX;
			row.rhs = p._depth - oimo_common_Setting.linearSlop;
			if(row.rhs < 0) {
				row.rhs = 0;
			}
			row.impulse = p._impulse;
		}
	}
	,_syncManifold: function() {
		this._manifold._updateDepthsAndPositions(this._tf1,this._tf2);
	}
	,getShape1: function() {
		return this._s1;
	}
	,getShape2: function() {
		return this._s2;
	}
	,getManifold: function() {
		return this._manifold;
	}
	,isTouching: function() {
		var _g = 0;
		var _g1 = this._manifold._numPoints;
		while(_g < _g1) if(this._manifold._points[_g++]._depth >= 0) {
			return true;
		}
		return false;
	}
	,__class__: oimo_dynamics_constraint_contact_ContactConstraint
};
var oimo_dynamics_constraint_contact_ContactImpulse = function() {
	this.impulseN = 0;
	this.impulseT = 0;
	this.impulseB = 0;
	this.impulseP = 0;
	this.impulseLX = 0;
	this.impulseLY = 0;
	this.impulseLZ = 0;
};
oimo_dynamics_constraint_contact_ContactImpulse.__name__ = true;
oimo_dynamics_constraint_contact_ContactImpulse.prototype = {
	copyFrom: function(imp) {
		this.impulseN = imp.impulseN;
		this.impulseT = imp.impulseT;
		this.impulseB = imp.impulseB;
		this.impulseLX = imp.impulseLX;
		this.impulseLY = imp.impulseLY;
		this.impulseLZ = imp.impulseLZ;
	}
	,__class__: oimo_dynamics_constraint_contact_ContactImpulse
};
var oimo_dynamics_constraint_contact_Manifold = function() {
	this._normalX = 0;
	this._normalY = 0;
	this._normalZ = 0;
	this._tangentX = 0;
	this._tangentY = 0;
	this._tangentZ = 0;
	this._binormalX = 0;
	this._binormalY = 0;
	this._binormalZ = 0;
	this._numPoints = 0;
	this._points = new Array(oimo_common_Setting.maxManifoldPoints);
	var _g = 0;
	var _g1 = oimo_common_Setting.maxManifoldPoints;
	while(_g < _g1) this._points[_g++] = new oimo_dynamics_constraint_contact_ManifoldPoint();
};
oimo_dynamics_constraint_contact_Manifold.__name__ = true;
oimo_dynamics_constraint_contact_Manifold.prototype = {
	_clear: function() {
		var _g = 0;
		var _g1 = this._numPoints;
		while(_g < _g1) {
			var _this = this._points[_g++];
			_this._localPos1X = 0;
			_this._localPos1Y = 0;
			_this._localPos1Z = 0;
			_this._localPos2X = 0;
			_this._localPos2Y = 0;
			_this._localPos2Z = 0;
			_this._relPos1X = 0;
			_this._relPos1Y = 0;
			_this._relPos1Z = 0;
			_this._relPos2X = 0;
			_this._relPos2Y = 0;
			_this._relPos2Z = 0;
			_this._pos1X = 0;
			_this._pos1Y = 0;
			_this._pos1Z = 0;
			_this._pos2X = 0;
			_this._pos2Y = 0;
			_this._pos2Z = 0;
			_this._depth = 0;
			var _this1 = _this._impulse;
			_this1.impulseN = 0;
			_this1.impulseT = 0;
			_this1.impulseB = 0;
			_this1.impulseP = 0;
			_this1.impulseLX = 0;
			_this1.impulseLY = 0;
			_this1.impulseLZ = 0;
			_this._warmStarted = false;
			_this._disabled = false;
			_this._id = -1;
		}
		this._numPoints = 0;
	}
	,_buildBasis: function(normal) {
		this._normalX = normal.x;
		this._normalY = normal.y;
		this._normalZ = normal.z;
		var nx = normal.x;
		var ny = normal.y;
		var nz = normal.z;
		var nx2 = nx * nx;
		var ny2 = ny * ny;
		var nz2 = nz * nz;
		var tx;
		var ty;
		var tz;
		var bx;
		var by;
		var bz;
		if(nx2 < ny2) {
			if(nx2 < nz2) {
				var invL = 1 / Math.sqrt(ny2 + nz2);
				tx = 0;
				ty = -nz * invL;
				tz = ny * invL;
				bx = ny * tz - nz * ty;
				by = -nx * tz;
				bz = nx * ty;
			} else {
				var invL = 1 / Math.sqrt(nx2 + ny2);
				tx = -ny * invL;
				ty = nx * invL;
				tz = 0;
				bx = -nz * ty;
				by = nz * tx;
				bz = nx * ty - ny * tx;
			}
		} else if(ny2 < nz2) {
			var invL = 1 / Math.sqrt(nx2 + nz2);
			tx = nz * invL;
			ty = 0;
			tz = -nx * invL;
			bx = ny * tz;
			by = nz * tx - nx * tz;
			bz = -ny * tx;
		} else {
			var invL = 1 / Math.sqrt(nx2 + ny2);
			tx = -ny * invL;
			ty = nx * invL;
			tz = 0;
			bx = -nz * ty;
			by = nz * tx;
			bz = nx * ty - ny * tx;
		}
		this._tangentX = tx;
		this._tangentY = ty;
		this._tangentZ = tz;
		this._binormalX = bx;
		this._binormalY = by;
		this._binormalZ = bz;
	}
	,_updateDepthsAndPositions: function(tf1,tf2) {
		var _g = 0;
		var _g1 = this._numPoints;
		while(_g < _g1) {
			var p = this._points[_g++];
			var __tmp__X;
			var __tmp__Y;
			var __tmp__Z;
			__tmp__X = tf1._rotation00 * p._localPos1X + tf1._rotation01 * p._localPos1Y + tf1._rotation02 * p._localPos1Z;
			__tmp__Y = tf1._rotation10 * p._localPos1X + tf1._rotation11 * p._localPos1Y + tf1._rotation12 * p._localPos1Z;
			__tmp__Z = tf1._rotation20 * p._localPos1X + tf1._rotation21 * p._localPos1Y + tf1._rotation22 * p._localPos1Z;
			p._relPos1X = __tmp__X;
			p._relPos1Y = __tmp__Y;
			p._relPos1Z = __tmp__Z;
			var __tmp__X1;
			var __tmp__Y1;
			var __tmp__Z1;
			__tmp__X1 = tf2._rotation00 * p._localPos2X + tf2._rotation01 * p._localPos2Y + tf2._rotation02 * p._localPos2Z;
			__tmp__Y1 = tf2._rotation10 * p._localPos2X + tf2._rotation11 * p._localPos2Y + tf2._rotation12 * p._localPos2Z;
			__tmp__Z1 = tf2._rotation20 * p._localPos2X + tf2._rotation21 * p._localPos2Y + tf2._rotation22 * p._localPos2Z;
			p._relPos2X = __tmp__X1;
			p._relPos2Y = __tmp__Y1;
			p._relPos2Z = __tmp__Z1;
			p._pos1X = p._relPos1X + tf1._positionX;
			p._pos1Y = p._relPos1Y + tf1._positionY;
			p._pos1Z = p._relPos1Z + tf1._positionZ;
			p._pos2X = p._relPos2X + tf2._positionX;
			p._pos2Y = p._relPos2Y + tf2._positionY;
			p._pos2Z = p._relPos2Z + tf2._positionZ;
			var diffX;
			var diffY;
			var diffZ;
			diffX = p._pos1X - p._pos2X;
			diffY = p._pos1Y - p._pos2Y;
			diffZ = p._pos1Z - p._pos2Z;
			p._depth = -(diffX * this._normalX + diffY * this._normalY + diffZ * this._normalZ);
		}
	}
	,getNormal: function() {
		var v = new oimo_common_Vec3();
		v.x = this._normalX;
		v.y = this._normalY;
		v.z = this._normalZ;
		return v;
	}
	,getNormalTo: function(normal) {
		normal.x = this._normalX;
		normal.y = this._normalY;
		normal.z = this._normalZ;
	}
	,getTangent: function() {
		var v = new oimo_common_Vec3();
		v.x = this._tangentX;
		v.y = this._tangentY;
		v.z = this._tangentZ;
		return v;
	}
	,getTangentTo: function(tangent) {
		tangent.x = this._tangentX;
		tangent.y = this._tangentY;
		tangent.z = this._tangentZ;
	}
	,getBinormal: function() {
		var v = new oimo_common_Vec3();
		v.x = this._binormalX;
		v.y = this._binormalY;
		v.z = this._binormalZ;
		return v;
	}
	,getBinormalTo: function(binormal) {
		binormal.x = this._binormalX;
		binormal.y = this._binormalY;
		binormal.z = this._binormalZ;
	}
	,getPoints: function() {
		return this._points;
	}
	,getNumPoints: function() {
		return this._numPoints;
	}
	,__class__: oimo_dynamics_constraint_contact_Manifold
};
var oimo_dynamics_constraint_contact_ManifoldPoint = function() {
	this._localPos1X = 0;
	this._localPos1Y = 0;
	this._localPos1Z = 0;
	this._localPos2X = 0;
	this._localPos2Y = 0;
	this._localPos2Z = 0;
	this._relPos1X = 0;
	this._relPos1Y = 0;
	this._relPos1Z = 0;
	this._relPos2X = 0;
	this._relPos2Y = 0;
	this._relPos2Z = 0;
	this._pos1X = 0;
	this._pos1Y = 0;
	this._pos1Z = 0;
	this._pos2X = 0;
	this._pos2Y = 0;
	this._pos2Z = 0;
	this._depth = 0;
	this._impulse = new oimo_dynamics_constraint_contact_ContactImpulse();
	this._warmStarted = false;
	this._disabled = false;
	this._id = -1;
};
oimo_dynamics_constraint_contact_ManifoldPoint.__name__ = true;
oimo_dynamics_constraint_contact_ManifoldPoint.prototype = {
	getPosition1: function() {
		var v = new oimo_common_Vec3();
		v.x = this._pos1X;
		v.y = this._pos1Y;
		v.z = this._pos1Z;
		return v;
	}
	,getPosition1To: function(position) {
		position.x = this._pos1X;
		position.y = this._pos1Y;
		position.z = this._pos1Z;
	}
	,getPosition2: function() {
		var v = new oimo_common_Vec3();
		v.x = this._pos2X;
		v.y = this._pos2Y;
		v.z = this._pos2Z;
		return v;
	}
	,getPosition2To: function(position) {
		position.x = this._pos2X;
		position.y = this._pos2Y;
		position.z = this._pos2Z;
	}
	,getDepth: function() {
		return this._depth;
	}
	,isWarmStarted: function() {
		return this._warmStarted;
	}
	,getNormalImpulse: function() {
		return this._impulse.impulseN;
	}
	,getTangentImpulse: function() {
		return this._impulse.impulseT;
	}
	,getBinormalImpulse: function() {
		return this._impulse.impulseB;
	}
	,isEnabled: function() {
		return !this._disabled;
	}
	,__class__: oimo_dynamics_constraint_contact_ManifoldPoint
};
var oimo_dynamics_constraint_contact_ManifoldUpdater = function(manifold) {
	this._manifold = manifold;
	this.numOldPoints = 0;
	this.oldPoints = new Array(oimo_common_Setting.maxManifoldPoints);
	var _g = 0;
	var _g1 = oimo_common_Setting.maxManifoldPoints;
	while(_g < _g1) this.oldPoints[_g++] = new oimo_dynamics_constraint_contact_ManifoldPoint();
};
oimo_dynamics_constraint_contact_ManifoldUpdater.__name__ = true;
oimo_dynamics_constraint_contact_ManifoldUpdater.prototype = {
	removeOutdatedPoints: function() {
		var index = this._manifold._numPoints;
		while(--index >= 0) {
			var p = this._manifold._points[index];
			var diffX;
			var diffY;
			var diffZ;
			diffX = p._pos1X - p._pos2X;
			diffY = p._pos1Y - p._pos2Y;
			diffZ = p._pos1Z - p._pos2Z;
			var dotN = this._manifold._normalX * diffX + this._manifold._normalY * diffY + this._manifold._normalZ * diffZ;
			if(dotN > oimo_common_Setting.contactPersistenceThreshold) {
				this.removeManifoldPoint(index);
				continue;
			}
			diffX += this._manifold._normalX * -dotN;
			diffY += this._manifold._normalY * -dotN;
			diffZ += this._manifold._normalZ * -dotN;
			if(diffX * diffX + diffY * diffY + diffZ * diffZ > oimo_common_Setting.contactPersistenceThreshold * oimo_common_Setting.contactPersistenceThreshold) {
				this.removeManifoldPoint(index);
				continue;
			}
		}
	}
	,removeManifoldPoint: function(index) {
		var lastIndex = --this._manifold._numPoints;
		if(index != lastIndex) {
			var tmp = this._manifold._points[index];
			this._manifold._points[index] = this._manifold._points[lastIndex];
			this._manifold._points[lastIndex] = tmp;
		}
		var _this = this._manifold._points[lastIndex];
		_this._localPos1X = 0;
		_this._localPos1Y = 0;
		_this._localPos1Z = 0;
		_this._localPos2X = 0;
		_this._localPos2Y = 0;
		_this._localPos2Z = 0;
		_this._relPos1X = 0;
		_this._relPos1Y = 0;
		_this._relPos1Z = 0;
		_this._relPos2X = 0;
		_this._relPos2Y = 0;
		_this._relPos2Z = 0;
		_this._pos1X = 0;
		_this._pos1Y = 0;
		_this._pos1Z = 0;
		_this._pos2X = 0;
		_this._pos2Y = 0;
		_this._pos2Z = 0;
		_this._depth = 0;
		var _this1 = _this._impulse;
		_this1.impulseN = 0;
		_this1.impulseT = 0;
		_this1.impulseB = 0;
		_this1.impulseP = 0;
		_this1.impulseLX = 0;
		_this1.impulseLY = 0;
		_this1.impulseLZ = 0;
		_this._warmStarted = false;
		_this._disabled = false;
		_this._id = -1;
	}
	,addManifoldPoint: function(point,tf1,tf2) {
		var num = this._manifold._numPoints;
		if(num == oimo_common_Setting.maxManifoldPoints) {
			var targetIndex = this.computeTargetIndex(point,tf1,tf2);
			var _this = this._manifold._points[targetIndex];
			var v = point.position1;
			_this._pos1X = v.x;
			_this._pos1Y = v.y;
			_this._pos1Z = v.z;
			var v = point.position2;
			_this._pos2X = v.x;
			_this._pos2Y = v.y;
			_this._pos2Z = v.z;
			_this._relPos1X = _this._pos1X - tf1._positionX;
			_this._relPos1Y = _this._pos1Y - tf1._positionY;
			_this._relPos1Z = _this._pos1Z - tf1._positionZ;
			_this._relPos2X = _this._pos2X - tf2._positionX;
			_this._relPos2Y = _this._pos2Y - tf2._positionY;
			_this._relPos2Z = _this._pos2Z - tf2._positionZ;
			var __tmp__X;
			var __tmp__Y;
			var __tmp__Z;
			__tmp__X = tf1._rotation00 * _this._relPos1X + tf1._rotation10 * _this._relPos1Y + tf1._rotation20 * _this._relPos1Z;
			__tmp__Y = tf1._rotation01 * _this._relPos1X + tf1._rotation11 * _this._relPos1Y + tf1._rotation21 * _this._relPos1Z;
			__tmp__Z = tf1._rotation02 * _this._relPos1X + tf1._rotation12 * _this._relPos1Y + tf1._rotation22 * _this._relPos1Z;
			_this._localPos1X = __tmp__X;
			_this._localPos1Y = __tmp__Y;
			_this._localPos1Z = __tmp__Z;
			var __tmp__X;
			var __tmp__Y;
			var __tmp__Z;
			__tmp__X = tf2._rotation00 * _this._relPos2X + tf2._rotation10 * _this._relPos2Y + tf2._rotation20 * _this._relPos2Z;
			__tmp__Y = tf2._rotation01 * _this._relPos2X + tf2._rotation11 * _this._relPos2Y + tf2._rotation21 * _this._relPos2Z;
			__tmp__Z = tf2._rotation02 * _this._relPos2X + tf2._rotation12 * _this._relPos2Y + tf2._rotation22 * _this._relPos2Z;
			_this._localPos2X = __tmp__X;
			_this._localPos2Y = __tmp__Y;
			_this._localPos2Z = __tmp__Z;
			_this._depth = point.depth;
			var _this1 = _this._impulse;
			_this1.impulseN = 0;
			_this1.impulseT = 0;
			_this1.impulseB = 0;
			_this1.impulseP = 0;
			_this1.impulseLX = 0;
			_this1.impulseLY = 0;
			_this1.impulseLZ = 0;
			_this._id = point.id;
			_this._warmStarted = false;
			_this._disabled = false;
			return;
		}
		var _this = this._manifold._points[num];
		var v = point.position1;
		_this._pos1X = v.x;
		_this._pos1Y = v.y;
		_this._pos1Z = v.z;
		var v = point.position2;
		_this._pos2X = v.x;
		_this._pos2Y = v.y;
		_this._pos2Z = v.z;
		_this._relPos1X = _this._pos1X - tf1._positionX;
		_this._relPos1Y = _this._pos1Y - tf1._positionY;
		_this._relPos1Z = _this._pos1Z - tf1._positionZ;
		_this._relPos2X = _this._pos2X - tf2._positionX;
		_this._relPos2Y = _this._pos2Y - tf2._positionY;
		_this._relPos2Z = _this._pos2Z - tf2._positionZ;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = tf1._rotation00 * _this._relPos1X + tf1._rotation10 * _this._relPos1Y + tf1._rotation20 * _this._relPos1Z;
		__tmp__Y = tf1._rotation01 * _this._relPos1X + tf1._rotation11 * _this._relPos1Y + tf1._rotation21 * _this._relPos1Z;
		__tmp__Z = tf1._rotation02 * _this._relPos1X + tf1._rotation12 * _this._relPos1Y + tf1._rotation22 * _this._relPos1Z;
		_this._localPos1X = __tmp__X;
		_this._localPos1Y = __tmp__Y;
		_this._localPos1Z = __tmp__Z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = tf2._rotation00 * _this._relPos2X + tf2._rotation10 * _this._relPos2Y + tf2._rotation20 * _this._relPos2Z;
		__tmp__Y = tf2._rotation01 * _this._relPos2X + tf2._rotation11 * _this._relPos2Y + tf2._rotation21 * _this._relPos2Z;
		__tmp__Z = tf2._rotation02 * _this._relPos2X + tf2._rotation12 * _this._relPos2Y + tf2._rotation22 * _this._relPos2Z;
		_this._localPos2X = __tmp__X;
		_this._localPos2Y = __tmp__Y;
		_this._localPos2Z = __tmp__Z;
		_this._depth = point.depth;
		var _this1 = _this._impulse;
		_this1.impulseN = 0;
		_this1.impulseT = 0;
		_this1.impulseB = 0;
		_this1.impulseP = 0;
		_this1.impulseLX = 0;
		_this1.impulseLY = 0;
		_this1.impulseLZ = 0;
		_this._id = point.id;
		_this._warmStarted = false;
		_this._disabled = false;
		this._manifold._numPoints++;
	}
	,computeTargetIndex: function(newPoint,tf1,tf2) {
		var p1 = this._manifold._points[0];
		var p2 = this._manifold._points[1];
		var p3 = this._manifold._points[2];
		var p4 = this._manifold._points[3];
		var maxDepth = p1._depth;
		var maxDepthIndex = 0;
		if(p2._depth > maxDepth) {
			maxDepth = p2._depth;
			maxDepthIndex = 1;
		}
		if(p3._depth > maxDepth) {
			maxDepth = p3._depth;
			maxDepthIndex = 2;
		}
		if(p4._depth > maxDepth) {
			maxDepth = p4._depth;
			maxDepthIndex = 3;
		}
		var rp1X;
		var rp1Y;
		var rp1Z;
		var v = newPoint.position1;
		rp1X = v.x;
		rp1Y = v.y;
		rp1Z = v.z;
		rp1X -= tf1._positionX;
		rp1Y -= tf1._positionY;
		rp1Z -= tf1._positionZ;
		var p1X = p2._relPos1X;
		var p1Y = p2._relPos1Y;
		var p1Z = p2._relPos1Z;
		var p2X = p3._relPos1X;
		var p2Y = p3._relPos1Y;
		var p2Z = p3._relPos1Z;
		var p3X = p4._relPos1X;
		var p3Y = p4._relPos1Y;
		var p3Z = p4._relPos1Z;
		var v12X;
		var v12Y;
		var v12Z;
		var v34X;
		var v34Y;
		var v34Z;
		var v13X;
		var v13Y;
		var v13Z;
		var v24X;
		var v24Y;
		var v24Z;
		var v14X;
		var v14Y;
		var v14Z;
		var v23X;
		var v23Y;
		var v23Z;
		v12X = p2X - p1X;
		v12Y = p2Y - p1Y;
		v12Z = p2Z - p1Z;
		v34X = rp1X - p3X;
		v34Y = rp1Y - p3Y;
		v34Z = rp1Z - p3Z;
		v13X = p3X - p1X;
		v13Y = p3Y - p1Y;
		v13Z = p3Z - p1Z;
		v24X = rp1X - p2X;
		v24Y = rp1Y - p2Y;
		v24Z = rp1Z - p2Z;
		v14X = rp1X - p1X;
		v14Y = rp1Y - p1Y;
		v14Z = rp1Z - p1Z;
		v23X = p3X - p2X;
		v23Y = p3Y - p2Y;
		v23Z = p3Z - p2Z;
		var cross1X;
		var cross1Y;
		var cross1Z;
		var cross2X;
		var cross2Y;
		var cross2Z;
		var cross3X;
		var cross3Y;
		var cross3Z;
		cross1X = v12Y * v34Z - v12Z * v34Y;
		cross1Y = v12Z * v34X - v12X * v34Z;
		cross1Z = v12X * v34Y - v12Y * v34X;
		cross2X = v13Y * v24Z - v13Z * v24Y;
		cross2Y = v13Z * v24X - v13X * v24Z;
		cross2Z = v13X * v24Y - v13Y * v24X;
		cross3X = v14Y * v23Z - v14Z * v23Y;
		cross3Y = v14Z * v23X - v14X * v23Z;
		cross3Z = v14X * v23Y - v14Y * v23X;
		var a1 = cross1X * cross1X + cross1Y * cross1Y + cross1Z * cross1Z;
		var a2 = cross2X * cross2X + cross2Y * cross2Y + cross2Z * cross2Z;
		var a3 = cross3X * cross3X + cross3Y * cross3Y + cross3Z * cross3Z;
		var p1X = p1._relPos1X;
		var p1Y = p1._relPos1Y;
		var p1Z = p1._relPos1Z;
		var p2X = p3._relPos1X;
		var p2Y = p3._relPos1Y;
		var p2Z = p3._relPos1Z;
		var p3X = p4._relPos1X;
		var p3Y = p4._relPos1Y;
		var p3Z = p4._relPos1Z;
		var v12X;
		var v12Y;
		var v12Z;
		var v34X;
		var v34Y;
		var v34Z;
		var v13X;
		var v13Y;
		var v13Z;
		var v24X;
		var v24Y;
		var v24Z;
		var v14X;
		var v14Y;
		var v14Z;
		var v23X;
		var v23Y;
		var v23Z;
		v12X = p2X - p1X;
		v12Y = p2Y - p1Y;
		v12Z = p2Z - p1Z;
		v34X = rp1X - p3X;
		v34Y = rp1Y - p3Y;
		v34Z = rp1Z - p3Z;
		v13X = p3X - p1X;
		v13Y = p3Y - p1Y;
		v13Z = p3Z - p1Z;
		v24X = rp1X - p2X;
		v24Y = rp1Y - p2Y;
		v24Z = rp1Z - p2Z;
		v14X = rp1X - p1X;
		v14Y = rp1Y - p1Y;
		v14Z = rp1Z - p1Z;
		v23X = p3X - p2X;
		v23Y = p3Y - p2Y;
		v23Z = p3Z - p2Z;
		var cross1X;
		var cross1Y;
		var cross1Z;
		var cross2X;
		var cross2Y;
		var cross2Z;
		var cross3X;
		var cross3Y;
		var cross3Z;
		cross1X = v12Y * v34Z - v12Z * v34Y;
		cross1Y = v12Z * v34X - v12X * v34Z;
		cross1Z = v12X * v34Y - v12Y * v34X;
		cross2X = v13Y * v24Z - v13Z * v24Y;
		cross2Y = v13Z * v24X - v13X * v24Z;
		cross2Z = v13X * v24Y - v13Y * v24X;
		cross3X = v14Y * v23Z - v14Z * v23Y;
		cross3Y = v14Z * v23X - v14X * v23Z;
		cross3Z = v14X * v23Y - v14Y * v23X;
		var a11 = cross1X * cross1X + cross1Y * cross1Y + cross1Z * cross1Z;
		var a21 = cross2X * cross2X + cross2Y * cross2Y + cross2Z * cross2Z;
		var a31 = cross3X * cross3X + cross3Y * cross3Y + cross3Z * cross3Z;
		var a22 = a11 > a21 ? a11 > a31 ? a11 : a31 : a21 > a31 ? a21 : a31;
		var p1X = p1._relPos1X;
		var p1Y = p1._relPos1Y;
		var p1Z = p1._relPos1Z;
		var p2X = p2._relPos1X;
		var p2Y = p2._relPos1Y;
		var p2Z = p2._relPos1Z;
		var p3X = p4._relPos1X;
		var p3Y = p4._relPos1Y;
		var p3Z = p4._relPos1Z;
		var v12X;
		var v12Y;
		var v12Z;
		var v34X;
		var v34Y;
		var v34Z;
		var v13X;
		var v13Y;
		var v13Z;
		var v24X;
		var v24Y;
		var v24Z;
		var v14X;
		var v14Y;
		var v14Z;
		var v23X;
		var v23Y;
		var v23Z;
		v12X = p2X - p1X;
		v12Y = p2Y - p1Y;
		v12Z = p2Z - p1Z;
		v34X = rp1X - p3X;
		v34Y = rp1Y - p3Y;
		v34Z = rp1Z - p3Z;
		v13X = p3X - p1X;
		v13Y = p3Y - p1Y;
		v13Z = p3Z - p1Z;
		v24X = rp1X - p2X;
		v24Y = rp1Y - p2Y;
		v24Z = rp1Z - p2Z;
		v14X = rp1X - p1X;
		v14Y = rp1Y - p1Y;
		v14Z = rp1Z - p1Z;
		v23X = p3X - p2X;
		v23Y = p3Y - p2Y;
		v23Z = p3Z - p2Z;
		var cross1X;
		var cross1Y;
		var cross1Z;
		var cross2X;
		var cross2Y;
		var cross2Z;
		var cross3X;
		var cross3Y;
		var cross3Z;
		cross1X = v12Y * v34Z - v12Z * v34Y;
		cross1Y = v12Z * v34X - v12X * v34Z;
		cross1Z = v12X * v34Y - v12Y * v34X;
		cross2X = v13Y * v24Z - v13Z * v24Y;
		cross2Y = v13Z * v24X - v13X * v24Z;
		cross2Z = v13X * v24Y - v13Y * v24X;
		cross3X = v14Y * v23Z - v14Z * v23Y;
		cross3Y = v14Z * v23X - v14X * v23Z;
		cross3Z = v14X * v23Y - v14Y * v23X;
		var a11 = cross1X * cross1X + cross1Y * cross1Y + cross1Z * cross1Z;
		var a21 = cross2X * cross2X + cross2Y * cross2Y + cross2Z * cross2Z;
		var a31 = cross3X * cross3X + cross3Y * cross3Y + cross3Z * cross3Z;
		var a32 = a11 > a21 ? a11 > a31 ? a11 : a31 : a21 > a31 ? a21 : a31;
		var p1X = p1._relPos1X;
		var p1Y = p1._relPos1Y;
		var p1Z = p1._relPos1Z;
		var p2X = p2._relPos1X;
		var p2Y = p2._relPos1Y;
		var p2Z = p2._relPos1Z;
		var p3X = p3._relPos1X;
		var p3Y = p3._relPos1Y;
		var p3Z = p3._relPos1Z;
		var v12X;
		var v12Y;
		var v12Z;
		var v34X;
		var v34Y;
		var v34Z;
		var v13X;
		var v13Y;
		var v13Z;
		var v24X;
		var v24Y;
		var v24Z;
		var v14X;
		var v14Y;
		var v14Z;
		var v23X;
		var v23Y;
		var v23Z;
		v12X = p2X - p1X;
		v12Y = p2Y - p1Y;
		v12Z = p2Z - p1Z;
		v34X = rp1X - p3X;
		v34Y = rp1Y - p3Y;
		v34Z = rp1Z - p3Z;
		v13X = p3X - p1X;
		v13Y = p3Y - p1Y;
		v13Z = p3Z - p1Z;
		v24X = rp1X - p2X;
		v24Y = rp1Y - p2Y;
		v24Z = rp1Z - p2Z;
		v14X = rp1X - p1X;
		v14Y = rp1Y - p1Y;
		v14Z = rp1Z - p1Z;
		v23X = p3X - p2X;
		v23Y = p3Y - p2Y;
		v23Z = p3Z - p2Z;
		var cross1X;
		var cross1Y;
		var cross1Z;
		var cross2X;
		var cross2Y;
		var cross2Z;
		var cross3X;
		var cross3Y;
		var cross3Z;
		cross1X = v12Y * v34Z - v12Z * v34Y;
		cross1Y = v12Z * v34X - v12X * v34Z;
		cross1Z = v12X * v34Y - v12Y * v34X;
		cross2X = v13Y * v24Z - v13Z * v24Y;
		cross2Y = v13Z * v24X - v13X * v24Z;
		cross2Z = v13X * v24Y - v13Y * v24X;
		cross3X = v14Y * v23Z - v14Z * v23Y;
		cross3Y = v14Z * v23X - v14X * v23Z;
		cross3Z = v14X * v23Y - v14Y * v23X;
		var a11 = cross1X * cross1X + cross1Y * cross1Y + cross1Z * cross1Z;
		var a21 = cross2X * cross2X + cross2Y * cross2Y + cross2Z * cross2Z;
		var a31 = cross3X * cross3X + cross3Y * cross3Y + cross3Z * cross3Z;
		var a4 = a11 > a21 ? a11 > a31 ? a11 : a31 : a21 > a31 ? a21 : a31;
		var max = a1 > a2 ? a1 > a3 ? a1 : a3 : a2 > a3 ? a2 : a3;
		var target = 0;
		if(a22 > max && maxDepthIndex != 1 || maxDepthIndex == 0) {
			max = a22;
			target = 1;
		}
		if(a32 > max && maxDepthIndex != 2) {
			max = a32;
			target = 2;
		}
		if(a4 > max && maxDepthIndex != 3) {
			max = a4;
			target = 3;
		}
		return target;
	}
	,computeRelativePositions: function(tf1,tf2) {
		var num = this._manifold._numPoints;
		var _g = 0;
		while(_g < num) {
			var p = this._manifold._points[_g++];
			var __tmp__X;
			var __tmp__Y;
			var __tmp__Z;
			__tmp__X = tf1._rotation00 * p._localPos1X + tf1._rotation01 * p._localPos1Y + tf1._rotation02 * p._localPos1Z;
			__tmp__Y = tf1._rotation10 * p._localPos1X + tf1._rotation11 * p._localPos1Y + tf1._rotation12 * p._localPos1Z;
			__tmp__Z = tf1._rotation20 * p._localPos1X + tf1._rotation21 * p._localPos1Y + tf1._rotation22 * p._localPos1Z;
			p._relPos1X = __tmp__X;
			p._relPos1Y = __tmp__Y;
			p._relPos1Z = __tmp__Z;
			var __tmp__X1;
			var __tmp__Y1;
			var __tmp__Z1;
			__tmp__X1 = tf2._rotation00 * p._localPos2X + tf2._rotation01 * p._localPos2Y + tf2._rotation02 * p._localPos2Z;
			__tmp__Y1 = tf2._rotation10 * p._localPos2X + tf2._rotation11 * p._localPos2Y + tf2._rotation12 * p._localPos2Z;
			__tmp__Z1 = tf2._rotation20 * p._localPos2X + tf2._rotation21 * p._localPos2Y + tf2._rotation22 * p._localPos2Z;
			p._relPos2X = __tmp__X1;
			p._relPos2Y = __tmp__Y1;
			p._relPos2Z = __tmp__Z1;
			p._warmStarted = true;
		}
	}
	,findNearestContactPointIndex: function(target,tf1,tf2) {
		var nearestSq = oimo_common_Setting.contactPersistenceThreshold * oimo_common_Setting.contactPersistenceThreshold;
		var idx = -1;
		var _g = 0;
		var _g1 = this._manifold._numPoints;
		while(_g < _g1) {
			var i = _g++;
			var mp = this._manifold._points[i];
			var rp1X;
			var rp1Y;
			var rp1Z;
			var rp2X;
			var rp2Y;
			var rp2Z;
			var v = target.position1;
			rp1X = v.x;
			rp1Y = v.y;
			rp1Z = v.z;
			var v1 = target.position2;
			rp2X = v1.x;
			rp2Y = v1.y;
			rp2Z = v1.z;
			rp1X -= tf1._positionX;
			rp1Y -= tf1._positionY;
			rp1Z -= tf1._positionZ;
			rp2X -= tf2._positionX;
			rp2Y -= tf2._positionY;
			rp2Z -= tf2._positionZ;
			var diff1X;
			var diff1Y;
			var diff1Z;
			var diff2X;
			var diff2Y;
			var diff2Z;
			diff1X = mp._relPos1X - rp1X;
			diff1Y = mp._relPos1Y - rp1Y;
			diff1Z = mp._relPos1Z - rp1Z;
			diff2X = mp._relPos2X - rp2X;
			diff2Y = mp._relPos2Y - rp2Y;
			diff2Z = mp._relPos2Z - rp2Z;
			var sq1 = diff1X * diff1X + diff1Y * diff1Y + diff1Z * diff1Z;
			var sq2 = diff2X * diff2X + diff2Y * diff2Y + diff2Z * diff2Z;
			var d = sq1 < sq2 ? sq1 : sq2;
			if(d < nearestSq) {
				nearestSq = d;
				idx = i;
			}
		}
		return idx;
	}
	,totalUpdate: function(result,tf1,tf2) {
		this.numOldPoints = this._manifold._numPoints;
		var _g = 0;
		var _g1 = this.numOldPoints;
		while(_g < _g1) {
			var i = _g++;
			var _this = this.oldPoints[i];
			var cp = this._manifold._points[i];
			_this._localPos1X = cp._localPos1X;
			_this._localPos1Y = cp._localPos1Y;
			_this._localPos1Z = cp._localPos1Z;
			_this._localPos2X = cp._localPos2X;
			_this._localPos2Y = cp._localPos2Y;
			_this._localPos2Z = cp._localPos2Z;
			_this._relPos1X = cp._relPos1X;
			_this._relPos1Y = cp._relPos1Y;
			_this._relPos1Z = cp._relPos1Z;
			_this._relPos2X = cp._relPos2X;
			_this._relPos2Y = cp._relPos2Y;
			_this._relPos2Z = cp._relPos2Z;
			_this._pos1X = cp._pos1X;
			_this._pos1Y = cp._pos1Y;
			_this._pos1Z = cp._pos1Z;
			_this._pos2X = cp._pos2X;
			_this._pos2Y = cp._pos2Y;
			_this._pos2Z = cp._pos2Z;
			_this._depth = cp._depth;
			_this._impulse.copyFrom(cp._impulse);
			_this._id = cp._id;
			_this._warmStarted = cp._warmStarted;
			_this._disabled = false;
		}
		var num = result.numPoints;
		this._manifold._numPoints = num;
		var _g = 0;
		while(_g < num) {
			var i = _g++;
			var p = this._manifold._points[i];
			var ref = result.points[i];
			var v = ref.position1;
			p._pos1X = v.x;
			p._pos1Y = v.y;
			p._pos1Z = v.z;
			var v1 = ref.position2;
			p._pos2X = v1.x;
			p._pos2Y = v1.y;
			p._pos2Z = v1.z;
			p._relPos1X = p._pos1X - tf1._positionX;
			p._relPos1Y = p._pos1Y - tf1._positionY;
			p._relPos1Z = p._pos1Z - tf1._positionZ;
			p._relPos2X = p._pos2X - tf2._positionX;
			p._relPos2Y = p._pos2Y - tf2._positionY;
			p._relPos2Z = p._pos2Z - tf2._positionZ;
			var __tmp__X;
			var __tmp__Y;
			var __tmp__Z;
			__tmp__X = tf1._rotation00 * p._relPos1X + tf1._rotation10 * p._relPos1Y + tf1._rotation20 * p._relPos1Z;
			__tmp__Y = tf1._rotation01 * p._relPos1X + tf1._rotation11 * p._relPos1Y + tf1._rotation21 * p._relPos1Z;
			__tmp__Z = tf1._rotation02 * p._relPos1X + tf1._rotation12 * p._relPos1Y + tf1._rotation22 * p._relPos1Z;
			p._localPos1X = __tmp__X;
			p._localPos1Y = __tmp__Y;
			p._localPos1Z = __tmp__Z;
			var __tmp__X1;
			var __tmp__Y1;
			var __tmp__Z1;
			__tmp__X1 = tf2._rotation00 * p._relPos2X + tf2._rotation10 * p._relPos2Y + tf2._rotation20 * p._relPos2Z;
			__tmp__Y1 = tf2._rotation01 * p._relPos2X + tf2._rotation11 * p._relPos2Y + tf2._rotation21 * p._relPos2Z;
			__tmp__Z1 = tf2._rotation02 * p._relPos2X + tf2._rotation12 * p._relPos2Y + tf2._rotation22 * p._relPos2Z;
			p._localPos2X = __tmp__X1;
			p._localPos2Y = __tmp__Y1;
			p._localPos2Z = __tmp__Z1;
			p._depth = ref.depth;
			var _this = p._impulse;
			_this.impulseN = 0;
			_this.impulseT = 0;
			_this.impulseB = 0;
			_this.impulseP = 0;
			_this.impulseLX = 0;
			_this.impulseLY = 0;
			_this.impulseLZ = 0;
			p._id = ref.id;
			p._warmStarted = false;
			p._disabled = false;
			var _g1 = 0;
			var _g2 = this.numOldPoints;
			while(_g1 < _g2) {
				var ocp = this.oldPoints[_g1++];
				if(p._id == ocp._id) {
					p._impulse.copyFrom(ocp._impulse);
					p._warmStarted = true;
					break;
				}
			}
		}
	}
	,incrementalUpdate: function(result,tf1,tf2) {
		this._manifold._updateDepthsAndPositions(tf1,tf2);
		var _g = 0;
		var _g1 = this._manifold._numPoints;
		while(_g < _g1) this._manifold._points[_g++]._warmStarted = true;
		var newPoint = result.points[0];
		var index = this.findNearestContactPointIndex(newPoint,tf1,tf2);
		if(index == -1) {
			this.addManifoldPoint(newPoint,tf1,tf2);
		} else {
			var cp = this._manifold._points[index];
			var v = newPoint.position1;
			cp._pos1X = v.x;
			cp._pos1Y = v.y;
			cp._pos1Z = v.z;
			var v = newPoint.position2;
			cp._pos2X = v.x;
			cp._pos2Y = v.y;
			cp._pos2Z = v.z;
			cp._relPos1X = cp._pos1X - tf1._positionX;
			cp._relPos1Y = cp._pos1Y - tf1._positionY;
			cp._relPos1Z = cp._pos1Z - tf1._positionZ;
			cp._relPos2X = cp._pos2X - tf2._positionX;
			cp._relPos2Y = cp._pos2Y - tf2._positionY;
			cp._relPos2Z = cp._pos2Z - tf2._positionZ;
			var __tmp__X;
			var __tmp__Y;
			var __tmp__Z;
			__tmp__X = tf1._rotation00 * cp._relPos1X + tf1._rotation10 * cp._relPos1Y + tf1._rotation20 * cp._relPos1Z;
			__tmp__Y = tf1._rotation01 * cp._relPos1X + tf1._rotation11 * cp._relPos1Y + tf1._rotation21 * cp._relPos1Z;
			__tmp__Z = tf1._rotation02 * cp._relPos1X + tf1._rotation12 * cp._relPos1Y + tf1._rotation22 * cp._relPos1Z;
			cp._localPos1X = __tmp__X;
			cp._localPos1Y = __tmp__Y;
			cp._localPos1Z = __tmp__Z;
			var __tmp__X;
			var __tmp__Y;
			var __tmp__Z;
			__tmp__X = tf2._rotation00 * cp._relPos2X + tf2._rotation10 * cp._relPos2Y + tf2._rotation20 * cp._relPos2Z;
			__tmp__Y = tf2._rotation01 * cp._relPos2X + tf2._rotation11 * cp._relPos2Y + tf2._rotation21 * cp._relPos2Z;
			__tmp__Z = tf2._rotation02 * cp._relPos2X + tf2._rotation12 * cp._relPos2Y + tf2._rotation22 * cp._relPos2Z;
			cp._localPos2X = __tmp__X;
			cp._localPos2Y = __tmp__Y;
			cp._localPos2Z = __tmp__Z;
			cp._depth = newPoint.depth;
		}
		this.removeOutdatedPoints();
	}
	,__class__: oimo_dynamics_constraint_contact_ManifoldUpdater
};
var oimo_dynamics_constraint_info_JacobianRow = function() {
	this.lin1X = 0;
	this.lin1Y = 0;
	this.lin1Z = 0;
	this.lin2X = 0;
	this.lin2Y = 0;
	this.lin2Z = 0;
	this.ang1X = 0;
	this.ang1Y = 0;
	this.ang1Z = 0;
	this.ang2X = 0;
	this.ang2Y = 0;
	this.ang2Z = 0;
	this.flag = 0;
};
oimo_dynamics_constraint_info_JacobianRow.__name__ = true;
oimo_dynamics_constraint_info_JacobianRow.prototype = {
	updateSparsity: function() {
		this.flag = 0;
		if(!(this.lin1X == 0 && this.lin1Y == 0 && this.lin1Z == 0) || !(this.lin2X == 0 && this.lin2Y == 0 && this.lin2Z == 0)) {
			this.flag |= 1;
		}
		if(!(this.ang1X == 0 && this.ang1Y == 0 && this.ang1Z == 0) || !(this.ang2X == 0 && this.ang2Y == 0 && this.ang2Z == 0)) {
			this.flag |= 2;
		}
	}
	,__class__: oimo_dynamics_constraint_info_JacobianRow
};
var oimo_dynamics_constraint_info_contact_ContactSolverInfo = function() {
	this.b1 = null;
	this.b2 = null;
	this.numRows = 0;
	this.rows = new Array(oimo_common_Setting.maxManifoldPoints);
	var _g = 0;
	var _g1 = this.rows.length;
	while(_g < _g1) this.rows[_g++] = new oimo_dynamics_constraint_info_contact_ContactSolverInfoRow();
};
oimo_dynamics_constraint_info_contact_ContactSolverInfo.__name__ = true;
oimo_dynamics_constraint_info_contact_ContactSolverInfo.prototype = {
	__class__: oimo_dynamics_constraint_info_contact_ContactSolverInfo
};
var oimo_dynamics_constraint_info_contact_ContactSolverInfoRow = function() {
	this.jacobianN = new oimo_dynamics_constraint_info_JacobianRow();
	this.jacobianT = new oimo_dynamics_constraint_info_JacobianRow();
	this.jacobianB = new oimo_dynamics_constraint_info_JacobianRow();
	this.rhs = 0;
	this.cfm = 0;
	this.friction = 0;
	this.impulse = null;
};
oimo_dynamics_constraint_info_contact_ContactSolverInfoRow.__name__ = true;
oimo_dynamics_constraint_info_contact_ContactSolverInfoRow.prototype = {
	__class__: oimo_dynamics_constraint_info_contact_ContactSolverInfoRow
};
var oimo_dynamics_constraint_info_joint_JointSolverInfo = function() {
	this.b1 = null;
	this.b2 = null;
	this.numRows = 0;
	this.rows = new Array(oimo_common_Setting.maxJacobianRows);
	var _g = 0;
	var _g1 = this.rows.length;
	while(_g < _g1) this.rows[_g++] = new oimo_dynamics_constraint_info_joint_JointSolverInfoRow();
};
oimo_dynamics_constraint_info_joint_JointSolverInfo.__name__ = true;
oimo_dynamics_constraint_info_joint_JointSolverInfo.prototype = {
	__class__: oimo_dynamics_constraint_info_joint_JointSolverInfo
};
var oimo_dynamics_constraint_info_joint_JointSolverInfoRow = function() {
	this.jacobian = new oimo_dynamics_constraint_info_JacobianRow();
	this.rhs = 0;
	this.cfm = 0;
	this.minImpulse = 0;
	this.maxImpulse = 0;
	this.motorSpeed = 0;
	this.motorMaxImpulse = 0;
	this.impulse = null;
};
oimo_dynamics_constraint_info_joint_JointSolverInfoRow.__name__ = true;
oimo_dynamics_constraint_info_joint_JointSolverInfoRow.prototype = {
	__class__: oimo_dynamics_constraint_info_joint_JointSolverInfoRow
};
var oimo_dynamics_constraint_joint_BasisTracker = function(joint) {
	this.joint = joint;
	this.xX = 0;
	this.xY = 0;
	this.xZ = 0;
	this.yX = 0;
	this.yY = 0;
	this.yZ = 0;
	this.zX = 0;
	this.zY = 0;
	this.zZ = 0;
};
oimo_dynamics_constraint_joint_BasisTracker.__name__ = true;
oimo_dynamics_constraint_joint_BasisTracker.prototype = {
	__class__: oimo_dynamics_constraint_joint_BasisTracker
};
var oimo_dynamics_constraint_joint_Joint = function(config,type) {
	this._link1 = new oimo_dynamics_constraint_joint_JointLink(this);
	this._link2 = new oimo_dynamics_constraint_joint_JointLink(this);
	this._positionCorrectionAlgorithm = oimo_common_Setting.defaultJointPositionCorrectionAlgorithm;
	this._type = type;
	this._world = null;
	this._b1 = config.rigidBody1;
	this._b2 = config.rigidBody2;
	this._allowCollision = config.allowCollision;
	this._breakForce = config.breakForce;
	this._breakTorque = config.breakTorque;
	switch(config.solverType) {
	case 0:
		this._solver = new oimo_dynamics_constraint_solver_pgs_PgsJointConstraintSolver(this);
		break;
	case 1:
		this._solver = new oimo_dynamics_constraint_solver_direct_DirectJointConstraintSolver(this);
		break;
	}
	var v = config.localAnchor1;
	this._localAnchor1X = v.x;
	this._localAnchor1Y = v.y;
	this._localAnchor1Z = v.z;
	var v = config.localAnchor2;
	this._localAnchor2X = v.x;
	this._localAnchor2Y = v.y;
	this._localAnchor2Z = v.z;
	this._relativeAnchor1X = 0;
	this._relativeAnchor1Y = 0;
	this._relativeAnchor1Z = 0;
	this._relativeAnchor2X = 0;
	this._relativeAnchor2Y = 0;
	this._relativeAnchor2Z = 0;
	this._anchor1X = 0;
	this._anchor1Y = 0;
	this._anchor1Z = 0;
	this._anchor2X = 0;
	this._anchor2Y = 0;
	this._anchor2Z = 0;
	this._localBasisX1X = 0;
	this._localBasisX1Y = 0;
	this._localBasisX1Z = 0;
	this._localBasisY1X = 0;
	this._localBasisY1Y = 0;
	this._localBasisY1Z = 0;
	this._localBasisZ1X = 0;
	this._localBasisZ1Y = 0;
	this._localBasisZ1Z = 0;
	this._localBasisX2X = 0;
	this._localBasisX2Y = 0;
	this._localBasisX2Z = 0;
	this._localBasisY2X = 0;
	this._localBasisY2Y = 0;
	this._localBasisY2Z = 0;
	this._localBasisZ2X = 0;
	this._localBasisZ2Y = 0;
	this._localBasisZ2Z = 0;
	this._impulses = new Array(oimo_common_Setting.maxJacobianRows);
	var _g = 0;
	var _g1 = oimo_common_Setting.maxJacobianRows;
	while(_g < _g1) this._impulses[_g++] = new oimo_dynamics_constraint_joint_JointImpulse();
};
oimo_dynamics_constraint_joint_Joint.__name__ = true;
oimo_dynamics_constraint_joint_Joint.prototype = {
	buildLocalBasesFromX: function() {
		if(this._localBasisX1X * this._localBasisX1X + this._localBasisX1Y * this._localBasisX1Y + this._localBasisX1Z * this._localBasisX1Z == 0) {
			this._localBasisX1X = 1;
			this._localBasisX1Y = 0;
			this._localBasisX1Z = 0;
		} else {
			var l = this._localBasisX1X * this._localBasisX1X + this._localBasisX1Y * this._localBasisX1Y + this._localBasisX1Z * this._localBasisX1Z;
			if(l > 0) {
				l = 1 / Math.sqrt(l);
			}
			this._localBasisX1X *= l;
			this._localBasisX1Y *= l;
			this._localBasisX1Z *= l;
		}
		if(this._localBasisX2X * this._localBasisX2X + this._localBasisX2Y * this._localBasisX2Y + this._localBasisX2Z * this._localBasisX2Z == 0) {
			this._localBasisX2X = 1;
			this._localBasisX2Y = 0;
			this._localBasisX2Z = 0;
		} else {
			var l = this._localBasisX2X * this._localBasisX2X + this._localBasisX2Y * this._localBasisX2Y + this._localBasisX2Z * this._localBasisX2Z;
			if(l > 0) {
				l = 1 / Math.sqrt(l);
			}
			this._localBasisX2X *= l;
			this._localBasisX2Y *= l;
			this._localBasisX2Z *= l;
		}
		var slerpQX;
		var slerpQY;
		var slerpQZ;
		var slerpQW;
		var slerpM00;
		var slerpM01;
		var slerpM02;
		var slerpM10;
		var slerpM11;
		var slerpM12;
		var slerpM20;
		var slerpM21;
		var slerpM22;
		var d = this._localBasisX1X * this._localBasisX2X + this._localBasisX1Y * this._localBasisX2Y + this._localBasisX1Z * this._localBasisX2Z;
		if(d < -0.999999999) {
			var vX;
			var vY;
			var vZ;
			var x1 = this._localBasisX1X;
			var y1 = this._localBasisX1Y;
			var z1 = this._localBasisX1Z;
			var x2 = x1 * x1;
			var y2 = y1 * y1;
			var z2 = z1 * z1;
			var d1;
			if(x2 < y2) {
				if(x2 < z2) {
					d1 = 1 / Math.sqrt(y2 + z2);
					vX = 0;
					vY = z1 * d1;
					vZ = -y1 * d1;
				} else {
					d1 = 1 / Math.sqrt(x2 + y2);
					vX = y1 * d1;
					vY = -x1 * d1;
					vZ = 0;
				}
			} else if(y2 < z2) {
				d1 = 1 / Math.sqrt(z2 + x2);
				vX = -z1 * d1;
				vY = 0;
				vZ = x1 * d1;
			} else {
				d1 = 1 / Math.sqrt(x2 + y2);
				vX = y1 * d1;
				vY = -x1 * d1;
				vZ = 0;
			}
			slerpQX = vX;
			slerpQY = vY;
			slerpQZ = vZ;
			slerpQW = 0;
		} else {
			var cX;
			var cY;
			var cZ;
			cX = this._localBasisX1Y * this._localBasisX2Z - this._localBasisX1Z * this._localBasisX2Y;
			cY = this._localBasisX1Z * this._localBasisX2X - this._localBasisX1X * this._localBasisX2Z;
			cZ = this._localBasisX1X * this._localBasisX2Y - this._localBasisX1Y * this._localBasisX2X;
			var w = Math.sqrt((1 + d) * 0.5);
			d = 0.5 / w;
			cX *= d;
			cY *= d;
			cZ *= d;
			slerpQX = cX;
			slerpQY = cY;
			slerpQZ = cZ;
			slerpQW = w;
		}
		var x = slerpQX;
		var y = slerpQY;
		var z = slerpQZ;
		var w = slerpQW;
		var x2 = 2 * x;
		var y2 = 2 * y;
		var z2 = 2 * z;
		var xx = x * x2;
		var yy = y * y2;
		var zz = z * z2;
		var xy = x * y2;
		var yz = y * z2;
		var xz = x * z2;
		var wx = w * x2;
		var wy = w * y2;
		var wz = w * z2;
		slerpM00 = 1 - yy - zz;
		slerpM01 = xy - wz;
		slerpM02 = xz + wy;
		slerpM10 = xy + wz;
		slerpM11 = 1 - xx - zz;
		slerpM12 = yz - wx;
		slerpM20 = xz - wy;
		slerpM21 = yz + wx;
		slerpM22 = 1 - xx - yy;
		var x1 = this._localBasisX1X;
		var y1 = this._localBasisX1Y;
		var z1 = this._localBasisX1Z;
		var x2 = x1 * x1;
		var y2 = y1 * y1;
		var z2 = z1 * z1;
		var d;
		if(x2 < y2) {
			if(x2 < z2) {
				d = 1 / Math.sqrt(y2 + z2);
				this._localBasisY1X = 0;
				this._localBasisY1Y = z1 * d;
				this._localBasisY1Z = -y1 * d;
			} else {
				d = 1 / Math.sqrt(x2 + y2);
				this._localBasisY1X = y1 * d;
				this._localBasisY1Y = -x1 * d;
				this._localBasisY1Z = 0;
			}
		} else if(y2 < z2) {
			d = 1 / Math.sqrt(z2 + x2);
			this._localBasisY1X = -z1 * d;
			this._localBasisY1Y = 0;
			this._localBasisY1Z = x1 * d;
		} else {
			d = 1 / Math.sqrt(x2 + y2);
			this._localBasisY1X = y1 * d;
			this._localBasisY1Y = -x1 * d;
			this._localBasisY1Z = 0;
		}
		this._localBasisZ1X = this._localBasisX1Y * this._localBasisY1Z - this._localBasisX1Z * this._localBasisY1Y;
		this._localBasisZ1Y = this._localBasisX1Z * this._localBasisY1X - this._localBasisX1X * this._localBasisY1Z;
		this._localBasisZ1Z = this._localBasisX1X * this._localBasisY1Y - this._localBasisX1Y * this._localBasisY1X;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = slerpM00 * this._localBasisX1X + slerpM01 * this._localBasisX1Y + slerpM02 * this._localBasisX1Z;
		__tmp__Y = slerpM10 * this._localBasisX1X + slerpM11 * this._localBasisX1Y + slerpM12 * this._localBasisX1Z;
		__tmp__Z = slerpM20 * this._localBasisX1X + slerpM21 * this._localBasisX1Y + slerpM22 * this._localBasisX1Z;
		this._localBasisX2X = __tmp__X;
		this._localBasisX2Y = __tmp__Y;
		this._localBasisX2Z = __tmp__Z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = slerpM00 * this._localBasisY1X + slerpM01 * this._localBasisY1Y + slerpM02 * this._localBasisY1Z;
		__tmp__Y = slerpM10 * this._localBasisY1X + slerpM11 * this._localBasisY1Y + slerpM12 * this._localBasisY1Z;
		__tmp__Z = slerpM20 * this._localBasisY1X + slerpM21 * this._localBasisY1Y + slerpM22 * this._localBasisY1Z;
		this._localBasisY2X = __tmp__X;
		this._localBasisY2Y = __tmp__Y;
		this._localBasisY2Z = __tmp__Z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = slerpM00 * this._localBasisZ1X + slerpM01 * this._localBasisZ1Y + slerpM02 * this._localBasisZ1Z;
		__tmp__Y = slerpM10 * this._localBasisZ1X + slerpM11 * this._localBasisZ1Y + slerpM12 * this._localBasisZ1Z;
		__tmp__Z = slerpM20 * this._localBasisZ1X + slerpM21 * this._localBasisZ1Y + slerpM22 * this._localBasisZ1Z;
		this._localBasisZ2X = __tmp__X;
		this._localBasisZ2Y = __tmp__Y;
		this._localBasisZ2Z = __tmp__Z;
	}
	,buildLocalBasesFromXY: function() {
		if(this._localBasisX1X * this._localBasisX1X + this._localBasisX1Y * this._localBasisX1Y + this._localBasisX1Z * this._localBasisX1Z == 0) {
			this._localBasisX1X = 1;
			this._localBasisX1Y = 0;
			this._localBasisX1Z = 0;
		} else {
			var l = this._localBasisX1X * this._localBasisX1X + this._localBasisX1Y * this._localBasisX1Y + this._localBasisX1Z * this._localBasisX1Z;
			if(l > 0) {
				l = 1 / Math.sqrt(l);
			}
			this._localBasisX1X *= l;
			this._localBasisX1Y *= l;
			this._localBasisX1Z *= l;
		}
		if(this._localBasisX2X * this._localBasisX2X + this._localBasisX2Y * this._localBasisX2Y + this._localBasisX2Z * this._localBasisX2Z == 0) {
			this._localBasisX2X = 1;
			this._localBasisX2Y = 0;
			this._localBasisX2Z = 0;
		} else {
			var l = this._localBasisX2X * this._localBasisX2X + this._localBasisX2Y * this._localBasisX2Y + this._localBasisX2Z * this._localBasisX2Z;
			if(l > 0) {
				l = 1 / Math.sqrt(l);
			}
			this._localBasisX2X *= l;
			this._localBasisX2Y *= l;
			this._localBasisX2Z *= l;
		}
		this._localBasisZ1X = this._localBasisX1Y * this._localBasisY1Z - this._localBasisX1Z * this._localBasisY1Y;
		this._localBasisZ1Y = this._localBasisX1Z * this._localBasisY1X - this._localBasisX1X * this._localBasisY1Z;
		this._localBasisZ1Z = this._localBasisX1X * this._localBasisY1Y - this._localBasisX1Y * this._localBasisY1X;
		this._localBasisZ2X = this._localBasisX2Y * this._localBasisY2Z - this._localBasisX2Z * this._localBasisY2Y;
		this._localBasisZ2Y = this._localBasisX2Z * this._localBasisY2X - this._localBasisX2X * this._localBasisY2Z;
		this._localBasisZ2Z = this._localBasisX2X * this._localBasisY2Y - this._localBasisX2Y * this._localBasisY2X;
		if(this._localBasisZ1X * this._localBasisZ1X + this._localBasisZ1Y * this._localBasisZ1Y + this._localBasisZ1Z * this._localBasisZ1Z == 0) {
			var x1 = this._localBasisX1X;
			var y1 = this._localBasisX1Y;
			var z1 = this._localBasisX1Z;
			var x2 = x1 * x1;
			var y2 = y1 * y1;
			var z2 = z1 * z1;
			var d;
			if(x2 < y2) {
				if(x2 < z2) {
					d = 1 / Math.sqrt(y2 + z2);
					this._localBasisY1X = 0;
					this._localBasisY1Y = z1 * d;
					this._localBasisY1Z = -y1 * d;
				} else {
					d = 1 / Math.sqrt(x2 + y2);
					this._localBasisY1X = y1 * d;
					this._localBasisY1Y = -x1 * d;
					this._localBasisY1Z = 0;
				}
			} else if(y2 < z2) {
				d = 1 / Math.sqrt(z2 + x2);
				this._localBasisY1X = -z1 * d;
				this._localBasisY1Y = 0;
				this._localBasisY1Z = x1 * d;
			} else {
				d = 1 / Math.sqrt(x2 + y2);
				this._localBasisY1X = y1 * d;
				this._localBasisY1Y = -x1 * d;
				this._localBasisY1Z = 0;
			}
			this._localBasisZ1X = this._localBasisX1Y * this._localBasisY1Z - this._localBasisX1Z * this._localBasisY1Y;
			this._localBasisZ1Y = this._localBasisX1Z * this._localBasisY1X - this._localBasisX1X * this._localBasisY1Z;
			this._localBasisZ1Z = this._localBasisX1X * this._localBasisY1Y - this._localBasisX1Y * this._localBasisY1X;
		} else {
			var l = this._localBasisZ1X * this._localBasisZ1X + this._localBasisZ1Y * this._localBasisZ1Y + this._localBasisZ1Z * this._localBasisZ1Z;
			if(l > 0) {
				l = 1 / Math.sqrt(l);
			}
			this._localBasisZ1X *= l;
			this._localBasisZ1Y *= l;
			this._localBasisZ1Z *= l;
			this._localBasisY1X = this._localBasisZ1Y * this._localBasisX1Z - this._localBasisZ1Z * this._localBasisX1Y;
			this._localBasisY1Y = this._localBasisZ1Z * this._localBasisX1X - this._localBasisZ1X * this._localBasisX1Z;
			this._localBasisY1Z = this._localBasisZ1X * this._localBasisX1Y - this._localBasisZ1Y * this._localBasisX1X;
		}
		if(this._localBasisZ2X * this._localBasisZ2X + this._localBasisZ2Y * this._localBasisZ2Y + this._localBasisZ2Z * this._localBasisZ2Z == 0) {
			var x1 = this._localBasisX2X;
			var y1 = this._localBasisX2Y;
			var z1 = this._localBasisX2Z;
			var x2 = x1 * x1;
			var y2 = y1 * y1;
			var z2 = z1 * z1;
			var d;
			if(x2 < y2) {
				if(x2 < z2) {
					d = 1 / Math.sqrt(y2 + z2);
					this._localBasisY2X = 0;
					this._localBasisY2Y = z1 * d;
					this._localBasisY2Z = -y1 * d;
				} else {
					d = 1 / Math.sqrt(x2 + y2);
					this._localBasisY2X = y1 * d;
					this._localBasisY2Y = -x1 * d;
					this._localBasisY2Z = 0;
				}
			} else if(y2 < z2) {
				d = 1 / Math.sqrt(z2 + x2);
				this._localBasisY2X = -z1 * d;
				this._localBasisY2Y = 0;
				this._localBasisY2Z = x1 * d;
			} else {
				d = 1 / Math.sqrt(x2 + y2);
				this._localBasisY2X = y1 * d;
				this._localBasisY2Y = -x1 * d;
				this._localBasisY2Z = 0;
			}
			this._localBasisZ2X = this._localBasisX2Y * this._localBasisY2Z - this._localBasisX2Z * this._localBasisY2Y;
			this._localBasisZ2Y = this._localBasisX2Z * this._localBasisY2X - this._localBasisX2X * this._localBasisY2Z;
			this._localBasisZ2Z = this._localBasisX2X * this._localBasisY2Y - this._localBasisX2Y * this._localBasisY2X;
		} else {
			var l = this._localBasisZ2X * this._localBasisZ2X + this._localBasisZ2Y * this._localBasisZ2Y + this._localBasisZ2Z * this._localBasisZ2Z;
			if(l > 0) {
				l = 1 / Math.sqrt(l);
			}
			this._localBasisZ2X *= l;
			this._localBasisZ2Y *= l;
			this._localBasisZ2Z *= l;
			this._localBasisY2X = this._localBasisZ2Y * this._localBasisX2Z - this._localBasisZ2Z * this._localBasisX2Y;
			this._localBasisY2Y = this._localBasisZ2Z * this._localBasisX2X - this._localBasisZ2X * this._localBasisX2Z;
			this._localBasisY2Z = this._localBasisZ2X * this._localBasisX2Y - this._localBasisZ2Y * this._localBasisX2X;
		}
	}
	,buildLocalBasesFromX1Z2: function() {
		if(this._localBasisX1X * this._localBasisX1X + this._localBasisX1Y * this._localBasisX1Y + this._localBasisX1Z * this._localBasisX1Z == 0) {
			this._localBasisX1X = 1;
			this._localBasisX1Y = 0;
			this._localBasisX1Z = 0;
		} else {
			var l = this._localBasisX1X * this._localBasisX1X + this._localBasisX1Y * this._localBasisX1Y + this._localBasisX1Z * this._localBasisX1Z;
			if(l > 0) {
				l = 1 / Math.sqrt(l);
			}
			this._localBasisX1X *= l;
			this._localBasisX1Y *= l;
			this._localBasisX1Z *= l;
		}
		if(this._localBasisZ2X * this._localBasisZ2X + this._localBasisZ2Y * this._localBasisZ2Y + this._localBasisZ2Z * this._localBasisZ2Z == 0) {
			this._localBasisZ2X = 0;
			this._localBasisZ2Y = 0;
			this._localBasisZ2Z = 1;
		} else {
			var l = this._localBasisZ2X * this._localBasisZ2X + this._localBasisZ2Y * this._localBasisZ2Y + this._localBasisZ2Z * this._localBasisZ2Z;
			if(l > 0) {
				l = 1 / Math.sqrt(l);
			}
			this._localBasisZ2X *= l;
			this._localBasisZ2Y *= l;
			this._localBasisZ2Z *= l;
		}
		var tf1 = this._b1._transform;
		var tf2 = this._b2._transform;
		var worldX1X;
		var worldX1Y;
		var worldX1Z;
		var worldZ1X;
		var worldZ1Y;
		var worldZ1Z;
		var worldYX;
		var worldYY;
		var worldYZ;
		var worldX2X;
		var worldX2Y;
		var worldX2Z;
		var worldZ2X;
		var worldZ2Y;
		var worldZ2Z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = tf1._rotation00 * this._localBasisX1X + tf1._rotation01 * this._localBasisX1Y + tf1._rotation02 * this._localBasisX1Z;
		__tmp__Y = tf1._rotation10 * this._localBasisX1X + tf1._rotation11 * this._localBasisX1Y + tf1._rotation12 * this._localBasisX1Z;
		__tmp__Z = tf1._rotation20 * this._localBasisX1X + tf1._rotation21 * this._localBasisX1Y + tf1._rotation22 * this._localBasisX1Z;
		worldX1X = __tmp__X;
		worldX1Y = __tmp__Y;
		worldX1Z = __tmp__Z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = tf2._rotation00 * this._localBasisZ2X + tf2._rotation01 * this._localBasisZ2Y + tf2._rotation02 * this._localBasisZ2Z;
		__tmp__Y = tf2._rotation10 * this._localBasisZ2X + tf2._rotation11 * this._localBasisZ2Y + tf2._rotation12 * this._localBasisZ2Z;
		__tmp__Z = tf2._rotation20 * this._localBasisZ2X + tf2._rotation21 * this._localBasisZ2Y + tf2._rotation22 * this._localBasisZ2Z;
		worldZ2X = __tmp__X;
		worldZ2Y = __tmp__Y;
		worldZ2Z = __tmp__Z;
		worldYX = worldZ2Y * worldX1Z - worldZ2Z * worldX1Y;
		worldYY = worldZ2Z * worldX1X - worldZ2X * worldX1Z;
		worldYZ = worldZ2X * worldX1Y - worldZ2Y * worldX1X;
		if(worldYX * worldYX + worldYY * worldYY + worldYZ * worldYZ == 0) {
			var x1 = worldX1X;
			var y1 = worldX1Y;
			var z1 = worldX1Z;
			var x2 = x1 * x1;
			var y2 = y1 * y1;
			var z2 = z1 * z1;
			var d;
			if(x2 < y2) {
				if(x2 < z2) {
					d = 1 / Math.sqrt(y2 + z2);
					worldYX = 0;
					worldYY = z1 * d;
					worldYZ = -y1 * d;
				} else {
					d = 1 / Math.sqrt(x2 + y2);
					worldYX = y1 * d;
					worldYY = -x1 * d;
					worldYZ = 0;
				}
			} else if(y2 < z2) {
				d = 1 / Math.sqrt(z2 + x2);
				worldYX = -z1 * d;
				worldYY = 0;
				worldYZ = x1 * d;
			} else {
				d = 1 / Math.sqrt(x2 + y2);
				worldYX = y1 * d;
				worldYY = -x1 * d;
				worldYZ = 0;
			}
		}
		worldZ1X = worldX1Y * worldYZ - worldX1Z * worldYY;
		worldZ1Y = worldX1Z * worldYX - worldX1X * worldYZ;
		worldZ1Z = worldX1X * worldYY - worldX1Y * worldYX;
		worldX2X = worldYY * worldZ2Z - worldYZ * worldZ2Y;
		worldX2Y = worldYZ * worldZ2X - worldYX * worldZ2Z;
		worldX2Z = worldYX * worldZ2Y - worldYY * worldZ2X;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = tf1._rotation00 * worldX1X + tf1._rotation10 * worldX1Y + tf1._rotation20 * worldX1Z;
		__tmp__Y = tf1._rotation01 * worldX1X + tf1._rotation11 * worldX1Y + tf1._rotation21 * worldX1Z;
		__tmp__Z = tf1._rotation02 * worldX1X + tf1._rotation12 * worldX1Y + tf1._rotation22 * worldX1Z;
		this._localBasisX1X = __tmp__X;
		this._localBasisX1Y = __tmp__Y;
		this._localBasisX1Z = __tmp__Z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = tf1._rotation00 * worldYX + tf1._rotation10 * worldYY + tf1._rotation20 * worldYZ;
		__tmp__Y = tf1._rotation01 * worldYX + tf1._rotation11 * worldYY + tf1._rotation21 * worldYZ;
		__tmp__Z = tf1._rotation02 * worldYX + tf1._rotation12 * worldYY + tf1._rotation22 * worldYZ;
		this._localBasisY1X = __tmp__X;
		this._localBasisY1Y = __tmp__Y;
		this._localBasisY1Z = __tmp__Z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = tf1._rotation00 * worldZ1X + tf1._rotation10 * worldZ1Y + tf1._rotation20 * worldZ1Z;
		__tmp__Y = tf1._rotation01 * worldZ1X + tf1._rotation11 * worldZ1Y + tf1._rotation21 * worldZ1Z;
		__tmp__Z = tf1._rotation02 * worldZ1X + tf1._rotation12 * worldZ1Y + tf1._rotation22 * worldZ1Z;
		this._localBasisZ1X = __tmp__X;
		this._localBasisZ1Y = __tmp__Y;
		this._localBasisZ1Z = __tmp__Z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = tf2._rotation00 * worldX2X + tf2._rotation10 * worldX2Y + tf2._rotation20 * worldX2Z;
		__tmp__Y = tf2._rotation01 * worldX2X + tf2._rotation11 * worldX2Y + tf2._rotation21 * worldX2Z;
		__tmp__Z = tf2._rotation02 * worldX2X + tf2._rotation12 * worldX2Y + tf2._rotation22 * worldX2Z;
		this._localBasisX2X = __tmp__X;
		this._localBasisX2Y = __tmp__Y;
		this._localBasisX2Z = __tmp__Z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = tf2._rotation00 * worldYX + tf2._rotation10 * worldYY + tf2._rotation20 * worldYZ;
		__tmp__Y = tf2._rotation01 * worldYX + tf2._rotation11 * worldYY + tf2._rotation21 * worldYZ;
		__tmp__Z = tf2._rotation02 * worldYX + tf2._rotation12 * worldYY + tf2._rotation22 * worldYZ;
		this._localBasisY2X = __tmp__X;
		this._localBasisY2Y = __tmp__Y;
		this._localBasisY2Z = __tmp__Z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = tf2._rotation00 * worldZ2X + tf2._rotation10 * worldZ2Y + tf2._rotation20 * worldZ2Z;
		__tmp__Y = tf2._rotation01 * worldZ2X + tf2._rotation11 * worldZ2Y + tf2._rotation21 * worldZ2Z;
		__tmp__Z = tf2._rotation02 * worldZ2X + tf2._rotation12 * worldZ2Y + tf2._rotation22 * worldZ2Z;
		this._localBasisZ2X = __tmp__X;
		this._localBasisZ2Y = __tmp__Y;
		this._localBasisZ2Z = __tmp__Z;
	}
	,buildLocalBasesFromXY1X2: function() {
		if(this._localBasisX1X * this._localBasisX1X + this._localBasisX1Y * this._localBasisX1Y + this._localBasisX1Z * this._localBasisX1Z == 0) {
			this._localBasisX1X = 1;
			this._localBasisX1Y = 0;
			this._localBasisX1Z = 0;
		} else {
			var l = this._localBasisX1X * this._localBasisX1X + this._localBasisX1Y * this._localBasisX1Y + this._localBasisX1Z * this._localBasisX1Z;
			if(l > 0) {
				l = 1 / Math.sqrt(l);
			}
			this._localBasisX1X *= l;
			this._localBasisX1Y *= l;
			this._localBasisX1Z *= l;
		}
		this._localBasisZ1X = this._localBasisX1Y * this._localBasisY1Z - this._localBasisX1Z * this._localBasisY1Y;
		this._localBasisZ1Y = this._localBasisX1Z * this._localBasisY1X - this._localBasisX1X * this._localBasisY1Z;
		this._localBasisZ1Z = this._localBasisX1X * this._localBasisY1Y - this._localBasisX1Y * this._localBasisY1X;
		if(this._localBasisZ1X * this._localBasisZ1X + this._localBasisZ1Y * this._localBasisZ1Y + this._localBasisZ1Z * this._localBasisZ1Z == 0) {
			var x1 = this._localBasisX1X;
			var y1 = this._localBasisX1Y;
			var z1 = this._localBasisX1Z;
			var x2 = x1 * x1;
			var y2 = y1 * y1;
			var z2 = z1 * z1;
			var d;
			if(x2 < y2) {
				if(x2 < z2) {
					d = 1 / Math.sqrt(y2 + z2);
					this._localBasisY1X = 0;
					this._localBasisY1Y = z1 * d;
					this._localBasisY1Z = -y1 * d;
				} else {
					d = 1 / Math.sqrt(x2 + y2);
					this._localBasisY1X = y1 * d;
					this._localBasisY1Y = -x1 * d;
					this._localBasisY1Z = 0;
				}
			} else if(y2 < z2) {
				d = 1 / Math.sqrt(z2 + x2);
				this._localBasisY1X = -z1 * d;
				this._localBasisY1Y = 0;
				this._localBasisY1Z = x1 * d;
			} else {
				d = 1 / Math.sqrt(x2 + y2);
				this._localBasisY1X = y1 * d;
				this._localBasisY1Y = -x1 * d;
				this._localBasisY1Z = 0;
			}
			this._localBasisZ1X = this._localBasisX1Y * this._localBasisY1Z - this._localBasisX1Z * this._localBasisY1Y;
			this._localBasisZ1Y = this._localBasisX1Z * this._localBasisY1X - this._localBasisX1X * this._localBasisY1Z;
			this._localBasisZ1Z = this._localBasisX1X * this._localBasisY1Y - this._localBasisX1Y * this._localBasisY1X;
		} else {
			var l = this._localBasisZ1X * this._localBasisZ1X + this._localBasisZ1Y * this._localBasisZ1Y + this._localBasisZ1Z * this._localBasisZ1Z;
			if(l > 0) {
				l = 1 / Math.sqrt(l);
			}
			this._localBasisZ1X *= l;
			this._localBasisZ1Y *= l;
			this._localBasisZ1Z *= l;
			this._localBasisY1X = this._localBasisZ1Y * this._localBasisX1Z - this._localBasisZ1Z * this._localBasisX1Y;
			this._localBasisY1Y = this._localBasisZ1Z * this._localBasisX1X - this._localBasisZ1X * this._localBasisX1Z;
			this._localBasisY1Z = this._localBasisZ1X * this._localBasisX1Y - this._localBasisZ1Y * this._localBasisX1X;
		}
		var slerpQX;
		var slerpQY;
		var slerpQZ;
		var slerpQW;
		var slerpM00;
		var slerpM01;
		var slerpM02;
		var slerpM10;
		var slerpM11;
		var slerpM12;
		var slerpM20;
		var slerpM21;
		var slerpM22;
		var d = this._localBasisX1X * this._localBasisX2X + this._localBasisX1Y * this._localBasisX2Y + this._localBasisX1Z * this._localBasisX2Z;
		if(d < -0.999999999) {
			var vX;
			var vY;
			var vZ;
			var x1 = this._localBasisX1X;
			var y1 = this._localBasisX1Y;
			var z1 = this._localBasisX1Z;
			var x2 = x1 * x1;
			var y2 = y1 * y1;
			var z2 = z1 * z1;
			var d1;
			if(x2 < y2) {
				if(x2 < z2) {
					d1 = 1 / Math.sqrt(y2 + z2);
					vX = 0;
					vY = z1 * d1;
					vZ = -y1 * d1;
				} else {
					d1 = 1 / Math.sqrt(x2 + y2);
					vX = y1 * d1;
					vY = -x1 * d1;
					vZ = 0;
				}
			} else if(y2 < z2) {
				d1 = 1 / Math.sqrt(z2 + x2);
				vX = -z1 * d1;
				vY = 0;
				vZ = x1 * d1;
			} else {
				d1 = 1 / Math.sqrt(x2 + y2);
				vX = y1 * d1;
				vY = -x1 * d1;
				vZ = 0;
			}
			slerpQX = vX;
			slerpQY = vY;
			slerpQZ = vZ;
			slerpQW = 0;
		} else {
			var cX;
			var cY;
			var cZ;
			cX = this._localBasisX1Y * this._localBasisX2Z - this._localBasisX1Z * this._localBasisX2Y;
			cY = this._localBasisX1Z * this._localBasisX2X - this._localBasisX1X * this._localBasisX2Z;
			cZ = this._localBasisX1X * this._localBasisX2Y - this._localBasisX1Y * this._localBasisX2X;
			var w = Math.sqrt((1 + d) * 0.5);
			d = 0.5 / w;
			cX *= d;
			cY *= d;
			cZ *= d;
			slerpQX = cX;
			slerpQY = cY;
			slerpQZ = cZ;
			slerpQW = w;
		}
		var x = slerpQX;
		var y = slerpQY;
		var z = slerpQZ;
		var w = slerpQW;
		var x2 = 2 * x;
		var y2 = 2 * y;
		var z2 = 2 * z;
		var xx = x * x2;
		var yy = y * y2;
		var zz = z * z2;
		var xy = x * y2;
		var yz = y * z2;
		var xz = x * z2;
		var wx = w * x2;
		var wy = w * y2;
		var wz = w * z2;
		slerpM00 = 1 - yy - zz;
		slerpM01 = xy - wz;
		slerpM02 = xz + wy;
		slerpM10 = xy + wz;
		slerpM11 = 1 - xx - zz;
		slerpM12 = yz - wx;
		slerpM20 = xz - wy;
		slerpM21 = yz + wx;
		slerpM22 = 1 - xx - yy;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = slerpM00 * this._localBasisX1X + slerpM01 * this._localBasisX1Y + slerpM02 * this._localBasisX1Z;
		__tmp__Y = slerpM10 * this._localBasisX1X + slerpM11 * this._localBasisX1Y + slerpM12 * this._localBasisX1Z;
		__tmp__Z = slerpM20 * this._localBasisX1X + slerpM21 * this._localBasisX1Y + slerpM22 * this._localBasisX1Z;
		this._localBasisX2X = __tmp__X;
		this._localBasisX2Y = __tmp__Y;
		this._localBasisX2Z = __tmp__Z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = slerpM00 * this._localBasisY1X + slerpM01 * this._localBasisY1Y + slerpM02 * this._localBasisY1Z;
		__tmp__Y = slerpM10 * this._localBasisY1X + slerpM11 * this._localBasisY1Y + slerpM12 * this._localBasisY1Z;
		__tmp__Z = slerpM20 * this._localBasisY1X + slerpM21 * this._localBasisY1Y + slerpM22 * this._localBasisY1Z;
		this._localBasisY2X = __tmp__X;
		this._localBasisY2Y = __tmp__Y;
		this._localBasisY2Z = __tmp__Z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = slerpM00 * this._localBasisZ1X + slerpM01 * this._localBasisZ1Y + slerpM02 * this._localBasisZ1Z;
		__tmp__Y = slerpM10 * this._localBasisZ1X + slerpM11 * this._localBasisZ1Y + slerpM12 * this._localBasisZ1Z;
		__tmp__Z = slerpM20 * this._localBasisZ1X + slerpM21 * this._localBasisZ1Y + slerpM22 * this._localBasisZ1Z;
		this._localBasisZ2X = __tmp__X;
		this._localBasisZ2Y = __tmp__Y;
		this._localBasisZ2Z = __tmp__Z;
	}
	,setSolverInfoRowLinear: function(row,diff,lm,mass,sd,timeStep,isPositionPart) {
		var cfmFactor;
		var erp;
		var slop = oimo_common_Setting.linearSlop;
		if(isPositionPart) {
			cfmFactor = 0;
			erp = 1;
		} else {
			if(sd.frequency > 0) {
				slop = 0;
				var omega = 6.28318530717958 * sd.frequency;
				var zeta = sd.dampingRatio;
				if(zeta < oimo_common_Setting.minSpringDamperDampingRatio) {
					zeta = oimo_common_Setting.minSpringDamperDampingRatio;
				}
				var h = timeStep.dt;
				var c = 2 * zeta * omega;
				var k = omega * omega;
				if(sd.useSymplecticEuler) {
					cfmFactor = 1 / (h * c);
					erp = k / c;
				} else {
					cfmFactor = 1 / (h * (h * k + c));
					erp = k / (h * k + c);
				}
			} else {
				cfmFactor = 0;
				erp = this.getErp(timeStep,false);
			}
			if(lm.motorForce > 0) {
				row.motorSpeed = lm.motorSpeed;
				row.motorMaxImpulse = lm.motorForce * timeStep.dt;
			} else {
				row.motorSpeed = 0;
				row.motorMaxImpulse = 0;
			}
		}
		var lower = lm.lowerLimit;
		var upper = lm.upperLimit;
		var minImp;
		var maxImp;
		var error;
		if(lower > upper) {
			minImp = 0;
			maxImp = 0;
			error = 0;
		} else if(lower == upper) {
			minImp = -1e65536;
			maxImp = 1e65536;
			error = diff - lower;
		} else if(diff < lower) {
			minImp = -1e65536;
			maxImp = 0;
			error = diff - lower + slop;
			if(error > 0) {
				error = 0;
			}
		} else if(diff > upper) {
			minImp = 0;
			maxImp = 1e65536;
			error = diff - upper - slop;
			if(error < 0) {
				error = 0;
			}
		} else {
			minImp = 0;
			maxImp = 0;
			error = 0;
		}
		row.minImpulse = minImp;
		row.maxImpulse = maxImp;
		row.cfm = cfmFactor * (mass == 0 ? 0 : 1 / mass);
		row.rhs = error * erp;
	}
	,setSolverInfoRowAngular: function(row,diff,lm,mass,sd,timeStep,isPositionPart) {
		var cfmFactor;
		var erp;
		var slop = oimo_common_Setting.angularSlop;
		if(isPositionPart) {
			cfmFactor = 0;
			erp = 1;
		} else {
			if(sd.frequency > 0) {
				slop = 0;
				var omega = 6.28318530717958 * sd.frequency;
				var zeta = sd.dampingRatio;
				if(zeta < oimo_common_Setting.minSpringDamperDampingRatio) {
					zeta = oimo_common_Setting.minSpringDamperDampingRatio;
				}
				var h = timeStep.dt;
				var c = 2 * zeta * omega;
				var k = omega * omega;
				if(sd.useSymplecticEuler) {
					cfmFactor = 1 / (h * c);
					erp = k / c;
				} else {
					cfmFactor = 1 / (h * (h * k + c));
					erp = k / (h * k + c);
				}
			} else {
				cfmFactor = 0;
				erp = this.getErp(timeStep,false);
			}
			if(lm.motorTorque > 0) {
				row.motorSpeed = lm.motorSpeed;
				row.motorMaxImpulse = lm.motorTorque * timeStep.dt;
			} else {
				row.motorSpeed = 0;
				row.motorMaxImpulse = 0;
			}
		}
		var lower = lm.lowerLimit;
		var upper = lm.upperLimit;
		var mid = (lower + upper) * 0.5;
		diff -= mid;
		diff = ((diff + 3.14159265358979) % 6.28318530717958 + 6.28318530717958) % 6.28318530717958 - 3.14159265358979;
		diff += mid;
		var minImp;
		var maxImp;
		var error;
		if(lower > upper) {
			minImp = 0;
			maxImp = 0;
			error = 0;
		} else if(lower == upper) {
			minImp = -1e65536;
			maxImp = 1e65536;
			error = diff - lower;
		} else if(diff < lower) {
			minImp = -1e65536;
			maxImp = 0;
			error = diff - lower + slop;
			if(error > 0) {
				error = 0;
			}
		} else if(diff > upper) {
			minImp = 0;
			maxImp = 1e65536;
			error = diff - upper - slop;
			if(error < 0) {
				error = 0;
			}
		} else {
			minImp = 0;
			maxImp = 0;
			error = 0;
		}
		row.minImpulse = minImp;
		row.maxImpulse = maxImp;
		row.cfm = cfmFactor * (mass == 0 ? 0 : 1 / mass);
		row.rhs = error * erp;
	}
	,getErp: function(timeStep,isPositionPart) {
		if(isPositionPart) {
			return 1;
		} else if(this._positionCorrectionAlgorithm == oimo_dynamics_constraint_PositionCorrectionAlgorithm.BAUMGARTE) {
			return timeStep.invDt * oimo_common_Setting.velocityBaumgarte;
		} else {
			return 0;
		}
	}
	,computeEffectiveInertiaMoment: function(axisX,axisY,axisZ) {
		var ia1X;
		var ia1Y;
		var ia1Z;
		var ia2X;
		var ia2Y;
		var ia2Z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = this._b1._invInertia00 * axisX + this._b1._invInertia01 * axisY + this._b1._invInertia02 * axisZ;
		__tmp__Y = this._b1._invInertia10 * axisX + this._b1._invInertia11 * axisY + this._b1._invInertia12 * axisZ;
		__tmp__Z = this._b1._invInertia20 * axisX + this._b1._invInertia21 * axisY + this._b1._invInertia22 * axisZ;
		ia1X = __tmp__X;
		ia1Y = __tmp__Y;
		ia1Z = __tmp__Z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = this._b2._invInertia00 * axisX + this._b2._invInertia01 * axisY + this._b2._invInertia02 * axisZ;
		__tmp__Y = this._b2._invInertia10 * axisX + this._b2._invInertia11 * axisY + this._b2._invInertia12 * axisZ;
		__tmp__Z = this._b2._invInertia20 * axisX + this._b2._invInertia21 * axisY + this._b2._invInertia22 * axisZ;
		ia2X = __tmp__X;
		ia2Y = __tmp__Y;
		ia2Z = __tmp__Z;
		var invI1 = ia1X * axisX + ia1Y * axisY + ia1Z * axisZ;
		var invI2 = ia2X * axisX + ia2Y * axisY + ia2Z * axisZ;
		if(invI1 > 0) {
			var dot = axisX * this._relativeAnchor1X + axisY * this._relativeAnchor1Y + axisZ * this._relativeAnchor1Z;
			var projsq = this._relativeAnchor1X * this._relativeAnchor1X + this._relativeAnchor1Y * this._relativeAnchor1Y + this._relativeAnchor1Z * this._relativeAnchor1Z - dot * dot;
			if(projsq > 0) {
				if(this._b1._invMass > 0) {
					invI1 = 1 / (1 / invI1 + this._b1._mass * projsq);
				} else {
					invI1 = 0;
				}
			}
		}
		if(invI2 > 0) {
			var dot = axisX * this._relativeAnchor2X + axisY * this._relativeAnchor2Y + axisZ * this._relativeAnchor2Z;
			var projsq = this._relativeAnchor2X * this._relativeAnchor2X + this._relativeAnchor2Y * this._relativeAnchor2Y + this._relativeAnchor2Z * this._relativeAnchor2Z - dot * dot;
			if(projsq > 0) {
				if(this._b2._invMass > 0) {
					invI2 = 1 / (1 / invI2 + this._b2._mass * projsq);
				} else {
					invI2 = 0;
				}
			}
		}
		if(invI1 + invI2 == 0) {
			return 0;
		} else {
			return 1 / (invI1 + invI2);
		}
	}
	,computeEffectiveInertiaMoment2: function(axis1X,axis1Y,axis1Z,axis2X,axis2Y,axis2Z) {
		var ia1X;
		var ia1Y;
		var ia1Z;
		var ia2X;
		var ia2Y;
		var ia2Z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = this._b1._invInertia00 * axis1X + this._b1._invInertia01 * axis1Y + this._b1._invInertia02 * axis1Z;
		__tmp__Y = this._b1._invInertia10 * axis1X + this._b1._invInertia11 * axis1Y + this._b1._invInertia12 * axis1Z;
		__tmp__Z = this._b1._invInertia20 * axis1X + this._b1._invInertia21 * axis1Y + this._b1._invInertia22 * axis1Z;
		ia1X = __tmp__X;
		ia1Y = __tmp__Y;
		ia1Z = __tmp__Z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = this._b2._invInertia00 * axis2X + this._b2._invInertia01 * axis2Y + this._b2._invInertia02 * axis2Z;
		__tmp__Y = this._b2._invInertia10 * axis2X + this._b2._invInertia11 * axis2Y + this._b2._invInertia12 * axis2Z;
		__tmp__Z = this._b2._invInertia20 * axis2X + this._b2._invInertia21 * axis2Y + this._b2._invInertia22 * axis2Z;
		ia2X = __tmp__X;
		ia2Y = __tmp__Y;
		ia2Z = __tmp__Z;
		var invI1 = ia1X * axis1X + ia1Y * axis1Y + ia1Z * axis1Z;
		var invI2 = ia2X * axis2X + ia2Y * axis2Y + ia2Z * axis2Z;
		if(invI1 > 0) {
			var rsq = this._relativeAnchor1X * this._relativeAnchor1X + this._relativeAnchor1Y * this._relativeAnchor1Y + this._relativeAnchor1Z * this._relativeAnchor1Z;
			var dot = axis1X * this._relativeAnchor1X + axis1Y * this._relativeAnchor1Y + axis1Z * this._relativeAnchor1Z;
			var projsq = rsq * rsq - dot * dot;
			if(projsq > 0) {
				if(this._b1._invMass > 0) {
					invI1 = 1 / (1 / invI1 + this._b1._mass * projsq);
				} else {
					invI1 = 0;
				}
			}
		}
		if(invI2 > 0) {
			var rsq = this._relativeAnchor2X * this._relativeAnchor2X + this._relativeAnchor2Y * this._relativeAnchor2Y + this._relativeAnchor2Z * this._relativeAnchor2Z;
			var dot = axis2X * this._relativeAnchor2X + axis2Y * this._relativeAnchor2Y + axis2Z * this._relativeAnchor2Z;
			var projsq = rsq * rsq - dot * dot;
			if(projsq > 0) {
				if(this._b2._invMass > 0) {
					invI2 = 1 / (1 / invI2 + this._b2._mass * projsq);
				} else {
					invI2 = 0;
				}
			}
		}
		if(invI1 + invI2 == 0) {
			return 0;
		} else {
			return 1 / (invI1 + invI2);
		}
	}
	,_syncAnchors: function() {
		var tf1 = this._b1._transform;
		var tf2 = this._b2._transform;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = tf1._rotation00 * this._localAnchor1X + tf1._rotation01 * this._localAnchor1Y + tf1._rotation02 * this._localAnchor1Z;
		__tmp__Y = tf1._rotation10 * this._localAnchor1X + tf1._rotation11 * this._localAnchor1Y + tf1._rotation12 * this._localAnchor1Z;
		__tmp__Z = tf1._rotation20 * this._localAnchor1X + tf1._rotation21 * this._localAnchor1Y + tf1._rotation22 * this._localAnchor1Z;
		this._relativeAnchor1X = __tmp__X;
		this._relativeAnchor1Y = __tmp__Y;
		this._relativeAnchor1Z = __tmp__Z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = tf2._rotation00 * this._localAnchor2X + tf2._rotation01 * this._localAnchor2Y + tf2._rotation02 * this._localAnchor2Z;
		__tmp__Y = tf2._rotation10 * this._localAnchor2X + tf2._rotation11 * this._localAnchor2Y + tf2._rotation12 * this._localAnchor2Z;
		__tmp__Z = tf2._rotation20 * this._localAnchor2X + tf2._rotation21 * this._localAnchor2Y + tf2._rotation22 * this._localAnchor2Z;
		this._relativeAnchor2X = __tmp__X;
		this._relativeAnchor2Y = __tmp__Y;
		this._relativeAnchor2Z = __tmp__Z;
		this._anchor1X = this._relativeAnchor1X + tf1._positionX;
		this._anchor1Y = this._relativeAnchor1Y + tf1._positionY;
		this._anchor1Z = this._relativeAnchor1Z + tf1._positionZ;
		this._anchor2X = this._relativeAnchor2X + tf2._positionX;
		this._anchor2Y = this._relativeAnchor2Y + tf2._positionY;
		this._anchor2Z = this._relativeAnchor2Z + tf2._positionZ;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = tf1._rotation00 * this._localBasisX1X + tf1._rotation01 * this._localBasisX1Y + tf1._rotation02 * this._localBasisX1Z;
		__tmp__Y = tf1._rotation10 * this._localBasisX1X + tf1._rotation11 * this._localBasisX1Y + tf1._rotation12 * this._localBasisX1Z;
		__tmp__Z = tf1._rotation20 * this._localBasisX1X + tf1._rotation21 * this._localBasisX1Y + tf1._rotation22 * this._localBasisX1Z;
		this._basisX1X = __tmp__X;
		this._basisX1Y = __tmp__Y;
		this._basisX1Z = __tmp__Z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = tf1._rotation00 * this._localBasisY1X + tf1._rotation01 * this._localBasisY1Y + tf1._rotation02 * this._localBasisY1Z;
		__tmp__Y = tf1._rotation10 * this._localBasisY1X + tf1._rotation11 * this._localBasisY1Y + tf1._rotation12 * this._localBasisY1Z;
		__tmp__Z = tf1._rotation20 * this._localBasisY1X + tf1._rotation21 * this._localBasisY1Y + tf1._rotation22 * this._localBasisY1Z;
		this._basisY1X = __tmp__X;
		this._basisY1Y = __tmp__Y;
		this._basisY1Z = __tmp__Z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = tf1._rotation00 * this._localBasisZ1X + tf1._rotation01 * this._localBasisZ1Y + tf1._rotation02 * this._localBasisZ1Z;
		__tmp__Y = tf1._rotation10 * this._localBasisZ1X + tf1._rotation11 * this._localBasisZ1Y + tf1._rotation12 * this._localBasisZ1Z;
		__tmp__Z = tf1._rotation20 * this._localBasisZ1X + tf1._rotation21 * this._localBasisZ1Y + tf1._rotation22 * this._localBasisZ1Z;
		this._basisZ1X = __tmp__X;
		this._basisZ1Y = __tmp__Y;
		this._basisZ1Z = __tmp__Z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = tf2._rotation00 * this._localBasisX2X + tf2._rotation01 * this._localBasisX2Y + tf2._rotation02 * this._localBasisX2Z;
		__tmp__Y = tf2._rotation10 * this._localBasisX2X + tf2._rotation11 * this._localBasisX2Y + tf2._rotation12 * this._localBasisX2Z;
		__tmp__Z = tf2._rotation20 * this._localBasisX2X + tf2._rotation21 * this._localBasisX2Y + tf2._rotation22 * this._localBasisX2Z;
		this._basisX2X = __tmp__X;
		this._basisX2Y = __tmp__Y;
		this._basisX2Z = __tmp__Z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = tf2._rotation00 * this._localBasisY2X + tf2._rotation01 * this._localBasisY2Y + tf2._rotation02 * this._localBasisY2Z;
		__tmp__Y = tf2._rotation10 * this._localBasisY2X + tf2._rotation11 * this._localBasisY2Y + tf2._rotation12 * this._localBasisY2Z;
		__tmp__Z = tf2._rotation20 * this._localBasisY2X + tf2._rotation21 * this._localBasisY2Y + tf2._rotation22 * this._localBasisY2Z;
		this._basisY2X = __tmp__X;
		this._basisY2Y = __tmp__Y;
		this._basisY2Z = __tmp__Z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = tf2._rotation00 * this._localBasisZ2X + tf2._rotation01 * this._localBasisZ2Y + tf2._rotation02 * this._localBasisZ2Z;
		__tmp__Y = tf2._rotation10 * this._localBasisZ2X + tf2._rotation11 * this._localBasisZ2Y + tf2._rotation12 * this._localBasisZ2Z;
		__tmp__Z = tf2._rotation20 * this._localBasisZ2X + tf2._rotation21 * this._localBasisZ2Y + tf2._rotation22 * this._localBasisZ2Z;
		this._basisZ2X = __tmp__X;
		this._basisZ2Y = __tmp__Y;
		this._basisZ2Z = __tmp__Z;
	}
	,_getVelocitySolverInfo: function(timeStep,info) {
		info.b1 = this._b1;
		info.b2 = this._b2;
		info.numRows = 0;
	}
	,_getPositionSolverInfo: function(info) {
		info.b1 = this._b1;
		info.b2 = this._b2;
		info.numRows = 0;
	}
	,_checkDestruction: function() {
		var torqueSq = this._appliedTorqueX * this._appliedTorqueX + this._appliedTorqueY * this._appliedTorqueY + this._appliedTorqueZ * this._appliedTorqueZ;
		if(this._breakForce > 0 && this._appliedForceX * this._appliedForceX + this._appliedForceY * this._appliedForceY + this._appliedForceZ * this._appliedForceZ > this._breakForce * this._breakForce) {
			this._world.removeJoint(this);
			return;
		}
		if(this._breakTorque > 0 && torqueSq > this._breakTorque * this._breakTorque) {
			this._world.removeJoint(this);
			return;
		}
	}
	,getRigidBody1: function() {
		return this._b1;
	}
	,getRigidBody2: function() {
		return this._b2;
	}
	,getType: function() {
		return this._type;
	}
	,getAnchor1: function() {
		var v = new oimo_common_Vec3();
		v.x = this._anchor1X;
		v.y = this._anchor1Y;
		v.z = this._anchor1Z;
		return v;
	}
	,getAnchor2: function() {
		var v = new oimo_common_Vec3();
		v.x = this._anchor2X;
		v.y = this._anchor2Y;
		v.z = this._anchor2Z;
		return v;
	}
	,getAnchor1To: function(anchor) {
		anchor.x = this._anchor1X;
		anchor.y = this._anchor1Y;
		anchor.z = this._anchor1Z;
	}
	,getAnchor2To: function(anchor) {
		anchor.x = this._anchor2X;
		anchor.y = this._anchor2Y;
		anchor.z = this._anchor2Z;
	}
	,getLocalAnchor1: function() {
		var v = new oimo_common_Vec3();
		v.x = this._localAnchor1X;
		v.y = this._localAnchor1Y;
		v.z = this._localAnchor1Z;
		return v;
	}
	,getLocalAnchor2: function() {
		var v = new oimo_common_Vec3();
		v.x = this._localAnchor2X;
		v.y = this._localAnchor2Y;
		v.z = this._localAnchor2Z;
		return v;
	}
	,getLocalAnchor1To: function(localAnchor) {
		localAnchor.x = this._localAnchor1X;
		localAnchor.y = this._localAnchor1Y;
		localAnchor.z = this._localAnchor1Z;
	}
	,getLocalAnchor2To: function(localAnchor) {
		localAnchor.x = this._localAnchor2X;
		localAnchor.y = this._localAnchor2Y;
		localAnchor.z = this._localAnchor2Z;
	}
	,getBasis1: function() {
		var m = new oimo_common_Mat3();
		var b00;
		var b01;
		var b02;
		var b10;
		var b11;
		var b12;
		var b20;
		var b21;
		var b22;
		b00 = this._basisX1X;
		b01 = this._basisY1X;
		b02 = this._basisZ1X;
		b10 = this._basisX1Y;
		b11 = this._basisY1Y;
		b12 = this._basisZ1Y;
		b20 = this._basisX1Z;
		b21 = this._basisY1Z;
		b22 = this._basisZ1Z;
		m.e00 = b00;
		m.e01 = b01;
		m.e02 = b02;
		m.e10 = b10;
		m.e11 = b11;
		m.e12 = b12;
		m.e20 = b20;
		m.e21 = b21;
		m.e22 = b22;
		return m;
	}
	,getBasis2: function() {
		var m = new oimo_common_Mat3();
		var b00;
		var b01;
		var b02;
		var b10;
		var b11;
		var b12;
		var b20;
		var b21;
		var b22;
		b00 = this._basisX2X;
		b01 = this._basisY2X;
		b02 = this._basisZ2X;
		b10 = this._basisX2Y;
		b11 = this._basisY2Y;
		b12 = this._basisZ2Y;
		b20 = this._basisX2Z;
		b21 = this._basisY2Z;
		b22 = this._basisZ2Z;
		m.e00 = b00;
		m.e01 = b01;
		m.e02 = b02;
		m.e10 = b10;
		m.e11 = b11;
		m.e12 = b12;
		m.e20 = b20;
		m.e21 = b21;
		m.e22 = b22;
		return m;
	}
	,getBasis1To: function(basis) {
		var b00;
		var b01;
		var b02;
		var b10;
		var b11;
		var b12;
		var b20;
		var b21;
		var b22;
		b00 = this._basisX1X;
		b01 = this._basisY1X;
		b02 = this._basisZ1X;
		b10 = this._basisX1Y;
		b11 = this._basisY1Y;
		b12 = this._basisZ1Y;
		b20 = this._basisX1Z;
		b21 = this._basisY1Z;
		b22 = this._basisZ1Z;
		basis.e00 = b00;
		basis.e01 = b01;
		basis.e02 = b02;
		basis.e10 = b10;
		basis.e11 = b11;
		basis.e12 = b12;
		basis.e20 = b20;
		basis.e21 = b21;
		basis.e22 = b22;
	}
	,getBasis2To: function(basis) {
		var b00;
		var b01;
		var b02;
		var b10;
		var b11;
		var b12;
		var b20;
		var b21;
		var b22;
		b00 = this._basisX2X;
		b01 = this._basisY2X;
		b02 = this._basisZ2X;
		b10 = this._basisX2Y;
		b11 = this._basisY2Y;
		b12 = this._basisZ2Y;
		b20 = this._basisX2Z;
		b21 = this._basisY2Z;
		b22 = this._basisZ2Z;
		basis.e00 = b00;
		basis.e01 = b01;
		basis.e02 = b02;
		basis.e10 = b10;
		basis.e11 = b11;
		basis.e12 = b12;
		basis.e20 = b20;
		basis.e21 = b21;
		basis.e22 = b22;
	}
	,getAllowCollision: function() {
		return this._allowCollision;
	}
	,setAllowCollision: function(allowCollision) {
		this._allowCollision = allowCollision;
	}
	,getBreakForce: function() {
		return this._breakForce;
	}
	,setBreakForce: function(breakForce) {
		this._breakForce = breakForce;
	}
	,getBreakTorque: function() {
		return this._breakTorque;
	}
	,setBreakTorque: function(breakTorque) {
		this._breakTorque = breakTorque;
	}
	,getPositionCorrectionAlgorithm: function() {
		return this._positionCorrectionAlgorithm;
	}
	,setPositionCorrectionAlgorithm: function(positionCorrectionAlgorithm) {
		switch(positionCorrectionAlgorithm) {
		case 0:case 1:case 2:
			break;
		default:
			throw new Error("invalid position correction algorithm id: " + positionCorrectionAlgorithm);
		}
		this._positionCorrectionAlgorithm = positionCorrectionAlgorithm;
	}
	,getAppliedForce: function() {
		var v = new oimo_common_Vec3();
		v.x = this._appliedForceX;
		v.y = this._appliedForceY;
		v.z = this._appliedForceZ;
		return v;
	}
	,getAppliedForceTo: function(appliedForce) {
		appliedForce.x = this._appliedForceX;
		appliedForce.y = this._appliedForceY;
		appliedForce.z = this._appliedForceZ;
	}
	,getAppliedTorque: function() {
		var v = new oimo_common_Vec3();
		v.x = this._appliedTorqueX;
		v.y = this._appliedTorqueY;
		v.z = this._appliedTorqueZ;
		return v;
	}
	,getAppliedTorqueTo: function(appliedTorque) {
		appliedTorque.x = this._appliedTorqueX;
		appliedTorque.y = this._appliedTorqueY;
		appliedTorque.z = this._appliedTorqueZ;
	}
	,getPrev: function() {
		return this._prev;
	}
	,getNext: function() {
		return this._next;
	}
	,__class__: oimo_dynamics_constraint_joint_Joint
};
var oimo_dynamics_constraint_joint_CylindricalJoint = function(config) {
	oimo_dynamics_constraint_joint_Joint.call(this,config,2);
	var v = config.localAxis1;
	this._localBasisX1X = v.x;
	this._localBasisX1Y = v.y;
	this._localBasisX1Z = v.z;
	var v = config.localAxis2;
	this._localBasisX2X = v.x;
	this._localBasisX2Y = v.y;
	this._localBasisX2Z = v.z;
	this.buildLocalBasesFromX();
	this.angle = 0;
	this.angularErrorY = 0;
	this.angularErrorZ = 0;
	this.translation = 0;
	this.linearErrorY = 0;
	this.linearErrorZ = 0;
	this._basis = new oimo_dynamics_constraint_joint_BasisTracker(this);
	this._translSd = config.translationalSpringDamper.clone();
	this._translLm = config.translationalLimitMotor.clone();
	this._rotSd = config.rotationalSpringDamper.clone();
	this._rotLm = config.rotationalLimitMotor.clone();
};
oimo_dynamics_constraint_joint_CylindricalJoint.__name__ = true;
oimo_dynamics_constraint_joint_CylindricalJoint.__super__ = oimo_dynamics_constraint_joint_Joint;
oimo_dynamics_constraint_joint_CylindricalJoint.prototype = $extend(oimo_dynamics_constraint_joint_Joint.prototype,{
	getInfo: function(info,timeStep,isPositionPart) {
		var erp = this.getErp(timeStep,isPositionPart);
		var linRhsY = this.linearErrorY * erp;
		var linRhsZ = this.linearErrorZ * erp;
		var angRhsY = this.angularErrorY * erp;
		var angRhsZ = this.angularErrorZ * erp;
		var j;
		var translationalMotorMass = 1 / (this._b1._invMass + this._b2._invMass);
		var rotationalMotorMass = this.computeEffectiveInertiaMoment(this._basis.xX,this._basis.xY,this._basis.xZ);
		if(this._translSd.frequency <= 0 || !isPositionPart) {
			var impulse = this._impulses[0];
			var row = info.rows[info.numRows++];
			var _this = row.jacobian;
			_this.lin1X = 0;
			_this.lin1Y = 0;
			_this.lin1Z = 0;
			_this.lin2X = 0;
			_this.lin2Y = 0;
			_this.lin2Z = 0;
			_this.ang1X = 0;
			_this.ang1Y = 0;
			_this.ang1Z = 0;
			_this.ang2X = 0;
			_this.ang2Y = 0;
			_this.ang2Z = 0;
			row.rhs = 0;
			row.cfm = 0;
			row.minImpulse = 0;
			row.maxImpulse = 0;
			row.motorSpeed = 0;
			row.motorMaxImpulse = 0;
			row.impulse = null;
			row.impulse = impulse;
			this.setSolverInfoRowLinear(row,this.translation,this._translLm,translationalMotorMass,this._translSd,timeStep,isPositionPart);
			j = row.jacobian;
			j.lin1X = this._basis.xX;
			j.lin1Y = this._basis.xY;
			j.lin1Z = this._basis.xZ;
			j.lin2X = this._basis.xX;
			j.lin2Y = this._basis.xY;
			j.lin2Z = this._basis.xZ;
			j.ang1X = this._relativeAnchor1Y * this._basis.xZ - this._relativeAnchor1Z * this._basis.xY;
			j.ang1Y = this._relativeAnchor1Z * this._basis.xX - this._relativeAnchor1X * this._basis.xZ;
			j.ang1Z = this._relativeAnchor1X * this._basis.xY - this._relativeAnchor1Y * this._basis.xX;
			j.ang2X = this._relativeAnchor2Y * this._basis.xZ - this._relativeAnchor2Z * this._basis.xY;
			j.ang2Y = this._relativeAnchor2Z * this._basis.xX - this._relativeAnchor2X * this._basis.xZ;
			j.ang2Z = this._relativeAnchor2X * this._basis.xY - this._relativeAnchor2Y * this._basis.xX;
		}
		var impulse = this._impulses[1];
		var row = info.rows[info.numRows++];
		var _this = row.jacobian;
		_this.lin1X = 0;
		_this.lin1Y = 0;
		_this.lin1Z = 0;
		_this.lin2X = 0;
		_this.lin2Y = 0;
		_this.lin2Z = 0;
		_this.ang1X = 0;
		_this.ang1Y = 0;
		_this.ang1Z = 0;
		_this.ang2X = 0;
		_this.ang2Y = 0;
		_this.ang2Z = 0;
		row.rhs = 0;
		row.cfm = 0;
		row.minImpulse = 0;
		row.maxImpulse = 0;
		row.motorSpeed = 0;
		row.motorMaxImpulse = 0;
		row.impulse = null;
		row.impulse = impulse;
		row.rhs = linRhsY;
		row.cfm = 0;
		row.minImpulse = -1e65536;
		row.maxImpulse = 1e65536;
		j = row.jacobian;
		j.lin1X = this._basis.yX;
		j.lin1Y = this._basis.yY;
		j.lin1Z = this._basis.yZ;
		j.lin2X = this._basis.yX;
		j.lin2Y = this._basis.yY;
		j.lin2Z = this._basis.yZ;
		j.ang1X = this._relativeAnchor1Y * this._basis.yZ - this._relativeAnchor1Z * this._basis.yY;
		j.ang1Y = this._relativeAnchor1Z * this._basis.yX - this._relativeAnchor1X * this._basis.yZ;
		j.ang1Z = this._relativeAnchor1X * this._basis.yY - this._relativeAnchor1Y * this._basis.yX;
		j.ang2X = this._relativeAnchor2Y * this._basis.yZ - this._relativeAnchor2Z * this._basis.yY;
		j.ang2Y = this._relativeAnchor2Z * this._basis.yX - this._relativeAnchor2X * this._basis.yZ;
		j.ang2Z = this._relativeAnchor2X * this._basis.yY - this._relativeAnchor2Y * this._basis.yX;
		var impulse = this._impulses[2];
		var row = info.rows[info.numRows++];
		var _this = row.jacobian;
		_this.lin1X = 0;
		_this.lin1Y = 0;
		_this.lin1Z = 0;
		_this.lin2X = 0;
		_this.lin2Y = 0;
		_this.lin2Z = 0;
		_this.ang1X = 0;
		_this.ang1Y = 0;
		_this.ang1Z = 0;
		_this.ang2X = 0;
		_this.ang2Y = 0;
		_this.ang2Z = 0;
		row.rhs = 0;
		row.cfm = 0;
		row.minImpulse = 0;
		row.maxImpulse = 0;
		row.motorSpeed = 0;
		row.motorMaxImpulse = 0;
		row.impulse = null;
		row.impulse = impulse;
		row.rhs = linRhsZ;
		row.cfm = 0;
		row.minImpulse = -1e65536;
		row.maxImpulse = 1e65536;
		j = row.jacobian;
		j.lin1X = this._basis.zX;
		j.lin1Y = this._basis.zY;
		j.lin1Z = this._basis.zZ;
		j.lin2X = this._basis.zX;
		j.lin2Y = this._basis.zY;
		j.lin2Z = this._basis.zZ;
		j.ang1X = this._relativeAnchor1Y * this._basis.zZ - this._relativeAnchor1Z * this._basis.zY;
		j.ang1Y = this._relativeAnchor1Z * this._basis.zX - this._relativeAnchor1X * this._basis.zZ;
		j.ang1Z = this._relativeAnchor1X * this._basis.zY - this._relativeAnchor1Y * this._basis.zX;
		j.ang2X = this._relativeAnchor2Y * this._basis.zZ - this._relativeAnchor2Z * this._basis.zY;
		j.ang2Y = this._relativeAnchor2Z * this._basis.zX - this._relativeAnchor2X * this._basis.zZ;
		j.ang2Z = this._relativeAnchor2X * this._basis.zY - this._relativeAnchor2Y * this._basis.zX;
		if(this._rotSd.frequency <= 0 || !isPositionPart) {
			var impulse = this._impulses[3];
			var row = info.rows[info.numRows++];
			var _this = row.jacobian;
			_this.lin1X = 0;
			_this.lin1Y = 0;
			_this.lin1Z = 0;
			_this.lin2X = 0;
			_this.lin2Y = 0;
			_this.lin2Z = 0;
			_this.ang1X = 0;
			_this.ang1Y = 0;
			_this.ang1Z = 0;
			_this.ang2X = 0;
			_this.ang2Y = 0;
			_this.ang2Z = 0;
			row.rhs = 0;
			row.cfm = 0;
			row.minImpulse = 0;
			row.maxImpulse = 0;
			row.motorSpeed = 0;
			row.motorMaxImpulse = 0;
			row.impulse = null;
			row.impulse = impulse;
			this.setSolverInfoRowAngular(row,this.angle,this._rotLm,rotationalMotorMass,this._rotSd,timeStep,isPositionPart);
			j = row.jacobian;
			j.ang1X = this._basis.xX;
			j.ang1Y = this._basis.xY;
			j.ang1Z = this._basis.xZ;
			j.ang2X = this._basis.xX;
			j.ang2Y = this._basis.xY;
			j.ang2Z = this._basis.xZ;
		}
		var impulse = this._impulses[4];
		var row = info.rows[info.numRows++];
		var _this = row.jacobian;
		_this.lin1X = 0;
		_this.lin1Y = 0;
		_this.lin1Z = 0;
		_this.lin2X = 0;
		_this.lin2Y = 0;
		_this.lin2Z = 0;
		_this.ang1X = 0;
		_this.ang1Y = 0;
		_this.ang1Z = 0;
		_this.ang2X = 0;
		_this.ang2Y = 0;
		_this.ang2Z = 0;
		row.rhs = 0;
		row.cfm = 0;
		row.minImpulse = 0;
		row.maxImpulse = 0;
		row.motorSpeed = 0;
		row.motorMaxImpulse = 0;
		row.impulse = null;
		row.impulse = impulse;
		row.rhs = angRhsY;
		row.cfm = 0;
		row.minImpulse = -1e65536;
		row.maxImpulse = 1e65536;
		j = row.jacobian;
		j.ang1X = this._basis.yX;
		j.ang1Y = this._basis.yY;
		j.ang1Z = this._basis.yZ;
		j.ang2X = this._basis.yX;
		j.ang2Y = this._basis.yY;
		j.ang2Z = this._basis.yZ;
		var impulse = this._impulses[5];
		var row = info.rows[info.numRows++];
		var _this = row.jacobian;
		_this.lin1X = 0;
		_this.lin1Y = 0;
		_this.lin1Z = 0;
		_this.lin2X = 0;
		_this.lin2Y = 0;
		_this.lin2Z = 0;
		_this.ang1X = 0;
		_this.ang1Y = 0;
		_this.ang1Z = 0;
		_this.ang2X = 0;
		_this.ang2Y = 0;
		_this.ang2Z = 0;
		row.rhs = 0;
		row.cfm = 0;
		row.minImpulse = 0;
		row.maxImpulse = 0;
		row.motorSpeed = 0;
		row.motorMaxImpulse = 0;
		row.impulse = null;
		row.impulse = impulse;
		row.rhs = angRhsZ;
		row.cfm = 0;
		row.minImpulse = -1e65536;
		row.maxImpulse = 1e65536;
		j = row.jacobian;
		j.ang1X = this._basis.zX;
		j.ang1Y = this._basis.zY;
		j.ang1Z = this._basis.zZ;
		j.ang2X = this._basis.zX;
		j.ang2Y = this._basis.zY;
		j.ang2Z = this._basis.zZ;
	}
	,_syncAnchors: function() {
		oimo_dynamics_constraint_joint_Joint.prototype._syncAnchors.call(this);
		var _this = this._basis;
		var invM1 = _this.joint._b1._invMass;
		var invM2 = _this.joint._b2._invMass;
		var qX;
		var qY;
		var qZ;
		var qW;
		var idQX;
		var idQY;
		var idQZ;
		var idQW;
		var slerpQX;
		var slerpQY;
		var slerpQZ;
		var slerpQW;
		var slerpM00;
		var slerpM01;
		var slerpM02;
		var slerpM10;
		var slerpM11;
		var slerpM12;
		var slerpM20;
		var slerpM21;
		var slerpM22;
		var newXX;
		var newXY;
		var newXZ;
		var newYX;
		var newYY;
		var newYZ;
		var newZX;
		var newZY;
		var newZZ;
		var prevXX;
		var prevXY;
		var prevXZ;
		var prevYX;
		var prevYY;
		var prevYZ;
		var d = _this.joint._basisX1X * _this.joint._basisX2X + _this.joint._basisX1Y * _this.joint._basisX2Y + _this.joint._basisX1Z * _this.joint._basisX2Z;
		if(d < -0.999999999) {
			var vX;
			var vY;
			var vZ;
			var x1 = _this.joint._basisX1X;
			var y1 = _this.joint._basisX1Y;
			var z1 = _this.joint._basisX1Z;
			var x2 = x1 * x1;
			var y2 = y1 * y1;
			var z2 = z1 * z1;
			var d1;
			if(x2 < y2) {
				if(x2 < z2) {
					d1 = 1 / Math.sqrt(y2 + z2);
					vX = 0;
					vY = z1 * d1;
					vZ = -y1 * d1;
				} else {
					d1 = 1 / Math.sqrt(x2 + y2);
					vX = y1 * d1;
					vY = -x1 * d1;
					vZ = 0;
				}
			} else if(y2 < z2) {
				d1 = 1 / Math.sqrt(z2 + x2);
				vX = -z1 * d1;
				vY = 0;
				vZ = x1 * d1;
			} else {
				d1 = 1 / Math.sqrt(x2 + y2);
				vX = y1 * d1;
				vY = -x1 * d1;
				vZ = 0;
			}
			qX = vX;
			qY = vY;
			qZ = vZ;
			qW = 0;
		} else {
			var cX;
			var cY;
			var cZ;
			cX = _this.joint._basisX1Y * _this.joint._basisX2Z - _this.joint._basisX1Z * _this.joint._basisX2Y;
			cY = _this.joint._basisX1Z * _this.joint._basisX2X - _this.joint._basisX1X * _this.joint._basisX2Z;
			cZ = _this.joint._basisX1X * _this.joint._basisX2Y - _this.joint._basisX1Y * _this.joint._basisX2X;
			var w = Math.sqrt((1 + d) * 0.5);
			d = 0.5 / w;
			cX *= d;
			cY *= d;
			cZ *= d;
			qX = cX;
			qY = cY;
			qZ = cZ;
			qW = w;
		}
		idQX = 0;
		idQY = 0;
		idQZ = 0;
		idQW = 1;
		var q1X;
		var q1Y;
		var q1Z;
		var q1W;
		var q2X;
		var q2Y;
		var q2Z;
		var q2W;
		q1X = idQX;
		q1Y = idQY;
		q1Z = idQZ;
		q1W = idQW;
		q2X = qX;
		q2Y = qY;
		q2Z = qZ;
		q2W = qW;
		var d = q1X * q2X + q1Y * q2Y + q1Z * q2Z + q1W * q2W;
		if(d < 0) {
			d = -d;
			q2X = -q2X;
			q2Y = -q2Y;
			q2Z = -q2Z;
			q2W = -q2W;
		}
		if(d > 0.999999) {
			var dqX;
			var dqY;
			var dqZ;
			var dqW;
			dqX = q2X - q1X;
			dqY = q2Y - q1Y;
			dqZ = q2Z - q1Z;
			dqW = q2W - q1W;
			q2X = q1X + dqX * (invM1 / (invM1 + invM2));
			q2Y = q1Y + dqY * (invM1 / (invM1 + invM2));
			q2Z = q1Z + dqZ * (invM1 / (invM1 + invM2));
			q2W = q1W + dqW * (invM1 / (invM1 + invM2));
			var l = q2X * q2X + q2Y * q2Y + q2Z * q2Z + q2W * q2W;
			if(l > 1e-32) {
				l = 1 / Math.sqrt(l);
			}
			slerpQX = q2X * l;
			slerpQY = q2Y * l;
			slerpQZ = q2Z * l;
			slerpQW = q2W * l;
		} else {
			var theta = invM1 / (invM1 + invM2) * Math.acos(d);
			q2X += q1X * -d;
			q2Y += q1Y * -d;
			q2Z += q1Z * -d;
			q2W += q1W * -d;
			var l = q2X * q2X + q2Y * q2Y + q2Z * q2Z + q2W * q2W;
			if(l > 1e-32) {
				l = 1 / Math.sqrt(l);
			}
			q2X *= l;
			q2Y *= l;
			q2Z *= l;
			q2W *= l;
			var sin = Math.sin(theta);
			var cos = Math.cos(theta);
			q1X *= cos;
			q1Y *= cos;
			q1Z *= cos;
			q1W *= cos;
			slerpQX = q1X + q2X * sin;
			slerpQY = q1Y + q2Y * sin;
			slerpQZ = q1Z + q2Z * sin;
			slerpQW = q1W + q2W * sin;
		}
		var x = slerpQX;
		var y = slerpQY;
		var z = slerpQZ;
		var w = slerpQW;
		var x2 = 2 * x;
		var y2 = 2 * y;
		var z2 = 2 * z;
		var xx = x * x2;
		var yy = y * y2;
		var zz = z * z2;
		var xy = x * y2;
		var yz = y * z2;
		var xz = x * z2;
		var wx = w * x2;
		var wy = w * y2;
		var wz = w * z2;
		slerpM00 = 1 - yy - zz;
		slerpM01 = xy - wz;
		slerpM02 = xz + wy;
		slerpM10 = xy + wz;
		slerpM11 = 1 - xx - zz;
		slerpM12 = yz - wx;
		slerpM20 = xz - wy;
		slerpM21 = yz + wx;
		slerpM22 = 1 - xx - yy;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = slerpM00 * _this.joint._basisX1X + slerpM01 * _this.joint._basisX1Y + slerpM02 * _this.joint._basisX1Z;
		__tmp__Y = slerpM10 * _this.joint._basisX1X + slerpM11 * _this.joint._basisX1Y + slerpM12 * _this.joint._basisX1Z;
		__tmp__Z = slerpM20 * _this.joint._basisX1X + slerpM21 * _this.joint._basisX1Y + slerpM22 * _this.joint._basisX1Z;
		newXX = __tmp__X;
		newXY = __tmp__Y;
		newXZ = __tmp__Z;
		prevXX = _this.xX;
		prevXY = _this.xY;
		prevXZ = _this.xZ;
		prevYX = _this.yX;
		prevYY = _this.yY;
		prevYZ = _this.yZ;
		var d = prevXX * newXX + prevXY * newXY + prevXZ * newXZ;
		if(d < -0.999999999) {
			var vX;
			var vY;
			var vZ;
			var x1 = prevXX;
			var y1 = prevXY;
			var z1 = prevXZ;
			var x2 = x1 * x1;
			var y2 = y1 * y1;
			var z2 = z1 * z1;
			var d1;
			if(x2 < y2) {
				if(x2 < z2) {
					d1 = 1 / Math.sqrt(y2 + z2);
					vX = 0;
					vY = z1 * d1;
					vZ = -y1 * d1;
				} else {
					d1 = 1 / Math.sqrt(x2 + y2);
					vX = y1 * d1;
					vY = -x1 * d1;
					vZ = 0;
				}
			} else if(y2 < z2) {
				d1 = 1 / Math.sqrt(z2 + x2);
				vX = -z1 * d1;
				vY = 0;
				vZ = x1 * d1;
			} else {
				d1 = 1 / Math.sqrt(x2 + y2);
				vX = y1 * d1;
				vY = -x1 * d1;
				vZ = 0;
			}
			slerpQX = vX;
			slerpQY = vY;
			slerpQZ = vZ;
			slerpQW = 0;
		} else {
			var cX;
			var cY;
			var cZ;
			cX = prevXY * newXZ - prevXZ * newXY;
			cY = prevXZ * newXX - prevXX * newXZ;
			cZ = prevXX * newXY - prevXY * newXX;
			var w = Math.sqrt((1 + d) * 0.5);
			d = 0.5 / w;
			cX *= d;
			cY *= d;
			cZ *= d;
			slerpQX = cX;
			slerpQY = cY;
			slerpQZ = cZ;
			slerpQW = w;
		}
		var x = slerpQX;
		var y = slerpQY;
		var z = slerpQZ;
		var w = slerpQW;
		var x2 = 2 * x;
		var y2 = 2 * y;
		var z2 = 2 * z;
		var xx = x * x2;
		var yy = y * y2;
		var zz = z * z2;
		var xy = x * y2;
		var yz = y * z2;
		var xz = x * z2;
		var wx = w * x2;
		var wy = w * y2;
		var wz = w * z2;
		slerpM00 = 1 - yy - zz;
		slerpM01 = xy - wz;
		slerpM02 = xz + wy;
		slerpM10 = xy + wz;
		slerpM11 = 1 - xx - zz;
		slerpM12 = yz - wx;
		slerpM20 = xz - wy;
		slerpM21 = yz + wx;
		slerpM22 = 1 - xx - yy;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = slerpM00 * prevYX + slerpM01 * prevYY + slerpM02 * prevYZ;
		__tmp__Y = slerpM10 * prevYX + slerpM11 * prevYY + slerpM12 * prevYZ;
		__tmp__Z = slerpM20 * prevYX + slerpM21 * prevYY + slerpM22 * prevYZ;
		newYX = __tmp__X;
		newYY = __tmp__Y;
		newYZ = __tmp__Z;
		newZX = newXY * newYZ - newXZ * newYY;
		newZY = newXZ * newYX - newXX * newYZ;
		newZZ = newXX * newYY - newXY * newYX;
		if(newZX * newZX + newZY * newZY + newZZ * newZZ > 1e-6) {
			var l = newZX * newZX + newZY * newZY + newZZ * newZZ;
			if(l > 0) {
				l = 1 / Math.sqrt(l);
			}
			newZX *= l;
			newZY *= l;
			newZZ *= l;
		} else {
			var x1 = newXX;
			var y1 = newXY;
			var z1 = newXZ;
			var x2 = x1 * x1;
			var y2 = y1 * y1;
			var z2 = z1 * z1;
			var d;
			if(x2 < y2) {
				if(x2 < z2) {
					d = 1 / Math.sqrt(y2 + z2);
					newZX = 0;
					newZY = z1 * d;
					newZZ = -y1 * d;
				} else {
					d = 1 / Math.sqrt(x2 + y2);
					newZX = y1 * d;
					newZY = -x1 * d;
					newZZ = 0;
				}
			} else if(y2 < z2) {
				d = 1 / Math.sqrt(z2 + x2);
				newZX = -z1 * d;
				newZY = 0;
				newZZ = x1 * d;
			} else {
				d = 1 / Math.sqrt(x2 + y2);
				newZX = y1 * d;
				newZY = -x1 * d;
				newZZ = 0;
			}
		}
		newYX = newZY * newXZ - newZZ * newXY;
		newYY = newZZ * newXX - newZX * newXZ;
		newYZ = newZX * newXY - newZY * newXX;
		_this.xX = newXX;
		_this.xY = newXY;
		_this.xZ = newXZ;
		_this.yX = newYX;
		_this.yY = newYY;
		_this.yZ = newYZ;
		_this.zX = newZX;
		_this.zY = newZY;
		_this.zZ = newZZ;
		var angErrorX;
		var angErrorY;
		var angErrorZ;
		angErrorX = this._basisX1Y * this._basisX2Z - this._basisX1Z * this._basisX2Y;
		angErrorY = this._basisX1Z * this._basisX2X - this._basisX1X * this._basisX2Z;
		angErrorZ = this._basisX1X * this._basisX2Y - this._basisX1Y * this._basisX2X;
		var cos = this._basisX1X * this._basisX2X + this._basisX1Y * this._basisX2Y + this._basisX1Z * this._basisX2Z;
		var theta = cos <= -1 ? 3.14159265358979 : cos >= 1 ? 0 : Math.acos(cos);
		var l = angErrorX * angErrorX + angErrorY * angErrorY + angErrorZ * angErrorZ;
		if(l > 0) {
			l = 1 / Math.sqrt(l);
		}
		angErrorX *= l;
		angErrorY *= l;
		angErrorZ *= l;
		angErrorX *= theta;
		angErrorY *= theta;
		angErrorZ *= theta;
		this.angularErrorY = angErrorX * this._basis.yX + angErrorY * this._basis.yY + angErrorZ * this._basis.yZ;
		this.angularErrorZ = angErrorX * this._basis.zX + angErrorY * this._basis.zY + angErrorZ * this._basis.zZ;
		var perpCrossX;
		var perpCrossY;
		var perpCrossZ;
		perpCrossX = this._basisY1Y * this._basisY2Z - this._basisY1Z * this._basisY2Y;
		perpCrossY = this._basisY1Z * this._basisY2X - this._basisY1X * this._basisY2Z;
		perpCrossZ = this._basisY1X * this._basisY2Y - this._basisY1Y * this._basisY2X;
		cos = this._basisY1X * this._basisY2X + this._basisY1Y * this._basisY2Y + this._basisY1Z * this._basisY2Z;
		this.angle = cos <= -1 ? 3.14159265358979 : cos >= 1 ? 0 : Math.acos(cos);
		if(perpCrossX * this._basis.xX + perpCrossY * this._basis.xY + perpCrossZ * this._basis.xZ < 0) {
			this.angle = -this.angle;
		}
		var anchorDiffX;
		var anchorDiffY;
		var anchorDiffZ;
		anchorDiffX = this._anchor2X - this._anchor1X;
		anchorDiffY = this._anchor2Y - this._anchor1Y;
		anchorDiffZ = this._anchor2Z - this._anchor1Z;
		this.translation = anchorDiffX * this._basis.xX + anchorDiffY * this._basis.xY + anchorDiffZ * this._basis.xZ;
		this.linearErrorY = anchorDiffX * this._basis.yX + anchorDiffY * this._basis.yY + anchorDiffZ * this._basis.yZ;
		this.linearErrorZ = anchorDiffX * this._basis.zX + anchorDiffY * this._basis.zY + anchorDiffZ * this._basis.zZ;
	}
	,_getVelocitySolverInfo: function(timeStep,info) {
		oimo_dynamics_constraint_joint_Joint.prototype._getVelocitySolverInfo.call(this,timeStep,info);
		this.getInfo(info,timeStep,false);
	}
	,_getPositionSolverInfo: function(info) {
		oimo_dynamics_constraint_joint_Joint.prototype._getPositionSolverInfo.call(this,info);
		this.getInfo(info,null,true);
	}
	,getAxis1: function() {
		var v = new oimo_common_Vec3();
		v.x = this._basisX1X;
		v.y = this._basisX1Y;
		v.z = this._basisX1Z;
		return v;
	}
	,getAxis2: function() {
		var v = new oimo_common_Vec3();
		v.x = this._basisX2X;
		v.y = this._basisX2Y;
		v.z = this._basisX2Z;
		return v;
	}
	,getAxis1To: function(axis) {
		axis.x = this._basisX1X;
		axis.y = this._basisX1Y;
		axis.z = this._basisX1Z;
	}
	,getAxis2To: function(axis) {
		axis.x = this._basisX2X;
		axis.y = this._basisX2Y;
		axis.z = this._basisX2Z;
	}
	,getLocalAxis1: function() {
		var v = new oimo_common_Vec3();
		v.x = this._localBasisX1X;
		v.y = this._localBasisX1Y;
		v.z = this._localBasisX1Z;
		return v;
	}
	,getLocalAxis2: function() {
		var v = new oimo_common_Vec3();
		v.x = this._localBasisX2X;
		v.y = this._localBasisX2Y;
		v.z = this._localBasisX2Z;
		return v;
	}
	,getLocalAxis1To: function(axis) {
		axis.x = this._localBasisX1X;
		axis.y = this._localBasisX1Y;
		axis.z = this._localBasisX1Z;
	}
	,getLocalAxis2To: function(axis) {
		axis.x = this._localBasisX2X;
		axis.y = this._localBasisX2Y;
		axis.z = this._localBasisX2Z;
	}
	,getTranslationalSpringDamper: function() {
		return this._translSd;
	}
	,getRotationalSpringDamper: function() {
		return this._rotSd;
	}
	,getTranslationalLimitMotor: function() {
		return this._translLm;
	}
	,getRotationalLimitMotor: function() {
		return this._rotLm;
	}
	,getAngle: function() {
		return this.angle;
	}
	,getTranslation: function() {
		return this.translation;
	}
	,__class__: oimo_dynamics_constraint_joint_CylindricalJoint
});
var oimo_dynamics_constraint_joint_JointConfig = function() {
	this.rigidBody1 = null;
	this.rigidBody2 = null;
	this.localAnchor1 = new oimo_common_Vec3();
	this.localAnchor2 = new oimo_common_Vec3();
	this.allowCollision = false;
	this.solverType = oimo_common_Setting.defaultJointConstraintSolverType;
	this.positionCorrectionAlgorithm = oimo_common_Setting.defaultJointPositionCorrectionAlgorithm;
	this.breakForce = 0;
	this.breakTorque = 0;
};
oimo_dynamics_constraint_joint_JointConfig.__name__ = true;
oimo_dynamics_constraint_joint_JointConfig.prototype = {
	_init: function(rb1,rb2,worldAnchor) {
		this.rigidBody1 = rb1;
		this.rigidBody2 = rb2;
		var _this = this.rigidBody1;
		var localPoint = this.localAnchor1;
		var vX;
		var vY;
		var vZ;
		vX = worldAnchor.x;
		vY = worldAnchor.y;
		vZ = worldAnchor.z;
		vX -= _this._transform._positionX;
		vY -= _this._transform._positionY;
		vZ -= _this._transform._positionZ;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = _this._transform._rotation00 * vX + _this._transform._rotation10 * vY + _this._transform._rotation20 * vZ;
		__tmp__Y = _this._transform._rotation01 * vX + _this._transform._rotation11 * vY + _this._transform._rotation21 * vZ;
		__tmp__Z = _this._transform._rotation02 * vX + _this._transform._rotation12 * vY + _this._transform._rotation22 * vZ;
		vX = __tmp__X;
		vY = __tmp__Y;
		vZ = __tmp__Z;
		localPoint.x = vX;
		localPoint.y = vY;
		localPoint.z = vZ;
		var _this = this.rigidBody2;
		var localPoint = this.localAnchor2;
		var vX;
		var vY;
		var vZ;
		vX = worldAnchor.x;
		vY = worldAnchor.y;
		vZ = worldAnchor.z;
		vX -= _this._transform._positionX;
		vY -= _this._transform._positionY;
		vZ -= _this._transform._positionZ;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = _this._transform._rotation00 * vX + _this._transform._rotation10 * vY + _this._transform._rotation20 * vZ;
		__tmp__Y = _this._transform._rotation01 * vX + _this._transform._rotation11 * vY + _this._transform._rotation21 * vZ;
		__tmp__Z = _this._transform._rotation02 * vX + _this._transform._rotation12 * vY + _this._transform._rotation22 * vZ;
		vX = __tmp__X;
		vY = __tmp__Y;
		vZ = __tmp__Z;
		localPoint.x = vX;
		localPoint.y = vY;
		localPoint.z = vZ;
	}
	,__class__: oimo_dynamics_constraint_joint_JointConfig
};
var oimo_dynamics_constraint_joint_CylindricalJointConfig = function() {
	oimo_dynamics_constraint_joint_JointConfig.call(this);
	this.localAxis1 = new oimo_common_Vec3(1,0,0);
	this.localAxis2 = new oimo_common_Vec3(1,0,0);
	this.translationalLimitMotor = new oimo_dynamics_constraint_joint_TranslationalLimitMotor();
	this.translationalSpringDamper = new oimo_dynamics_constraint_joint_SpringDamper();
	this.rotationalLimitMotor = new oimo_dynamics_constraint_joint_RotationalLimitMotor();
	this.rotationalSpringDamper = new oimo_dynamics_constraint_joint_SpringDamper();
};
oimo_dynamics_constraint_joint_CylindricalJointConfig.__name__ = true;
oimo_dynamics_constraint_joint_CylindricalJointConfig.__super__ = oimo_dynamics_constraint_joint_JointConfig;
oimo_dynamics_constraint_joint_CylindricalJointConfig.prototype = $extend(oimo_dynamics_constraint_joint_JointConfig.prototype,{
	init: function(rigidBody1,rigidBody2,worldAnchor,worldAxis) {
		this._init(rigidBody1,rigidBody2,worldAnchor);
		var localVector = this.localAxis1;
		var vX;
		var vY;
		var vZ;
		vX = worldAxis.x;
		vY = worldAxis.y;
		vZ = worldAxis.z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = rigidBody1._transform._rotation00 * vX + rigidBody1._transform._rotation10 * vY + rigidBody1._transform._rotation20 * vZ;
		__tmp__Y = rigidBody1._transform._rotation01 * vX + rigidBody1._transform._rotation11 * vY + rigidBody1._transform._rotation21 * vZ;
		__tmp__Z = rigidBody1._transform._rotation02 * vX + rigidBody1._transform._rotation12 * vY + rigidBody1._transform._rotation22 * vZ;
		vX = __tmp__X;
		vY = __tmp__Y;
		vZ = __tmp__Z;
		localVector.x = vX;
		localVector.y = vY;
		localVector.z = vZ;
		var localVector = this.localAxis2;
		var vX;
		var vY;
		var vZ;
		vX = worldAxis.x;
		vY = worldAxis.y;
		vZ = worldAxis.z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = rigidBody2._transform._rotation00 * vX + rigidBody2._transform._rotation10 * vY + rigidBody2._transform._rotation20 * vZ;
		__tmp__Y = rigidBody2._transform._rotation01 * vX + rigidBody2._transform._rotation11 * vY + rigidBody2._transform._rotation21 * vZ;
		__tmp__Z = rigidBody2._transform._rotation02 * vX + rigidBody2._transform._rotation12 * vY + rigidBody2._transform._rotation22 * vZ;
		vX = __tmp__X;
		vY = __tmp__Y;
		vZ = __tmp__Z;
		localVector.x = vX;
		localVector.y = vY;
		localVector.z = vZ;
		return this;
	}
	,__class__: oimo_dynamics_constraint_joint_CylindricalJointConfig
});
var oimo_dynamics_constraint_joint_GenericJoint = function(config) {
	oimo_dynamics_constraint_joint_Joint.call(this,config,oimo_dynamics_constraint_joint_JointType.GENERIC);
	var tmp;
	var _this = config.localBasis1;
	if(!(_this.e00 * (_this.e11 * _this.e22 - _this.e12 * _this.e21) - _this.e01 * (_this.e10 * _this.e22 - _this.e12 * _this.e20) + _this.e02 * (_this.e10 * _this.e21 - _this.e11 * _this.e20) < 0)) {
		var _this = config.localBasis2;
		tmp = _this.e00 * (_this.e11 * _this.e22 - _this.e12 * _this.e21) - _this.e01 * (_this.e10 * _this.e22 - _this.e12 * _this.e20) + _this.e02 * (_this.e10 * _this.e21 - _this.e11 * _this.e20) < 0;
	} else {
		tmp = true;
	}
	if(tmp) {
		console.log("src/oimo/dynamics/constraint/joint/GenericJoint.hx:50:","[warning] joint basis must be right handed");
	}
	var lb100;
	var lb101;
	var lb102;
	var lb110;
	var lb111;
	var lb112;
	var lb120;
	var lb121;
	var lb122;
	var lb200;
	var lb201;
	var lb202;
	var lb210;
	var lb211;
	var lb212;
	var lb220;
	var lb221;
	var lb222;
	var m = config.localBasis1;
	lb100 = m.e00;
	lb101 = m.e01;
	lb102 = m.e02;
	lb110 = m.e10;
	lb111 = m.e11;
	lb112 = m.e12;
	lb120 = m.e20;
	lb121 = m.e21;
	lb122 = m.e22;
	var m = config.localBasis2;
	lb200 = m.e00;
	lb201 = m.e01;
	lb202 = m.e02;
	lb210 = m.e10;
	lb211 = m.e11;
	lb212 = m.e12;
	lb220 = m.e20;
	lb221 = m.e21;
	lb222 = m.e22;
	this._localBasisX1X = lb100;
	this._localBasisX1Y = lb110;
	this._localBasisX1Z = lb120;
	this._localBasisY1X = lb101;
	this._localBasisY1Y = lb111;
	this._localBasisY1Z = lb121;
	this._localBasisZ1X = lb102;
	this._localBasisZ1Y = lb112;
	this._localBasisZ1Z = lb122;
	this._localBasisX2X = lb200;
	this._localBasisX2Y = lb210;
	this._localBasisX2Z = lb220;
	this._localBasisY2X = lb201;
	this._localBasisY2Y = lb211;
	this._localBasisY2Z = lb221;
	this._localBasisZ2X = lb202;
	this._localBasisZ2Y = lb212;
	this._localBasisZ2Z = lb222;
	this._angleX = 0;
	this._angleY = 0;
	this._angleZ = 0;
	this.translationX = 0;
	this.translationY = 0;
	this.translationZ = 0;
	this.xSingular = false;
	this.ySingular = false;
	this.zSingular = false;
	this._translLms = new Array(3);
	this._translSds = new Array(3);
	this._rotLms = new Array(3);
	this._rotSds = new Array(3);
	this._translLms[0] = config.translationalLimitMotors[0].clone();
	this._translLms[1] = config.translationalLimitMotors[1].clone();
	this._translLms[2] = config.translationalLimitMotors[2].clone();
	this._translSds[0] = config.translationalSpringDampers[0].clone();
	this._translSds[1] = config.translationalSpringDampers[1].clone();
	this._translSds[2] = config.translationalSpringDampers[2].clone();
	this._rotLms[0] = config.rotationalLimitMotors[0].clone();
	this._rotLms[1] = config.rotationalLimitMotors[1].clone();
	this._rotLms[2] = config.rotationalLimitMotors[2].clone();
	this._rotSds[0] = config.rotationalSpringDampers[0].clone();
	this._rotSds[1] = config.rotationalSpringDampers[1].clone();
	this._rotSds[2] = config.rotationalSpringDampers[2].clone();
};
oimo_dynamics_constraint_joint_GenericJoint.__name__ = true;
oimo_dynamics_constraint_joint_GenericJoint.__super__ = oimo_dynamics_constraint_joint_Joint;
oimo_dynamics_constraint_joint_GenericJoint.prototype = $extend(oimo_dynamics_constraint_joint_Joint.prototype,{
	getInfo: function(info,timeStep,isPositionPart) {
		var j;
		var translMotorMass = 1 / (this._b1._invMass + this._b2._invMass);
		var motorMassX = this.computeEffectiveInertiaMoment(this._axisXX,this._axisXY,this._axisXZ);
		var motorMassY = this.computeEffectiveInertiaMoment(this._axisYX,this._axisYY,this._axisYZ);
		var motorMassZ = this.computeEffectiveInertiaMoment(this._axisZX,this._axisZY,this._axisZZ);
		if(this._translSds[0].frequency <= 0 || !isPositionPart) {
			var impulse = this._impulses[0];
			var row = info.rows[info.numRows++];
			var _this = row.jacobian;
			_this.lin1X = 0;
			_this.lin1Y = 0;
			_this.lin1Z = 0;
			_this.lin2X = 0;
			_this.lin2Y = 0;
			_this.lin2Z = 0;
			_this.ang1X = 0;
			_this.ang1Y = 0;
			_this.ang1Z = 0;
			_this.ang2X = 0;
			_this.ang2Y = 0;
			_this.ang2Z = 0;
			row.rhs = 0;
			row.cfm = 0;
			row.minImpulse = 0;
			row.maxImpulse = 0;
			row.motorSpeed = 0;
			row.motorMaxImpulse = 0;
			row.impulse = null;
			row.impulse = impulse;
			this.setSolverInfoRowLinear(row,this.translationX,this._translLms[0],translMotorMass,this._translSds[0],timeStep,isPositionPart);
			j = row.jacobian;
			j.lin1X = this._basisX1X;
			j.lin1Y = this._basisX1Y;
			j.lin1Z = this._basisX1Z;
			j.lin2X = this._basisX1X;
			j.lin2Y = this._basisX1Y;
			j.lin2Z = this._basisX1Z;
			j.ang1X = this._relativeAnchor1Y * this._basisX1Z - this._relativeAnchor1Z * this._basisX1Y;
			j.ang1Y = this._relativeAnchor1Z * this._basisX1X - this._relativeAnchor1X * this._basisX1Z;
			j.ang1Z = this._relativeAnchor1X * this._basisX1Y - this._relativeAnchor1Y * this._basisX1X;
			j.ang2X = this._relativeAnchor2Y * this._basisX1Z - this._relativeAnchor2Z * this._basisX1Y;
			j.ang2Y = this._relativeAnchor2Z * this._basisX1X - this._relativeAnchor2X * this._basisX1Z;
			j.ang2Z = this._relativeAnchor2X * this._basisX1Y - this._relativeAnchor2Y * this._basisX1X;
		}
		if(this._translSds[1].frequency <= 0 || !isPositionPart) {
			var impulse = this._impulses[1];
			var row = info.rows[info.numRows++];
			var _this = row.jacobian;
			_this.lin1X = 0;
			_this.lin1Y = 0;
			_this.lin1Z = 0;
			_this.lin2X = 0;
			_this.lin2Y = 0;
			_this.lin2Z = 0;
			_this.ang1X = 0;
			_this.ang1Y = 0;
			_this.ang1Z = 0;
			_this.ang2X = 0;
			_this.ang2Y = 0;
			_this.ang2Z = 0;
			row.rhs = 0;
			row.cfm = 0;
			row.minImpulse = 0;
			row.maxImpulse = 0;
			row.motorSpeed = 0;
			row.motorMaxImpulse = 0;
			row.impulse = null;
			row.impulse = impulse;
			this.setSolverInfoRowLinear(row,this.translationY,this._translLms[1],translMotorMass,this._translSds[1],timeStep,isPositionPart);
			j = row.jacobian;
			j.lin1X = this._basisY1X;
			j.lin1Y = this._basisY1Y;
			j.lin1Z = this._basisY1Z;
			j.lin2X = this._basisY1X;
			j.lin2Y = this._basisY1Y;
			j.lin2Z = this._basisY1Z;
			j.ang1X = this._relativeAnchor1Y * this._basisY1Z - this._relativeAnchor1Z * this._basisY1Y;
			j.ang1Y = this._relativeAnchor1Z * this._basisY1X - this._relativeAnchor1X * this._basisY1Z;
			j.ang1Z = this._relativeAnchor1X * this._basisY1Y - this._relativeAnchor1Y * this._basisY1X;
			j.ang2X = this._relativeAnchor2Y * this._basisY1Z - this._relativeAnchor2Z * this._basisY1Y;
			j.ang2Y = this._relativeAnchor2Z * this._basisY1X - this._relativeAnchor2X * this._basisY1Z;
			j.ang2Z = this._relativeAnchor2X * this._basisY1Y - this._relativeAnchor2Y * this._basisY1X;
		}
		if(this._translSds[2].frequency <= 0 || !isPositionPart) {
			var impulse = this._impulses[2];
			var row = info.rows[info.numRows++];
			var _this = row.jacobian;
			_this.lin1X = 0;
			_this.lin1Y = 0;
			_this.lin1Z = 0;
			_this.lin2X = 0;
			_this.lin2Y = 0;
			_this.lin2Z = 0;
			_this.ang1X = 0;
			_this.ang1Y = 0;
			_this.ang1Z = 0;
			_this.ang2X = 0;
			_this.ang2Y = 0;
			_this.ang2Z = 0;
			row.rhs = 0;
			row.cfm = 0;
			row.minImpulse = 0;
			row.maxImpulse = 0;
			row.motorSpeed = 0;
			row.motorMaxImpulse = 0;
			row.impulse = null;
			row.impulse = impulse;
			this.setSolverInfoRowLinear(row,this.translationZ,this._translLms[2],translMotorMass,this._translSds[2],timeStep,isPositionPart);
			j = row.jacobian;
			j.lin1X = this._basisZ1X;
			j.lin1Y = this._basisZ1Y;
			j.lin1Z = this._basisZ1Z;
			j.lin2X = this._basisZ1X;
			j.lin2Y = this._basisZ1Y;
			j.lin2Z = this._basisZ1Z;
			j.ang1X = this._relativeAnchor1Y * this._basisZ1Z - this._relativeAnchor1Z * this._basisZ1Y;
			j.ang1Y = this._relativeAnchor1Z * this._basisZ1X - this._relativeAnchor1X * this._basisZ1Z;
			j.ang1Z = this._relativeAnchor1X * this._basisZ1Y - this._relativeAnchor1Y * this._basisZ1X;
			j.ang2X = this._relativeAnchor2Y * this._basisZ1Z - this._relativeAnchor2Z * this._basisZ1Y;
			j.ang2Y = this._relativeAnchor2Z * this._basisZ1X - this._relativeAnchor2X * this._basisZ1Z;
			j.ang2Z = this._relativeAnchor2X * this._basisZ1Y - this._relativeAnchor2Y * this._basisZ1X;
		}
		if(!this.xSingular && (this._rotSds[0].frequency <= 0 || !isPositionPart)) {
			var impulse = this._impulses[3];
			var row = info.rows[info.numRows++];
			var _this = row.jacobian;
			_this.lin1X = 0;
			_this.lin1Y = 0;
			_this.lin1Z = 0;
			_this.lin2X = 0;
			_this.lin2Y = 0;
			_this.lin2Z = 0;
			_this.ang1X = 0;
			_this.ang1Y = 0;
			_this.ang1Z = 0;
			_this.ang2X = 0;
			_this.ang2Y = 0;
			_this.ang2Z = 0;
			row.rhs = 0;
			row.cfm = 0;
			row.minImpulse = 0;
			row.maxImpulse = 0;
			row.motorSpeed = 0;
			row.motorMaxImpulse = 0;
			row.impulse = null;
			row.impulse = impulse;
			this.setSolverInfoRowAngular(row,this._angleX,this._rotLms[0],motorMassX,this._rotSds[0],timeStep,isPositionPart);
			j = row.jacobian;
			j.ang1X = this._axisXX;
			j.ang1Y = this._axisXY;
			j.ang1Z = this._axisXZ;
			j.ang2X = this._axisXX;
			j.ang2Y = this._axisXY;
			j.ang2Z = this._axisXZ;
		}
		if(!this.ySingular && (this._rotSds[1].frequency <= 0 || !isPositionPart)) {
			var impulse = this._impulses[4];
			var row = info.rows[info.numRows++];
			var _this = row.jacobian;
			_this.lin1X = 0;
			_this.lin1Y = 0;
			_this.lin1Z = 0;
			_this.lin2X = 0;
			_this.lin2Y = 0;
			_this.lin2Z = 0;
			_this.ang1X = 0;
			_this.ang1Y = 0;
			_this.ang1Z = 0;
			_this.ang2X = 0;
			_this.ang2Y = 0;
			_this.ang2Z = 0;
			row.rhs = 0;
			row.cfm = 0;
			row.minImpulse = 0;
			row.maxImpulse = 0;
			row.motorSpeed = 0;
			row.motorMaxImpulse = 0;
			row.impulse = null;
			row.impulse = impulse;
			this.setSolverInfoRowAngular(row,this._angleY,this._rotLms[1],motorMassY,this._rotSds[1],timeStep,isPositionPart);
			j = row.jacobian;
			j.ang1X = this._axisYX;
			j.ang1Y = this._axisYY;
			j.ang1Z = this._axisYZ;
			j.ang2X = this._axisYX;
			j.ang2Y = this._axisYY;
			j.ang2Z = this._axisYZ;
		}
		if(!this.zSingular && (this._rotSds[2].frequency <= 0 || !isPositionPart)) {
			var impulse = this._impulses[5];
			var row = info.rows[info.numRows++];
			var _this = row.jacobian;
			_this.lin1X = 0;
			_this.lin1Y = 0;
			_this.lin1Z = 0;
			_this.lin2X = 0;
			_this.lin2Y = 0;
			_this.lin2Z = 0;
			_this.ang1X = 0;
			_this.ang1Y = 0;
			_this.ang1Z = 0;
			_this.ang2X = 0;
			_this.ang2Y = 0;
			_this.ang2Z = 0;
			row.rhs = 0;
			row.cfm = 0;
			row.minImpulse = 0;
			row.maxImpulse = 0;
			row.motorSpeed = 0;
			row.motorMaxImpulse = 0;
			row.impulse = null;
			row.impulse = impulse;
			this.setSolverInfoRowAngular(row,this._angleZ,this._rotLms[2],motorMassZ,this._rotSds[2],timeStep,isPositionPart);
			j = row.jacobian;
			j.ang1X = this._axisZX;
			j.ang1Y = this._axisZY;
			j.ang1Z = this._axisZZ;
			j.ang2X = this._axisZX;
			j.ang2Y = this._axisZY;
			j.ang2Z = this._axisZZ;
		}
	}
	,_syncAnchors: function() {
		oimo_dynamics_constraint_joint_Joint.prototype._syncAnchors.call(this);
		var angleAxisXX;
		var angleAxisXY;
		var angleAxisXZ;
		var angleAxisYX;
		var angleAxisYY;
		var angleAxisYZ;
		var angleAxisZX;
		var angleAxisZY;
		var angleAxisZZ;
		angleAxisXX = this._basisX1X;
		angleAxisXY = this._basisX1Y;
		angleAxisXZ = this._basisX1Z;
		angleAxisZX = this._basisZ2X;
		angleAxisZY = this._basisZ2Y;
		angleAxisZZ = this._basisZ2Z;
		angleAxisYX = angleAxisZY * angleAxisXZ - angleAxisZZ * angleAxisXY;
		angleAxisYY = angleAxisZZ * angleAxisXX - angleAxisZX * angleAxisXZ;
		angleAxisYZ = angleAxisZX * angleAxisXY - angleAxisZY * angleAxisXX;
		this._axisXX = angleAxisYY * angleAxisZZ - angleAxisYZ * angleAxisZY;
		this._axisXY = angleAxisYZ * angleAxisZX - angleAxisYX * angleAxisZZ;
		this._axisXZ = angleAxisYX * angleAxisZY - angleAxisYY * angleAxisZX;
		this._axisYX = angleAxisYX;
		this._axisYY = angleAxisYY;
		this._axisYZ = angleAxisYZ;
		this._axisZX = angleAxisXY * angleAxisYZ - angleAxisXZ * angleAxisYY;
		this._axisZY = angleAxisXZ * angleAxisYX - angleAxisXX * angleAxisYZ;
		this._axisZZ = angleAxisXX * angleAxisYY - angleAxisXY * angleAxisYX;
		var l = this._axisXX * this._axisXX + this._axisXY * this._axisXY + this._axisXZ * this._axisXZ;
		if(l > 0) {
			l = 1 / Math.sqrt(l);
		}
		this._axisXX *= l;
		this._axisXY *= l;
		this._axisXZ *= l;
		var l = this._axisYX * this._axisYX + this._axisYY * this._axisYY + this._axisYZ * this._axisYZ;
		if(l > 0) {
			l = 1 / Math.sqrt(l);
		}
		this._axisYX *= l;
		this._axisYY *= l;
		this._axisYZ *= l;
		var l = this._axisZX * this._axisZX + this._axisZY * this._axisZY + this._axisZZ * this._axisZZ;
		if(l > 0) {
			l = 1 / Math.sqrt(l);
		}
		this._axisZX *= l;
		this._axisZY *= l;
		this._axisZZ *= l;
		this.xSingular = this._axisXX * this._axisXX + this._axisXY * this._axisXY + this._axisXZ * this._axisXZ == 0;
		this.ySingular = this._axisYX * this._axisYX + this._axisYY * this._axisYY + this._axisYZ * this._axisYZ == 0;
		this.zSingular = this._axisZX * this._axisZX + this._axisZY * this._axisZY + this._axisZZ * this._axisZZ == 0;
		var rot100;
		var rot101;
		var rot102;
		var rot110;
		var rot111;
		var rot112;
		var rot120;
		var rot121;
		var rot122;
		var rot200;
		var rot201;
		var rot202;
		var rot210;
		var rot211;
		var rot212;
		var rot220;
		var rot221;
		var rot222;
		rot100 = this._basisX1X;
		rot101 = this._basisY1X;
		rot102 = this._basisZ1X;
		rot110 = this._basisX1Y;
		rot111 = this._basisY1Y;
		rot112 = this._basisZ1Y;
		rot120 = this._basisX1Z;
		rot121 = this._basisY1Z;
		rot122 = this._basisZ1Z;
		rot200 = this._basisX2X;
		rot201 = this._basisY2X;
		rot202 = this._basisZ2X;
		rot210 = this._basisX2Y;
		rot211 = this._basisY2Y;
		rot212 = this._basisZ2Y;
		rot220 = this._basisX2Z;
		rot221 = this._basisY2Z;
		rot222 = this._basisZ2Z;
		var relRot00;
		var relRot01;
		var relRot02;
		var relRot11;
		var relRot12;
		var relRot21;
		var relRot22;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__11;
		var __tmp__12;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = rot100 * rot200 + rot110 * rot210 + rot120 * rot220;
		__tmp__01 = rot100 * rot201 + rot110 * rot211 + rot120 * rot221;
		__tmp__02 = rot100 * rot202 + rot110 * rot212 + rot120 * rot222;
		__tmp__11 = rot101 * rot201 + rot111 * rot211 + rot121 * rot221;
		__tmp__12 = rot101 * rot202 + rot111 * rot212 + rot121 * rot222;
		__tmp__21 = rot102 * rot201 + rot112 * rot211 + rot122 * rot221;
		__tmp__22 = rot102 * rot202 + rot112 * rot212 + rot122 * rot222;
		relRot00 = __tmp__00;
		relRot01 = __tmp__01;
		relRot02 = __tmp__02;
		relRot11 = __tmp__11;
		relRot12 = __tmp__12;
		relRot21 = __tmp__21;
		relRot22 = __tmp__22;
		var anglesX;
		var anglesY;
		var anglesZ;
		var sy = relRot02;
		if(sy <= -1) {
			var xSubZ = Math.atan2(relRot21,relRot11);
			anglesX = xSubZ * 0.5;
			anglesY = -1.570796326794895;
			anglesZ = -xSubZ * 0.5;
		} else if(sy >= 1) {
			var xAddZ = Math.atan2(relRot21,relRot11);
			anglesX = xAddZ * 0.5;
			anglesY = 1.570796326794895;
			anglesZ = xAddZ * 0.5;
		} else {
			anglesX = Math.atan2(-relRot12,relRot22);
			anglesY = Math.asin(sy);
			anglesZ = Math.atan2(-relRot01,relRot00);
		}
		this._angleX = anglesX;
		this._angleY = anglesY;
		this._angleZ = anglesZ;
		var anchorDiffX;
		var anchorDiffY;
		var anchorDiffZ;
		anchorDiffX = this._anchor2X - this._anchor1X;
		anchorDiffY = this._anchor2Y - this._anchor1Y;
		anchorDiffZ = this._anchor2Z - this._anchor1Z;
		this.translationX = anchorDiffX * this._basisX1X + anchorDiffY * this._basisX1Y + anchorDiffZ * this._basisX1Z;
		this.translationY = anchorDiffX * this._basisY1X + anchorDiffY * this._basisY1Y + anchorDiffZ * this._basisY1Z;
		this.translationZ = anchorDiffX * this._basisZ1X + anchorDiffY * this._basisZ1Y + anchorDiffZ * this._basisZ1Z;
	}
	,_getVelocitySolverInfo: function(timeStep,info) {
		oimo_dynamics_constraint_joint_Joint.prototype._getVelocitySolverInfo.call(this,timeStep,info);
		this.getInfo(info,timeStep,false);
	}
	,_getPositionSolverInfo: function(info) {
		oimo_dynamics_constraint_joint_Joint.prototype._getPositionSolverInfo.call(this,info);
		this.getInfo(info,null,true);
	}
	,getAxisX: function() {
		var v = new oimo_common_Vec3();
		v.x = this._basisX1X;
		v.y = this._basisX1Y;
		v.z = this._basisX1Z;
		return v;
	}
	,getAxisY: function() {
		var v = new oimo_common_Vec3();
		v.x = this._axisYX;
		v.y = this._axisYY;
		v.z = this._axisYZ;
		return v;
	}
	,getAxisZ: function() {
		var v = new oimo_common_Vec3();
		v.x = this._basisZ2X;
		v.y = this._basisZ2Y;
		v.z = this._basisZ2Z;
		return v;
	}
	,getTranslationalSpringDampers: function() {
		return this._translSds.slice(0);
	}
	,getRotationalSpringDampers: function() {
		return this._rotSds.slice(0);
	}
	,getTranslationalLimitMotors: function() {
		return this._translLms.slice(0);
	}
	,getRotationalLimitMotors: function() {
		return this._rotLms.slice(0);
	}
	,getAngles: function() {
		return new oimo_common_Vec3(this._angleX,this._angleY,this._angleZ);
	}
	,getTranslations: function() {
		return new oimo_common_Vec3(this.translationX,this.translationY,this.translationZ);
	}
	,__class__: oimo_dynamics_constraint_joint_GenericJoint
});
var oimo_dynamics_constraint_joint_GenericJointConfig = function() {
	oimo_dynamics_constraint_joint_JointConfig.call(this);
	this.localBasis1 = new oimo_common_Mat3();
	this.localBasis2 = new oimo_common_Mat3();
	var _g = [];
	_g.push(new oimo_dynamics_constraint_joint_TranslationalLimitMotor().setLimits(0,0));
	_g.push(new oimo_dynamics_constraint_joint_TranslationalLimitMotor().setLimits(0,0));
	_g.push(new oimo_dynamics_constraint_joint_TranslationalLimitMotor().setLimits(0,0));
	this.translationalLimitMotors = _g;
	var _g = [];
	_g.push(new oimo_dynamics_constraint_joint_RotationalLimitMotor().setLimits(0,0));
	_g.push(new oimo_dynamics_constraint_joint_RotationalLimitMotor().setLimits(0,0));
	_g.push(new oimo_dynamics_constraint_joint_RotationalLimitMotor().setLimits(0,0));
	this.rotationalLimitMotors = _g;
	this.translationalSpringDampers = [new oimo_dynamics_constraint_joint_SpringDamper(),new oimo_dynamics_constraint_joint_SpringDamper(),new oimo_dynamics_constraint_joint_SpringDamper()];
	this.rotationalSpringDampers = [new oimo_dynamics_constraint_joint_SpringDamper(),new oimo_dynamics_constraint_joint_SpringDamper(),new oimo_dynamics_constraint_joint_SpringDamper()];
};
oimo_dynamics_constraint_joint_GenericJointConfig.__name__ = true;
oimo_dynamics_constraint_joint_GenericJointConfig.__super__ = oimo_dynamics_constraint_joint_JointConfig;
oimo_dynamics_constraint_joint_GenericJointConfig.prototype = $extend(oimo_dynamics_constraint_joint_JointConfig.prototype,{
	init: function(rigidBody1,rigidBody2,worldAnchor,worldBasis1,worldBasis2) {
		this._init(rigidBody1,rigidBody2,worldAnchor);
		var tf1 = rigidBody1._transform;
		var tf2 = rigidBody2._transform;
		var wb100;
		var wb101;
		var wb102;
		var wb110;
		var wb111;
		var wb112;
		var wb120;
		var wb121;
		var wb122;
		var wb200;
		var wb201;
		var wb202;
		var wb210;
		var wb211;
		var wb212;
		var wb220;
		var wb221;
		var wb222;
		var lb100;
		var lb101;
		var lb102;
		var lb110;
		var lb111;
		var lb112;
		var lb120;
		var lb121;
		var lb122;
		var lb200;
		var lb201;
		var lb202;
		var lb210;
		var lb211;
		var lb212;
		var lb220;
		var lb221;
		var lb222;
		wb100 = worldBasis1.e00;
		wb101 = worldBasis1.e01;
		wb102 = worldBasis1.e02;
		wb110 = worldBasis1.e10;
		wb111 = worldBasis1.e11;
		wb112 = worldBasis1.e12;
		wb120 = worldBasis1.e20;
		wb121 = worldBasis1.e21;
		wb122 = worldBasis1.e22;
		wb200 = worldBasis2.e00;
		wb201 = worldBasis2.e01;
		wb202 = worldBasis2.e02;
		wb210 = worldBasis2.e10;
		wb211 = worldBasis2.e11;
		wb212 = worldBasis2.e12;
		wb220 = worldBasis2.e20;
		wb221 = worldBasis2.e21;
		wb222 = worldBasis2.e22;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = tf1._rotation00 * wb100 + tf1._rotation10 * wb110 + tf1._rotation20 * wb120;
		__tmp__01 = tf1._rotation00 * wb101 + tf1._rotation10 * wb111 + tf1._rotation20 * wb121;
		__tmp__02 = tf1._rotation00 * wb102 + tf1._rotation10 * wb112 + tf1._rotation20 * wb122;
		__tmp__10 = tf1._rotation01 * wb100 + tf1._rotation11 * wb110 + tf1._rotation21 * wb120;
		__tmp__11 = tf1._rotation01 * wb101 + tf1._rotation11 * wb111 + tf1._rotation21 * wb121;
		__tmp__12 = tf1._rotation01 * wb102 + tf1._rotation11 * wb112 + tf1._rotation21 * wb122;
		__tmp__20 = tf1._rotation02 * wb100 + tf1._rotation12 * wb110 + tf1._rotation22 * wb120;
		__tmp__21 = tf1._rotation02 * wb101 + tf1._rotation12 * wb111 + tf1._rotation22 * wb121;
		__tmp__22 = tf1._rotation02 * wb102 + tf1._rotation12 * wb112 + tf1._rotation22 * wb122;
		lb100 = __tmp__00;
		lb101 = __tmp__01;
		lb102 = __tmp__02;
		lb110 = __tmp__10;
		lb111 = __tmp__11;
		lb112 = __tmp__12;
		lb120 = __tmp__20;
		lb121 = __tmp__21;
		lb122 = __tmp__22;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = tf2._rotation00 * wb200 + tf2._rotation10 * wb210 + tf2._rotation20 * wb220;
		__tmp__01 = tf2._rotation00 * wb201 + tf2._rotation10 * wb211 + tf2._rotation20 * wb221;
		__tmp__02 = tf2._rotation00 * wb202 + tf2._rotation10 * wb212 + tf2._rotation20 * wb222;
		__tmp__10 = tf2._rotation01 * wb200 + tf2._rotation11 * wb210 + tf2._rotation21 * wb220;
		__tmp__11 = tf2._rotation01 * wb201 + tf2._rotation11 * wb211 + tf2._rotation21 * wb221;
		__tmp__12 = tf2._rotation01 * wb202 + tf2._rotation11 * wb212 + tf2._rotation21 * wb222;
		__tmp__20 = tf2._rotation02 * wb200 + tf2._rotation12 * wb210 + tf2._rotation22 * wb220;
		__tmp__21 = tf2._rotation02 * wb201 + tf2._rotation12 * wb211 + tf2._rotation22 * wb221;
		__tmp__22 = tf2._rotation02 * wb202 + tf2._rotation12 * wb212 + tf2._rotation22 * wb222;
		lb200 = __tmp__00;
		lb201 = __tmp__01;
		lb202 = __tmp__02;
		lb210 = __tmp__10;
		lb211 = __tmp__11;
		lb212 = __tmp__12;
		lb220 = __tmp__20;
		lb221 = __tmp__21;
		lb222 = __tmp__22;
		var m = this.localBasis1;
		m.e00 = lb100;
		m.e01 = lb101;
		m.e02 = lb102;
		m.e10 = lb110;
		m.e11 = lb111;
		m.e12 = lb112;
		m.e20 = lb120;
		m.e21 = lb121;
		m.e22 = lb122;
		var m = this.localBasis2;
		m.e00 = lb200;
		m.e01 = lb201;
		m.e02 = lb202;
		m.e10 = lb210;
		m.e11 = lb211;
		m.e12 = lb212;
		m.e20 = lb220;
		m.e21 = lb221;
		m.e22 = lb222;
		return this;
	}
	,__class__: oimo_dynamics_constraint_joint_GenericJointConfig
});
var oimo_dynamics_constraint_joint_JointImpulse = function() {
	this.impulse = 0;
	this.impulseM = 0;
	this.impulseP = 0;
};
oimo_dynamics_constraint_joint_JointImpulse.__name__ = true;
oimo_dynamics_constraint_joint_JointImpulse.prototype = {
	__class__: oimo_dynamics_constraint_joint_JointImpulse
};
var oimo_dynamics_constraint_joint_JointLink = function(joint) {
	this._joint = joint;
};
oimo_dynamics_constraint_joint_JointLink.__name__ = true;
oimo_dynamics_constraint_joint_JointLink.prototype = {
	getContact: function() {
		return this._joint;
	}
	,getOther: function() {
		return this._other;
	}
	,getPrev: function() {
		return this._prev;
	}
	,getNext: function() {
		return this._next;
	}
	,__class__: oimo_dynamics_constraint_joint_JointLink
};
var oimo_dynamics_constraint_joint_JointMacro = function() { };
oimo_dynamics_constraint_joint_JointMacro.__name__ = true;
var oimo_dynamics_constraint_joint_JointType = function() { };
oimo_dynamics_constraint_joint_JointType.__name__ = true;
var oimo_dynamics_constraint_joint_PrismaticJoint = function(config) {
	oimo_dynamics_constraint_joint_Joint.call(this,config,oimo_dynamics_constraint_joint_JointType.PRISMATIC);
	var v = config.localAxis1;
	this._localBasisX1X = v.x;
	this._localBasisX1Y = v.y;
	this._localBasisX1Z = v.z;
	var v = config.localAxis2;
	this._localBasisX2X = v.x;
	this._localBasisX2Y = v.y;
	this._localBasisX2Z = v.z;
	this.buildLocalBasesFromX();
	this._basis = new oimo_dynamics_constraint_joint_BasisTracker(this);
	this.translation = 0;
	this.linearErrorY = 0;
	this.linearErrorZ = 0;
	this.angularErrorX = 0;
	this.angularErrorY = 0;
	this.angularErrorZ = 0;
	this._sd = config.springDamper.clone();
	this._lm = config.limitMotor.clone();
};
oimo_dynamics_constraint_joint_PrismaticJoint.__name__ = true;
oimo_dynamics_constraint_joint_PrismaticJoint.__super__ = oimo_dynamics_constraint_joint_Joint;
oimo_dynamics_constraint_joint_PrismaticJoint.prototype = $extend(oimo_dynamics_constraint_joint_Joint.prototype,{
	getInfo: function(info,timeStep,isPositionPart) {
		var erp = this.getErp(timeStep,isPositionPart);
		var linRhsY = this.linearErrorY * erp;
		var linRhsZ = this.linearErrorZ * erp;
		var angRhsX = this.angularErrorX * erp;
		var angRhsY = this.angularErrorY * erp;
		var angRhsZ = this.angularErrorZ * erp;
		var j;
		if(this._sd.frequency <= 0 || !isPositionPart) {
			var impulse = this._impulses[0];
			var row = info.rows[info.numRows++];
			var _this = row.jacobian;
			_this.lin1X = 0;
			_this.lin1Y = 0;
			_this.lin1Z = 0;
			_this.lin2X = 0;
			_this.lin2Y = 0;
			_this.lin2Z = 0;
			_this.ang1X = 0;
			_this.ang1Y = 0;
			_this.ang1Z = 0;
			_this.ang2X = 0;
			_this.ang2Y = 0;
			_this.ang2Z = 0;
			row.rhs = 0;
			row.cfm = 0;
			row.minImpulse = 0;
			row.maxImpulse = 0;
			row.motorSpeed = 0;
			row.motorMaxImpulse = 0;
			row.impulse = null;
			row.impulse = impulse;
			this.setSolverInfoRowLinear(row,this.translation,this._lm,1 / (this._b1._invMass + this._b2._invMass),this._sd,timeStep,isPositionPart);
			j = row.jacobian;
			j.lin1X = this._basis.xX;
			j.lin1Y = this._basis.xY;
			j.lin1Z = this._basis.xZ;
			j.lin2X = this._basis.xX;
			j.lin2Y = this._basis.xY;
			j.lin2Z = this._basis.xZ;
			j.ang1X = this._relativeAnchor1Y * this._basis.xZ - this._relativeAnchor1Z * this._basis.xY;
			j.ang1Y = this._relativeAnchor1Z * this._basis.xX - this._relativeAnchor1X * this._basis.xZ;
			j.ang1Z = this._relativeAnchor1X * this._basis.xY - this._relativeAnchor1Y * this._basis.xX;
			j.ang2X = this._relativeAnchor2Y * this._basis.xZ - this._relativeAnchor2Z * this._basis.xY;
			j.ang2Y = this._relativeAnchor2Z * this._basis.xX - this._relativeAnchor2X * this._basis.xZ;
			j.ang2Z = this._relativeAnchor2X * this._basis.xY - this._relativeAnchor2Y * this._basis.xX;
		}
		var impulse = this._impulses[1];
		var row = info.rows[info.numRows++];
		var _this = row.jacobian;
		_this.lin1X = 0;
		_this.lin1Y = 0;
		_this.lin1Z = 0;
		_this.lin2X = 0;
		_this.lin2Y = 0;
		_this.lin2Z = 0;
		_this.ang1X = 0;
		_this.ang1Y = 0;
		_this.ang1Z = 0;
		_this.ang2X = 0;
		_this.ang2Y = 0;
		_this.ang2Z = 0;
		row.rhs = 0;
		row.cfm = 0;
		row.minImpulse = 0;
		row.maxImpulse = 0;
		row.motorSpeed = 0;
		row.motorMaxImpulse = 0;
		row.impulse = null;
		row.impulse = impulse;
		row.rhs = linRhsY;
		row.cfm = 0;
		row.minImpulse = -1e65536;
		row.maxImpulse = 1e65536;
		j = row.jacobian;
		j.lin1X = this._basis.yX;
		j.lin1Y = this._basis.yY;
		j.lin1Z = this._basis.yZ;
		j.lin2X = this._basis.yX;
		j.lin2Y = this._basis.yY;
		j.lin2Z = this._basis.yZ;
		j.ang1X = this._relativeAnchor1Y * this._basis.yZ - this._relativeAnchor1Z * this._basis.yY;
		j.ang1Y = this._relativeAnchor1Z * this._basis.yX - this._relativeAnchor1X * this._basis.yZ;
		j.ang1Z = this._relativeAnchor1X * this._basis.yY - this._relativeAnchor1Y * this._basis.yX;
		j.ang2X = this._relativeAnchor2Y * this._basis.yZ - this._relativeAnchor2Z * this._basis.yY;
		j.ang2Y = this._relativeAnchor2Z * this._basis.yX - this._relativeAnchor2X * this._basis.yZ;
		j.ang2Z = this._relativeAnchor2X * this._basis.yY - this._relativeAnchor2Y * this._basis.yX;
		var impulse = this._impulses[2];
		var row = info.rows[info.numRows++];
		var _this = row.jacobian;
		_this.lin1X = 0;
		_this.lin1Y = 0;
		_this.lin1Z = 0;
		_this.lin2X = 0;
		_this.lin2Y = 0;
		_this.lin2Z = 0;
		_this.ang1X = 0;
		_this.ang1Y = 0;
		_this.ang1Z = 0;
		_this.ang2X = 0;
		_this.ang2Y = 0;
		_this.ang2Z = 0;
		row.rhs = 0;
		row.cfm = 0;
		row.minImpulse = 0;
		row.maxImpulse = 0;
		row.motorSpeed = 0;
		row.motorMaxImpulse = 0;
		row.impulse = null;
		row.impulse = impulse;
		row.rhs = linRhsZ;
		row.cfm = 0;
		row.minImpulse = -1e65536;
		row.maxImpulse = 1e65536;
		j = row.jacobian;
		j.lin1X = this._basis.zX;
		j.lin1Y = this._basis.zY;
		j.lin1Z = this._basis.zZ;
		j.lin2X = this._basis.zX;
		j.lin2Y = this._basis.zY;
		j.lin2Z = this._basis.zZ;
		j.ang1X = this._relativeAnchor1Y * this._basis.zZ - this._relativeAnchor1Z * this._basis.zY;
		j.ang1Y = this._relativeAnchor1Z * this._basis.zX - this._relativeAnchor1X * this._basis.zZ;
		j.ang1Z = this._relativeAnchor1X * this._basis.zY - this._relativeAnchor1Y * this._basis.zX;
		j.ang2X = this._relativeAnchor2Y * this._basis.zZ - this._relativeAnchor2Z * this._basis.zY;
		j.ang2Y = this._relativeAnchor2Z * this._basis.zX - this._relativeAnchor2X * this._basis.zZ;
		j.ang2Z = this._relativeAnchor2X * this._basis.zY - this._relativeAnchor2Y * this._basis.zX;
		var impulse = this._impulses[3];
		var row = info.rows[info.numRows++];
		var _this = row.jacobian;
		_this.lin1X = 0;
		_this.lin1Y = 0;
		_this.lin1Z = 0;
		_this.lin2X = 0;
		_this.lin2Y = 0;
		_this.lin2Z = 0;
		_this.ang1X = 0;
		_this.ang1Y = 0;
		_this.ang1Z = 0;
		_this.ang2X = 0;
		_this.ang2Y = 0;
		_this.ang2Z = 0;
		row.rhs = 0;
		row.cfm = 0;
		row.minImpulse = 0;
		row.maxImpulse = 0;
		row.motorSpeed = 0;
		row.motorMaxImpulse = 0;
		row.impulse = null;
		row.impulse = impulse;
		row.rhs = angRhsX;
		row.cfm = 0;
		row.minImpulse = -1e65536;
		row.maxImpulse = 1e65536;
		j = row.jacobian;
		j.ang1X = 1;
		j.ang1Y = 0;
		j.ang1Z = 0;
		j.ang2X = 1;
		j.ang2Y = 0;
		j.ang2Z = 0;
		var impulse = this._impulses[4];
		var row = info.rows[info.numRows++];
		var _this = row.jacobian;
		_this.lin1X = 0;
		_this.lin1Y = 0;
		_this.lin1Z = 0;
		_this.lin2X = 0;
		_this.lin2Y = 0;
		_this.lin2Z = 0;
		_this.ang1X = 0;
		_this.ang1Y = 0;
		_this.ang1Z = 0;
		_this.ang2X = 0;
		_this.ang2Y = 0;
		_this.ang2Z = 0;
		row.rhs = 0;
		row.cfm = 0;
		row.minImpulse = 0;
		row.maxImpulse = 0;
		row.motorSpeed = 0;
		row.motorMaxImpulse = 0;
		row.impulse = null;
		row.impulse = impulse;
		row.rhs = angRhsY;
		row.cfm = 0;
		row.minImpulse = -1e65536;
		row.maxImpulse = 1e65536;
		j = row.jacobian;
		j.ang1X = 0;
		j.ang1Y = 1;
		j.ang1Z = 0;
		j.ang2X = 0;
		j.ang2Y = 1;
		j.ang2Z = 0;
		var impulse = this._impulses[5];
		var row = info.rows[info.numRows++];
		var _this = row.jacobian;
		_this.lin1X = 0;
		_this.lin1Y = 0;
		_this.lin1Z = 0;
		_this.lin2X = 0;
		_this.lin2Y = 0;
		_this.lin2Z = 0;
		_this.ang1X = 0;
		_this.ang1Y = 0;
		_this.ang1Z = 0;
		_this.ang2X = 0;
		_this.ang2Y = 0;
		_this.ang2Z = 0;
		row.rhs = 0;
		row.cfm = 0;
		row.minImpulse = 0;
		row.maxImpulse = 0;
		row.motorSpeed = 0;
		row.motorMaxImpulse = 0;
		row.impulse = null;
		row.impulse = impulse;
		row.rhs = angRhsZ;
		row.cfm = 0;
		row.minImpulse = -1e65536;
		row.maxImpulse = 1e65536;
		j = row.jacobian;
		j.ang1X = 0;
		j.ang1Y = 0;
		j.ang1Z = 1;
		j.ang2X = 0;
		j.ang2Y = 0;
		j.ang2Z = 1;
	}
	,_syncAnchors: function() {
		oimo_dynamics_constraint_joint_Joint.prototype._syncAnchors.call(this);
		var _this = this._basis;
		var invM1 = _this.joint._b1._invMass;
		var invM2 = _this.joint._b2._invMass;
		var qX;
		var qY;
		var qZ;
		var qW;
		var idQX;
		var idQY;
		var idQZ;
		var idQW;
		var slerpQX;
		var slerpQY;
		var slerpQZ;
		var slerpQW;
		var slerpM00;
		var slerpM01;
		var slerpM02;
		var slerpM10;
		var slerpM11;
		var slerpM12;
		var slerpM20;
		var slerpM21;
		var slerpM22;
		var newXX;
		var newXY;
		var newXZ;
		var newYX;
		var newYY;
		var newYZ;
		var newZX;
		var newZY;
		var newZZ;
		var prevXX;
		var prevXY;
		var prevXZ;
		var prevYX;
		var prevYY;
		var prevYZ;
		var d = _this.joint._basisX1X * _this.joint._basisX2X + _this.joint._basisX1Y * _this.joint._basisX2Y + _this.joint._basisX1Z * _this.joint._basisX2Z;
		if(d < -0.999999999) {
			var vX;
			var vY;
			var vZ;
			var x1 = _this.joint._basisX1X;
			var y1 = _this.joint._basisX1Y;
			var z1 = _this.joint._basisX1Z;
			var x2 = x1 * x1;
			var y2 = y1 * y1;
			var z2 = z1 * z1;
			var d1;
			if(x2 < y2) {
				if(x2 < z2) {
					d1 = 1 / Math.sqrt(y2 + z2);
					vX = 0;
					vY = z1 * d1;
					vZ = -y1 * d1;
				} else {
					d1 = 1 / Math.sqrt(x2 + y2);
					vX = y1 * d1;
					vY = -x1 * d1;
					vZ = 0;
				}
			} else if(y2 < z2) {
				d1 = 1 / Math.sqrt(z2 + x2);
				vX = -z1 * d1;
				vY = 0;
				vZ = x1 * d1;
			} else {
				d1 = 1 / Math.sqrt(x2 + y2);
				vX = y1 * d1;
				vY = -x1 * d1;
				vZ = 0;
			}
			qX = vX;
			qY = vY;
			qZ = vZ;
			qW = 0;
		} else {
			var cX;
			var cY;
			var cZ;
			cX = _this.joint._basisX1Y * _this.joint._basisX2Z - _this.joint._basisX1Z * _this.joint._basisX2Y;
			cY = _this.joint._basisX1Z * _this.joint._basisX2X - _this.joint._basisX1X * _this.joint._basisX2Z;
			cZ = _this.joint._basisX1X * _this.joint._basisX2Y - _this.joint._basisX1Y * _this.joint._basisX2X;
			var w = Math.sqrt((1 + d) * 0.5);
			d = 0.5 / w;
			cX *= d;
			cY *= d;
			cZ *= d;
			qX = cX;
			qY = cY;
			qZ = cZ;
			qW = w;
		}
		idQX = 0;
		idQY = 0;
		idQZ = 0;
		idQW = 1;
		var q1X;
		var q1Y;
		var q1Z;
		var q1W;
		var q2X;
		var q2Y;
		var q2Z;
		var q2W;
		q1X = idQX;
		q1Y = idQY;
		q1Z = idQZ;
		q1W = idQW;
		q2X = qX;
		q2Y = qY;
		q2Z = qZ;
		q2W = qW;
		var d = q1X * q2X + q1Y * q2Y + q1Z * q2Z + q1W * q2W;
		if(d < 0) {
			d = -d;
			q2X = -q2X;
			q2Y = -q2Y;
			q2Z = -q2Z;
			q2W = -q2W;
		}
		if(d > 0.999999) {
			var dqX;
			var dqY;
			var dqZ;
			var dqW;
			dqX = q2X - q1X;
			dqY = q2Y - q1Y;
			dqZ = q2Z - q1Z;
			dqW = q2W - q1W;
			q2X = q1X + dqX * (invM1 / (invM1 + invM2));
			q2Y = q1Y + dqY * (invM1 / (invM1 + invM2));
			q2Z = q1Z + dqZ * (invM1 / (invM1 + invM2));
			q2W = q1W + dqW * (invM1 / (invM1 + invM2));
			var l = q2X * q2X + q2Y * q2Y + q2Z * q2Z + q2W * q2W;
			if(l > 1e-32) {
				l = 1 / Math.sqrt(l);
			}
			slerpQX = q2X * l;
			slerpQY = q2Y * l;
			slerpQZ = q2Z * l;
			slerpQW = q2W * l;
		} else {
			var theta = invM1 / (invM1 + invM2) * Math.acos(d);
			q2X += q1X * -d;
			q2Y += q1Y * -d;
			q2Z += q1Z * -d;
			q2W += q1W * -d;
			var l = q2X * q2X + q2Y * q2Y + q2Z * q2Z + q2W * q2W;
			if(l > 1e-32) {
				l = 1 / Math.sqrt(l);
			}
			q2X *= l;
			q2Y *= l;
			q2Z *= l;
			q2W *= l;
			var sin = Math.sin(theta);
			var cos = Math.cos(theta);
			q1X *= cos;
			q1Y *= cos;
			q1Z *= cos;
			q1W *= cos;
			slerpQX = q1X + q2X * sin;
			slerpQY = q1Y + q2Y * sin;
			slerpQZ = q1Z + q2Z * sin;
			slerpQW = q1W + q2W * sin;
		}
		var x = slerpQX;
		var y = slerpQY;
		var z = slerpQZ;
		var w = slerpQW;
		var x2 = 2 * x;
		var y2 = 2 * y;
		var z2 = 2 * z;
		var xx = x * x2;
		var yy = y * y2;
		var zz = z * z2;
		var xy = x * y2;
		var yz = y * z2;
		var xz = x * z2;
		var wx = w * x2;
		var wy = w * y2;
		var wz = w * z2;
		slerpM00 = 1 - yy - zz;
		slerpM01 = xy - wz;
		slerpM02 = xz + wy;
		slerpM10 = xy + wz;
		slerpM11 = 1 - xx - zz;
		slerpM12 = yz - wx;
		slerpM20 = xz - wy;
		slerpM21 = yz + wx;
		slerpM22 = 1 - xx - yy;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = slerpM00 * _this.joint._basisX1X + slerpM01 * _this.joint._basisX1Y + slerpM02 * _this.joint._basisX1Z;
		__tmp__Y = slerpM10 * _this.joint._basisX1X + slerpM11 * _this.joint._basisX1Y + slerpM12 * _this.joint._basisX1Z;
		__tmp__Z = slerpM20 * _this.joint._basisX1X + slerpM21 * _this.joint._basisX1Y + slerpM22 * _this.joint._basisX1Z;
		newXX = __tmp__X;
		newXY = __tmp__Y;
		newXZ = __tmp__Z;
		prevXX = _this.xX;
		prevXY = _this.xY;
		prevXZ = _this.xZ;
		prevYX = _this.yX;
		prevYY = _this.yY;
		prevYZ = _this.yZ;
		var d = prevXX * newXX + prevXY * newXY + prevXZ * newXZ;
		if(d < -0.999999999) {
			var vX;
			var vY;
			var vZ;
			var x1 = prevXX;
			var y1 = prevXY;
			var z1 = prevXZ;
			var x2 = x1 * x1;
			var y2 = y1 * y1;
			var z2 = z1 * z1;
			var d1;
			if(x2 < y2) {
				if(x2 < z2) {
					d1 = 1 / Math.sqrt(y2 + z2);
					vX = 0;
					vY = z1 * d1;
					vZ = -y1 * d1;
				} else {
					d1 = 1 / Math.sqrt(x2 + y2);
					vX = y1 * d1;
					vY = -x1 * d1;
					vZ = 0;
				}
			} else if(y2 < z2) {
				d1 = 1 / Math.sqrt(z2 + x2);
				vX = -z1 * d1;
				vY = 0;
				vZ = x1 * d1;
			} else {
				d1 = 1 / Math.sqrt(x2 + y2);
				vX = y1 * d1;
				vY = -x1 * d1;
				vZ = 0;
			}
			slerpQX = vX;
			slerpQY = vY;
			slerpQZ = vZ;
			slerpQW = 0;
		} else {
			var cX;
			var cY;
			var cZ;
			cX = prevXY * newXZ - prevXZ * newXY;
			cY = prevXZ * newXX - prevXX * newXZ;
			cZ = prevXX * newXY - prevXY * newXX;
			var w = Math.sqrt((1 + d) * 0.5);
			d = 0.5 / w;
			cX *= d;
			cY *= d;
			cZ *= d;
			slerpQX = cX;
			slerpQY = cY;
			slerpQZ = cZ;
			slerpQW = w;
		}
		var x = slerpQX;
		var y = slerpQY;
		var z = slerpQZ;
		var w = slerpQW;
		var x2 = 2 * x;
		var y2 = 2 * y;
		var z2 = 2 * z;
		var xx = x * x2;
		var yy = y * y2;
		var zz = z * z2;
		var xy = x * y2;
		var yz = y * z2;
		var xz = x * z2;
		var wx = w * x2;
		var wy = w * y2;
		var wz = w * z2;
		slerpM00 = 1 - yy - zz;
		slerpM01 = xy - wz;
		slerpM02 = xz + wy;
		slerpM10 = xy + wz;
		slerpM11 = 1 - xx - zz;
		slerpM12 = yz - wx;
		slerpM20 = xz - wy;
		slerpM21 = yz + wx;
		slerpM22 = 1 - xx - yy;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = slerpM00 * prevYX + slerpM01 * prevYY + slerpM02 * prevYZ;
		__tmp__Y = slerpM10 * prevYX + slerpM11 * prevYY + slerpM12 * prevYZ;
		__tmp__Z = slerpM20 * prevYX + slerpM21 * prevYY + slerpM22 * prevYZ;
		newYX = __tmp__X;
		newYY = __tmp__Y;
		newYZ = __tmp__Z;
		newZX = newXY * newYZ - newXZ * newYY;
		newZY = newXZ * newYX - newXX * newYZ;
		newZZ = newXX * newYY - newXY * newYX;
		if(newZX * newZX + newZY * newZY + newZZ * newZZ > 1e-6) {
			var l = newZX * newZX + newZY * newZY + newZZ * newZZ;
			if(l > 0) {
				l = 1 / Math.sqrt(l);
			}
			newZX *= l;
			newZY *= l;
			newZZ *= l;
		} else {
			var x1 = newXX;
			var y1 = newXY;
			var z1 = newXZ;
			var x2 = x1 * x1;
			var y2 = y1 * y1;
			var z2 = z1 * z1;
			var d;
			if(x2 < y2) {
				if(x2 < z2) {
					d = 1 / Math.sqrt(y2 + z2);
					newZX = 0;
					newZY = z1 * d;
					newZZ = -y1 * d;
				} else {
					d = 1 / Math.sqrt(x2 + y2);
					newZX = y1 * d;
					newZY = -x1 * d;
					newZZ = 0;
				}
			} else if(y2 < z2) {
				d = 1 / Math.sqrt(z2 + x2);
				newZX = -z1 * d;
				newZY = 0;
				newZZ = x1 * d;
			} else {
				d = 1 / Math.sqrt(x2 + y2);
				newZX = y1 * d;
				newZY = -x1 * d;
				newZZ = 0;
			}
		}
		newYX = newZY * newXZ - newZZ * newXY;
		newYY = newZZ * newXX - newZX * newXZ;
		newYZ = newZX * newXY - newZY * newXX;
		_this.xX = newXX;
		_this.xY = newXY;
		_this.xZ = newXZ;
		_this.yX = newYX;
		_this.yY = newYY;
		_this.yZ = newYZ;
		_this.zX = newZX;
		_this.zY = newZY;
		_this.zZ = newZZ;
		var rot100;
		var rot101;
		var rot102;
		var rot110;
		var rot111;
		var rot112;
		var rot120;
		var rot121;
		var rot122;
		var rot200;
		var rot201;
		var rot202;
		var rot210;
		var rot211;
		var rot212;
		var rot220;
		var rot221;
		var rot222;
		rot100 = this._basisX1X;
		rot101 = this._basisY1X;
		rot102 = this._basisZ1X;
		rot110 = this._basisX1Y;
		rot111 = this._basisY1Y;
		rot112 = this._basisZ1Y;
		rot120 = this._basisX1Z;
		rot121 = this._basisY1Z;
		rot122 = this._basisZ1Z;
		rot200 = this._basisX2X;
		rot201 = this._basisY2X;
		rot202 = this._basisZ2X;
		rot210 = this._basisX2Y;
		rot211 = this._basisY2Y;
		rot212 = this._basisZ2Y;
		rot220 = this._basisX2Z;
		rot221 = this._basisY2Z;
		rot222 = this._basisZ2Z;
		var relRot00;
		var relRot01;
		var relRot02;
		var relRot10;
		var relRot11;
		var relRot12;
		var relRot20;
		var relRot21;
		var relRot22;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = rot200 * rot100 + rot201 * rot101 + rot202 * rot102;
		__tmp__01 = rot200 * rot110 + rot201 * rot111 + rot202 * rot112;
		__tmp__02 = rot200 * rot120 + rot201 * rot121 + rot202 * rot122;
		__tmp__10 = rot210 * rot100 + rot211 * rot101 + rot212 * rot102;
		__tmp__11 = rot210 * rot110 + rot211 * rot111 + rot212 * rot112;
		__tmp__12 = rot210 * rot120 + rot211 * rot121 + rot212 * rot122;
		__tmp__20 = rot220 * rot100 + rot221 * rot101 + rot222 * rot102;
		__tmp__21 = rot220 * rot110 + rot221 * rot111 + rot222 * rot112;
		__tmp__22 = rot220 * rot120 + rot221 * rot121 + rot222 * rot122;
		relRot00 = __tmp__00;
		relRot01 = __tmp__01;
		relRot02 = __tmp__02;
		relRot10 = __tmp__10;
		relRot11 = __tmp__11;
		relRot12 = __tmp__12;
		relRot20 = __tmp__20;
		relRot21 = __tmp__21;
		relRot22 = __tmp__22;
		var relQX;
		var relQY;
		var relQZ;
		var relQW;
		var e00 = relRot00;
		var e11 = relRot11;
		var e22 = relRot22;
		var t = e00 + e11 + e22;
		var s;
		if(t > 0) {
			s = Math.sqrt(t + 1);
			relQW = 0.5 * s;
			s = 0.5 / s;
			relQX = (relRot21 - relRot12) * s;
			relQY = (relRot02 - relRot20) * s;
			relQZ = (relRot10 - relRot01) * s;
		} else if(e00 > e11) {
			if(e00 > e22) {
				s = Math.sqrt(e00 - e11 - e22 + 1);
				relQX = 0.5 * s;
				s = 0.5 / s;
				relQY = (relRot01 + relRot10) * s;
				relQZ = (relRot02 + relRot20) * s;
				relQW = (relRot21 - relRot12) * s;
			} else {
				s = Math.sqrt(e22 - e00 - e11 + 1);
				relQZ = 0.5 * s;
				s = 0.5 / s;
				relQX = (relRot02 + relRot20) * s;
				relQY = (relRot12 + relRot21) * s;
				relQW = (relRot10 - relRot01) * s;
			}
		} else if(e11 > e22) {
			s = Math.sqrt(e11 - e22 - e00 + 1);
			relQY = 0.5 * s;
			s = 0.5 / s;
			relQX = (relRot01 + relRot10) * s;
			relQZ = (relRot12 + relRot21) * s;
			relQW = (relRot02 - relRot20) * s;
		} else {
			s = Math.sqrt(e22 - e00 - e11 + 1);
			relQZ = 0.5 * s;
			s = 0.5 / s;
			relQX = (relRot02 + relRot20) * s;
			relQY = (relRot12 + relRot21) * s;
			relQW = (relRot10 - relRot01) * s;
		}
		var cosHalfTheta = relQW;
		var theta = (cosHalfTheta <= -1 ? 3.14159265358979 : cosHalfTheta >= 1 ? 0 : Math.acos(cosHalfTheta)) * 2;
		this.angularErrorX = relQX;
		this.angularErrorY = relQY;
		this.angularErrorZ = relQZ;
		var l = this.angularErrorX * this.angularErrorX + this.angularErrorY * this.angularErrorY + this.angularErrorZ * this.angularErrorZ;
		if(l > 0) {
			l = 1 / Math.sqrt(l);
		}
		this.angularErrorX *= l;
		this.angularErrorY *= l;
		this.angularErrorZ *= l;
		this.angularErrorX *= theta;
		this.angularErrorY *= theta;
		this.angularErrorZ *= theta;
		var anchorDiffX;
		var anchorDiffY;
		var anchorDiffZ;
		anchorDiffX = this._anchor2X - this._anchor1X;
		anchorDiffY = this._anchor2Y - this._anchor1Y;
		anchorDiffZ = this._anchor2Z - this._anchor1Z;
		this.translation = anchorDiffX * this._basis.xX + anchorDiffY * this._basis.xY + anchorDiffZ * this._basis.xZ;
		this.linearErrorY = anchorDiffX * this._basis.yX + anchorDiffY * this._basis.yY + anchorDiffZ * this._basis.yZ;
		this.linearErrorZ = anchorDiffX * this._basis.zX + anchorDiffY * this._basis.zY + anchorDiffZ * this._basis.zZ;
	}
	,_getVelocitySolverInfo: function(timeStep,info) {
		oimo_dynamics_constraint_joint_Joint.prototype._getVelocitySolverInfo.call(this,timeStep,info);
		this.getInfo(info,timeStep,false);
	}
	,_getPositionSolverInfo: function(info) {
		oimo_dynamics_constraint_joint_Joint.prototype._getPositionSolverInfo.call(this,info);
		this.getInfo(info,null,true);
	}
	,getAxis1: function() {
		var v = new oimo_common_Vec3();
		v.x = this._basisX1X;
		v.y = this._basisX1Y;
		v.z = this._basisX1Z;
		return v;
	}
	,getAxis2: function() {
		var v = new oimo_common_Vec3();
		v.x = this._basisX2X;
		v.y = this._basisX2Y;
		v.z = this._basisX2Z;
		return v;
	}
	,getAxis1To: function(axis) {
		axis.x = this._basisX1X;
		axis.y = this._basisX1Y;
		axis.z = this._basisX1Z;
	}
	,getAxis2To: function(axis) {
		axis.x = this._basisX2X;
		axis.y = this._basisX2Y;
		axis.z = this._basisX2Z;
	}
	,getLocalAxis1: function() {
		var v = new oimo_common_Vec3();
		v.x = this._localBasisX1X;
		v.y = this._localBasisX1Y;
		v.z = this._localBasisX1Z;
		return v;
	}
	,getLocalAxis2: function() {
		var v = new oimo_common_Vec3();
		v.x = this._localBasisX2X;
		v.y = this._localBasisX2Y;
		v.z = this._localBasisX2Z;
		return v;
	}
	,getLocalAxis1To: function(axis) {
		axis.x = this._localBasisX1X;
		axis.y = this._localBasisX1Y;
		axis.z = this._localBasisX1Z;
	}
	,getLocalAxis2To: function(axis) {
		axis.x = this._localBasisX2X;
		axis.y = this._localBasisX2Y;
		axis.z = this._localBasisX2Z;
	}
	,getSpringDamper: function() {
		return this._sd;
	}
	,getLimitMotor: function() {
		return this._lm;
	}
	,getTranslation: function() {
		return this.translation;
	}
	,__class__: oimo_dynamics_constraint_joint_PrismaticJoint
});
var oimo_dynamics_constraint_joint_PrismaticJointConfig = function() {
	oimo_dynamics_constraint_joint_JointConfig.call(this);
	this.localAxis1 = new oimo_common_Vec3(1,0,0);
	this.localAxis2 = new oimo_common_Vec3(1,0,0);
	this.limitMotor = new oimo_dynamics_constraint_joint_TranslationalLimitMotor();
	this.springDamper = new oimo_dynamics_constraint_joint_SpringDamper();
};
oimo_dynamics_constraint_joint_PrismaticJointConfig.__name__ = true;
oimo_dynamics_constraint_joint_PrismaticJointConfig.__super__ = oimo_dynamics_constraint_joint_JointConfig;
oimo_dynamics_constraint_joint_PrismaticJointConfig.prototype = $extend(oimo_dynamics_constraint_joint_JointConfig.prototype,{
	init: function(rigidBody1,rigidBody2,worldAnchor,worldAxis) {
		this._init(rigidBody1,rigidBody2,worldAnchor);
		var localVector = this.localAxis1;
		var vX;
		var vY;
		var vZ;
		vX = worldAxis.x;
		vY = worldAxis.y;
		vZ = worldAxis.z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = rigidBody1._transform._rotation00 * vX + rigidBody1._transform._rotation10 * vY + rigidBody1._transform._rotation20 * vZ;
		__tmp__Y = rigidBody1._transform._rotation01 * vX + rigidBody1._transform._rotation11 * vY + rigidBody1._transform._rotation21 * vZ;
		__tmp__Z = rigidBody1._transform._rotation02 * vX + rigidBody1._transform._rotation12 * vY + rigidBody1._transform._rotation22 * vZ;
		vX = __tmp__X;
		vY = __tmp__Y;
		vZ = __tmp__Z;
		localVector.x = vX;
		localVector.y = vY;
		localVector.z = vZ;
		var localVector = this.localAxis2;
		var vX;
		var vY;
		var vZ;
		vX = worldAxis.x;
		vY = worldAxis.y;
		vZ = worldAxis.z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = rigidBody2._transform._rotation00 * vX + rigidBody2._transform._rotation10 * vY + rigidBody2._transform._rotation20 * vZ;
		__tmp__Y = rigidBody2._transform._rotation01 * vX + rigidBody2._transform._rotation11 * vY + rigidBody2._transform._rotation21 * vZ;
		__tmp__Z = rigidBody2._transform._rotation02 * vX + rigidBody2._transform._rotation12 * vY + rigidBody2._transform._rotation22 * vZ;
		vX = __tmp__X;
		vY = __tmp__Y;
		vZ = __tmp__Z;
		localVector.x = vX;
		localVector.y = vY;
		localVector.z = vZ;
		return this;
	}
	,__class__: oimo_dynamics_constraint_joint_PrismaticJointConfig
});
var oimo_dynamics_constraint_joint_RagdollJoint = function(config) {
	oimo_dynamics_constraint_joint_Joint.call(this,config,oimo_dynamics_constraint_joint_JointType.RAGDOLL);
	var v = config.localTwistAxis1;
	this._localBasisX1X = v.x;
	this._localBasisX1Y = v.y;
	this._localBasisX1Z = v.z;
	var v = config.localSwingAxis1;
	this._localBasisY1X = v.x;
	this._localBasisY1Y = v.y;
	this._localBasisY1Z = v.z;
	var v = config.localTwistAxis2;
	this._localBasisX2X = v.x;
	this._localBasisX2Y = v.y;
	this._localBasisX2Z = v.z;
	this.buildLocalBasesFromXY1X2();
	this._twistSd = config.twistSpringDamper.clone();
	this._twistLm = config.twistLimitMotor.clone();
	this._swingSd = config.swingSpringDamper.clone();
	this._maxSwingAngle1 = config.maxSwingAngle1;
	this._maxSwingAngle2 = config.maxSwingAngle2;
	if(this._maxSwingAngle1 < oimo_common_Setting.minRagdollMaxSwingAngle) {
		this._maxSwingAngle1 = oimo_common_Setting.minRagdollMaxSwingAngle;
	}
	if(this._maxSwingAngle2 < oimo_common_Setting.minRagdollMaxSwingAngle) {
		this._maxSwingAngle2 = oimo_common_Setting.minRagdollMaxSwingAngle;
	}
	this.dummySwingLm = new oimo_dynamics_constraint_joint_RotationalLimitMotor();
	this.dummySwingLm.lowerLimit = -1;
	this.dummySwingLm.upperLimit = 0;
	this._swingAngle = 0;
	this._twistAngle = 0;
	this.swingError = 0;
	this.swingAxisX = 0;
	this.swingAxisY = 0;
	this.swingAxisZ = 0;
	this.twistAxisX = 0;
	this.twistAxisY = 0;
	this.twistAxisZ = 0;
};
oimo_dynamics_constraint_joint_RagdollJoint.__name__ = true;
oimo_dynamics_constraint_joint_RagdollJoint.__super__ = oimo_dynamics_constraint_joint_Joint;
oimo_dynamics_constraint_joint_RagdollJoint.prototype = $extend(oimo_dynamics_constraint_joint_Joint.prototype,{
	getInfo: function(info,timeStep,isPositionPart) {
		var erp = this.getErp(timeStep,isPositionPart);
		var linearRhsX;
		var linearRhsY;
		var linearRhsZ;
		linearRhsX = this.linearErrorX * erp;
		linearRhsY = this.linearErrorY * erp;
		linearRhsZ = this.linearErrorZ * erp;
		var crossR100;
		var crossR101;
		var crossR102;
		var crossR110;
		var crossR111;
		var crossR112;
		var crossR120;
		var crossR121;
		var crossR122;
		var crossR200;
		var crossR201;
		var crossR202;
		var crossR210;
		var crossR211;
		var crossR212;
		var crossR220;
		var crossR221;
		var crossR222;
		crossR100 = 0;
		crossR101 = -this._relativeAnchor1Z;
		crossR102 = this._relativeAnchor1Y;
		crossR110 = this._relativeAnchor1Z;
		crossR111 = 0;
		crossR112 = -this._relativeAnchor1X;
		crossR120 = -this._relativeAnchor1Y;
		crossR121 = this._relativeAnchor1X;
		crossR122 = 0;
		crossR200 = 0;
		crossR201 = -this._relativeAnchor2Z;
		crossR202 = this._relativeAnchor2Y;
		crossR210 = this._relativeAnchor2Z;
		crossR211 = 0;
		crossR212 = -this._relativeAnchor2X;
		crossR220 = -this._relativeAnchor2Y;
		crossR221 = this._relativeAnchor2X;
		crossR222 = 0;
		crossR100 = -crossR100;
		crossR101 = -crossR101;
		crossR102 = -crossR102;
		crossR110 = -crossR110;
		crossR111 = -crossR111;
		crossR112 = -crossR112;
		crossR120 = -crossR120;
		crossR121 = -crossR121;
		crossR122 = -crossR122;
		crossR200 = -crossR200;
		crossR201 = -crossR201;
		crossR202 = -crossR202;
		crossR210 = -crossR210;
		crossR211 = -crossR211;
		crossR212 = -crossR212;
		crossR220 = -crossR220;
		crossR221 = -crossR221;
		crossR222 = -crossR222;
		var swingMass = this.computeEffectiveInertiaMoment(this.swingAxisX,this.swingAxisY,this.swingAxisZ);
		var twistMass = this.computeEffectiveInertiaMoment(this._basisX2X,this._basisX2Y,this._basisX2Z);
		var impulse = this._impulses[0];
		var row = info.rows[info.numRows++];
		var _this = row.jacobian;
		_this.lin1X = 0;
		_this.lin1Y = 0;
		_this.lin1Z = 0;
		_this.lin2X = 0;
		_this.lin2Y = 0;
		_this.lin2Z = 0;
		_this.ang1X = 0;
		_this.ang1Y = 0;
		_this.ang1Z = 0;
		_this.ang2X = 0;
		_this.ang2Y = 0;
		_this.ang2Z = 0;
		row.rhs = 0;
		row.cfm = 0;
		row.minImpulse = 0;
		row.maxImpulse = 0;
		row.motorSpeed = 0;
		row.motorMaxImpulse = 0;
		row.impulse = null;
		row.impulse = impulse;
		row.rhs = linearRhsX;
		row.cfm = 0;
		row.minImpulse = -1e65536;
		row.maxImpulse = 1e65536;
		var j = row.jacobian;
		j.lin1X = 1;
		j.lin1Y = 0;
		j.lin1Z = 0;
		j.lin2X = 1;
		j.lin2Y = 0;
		j.lin2Z = 0;
		j.ang1X = crossR100;
		j.ang1Y = crossR101;
		j.ang1Z = crossR102;
		j.ang2X = crossR200;
		j.ang2Y = crossR201;
		j.ang2Z = crossR202;
		var impulse = this._impulses[1];
		var row = info.rows[info.numRows++];
		var _this = row.jacobian;
		_this.lin1X = 0;
		_this.lin1Y = 0;
		_this.lin1Z = 0;
		_this.lin2X = 0;
		_this.lin2Y = 0;
		_this.lin2Z = 0;
		_this.ang1X = 0;
		_this.ang1Y = 0;
		_this.ang1Z = 0;
		_this.ang2X = 0;
		_this.ang2Y = 0;
		_this.ang2Z = 0;
		row.rhs = 0;
		row.cfm = 0;
		row.minImpulse = 0;
		row.maxImpulse = 0;
		row.motorSpeed = 0;
		row.motorMaxImpulse = 0;
		row.impulse = null;
		row.impulse = impulse;
		row.rhs = linearRhsY;
		row.cfm = 0;
		row.minImpulse = -1e65536;
		row.maxImpulse = 1e65536;
		j = row.jacobian;
		j.lin1X = 0;
		j.lin1Y = 1;
		j.lin1Z = 0;
		j.lin2X = 0;
		j.lin2Y = 1;
		j.lin2Z = 0;
		j.ang1X = crossR110;
		j.ang1Y = crossR111;
		j.ang1Z = crossR112;
		j.ang2X = crossR210;
		j.ang2Y = crossR211;
		j.ang2Z = crossR212;
		var impulse = this._impulses[2];
		var row = info.rows[info.numRows++];
		var _this = row.jacobian;
		_this.lin1X = 0;
		_this.lin1Y = 0;
		_this.lin1Z = 0;
		_this.lin2X = 0;
		_this.lin2Y = 0;
		_this.lin2Z = 0;
		_this.ang1X = 0;
		_this.ang1Y = 0;
		_this.ang1Z = 0;
		_this.ang2X = 0;
		_this.ang2Y = 0;
		_this.ang2Z = 0;
		row.rhs = 0;
		row.cfm = 0;
		row.minImpulse = 0;
		row.maxImpulse = 0;
		row.motorSpeed = 0;
		row.motorMaxImpulse = 0;
		row.impulse = null;
		row.impulse = impulse;
		row.rhs = linearRhsZ;
		row.cfm = 0;
		row.minImpulse = -1e65536;
		row.maxImpulse = 1e65536;
		j = row.jacobian;
		j.lin1X = 0;
		j.lin1Y = 0;
		j.lin1Z = 1;
		j.lin2X = 0;
		j.lin2Y = 0;
		j.lin2Z = 1;
		j.ang1X = crossR120;
		j.ang1Y = crossR121;
		j.ang1Z = crossR122;
		j.ang2X = crossR220;
		j.ang2Y = crossR221;
		j.ang2Z = crossR222;
		if(this.swingError > 0 && (this._swingSd.frequency <= 0 || !isPositionPart)) {
			var impulse = this._impulses[3];
			var row = info.rows[info.numRows++];
			var _this = row.jacobian;
			_this.lin1X = 0;
			_this.lin1Y = 0;
			_this.lin1Z = 0;
			_this.lin2X = 0;
			_this.lin2Y = 0;
			_this.lin2Z = 0;
			_this.ang1X = 0;
			_this.ang1Y = 0;
			_this.ang1Z = 0;
			_this.ang2X = 0;
			_this.ang2Y = 0;
			_this.ang2Z = 0;
			row.rhs = 0;
			row.cfm = 0;
			row.minImpulse = 0;
			row.maxImpulse = 0;
			row.motorSpeed = 0;
			row.motorMaxImpulse = 0;
			row.impulse = null;
			row.impulse = impulse;
			this.setSolverInfoRowAngular(row,this.swingError,this.dummySwingLm,swingMass,this._swingSd,timeStep,isPositionPart);
			j = row.jacobian;
			j.ang1X = this.swingAxisX;
			j.ang1Y = this.swingAxisY;
			j.ang1Z = this.swingAxisZ;
			j.ang2X = this.swingAxisX;
			j.ang2Y = this.swingAxisY;
			j.ang2Z = this.swingAxisZ;
		}
		if(this._twistSd.frequency <= 0 || !isPositionPart) {
			var impulse = this._impulses[4];
			var row = info.rows[info.numRows++];
			var _this = row.jacobian;
			_this.lin1X = 0;
			_this.lin1Y = 0;
			_this.lin1Z = 0;
			_this.lin2X = 0;
			_this.lin2Y = 0;
			_this.lin2Z = 0;
			_this.ang1X = 0;
			_this.ang1Y = 0;
			_this.ang1Z = 0;
			_this.ang2X = 0;
			_this.ang2Y = 0;
			_this.ang2Z = 0;
			row.rhs = 0;
			row.cfm = 0;
			row.minImpulse = 0;
			row.maxImpulse = 0;
			row.motorSpeed = 0;
			row.motorMaxImpulse = 0;
			row.impulse = null;
			row.impulse = impulse;
			this.setSolverInfoRowAngular(row,this._twistAngle,this._twistLm,twistMass,this._twistSd,timeStep,isPositionPart);
			j = row.jacobian;
			j.ang1X = this.twistAxisX;
			j.ang1Y = this.twistAxisY;
			j.ang1Z = this.twistAxisZ;
			j.ang2X = this.twistAxisX;
			j.ang2Y = this.twistAxisY;
			j.ang2Z = this.twistAxisZ;
		}
	}
	,_syncAnchors: function() {
		oimo_dynamics_constraint_joint_Joint.prototype._syncAnchors.call(this);
		var axis1X;
		var axis1Y;
		var axis1Z;
		var axis2X;
		var axis2Y;
		var axis2Z;
		axis1X = this._basisX1X;
		axis1Y = this._basisX1Y;
		axis1Z = this._basisX1Z;
		axis2X = this._basisX2X;
		axis2Y = this._basisX2Y;
		axis2Z = this._basisX2Z;
		var basis1Mat00;
		var basis1Mat01;
		var basis1Mat02;
		var basis1Mat10;
		var basis1Mat11;
		var basis1Mat12;
		var basis1Mat20;
		var basis1Mat21;
		var basis1Mat22;
		basis1Mat00 = this._basisX1X;
		basis1Mat01 = this._basisY1X;
		basis1Mat02 = this._basisZ1X;
		basis1Mat10 = this._basisX1Y;
		basis1Mat11 = this._basisY1Y;
		basis1Mat12 = this._basisZ1Y;
		basis1Mat20 = this._basisX1Z;
		basis1Mat21 = this._basisY1Z;
		basis1Mat22 = this._basisZ1Z;
		var swingQX;
		var swingQY;
		var swingQZ;
		var swingQW;
		var swingM00;
		var swingM01;
		var swingM02;
		var swingM10;
		var swingM11;
		var swingM12;
		var swingM20;
		var swingM21;
		var swingM22;
		var swingVX;
		var swingVY;
		var swingVZ;
		var d = axis1X * axis2X + axis1Y * axis2Y + axis1Z * axis2Z;
		if(d < -0.999999999) {
			var vX;
			var vY;
			var vZ;
			var x1 = axis1X;
			var y1 = axis1Y;
			var z1 = axis1Z;
			var x2 = x1 * x1;
			var y2 = y1 * y1;
			var z2 = z1 * z1;
			var d1;
			if(x2 < y2) {
				if(x2 < z2) {
					d1 = 1 / Math.sqrt(y2 + z2);
					vX = 0;
					vY = z1 * d1;
					vZ = -y1 * d1;
				} else {
					d1 = 1 / Math.sqrt(x2 + y2);
					vX = y1 * d1;
					vY = -x1 * d1;
					vZ = 0;
				}
			} else if(y2 < z2) {
				d1 = 1 / Math.sqrt(z2 + x2);
				vX = -z1 * d1;
				vY = 0;
				vZ = x1 * d1;
			} else {
				d1 = 1 / Math.sqrt(x2 + y2);
				vX = y1 * d1;
				vY = -x1 * d1;
				vZ = 0;
			}
			swingQX = vX;
			swingQY = vY;
			swingQZ = vZ;
			swingQW = 0;
		} else {
			var cX;
			var cY;
			var cZ;
			cX = axis1Y * axis2Z - axis1Z * axis2Y;
			cY = axis1Z * axis2X - axis1X * axis2Z;
			cZ = axis1X * axis2Y - axis1Y * axis2X;
			var w = Math.sqrt((1 + d) * 0.5);
			d = 0.5 / w;
			cX *= d;
			cY *= d;
			cZ *= d;
			swingQX = cX;
			swingQY = cY;
			swingQZ = cZ;
			swingQW = w;
		}
		var x = swingQX;
		var y = swingQY;
		var z = swingQZ;
		var w = swingQW;
		var x2 = 2 * x;
		var y2 = 2 * y;
		var z2 = 2 * z;
		var xx = x * x2;
		var yy = y * y2;
		var zz = z * z2;
		var xy = x * y2;
		var yz = y * z2;
		var xz = x * z2;
		var wx = w * x2;
		var wy = w * y2;
		var wz = w * z2;
		swingM00 = 1 - yy - zz;
		swingM01 = xy - wz;
		swingM02 = xz + wy;
		swingM10 = xy + wz;
		swingM11 = 1 - xx - zz;
		swingM12 = yz - wx;
		swingM20 = xz - wy;
		swingM21 = yz + wx;
		swingM22 = 1 - xx - yy;
		this._swingAngle = (swingQW <= -1 ? 3.14159265358979 : swingQW >= 1 ? 0 : Math.acos(swingQW)) * 2;
		swingVX = swingQX;
		swingVY = swingQY;
		swingVZ = swingQZ;
		var basisY2In1X;
		var basisY2In1Y;
		var basisY2In1Z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = swingM00 * this._basisY2X + swingM10 * this._basisY2Y + swingM20 * this._basisY2Z;
		__tmp__Y = swingM01 * this._basisY2X + swingM11 * this._basisY2Y + swingM21 * this._basisY2Z;
		__tmp__Z = swingM02 * this._basisY2X + swingM12 * this._basisY2Y + swingM22 * this._basisY2Z;
		basisY2In1X = __tmp__X;
		basisY2In1Y = __tmp__Y;
		basisY2In1Z = __tmp__Z;
		this._twistAngle = Math.atan2(this._basisZ1X * basisY2In1X + this._basisZ1Y * basisY2In1Y + this._basisZ1Z * basisY2In1Z,this._basisY1X * basisY2In1X + this._basisY1Y * basisY2In1Y + this._basisY1Z * basisY2In1Z);
		this.twistAxisX = this._basisX1X + this._basisX2X;
		this.twistAxisY = this._basisX1Y + this._basisX2Y;
		this.twistAxisZ = this._basisX1Z + this._basisX2Z;
		var l = this.twistAxisX * this.twistAxisX + this.twistAxisY * this.twistAxisY + this.twistAxisZ * this.twistAxisZ;
		if(l > 0) {
			l = 1 / Math.sqrt(l);
		}
		this.twistAxisX *= l;
		this.twistAxisY *= l;
		this.twistAxisZ *= l;
		var invLen = Math.sqrt(swingVX * swingVX + swingVY * swingVY + swingVZ * swingVZ);
		if(invLen > 0) {
			invLen = 1 / invLen;
		}
		swingVX *= invLen * this._swingAngle;
		swingVY *= invLen * this._swingAngle;
		swingVZ *= invLen * this._swingAngle;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = basis1Mat00 * swingVX + basis1Mat10 * swingVY + basis1Mat20 * swingVZ;
		__tmp__Y = basis1Mat01 * swingVX + basis1Mat11 * swingVY + basis1Mat21 * swingVZ;
		__tmp__Z = basis1Mat02 * swingVX + basis1Mat12 * swingVY + basis1Mat22 * swingVZ;
		swingVX = __tmp__X;
		swingVY = __tmp__Y;
		swingVZ = __tmp__Z;
		var x = swingVY;
		var y = swingVZ;
		var a = this._maxSwingAngle1;
		var b = this._maxSwingAngle2;
		var invA2 = 1 / (a * a);
		var invB2 = 1 / (b * b);
		var w = x * x * invA2 + y * y * invB2;
		if(w == 0) {
			this.swingAxisX = 0;
			this.swingAxisY = 0;
			this.swingAxisZ = 0;
			this.swingError = 0;
		} else {
			var t = Math.sqrt(1 / w);
			var x0 = x * t;
			var y0 = y * t;
			var nx = x0 * invA2;
			var ny = y0 * invB2;
			invLen = 1 / Math.sqrt(nx * nx + ny * ny);
			nx *= invLen;
			ny *= invLen;
			var depth = (x - x0) * nx + (y - y0) * ny;
			if(depth > 0) {
				this.swingError = depth;
				this.swingAxisX = 0;
				this.swingAxisY = nx;
				this.swingAxisZ = ny;
				var __tmp__X;
				var __tmp__Y;
				var __tmp__Z;
				__tmp__X = basis1Mat00 * this.swingAxisX + basis1Mat01 * this.swingAxisY + basis1Mat02 * this.swingAxisZ;
				__tmp__Y = basis1Mat10 * this.swingAxisX + basis1Mat11 * this.swingAxisY + basis1Mat12 * this.swingAxisZ;
				__tmp__Z = basis1Mat20 * this.swingAxisX + basis1Mat21 * this.swingAxisY + basis1Mat22 * this.swingAxisZ;
				this.swingAxisX = __tmp__X;
				this.swingAxisY = __tmp__Y;
				this.swingAxisZ = __tmp__Z;
				var __tmp__X;
				var __tmp__Y;
				var __tmp__Z;
				__tmp__X = swingM00 * this.swingAxisX + swingM01 * this.swingAxisY + swingM02 * this.swingAxisZ;
				__tmp__Y = swingM10 * this.swingAxisX + swingM11 * this.swingAxisY + swingM12 * this.swingAxisZ;
				__tmp__Z = swingM20 * this.swingAxisX + swingM21 * this.swingAxisY + swingM22 * this.swingAxisZ;
				this.swingAxisX = __tmp__X;
				this.swingAxisY = __tmp__Y;
				this.swingAxisZ = __tmp__Z;
			} else {
				this.swingError = 0;
			}
		}
		this.linearErrorX = this._anchor2X - this._anchor1X;
		this.linearErrorY = this._anchor2Y - this._anchor1Y;
		this.linearErrorZ = this._anchor2Z - this._anchor1Z;
	}
	,_getVelocitySolverInfo: function(timeStep,info) {
		oimo_dynamics_constraint_joint_Joint.prototype._getVelocitySolverInfo.call(this,timeStep,info);
		this.getInfo(info,timeStep,false);
	}
	,_getPositionSolverInfo: function(info) {
		oimo_dynamics_constraint_joint_Joint.prototype._getPositionSolverInfo.call(this,info);
		this.getInfo(info,null,true);
	}
	,getAxis1: function() {
		var v = new oimo_common_Vec3();
		v.x = this._basisX1X;
		v.y = this._basisX1Y;
		v.z = this._basisX1Z;
		return v;
	}
	,getAxis2: function() {
		var v = new oimo_common_Vec3();
		v.x = this._basisX2X;
		v.y = this._basisX2Y;
		v.z = this._basisX2Z;
		return v;
	}
	,getAxis1To: function(axis) {
		axis.x = this._basisX1X;
		axis.y = this._basisX1Y;
		axis.z = this._basisX1Z;
	}
	,getAxis2To: function(axis) {
		axis.x = this._basisX2X;
		axis.y = this._basisX2Y;
		axis.z = this._basisX2Z;
	}
	,getLocalAxis1: function() {
		var v = new oimo_common_Vec3();
		v.x = this._localBasisX1X;
		v.y = this._localBasisX1Y;
		v.z = this._localBasisX1Z;
		return v;
	}
	,getLocalAxis2: function() {
		var v = new oimo_common_Vec3();
		v.x = this._localBasisX2X;
		v.y = this._localBasisX2Y;
		v.z = this._localBasisX2Z;
		return v;
	}
	,getLocalAxis1To: function(axis) {
		axis.x = this._localBasisX1X;
		axis.y = this._localBasisX1Y;
		axis.z = this._localBasisX1Z;
	}
	,getLocalAxis2To: function(axis) {
		axis.x = this._localBasisX2X;
		axis.y = this._localBasisX2Y;
		axis.z = this._localBasisX2Z;
	}
	,getTwistSpringDamper: function() {
		return this._twistSd;
	}
	,getTwistLimitMotor: function() {
		return this._twistLm;
	}
	,getSwingSpringDamper: function() {
		return this._swingSd;
	}
	,getSwingAxis: function() {
		var v = new oimo_common_Vec3();
		v.x = this.swingAxisX;
		v.y = this.swingAxisY;
		v.z = this.swingAxisZ;
		return v;
	}
	,getSwingAxisTo: function(axis) {
		axis.x = this.swingAxisX;
		axis.y = this.swingAxisY;
		axis.z = this.swingAxisZ;
	}
	,getSwingAngle: function() {
		return this._swingAngle;
	}
	,getTwistAngle: function() {
		return this._twistAngle;
	}
	,__class__: oimo_dynamics_constraint_joint_RagdollJoint
});
var oimo_dynamics_constraint_joint_RagdollJointConfig = function() {
	oimo_dynamics_constraint_joint_JointConfig.call(this);
	this.localTwistAxis1 = new oimo_common_Vec3(1,0,0);
	this.localTwistAxis2 = new oimo_common_Vec3(1,0,0);
	this.localSwingAxis1 = new oimo_common_Vec3(0,1,0);
	this.twistSpringDamper = new oimo_dynamics_constraint_joint_SpringDamper();
	this.swingSpringDamper = new oimo_dynamics_constraint_joint_SpringDamper();
	this.twistLimitMotor = new oimo_dynamics_constraint_joint_RotationalLimitMotor();
	this.maxSwingAngle1 = 3.14159265358979;
	this.maxSwingAngle2 = 3.14159265358979;
};
oimo_dynamics_constraint_joint_RagdollJointConfig.__name__ = true;
oimo_dynamics_constraint_joint_RagdollJointConfig.__super__ = oimo_dynamics_constraint_joint_JointConfig;
oimo_dynamics_constraint_joint_RagdollJointConfig.prototype = $extend(oimo_dynamics_constraint_joint_JointConfig.prototype,{
	init: function(rigidBody1,rigidBody2,worldAnchor,worldTwistAxis,worldSwingAxis) {
		this._init(rigidBody1,rigidBody2,worldAnchor);
		var localVector = this.localTwistAxis1;
		var vX;
		var vY;
		var vZ;
		vX = worldTwistAxis.x;
		vY = worldTwistAxis.y;
		vZ = worldTwistAxis.z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = rigidBody1._transform._rotation00 * vX + rigidBody1._transform._rotation10 * vY + rigidBody1._transform._rotation20 * vZ;
		__tmp__Y = rigidBody1._transform._rotation01 * vX + rigidBody1._transform._rotation11 * vY + rigidBody1._transform._rotation21 * vZ;
		__tmp__Z = rigidBody1._transform._rotation02 * vX + rigidBody1._transform._rotation12 * vY + rigidBody1._transform._rotation22 * vZ;
		vX = __tmp__X;
		vY = __tmp__Y;
		vZ = __tmp__Z;
		localVector.x = vX;
		localVector.y = vY;
		localVector.z = vZ;
		var localVector = this.localTwistAxis2;
		var vX;
		var vY;
		var vZ;
		vX = worldTwistAxis.x;
		vY = worldTwistAxis.y;
		vZ = worldTwistAxis.z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = rigidBody2._transform._rotation00 * vX + rigidBody2._transform._rotation10 * vY + rigidBody2._transform._rotation20 * vZ;
		__tmp__Y = rigidBody2._transform._rotation01 * vX + rigidBody2._transform._rotation11 * vY + rigidBody2._transform._rotation21 * vZ;
		__tmp__Z = rigidBody2._transform._rotation02 * vX + rigidBody2._transform._rotation12 * vY + rigidBody2._transform._rotation22 * vZ;
		vX = __tmp__X;
		vY = __tmp__Y;
		vZ = __tmp__Z;
		localVector.x = vX;
		localVector.y = vY;
		localVector.z = vZ;
		var localVector = this.localSwingAxis1;
		var vX;
		var vY;
		var vZ;
		vX = worldSwingAxis.x;
		vY = worldSwingAxis.y;
		vZ = worldSwingAxis.z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = rigidBody1._transform._rotation00 * vX + rigidBody1._transform._rotation10 * vY + rigidBody1._transform._rotation20 * vZ;
		__tmp__Y = rigidBody1._transform._rotation01 * vX + rigidBody1._transform._rotation11 * vY + rigidBody1._transform._rotation21 * vZ;
		__tmp__Z = rigidBody1._transform._rotation02 * vX + rigidBody1._transform._rotation12 * vY + rigidBody1._transform._rotation22 * vZ;
		vX = __tmp__X;
		vY = __tmp__Y;
		vZ = __tmp__Z;
		localVector.x = vX;
		localVector.y = vY;
		localVector.z = vZ;
		return this;
	}
	,__class__: oimo_dynamics_constraint_joint_RagdollJointConfig
});
var oimo_dynamics_constraint_joint_RevoluteJoint = function(config) {
	oimo_dynamics_constraint_joint_Joint.call(this,config,1);
	var v = config.localAxis1;
	this._localBasisX1X = v.x;
	this._localBasisX1Y = v.y;
	this._localBasisX1Z = v.z;
	var v = config.localAxis2;
	this._localBasisX2X = v.x;
	this._localBasisX2Y = v.y;
	this._localBasisX2Z = v.z;
	this.buildLocalBasesFromX();
	this.angle = 0;
	this.angularErrorY = 0;
	this.angularErrorZ = 0;
	this._basis = new oimo_dynamics_constraint_joint_BasisTracker(this);
	this._sd = config.springDamper.clone();
	this._lm = config.limitMotor.clone();
};
oimo_dynamics_constraint_joint_RevoluteJoint.__name__ = true;
oimo_dynamics_constraint_joint_RevoluteJoint.__super__ = oimo_dynamics_constraint_joint_Joint;
oimo_dynamics_constraint_joint_RevoluteJoint.prototype = $extend(oimo_dynamics_constraint_joint_Joint.prototype,{
	getInfo: function(info,timeStep,isPositionPart) {
		var erp = this.getErp(timeStep,isPositionPart);
		var linearRhsX;
		var linearRhsY;
		var linearRhsZ;
		linearRhsX = this.linearErrorX * erp;
		linearRhsY = this.linearErrorY * erp;
		linearRhsZ = this.linearErrorZ * erp;
		var angRhsY = this.angularErrorY * erp;
		var angRhsZ = this.angularErrorZ * erp;
		var crossR100;
		var crossR101;
		var crossR102;
		var crossR110;
		var crossR111;
		var crossR112;
		var crossR120;
		var crossR121;
		var crossR122;
		var crossR200;
		var crossR201;
		var crossR202;
		var crossR210;
		var crossR211;
		var crossR212;
		var crossR220;
		var crossR221;
		var crossR222;
		crossR100 = 0;
		crossR101 = -this._relativeAnchor1Z;
		crossR102 = this._relativeAnchor1Y;
		crossR110 = this._relativeAnchor1Z;
		crossR111 = 0;
		crossR112 = -this._relativeAnchor1X;
		crossR120 = -this._relativeAnchor1Y;
		crossR121 = this._relativeAnchor1X;
		crossR122 = 0;
		crossR200 = 0;
		crossR201 = -this._relativeAnchor2Z;
		crossR202 = this._relativeAnchor2Y;
		crossR210 = this._relativeAnchor2Z;
		crossR211 = 0;
		crossR212 = -this._relativeAnchor2X;
		crossR220 = -this._relativeAnchor2Y;
		crossR221 = this._relativeAnchor2X;
		crossR222 = 0;
		crossR100 = -crossR100;
		crossR101 = -crossR101;
		crossR102 = -crossR102;
		crossR110 = -crossR110;
		crossR111 = -crossR111;
		crossR112 = -crossR112;
		crossR120 = -crossR120;
		crossR121 = -crossR121;
		crossR122 = -crossR122;
		crossR200 = -crossR200;
		crossR201 = -crossR201;
		crossR202 = -crossR202;
		crossR210 = -crossR210;
		crossR211 = -crossR211;
		crossR212 = -crossR212;
		crossR220 = -crossR220;
		crossR221 = -crossR221;
		crossR222 = -crossR222;
		var motorMass = this.computeEffectiveInertiaMoment(this._basis.xX,this._basis.xY,this._basis.xZ);
		var impulse = this._impulses[0];
		var row = info.rows[info.numRows++];
		var _this = row.jacobian;
		_this.lin1X = 0;
		_this.lin1Y = 0;
		_this.lin1Z = 0;
		_this.lin2X = 0;
		_this.lin2Y = 0;
		_this.lin2Z = 0;
		_this.ang1X = 0;
		_this.ang1Y = 0;
		_this.ang1Z = 0;
		_this.ang2X = 0;
		_this.ang2Y = 0;
		_this.ang2Z = 0;
		row.rhs = 0;
		row.cfm = 0;
		row.minImpulse = 0;
		row.maxImpulse = 0;
		row.motorSpeed = 0;
		row.motorMaxImpulse = 0;
		row.impulse = null;
		row.impulse = impulse;
		row.rhs = linearRhsX;
		row.cfm = 0;
		row.minImpulse = -1e65536;
		row.maxImpulse = 1e65536;
		var j = row.jacobian;
		j.lin1X = 1;
		j.lin1Y = 0;
		j.lin1Z = 0;
		j.lin2X = 1;
		j.lin2Y = 0;
		j.lin2Z = 0;
		j.ang1X = crossR100;
		j.ang1Y = crossR101;
		j.ang1Z = crossR102;
		j.ang2X = crossR200;
		j.ang2Y = crossR201;
		j.ang2Z = crossR202;
		var impulse = this._impulses[1];
		var row = info.rows[info.numRows++];
		var _this = row.jacobian;
		_this.lin1X = 0;
		_this.lin1Y = 0;
		_this.lin1Z = 0;
		_this.lin2X = 0;
		_this.lin2Y = 0;
		_this.lin2Z = 0;
		_this.ang1X = 0;
		_this.ang1Y = 0;
		_this.ang1Z = 0;
		_this.ang2X = 0;
		_this.ang2Y = 0;
		_this.ang2Z = 0;
		row.rhs = 0;
		row.cfm = 0;
		row.minImpulse = 0;
		row.maxImpulse = 0;
		row.motorSpeed = 0;
		row.motorMaxImpulse = 0;
		row.impulse = null;
		row.impulse = impulse;
		row.rhs = linearRhsY;
		row.cfm = 0;
		row.minImpulse = -1e65536;
		row.maxImpulse = 1e65536;
		j = row.jacobian;
		j.lin1X = 0;
		j.lin1Y = 1;
		j.lin1Z = 0;
		j.lin2X = 0;
		j.lin2Y = 1;
		j.lin2Z = 0;
		j.ang1X = crossR110;
		j.ang1Y = crossR111;
		j.ang1Z = crossR112;
		j.ang2X = crossR210;
		j.ang2Y = crossR211;
		j.ang2Z = crossR212;
		var impulse = this._impulses[2];
		var row = info.rows[info.numRows++];
		var _this = row.jacobian;
		_this.lin1X = 0;
		_this.lin1Y = 0;
		_this.lin1Z = 0;
		_this.lin2X = 0;
		_this.lin2Y = 0;
		_this.lin2Z = 0;
		_this.ang1X = 0;
		_this.ang1Y = 0;
		_this.ang1Z = 0;
		_this.ang2X = 0;
		_this.ang2Y = 0;
		_this.ang2Z = 0;
		row.rhs = 0;
		row.cfm = 0;
		row.minImpulse = 0;
		row.maxImpulse = 0;
		row.motorSpeed = 0;
		row.motorMaxImpulse = 0;
		row.impulse = null;
		row.impulse = impulse;
		row.rhs = linearRhsZ;
		row.cfm = 0;
		row.minImpulse = -1e65536;
		row.maxImpulse = 1e65536;
		j = row.jacobian;
		j.lin1X = 0;
		j.lin1Y = 0;
		j.lin1Z = 1;
		j.lin2X = 0;
		j.lin2Y = 0;
		j.lin2Z = 1;
		j.ang1X = crossR120;
		j.ang1Y = crossR121;
		j.ang1Z = crossR122;
		j.ang2X = crossR220;
		j.ang2Y = crossR221;
		j.ang2Z = crossR222;
		if(this._sd.frequency <= 0 || !isPositionPart) {
			var impulse = this._impulses[3];
			var row = info.rows[info.numRows++];
			var _this = row.jacobian;
			_this.lin1X = 0;
			_this.lin1Y = 0;
			_this.lin1Z = 0;
			_this.lin2X = 0;
			_this.lin2Y = 0;
			_this.lin2Z = 0;
			_this.ang1X = 0;
			_this.ang1Y = 0;
			_this.ang1Z = 0;
			_this.ang2X = 0;
			_this.ang2Y = 0;
			_this.ang2Z = 0;
			row.rhs = 0;
			row.cfm = 0;
			row.minImpulse = 0;
			row.maxImpulse = 0;
			row.motorSpeed = 0;
			row.motorMaxImpulse = 0;
			row.impulse = null;
			row.impulse = impulse;
			this.setSolverInfoRowAngular(row,this.angle,this._lm,motorMass,this._sd,timeStep,isPositionPart);
			j = row.jacobian;
			j.ang1X = this._basis.xX;
			j.ang1Y = this._basis.xY;
			j.ang1Z = this._basis.xZ;
			j.ang2X = this._basis.xX;
			j.ang2Y = this._basis.xY;
			j.ang2Z = this._basis.xZ;
		}
		var impulse = this._impulses[4];
		var row = info.rows[info.numRows++];
		var _this = row.jacobian;
		_this.lin1X = 0;
		_this.lin1Y = 0;
		_this.lin1Z = 0;
		_this.lin2X = 0;
		_this.lin2Y = 0;
		_this.lin2Z = 0;
		_this.ang1X = 0;
		_this.ang1Y = 0;
		_this.ang1Z = 0;
		_this.ang2X = 0;
		_this.ang2Y = 0;
		_this.ang2Z = 0;
		row.rhs = 0;
		row.cfm = 0;
		row.minImpulse = 0;
		row.maxImpulse = 0;
		row.motorSpeed = 0;
		row.motorMaxImpulse = 0;
		row.impulse = null;
		row.impulse = impulse;
		row.rhs = angRhsY;
		row.cfm = 0;
		row.minImpulse = -1e65536;
		row.maxImpulse = 1e65536;
		j = row.jacobian;
		j.ang1X = this._basis.yX;
		j.ang1Y = this._basis.yY;
		j.ang1Z = this._basis.yZ;
		j.ang2X = this._basis.yX;
		j.ang2Y = this._basis.yY;
		j.ang2Z = this._basis.yZ;
		var impulse = this._impulses[5];
		var row = info.rows[info.numRows++];
		var _this = row.jacobian;
		_this.lin1X = 0;
		_this.lin1Y = 0;
		_this.lin1Z = 0;
		_this.lin2X = 0;
		_this.lin2Y = 0;
		_this.lin2Z = 0;
		_this.ang1X = 0;
		_this.ang1Y = 0;
		_this.ang1Z = 0;
		_this.ang2X = 0;
		_this.ang2Y = 0;
		_this.ang2Z = 0;
		row.rhs = 0;
		row.cfm = 0;
		row.minImpulse = 0;
		row.maxImpulse = 0;
		row.motorSpeed = 0;
		row.motorMaxImpulse = 0;
		row.impulse = null;
		row.impulse = impulse;
		row.rhs = angRhsZ;
		row.cfm = 0;
		row.minImpulse = -1e65536;
		row.maxImpulse = 1e65536;
		j = row.jacobian;
		j.ang1X = this._basis.zX;
		j.ang1Y = this._basis.zY;
		j.ang1Z = this._basis.zZ;
		j.ang2X = this._basis.zX;
		j.ang2Y = this._basis.zY;
		j.ang2Z = this._basis.zZ;
	}
	,_syncAnchors: function() {
		oimo_dynamics_constraint_joint_Joint.prototype._syncAnchors.call(this);
		var _this = this._basis;
		var invM1 = _this.joint._b1._invMass;
		var invM2 = _this.joint._b2._invMass;
		var qX;
		var qY;
		var qZ;
		var qW;
		var idQX;
		var idQY;
		var idQZ;
		var idQW;
		var slerpQX;
		var slerpQY;
		var slerpQZ;
		var slerpQW;
		var slerpM00;
		var slerpM01;
		var slerpM02;
		var slerpM10;
		var slerpM11;
		var slerpM12;
		var slerpM20;
		var slerpM21;
		var slerpM22;
		var newXX;
		var newXY;
		var newXZ;
		var newYX;
		var newYY;
		var newYZ;
		var newZX;
		var newZY;
		var newZZ;
		var prevXX;
		var prevXY;
		var prevXZ;
		var prevYX;
		var prevYY;
		var prevYZ;
		var d = _this.joint._basisX1X * _this.joint._basisX2X + _this.joint._basisX1Y * _this.joint._basisX2Y + _this.joint._basisX1Z * _this.joint._basisX2Z;
		if(d < -0.999999999) {
			var vX;
			var vY;
			var vZ;
			var x1 = _this.joint._basisX1X;
			var y1 = _this.joint._basisX1Y;
			var z1 = _this.joint._basisX1Z;
			var x2 = x1 * x1;
			var y2 = y1 * y1;
			var z2 = z1 * z1;
			var d1;
			if(x2 < y2) {
				if(x2 < z2) {
					d1 = 1 / Math.sqrt(y2 + z2);
					vX = 0;
					vY = z1 * d1;
					vZ = -y1 * d1;
				} else {
					d1 = 1 / Math.sqrt(x2 + y2);
					vX = y1 * d1;
					vY = -x1 * d1;
					vZ = 0;
				}
			} else if(y2 < z2) {
				d1 = 1 / Math.sqrt(z2 + x2);
				vX = -z1 * d1;
				vY = 0;
				vZ = x1 * d1;
			} else {
				d1 = 1 / Math.sqrt(x2 + y2);
				vX = y1 * d1;
				vY = -x1 * d1;
				vZ = 0;
			}
			qX = vX;
			qY = vY;
			qZ = vZ;
			qW = 0;
		} else {
			var cX;
			var cY;
			var cZ;
			cX = _this.joint._basisX1Y * _this.joint._basisX2Z - _this.joint._basisX1Z * _this.joint._basisX2Y;
			cY = _this.joint._basisX1Z * _this.joint._basisX2X - _this.joint._basisX1X * _this.joint._basisX2Z;
			cZ = _this.joint._basisX1X * _this.joint._basisX2Y - _this.joint._basisX1Y * _this.joint._basisX2X;
			var w = Math.sqrt((1 + d) * 0.5);
			d = 0.5 / w;
			cX *= d;
			cY *= d;
			cZ *= d;
			qX = cX;
			qY = cY;
			qZ = cZ;
			qW = w;
		}
		idQX = 0;
		idQY = 0;
		idQZ = 0;
		idQW = 1;
		var q1X;
		var q1Y;
		var q1Z;
		var q1W;
		var q2X;
		var q2Y;
		var q2Z;
		var q2W;
		q1X = idQX;
		q1Y = idQY;
		q1Z = idQZ;
		q1W = idQW;
		q2X = qX;
		q2Y = qY;
		q2Z = qZ;
		q2W = qW;
		var d = q1X * q2X + q1Y * q2Y + q1Z * q2Z + q1W * q2W;
		if(d < 0) {
			d = -d;
			q2X = -q2X;
			q2Y = -q2Y;
			q2Z = -q2Z;
			q2W = -q2W;
		}
		if(d > 0.999999) {
			var dqX;
			var dqY;
			var dqZ;
			var dqW;
			dqX = q2X - q1X;
			dqY = q2Y - q1Y;
			dqZ = q2Z - q1Z;
			dqW = q2W - q1W;
			q2X = q1X + dqX * (invM1 / (invM1 + invM2));
			q2Y = q1Y + dqY * (invM1 / (invM1 + invM2));
			q2Z = q1Z + dqZ * (invM1 / (invM1 + invM2));
			q2W = q1W + dqW * (invM1 / (invM1 + invM2));
			var l = q2X * q2X + q2Y * q2Y + q2Z * q2Z + q2W * q2W;
			if(l > 1e-32) {
				l = 1 / Math.sqrt(l);
			}
			slerpQX = q2X * l;
			slerpQY = q2Y * l;
			slerpQZ = q2Z * l;
			slerpQW = q2W * l;
		} else {
			var theta = invM1 / (invM1 + invM2) * Math.acos(d);
			q2X += q1X * -d;
			q2Y += q1Y * -d;
			q2Z += q1Z * -d;
			q2W += q1W * -d;
			var l = q2X * q2X + q2Y * q2Y + q2Z * q2Z + q2W * q2W;
			if(l > 1e-32) {
				l = 1 / Math.sqrt(l);
			}
			q2X *= l;
			q2Y *= l;
			q2Z *= l;
			q2W *= l;
			var sin = Math.sin(theta);
			var cos = Math.cos(theta);
			q1X *= cos;
			q1Y *= cos;
			q1Z *= cos;
			q1W *= cos;
			slerpQX = q1X + q2X * sin;
			slerpQY = q1Y + q2Y * sin;
			slerpQZ = q1Z + q2Z * sin;
			slerpQW = q1W + q2W * sin;
		}
		var x = slerpQX;
		var y = slerpQY;
		var z = slerpQZ;
		var w = slerpQW;
		var x2 = 2 * x;
		var y2 = 2 * y;
		var z2 = 2 * z;
		var xx = x * x2;
		var yy = y * y2;
		var zz = z * z2;
		var xy = x * y2;
		var yz = y * z2;
		var xz = x * z2;
		var wx = w * x2;
		var wy = w * y2;
		var wz = w * z2;
		slerpM00 = 1 - yy - zz;
		slerpM01 = xy - wz;
		slerpM02 = xz + wy;
		slerpM10 = xy + wz;
		slerpM11 = 1 - xx - zz;
		slerpM12 = yz - wx;
		slerpM20 = xz - wy;
		slerpM21 = yz + wx;
		slerpM22 = 1 - xx - yy;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = slerpM00 * _this.joint._basisX1X + slerpM01 * _this.joint._basisX1Y + slerpM02 * _this.joint._basisX1Z;
		__tmp__Y = slerpM10 * _this.joint._basisX1X + slerpM11 * _this.joint._basisX1Y + slerpM12 * _this.joint._basisX1Z;
		__tmp__Z = slerpM20 * _this.joint._basisX1X + slerpM21 * _this.joint._basisX1Y + slerpM22 * _this.joint._basisX1Z;
		newXX = __tmp__X;
		newXY = __tmp__Y;
		newXZ = __tmp__Z;
		prevXX = _this.xX;
		prevXY = _this.xY;
		prevXZ = _this.xZ;
		prevYX = _this.yX;
		prevYY = _this.yY;
		prevYZ = _this.yZ;
		var d = prevXX * newXX + prevXY * newXY + prevXZ * newXZ;
		if(d < -0.999999999) {
			var vX;
			var vY;
			var vZ;
			var x1 = prevXX;
			var y1 = prevXY;
			var z1 = prevXZ;
			var x2 = x1 * x1;
			var y2 = y1 * y1;
			var z2 = z1 * z1;
			var d1;
			if(x2 < y2) {
				if(x2 < z2) {
					d1 = 1 / Math.sqrt(y2 + z2);
					vX = 0;
					vY = z1 * d1;
					vZ = -y1 * d1;
				} else {
					d1 = 1 / Math.sqrt(x2 + y2);
					vX = y1 * d1;
					vY = -x1 * d1;
					vZ = 0;
				}
			} else if(y2 < z2) {
				d1 = 1 / Math.sqrt(z2 + x2);
				vX = -z1 * d1;
				vY = 0;
				vZ = x1 * d1;
			} else {
				d1 = 1 / Math.sqrt(x2 + y2);
				vX = y1 * d1;
				vY = -x1 * d1;
				vZ = 0;
			}
			slerpQX = vX;
			slerpQY = vY;
			slerpQZ = vZ;
			slerpQW = 0;
		} else {
			var cX;
			var cY;
			var cZ;
			cX = prevXY * newXZ - prevXZ * newXY;
			cY = prevXZ * newXX - prevXX * newXZ;
			cZ = prevXX * newXY - prevXY * newXX;
			var w = Math.sqrt((1 + d) * 0.5);
			d = 0.5 / w;
			cX *= d;
			cY *= d;
			cZ *= d;
			slerpQX = cX;
			slerpQY = cY;
			slerpQZ = cZ;
			slerpQW = w;
		}
		var x = slerpQX;
		var y = slerpQY;
		var z = slerpQZ;
		var w = slerpQW;
		var x2 = 2 * x;
		var y2 = 2 * y;
		var z2 = 2 * z;
		var xx = x * x2;
		var yy = y * y2;
		var zz = z * z2;
		var xy = x * y2;
		var yz = y * z2;
		var xz = x * z2;
		var wx = w * x2;
		var wy = w * y2;
		var wz = w * z2;
		slerpM00 = 1 - yy - zz;
		slerpM01 = xy - wz;
		slerpM02 = xz + wy;
		slerpM10 = xy + wz;
		slerpM11 = 1 - xx - zz;
		slerpM12 = yz - wx;
		slerpM20 = xz - wy;
		slerpM21 = yz + wx;
		slerpM22 = 1 - xx - yy;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = slerpM00 * prevYX + slerpM01 * prevYY + slerpM02 * prevYZ;
		__tmp__Y = slerpM10 * prevYX + slerpM11 * prevYY + slerpM12 * prevYZ;
		__tmp__Z = slerpM20 * prevYX + slerpM21 * prevYY + slerpM22 * prevYZ;
		newYX = __tmp__X;
		newYY = __tmp__Y;
		newYZ = __tmp__Z;
		newZX = newXY * newYZ - newXZ * newYY;
		newZY = newXZ * newYX - newXX * newYZ;
		newZZ = newXX * newYY - newXY * newYX;
		if(newZX * newZX + newZY * newZY + newZZ * newZZ > 1e-6) {
			var l = newZX * newZX + newZY * newZY + newZZ * newZZ;
			if(l > 0) {
				l = 1 / Math.sqrt(l);
			}
			newZX *= l;
			newZY *= l;
			newZZ *= l;
		} else {
			var x1 = newXX;
			var y1 = newXY;
			var z1 = newXZ;
			var x2 = x1 * x1;
			var y2 = y1 * y1;
			var z2 = z1 * z1;
			var d;
			if(x2 < y2) {
				if(x2 < z2) {
					d = 1 / Math.sqrt(y2 + z2);
					newZX = 0;
					newZY = z1 * d;
					newZZ = -y1 * d;
				} else {
					d = 1 / Math.sqrt(x2 + y2);
					newZX = y1 * d;
					newZY = -x1 * d;
					newZZ = 0;
				}
			} else if(y2 < z2) {
				d = 1 / Math.sqrt(z2 + x2);
				newZX = -z1 * d;
				newZY = 0;
				newZZ = x1 * d;
			} else {
				d = 1 / Math.sqrt(x2 + y2);
				newZX = y1 * d;
				newZY = -x1 * d;
				newZZ = 0;
			}
		}
		newYX = newZY * newXZ - newZZ * newXY;
		newYY = newZZ * newXX - newZX * newXZ;
		newYZ = newZX * newXY - newZY * newXX;
		_this.xX = newXX;
		_this.xY = newXY;
		_this.xZ = newXZ;
		_this.yX = newYX;
		_this.yY = newYY;
		_this.yZ = newYZ;
		_this.zX = newZX;
		_this.zY = newZY;
		_this.zZ = newZZ;
		var angErrorX;
		var angErrorY;
		var angErrorZ;
		angErrorX = this._basisX1Y * this._basisX2Z - this._basisX1Z * this._basisX2Y;
		angErrorY = this._basisX1Z * this._basisX2X - this._basisX1X * this._basisX2Z;
		angErrorZ = this._basisX1X * this._basisX2Y - this._basisX1Y * this._basisX2X;
		var cos = this._basisX1X * this._basisX2X + this._basisX1Y * this._basisX2Y + this._basisX1Z * this._basisX2Z;
		var theta = cos <= -1 ? 3.14159265358979 : cos >= 1 ? 0 : Math.acos(cos);
		var l = angErrorX * angErrorX + angErrorY * angErrorY + angErrorZ * angErrorZ;
		if(l > 0) {
			l = 1 / Math.sqrt(l);
		}
		angErrorX *= l;
		angErrorY *= l;
		angErrorZ *= l;
		angErrorX *= theta;
		angErrorY *= theta;
		angErrorZ *= theta;
		this.angularErrorY = angErrorX * this._basis.yX + angErrorY * this._basis.yY + angErrorZ * this._basis.yZ;
		this.angularErrorZ = angErrorX * this._basis.zX + angErrorY * this._basis.zY + angErrorZ * this._basis.zZ;
		var perpCrossX;
		var perpCrossY;
		var perpCrossZ;
		perpCrossX = this._basisY1Y * this._basisY2Z - this._basisY1Z * this._basisY2Y;
		perpCrossY = this._basisY1Z * this._basisY2X - this._basisY1X * this._basisY2Z;
		perpCrossZ = this._basisY1X * this._basisY2Y - this._basisY1Y * this._basisY2X;
		cos = this._basisY1X * this._basisY2X + this._basisY1Y * this._basisY2Y + this._basisY1Z * this._basisY2Z;
		this.angle = cos <= -1 ? 3.14159265358979 : cos >= 1 ? 0 : Math.acos(cos);
		if(perpCrossX * this._basis.xX + perpCrossY * this._basis.xY + perpCrossZ * this._basis.xZ < 0) {
			this.angle = -this.angle;
		}
		this.linearErrorX = this._anchor2X - this._anchor1X;
		this.linearErrorY = this._anchor2Y - this._anchor1Y;
		this.linearErrorZ = this._anchor2Z - this._anchor1Z;
	}
	,_getVelocitySolverInfo: function(timeStep,info) {
		oimo_dynamics_constraint_joint_Joint.prototype._getVelocitySolverInfo.call(this,timeStep,info);
		this.getInfo(info,timeStep,false);
	}
	,_getPositionSolverInfo: function(info) {
		oimo_dynamics_constraint_joint_Joint.prototype._getPositionSolverInfo.call(this,info);
		this.getInfo(info,null,true);
	}
	,getAxis1: function() {
		var v = new oimo_common_Vec3();
		v.x = this._basisX1X;
		v.y = this._basisX1Y;
		v.z = this._basisX1Z;
		return v;
	}
	,getAxis2: function() {
		var v = new oimo_common_Vec3();
		v.x = this._basisX2X;
		v.y = this._basisX2Y;
		v.z = this._basisX2Z;
		return v;
	}
	,getAxis1To: function(axis) {
		axis.x = this._basisX1X;
		axis.y = this._basisX1Y;
		axis.z = this._basisX1Z;
	}
	,getAxis2To: function(axis) {
		axis.x = this._basisX2X;
		axis.y = this._basisX2Y;
		axis.z = this._basisX2Z;
	}
	,getLocalAxis1: function() {
		var v = new oimo_common_Vec3();
		v.x = this._localBasisX1X;
		v.y = this._localBasisX1Y;
		v.z = this._localBasisX1Z;
		return v;
	}
	,getLocalAxis2: function() {
		var v = new oimo_common_Vec3();
		v.x = this._localBasisX2X;
		v.y = this._localBasisX2Y;
		v.z = this._localBasisX2Z;
		return v;
	}
	,getLocalAxis1To: function(axis) {
		axis.x = this._localBasisX1X;
		axis.y = this._localBasisX1Y;
		axis.z = this._localBasisX1Z;
	}
	,getLocalAxis2To: function(axis) {
		axis.x = this._localBasisX2X;
		axis.y = this._localBasisX2Y;
		axis.z = this._localBasisX2Z;
	}
	,getSpringDamper: function() {
		return this._sd;
	}
	,getLimitMotor: function() {
		return this._lm;
	}
	,getAngle: function() {
		return this.angle;
	}
	,__class__: oimo_dynamics_constraint_joint_RevoluteJoint
});
var oimo_dynamics_constraint_joint_RevoluteJointConfig = function() {
	oimo_dynamics_constraint_joint_JointConfig.call(this);
	this.localAxis1 = new oimo_common_Vec3(1,0,0);
	this.localAxis2 = new oimo_common_Vec3(1,0,0);
	this.springDamper = new oimo_dynamics_constraint_joint_SpringDamper();
	this.limitMotor = new oimo_dynamics_constraint_joint_RotationalLimitMotor();
};
oimo_dynamics_constraint_joint_RevoluteJointConfig.__name__ = true;
oimo_dynamics_constraint_joint_RevoluteJointConfig.__super__ = oimo_dynamics_constraint_joint_JointConfig;
oimo_dynamics_constraint_joint_RevoluteJointConfig.prototype = $extend(oimo_dynamics_constraint_joint_JointConfig.prototype,{
	init: function(rigidBody1,rigidBody2,worldAnchor,worldAxis) {
		this._init(rigidBody1,rigidBody2,worldAnchor);
		var localVector = this.localAxis1;
		var vX;
		var vY;
		var vZ;
		vX = worldAxis.x;
		vY = worldAxis.y;
		vZ = worldAxis.z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = rigidBody1._transform._rotation00 * vX + rigidBody1._transform._rotation10 * vY + rigidBody1._transform._rotation20 * vZ;
		__tmp__Y = rigidBody1._transform._rotation01 * vX + rigidBody1._transform._rotation11 * vY + rigidBody1._transform._rotation21 * vZ;
		__tmp__Z = rigidBody1._transform._rotation02 * vX + rigidBody1._transform._rotation12 * vY + rigidBody1._transform._rotation22 * vZ;
		vX = __tmp__X;
		vY = __tmp__Y;
		vZ = __tmp__Z;
		localVector.x = vX;
		localVector.y = vY;
		localVector.z = vZ;
		var localVector = this.localAxis2;
		var vX;
		var vY;
		var vZ;
		vX = worldAxis.x;
		vY = worldAxis.y;
		vZ = worldAxis.z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = rigidBody2._transform._rotation00 * vX + rigidBody2._transform._rotation10 * vY + rigidBody2._transform._rotation20 * vZ;
		__tmp__Y = rigidBody2._transform._rotation01 * vX + rigidBody2._transform._rotation11 * vY + rigidBody2._transform._rotation21 * vZ;
		__tmp__Z = rigidBody2._transform._rotation02 * vX + rigidBody2._transform._rotation12 * vY + rigidBody2._transform._rotation22 * vZ;
		vX = __tmp__X;
		vY = __tmp__Y;
		vZ = __tmp__Z;
		localVector.x = vX;
		localVector.y = vY;
		localVector.z = vZ;
		return this;
	}
	,__class__: oimo_dynamics_constraint_joint_RevoluteJointConfig
});
var oimo_dynamics_constraint_joint_RotationalLimitMotor = function() {
	this.lowerLimit = 1;
	this.upperLimit = 0;
	this.motorTorque = 0;
};
oimo_dynamics_constraint_joint_RotationalLimitMotor.__name__ = true;
oimo_dynamics_constraint_joint_RotationalLimitMotor.prototype = {
	setLimits: function(lower,upper) {
		this.lowerLimit = lower;
		this.upperLimit = upper;
		return this;
	}
	,setMotor: function(speed,torque) {
		this.motorSpeed = speed;
		this.motorTorque = torque;
		return this;
	}
	,clone: function() {
		var lm = new oimo_dynamics_constraint_joint_RotationalLimitMotor();
		lm.lowerLimit = this.lowerLimit;
		lm.upperLimit = this.upperLimit;
		lm.motorSpeed = this.motorSpeed;
		lm.motorTorque = this.motorTorque;
		return lm;
	}
	,__class__: oimo_dynamics_constraint_joint_RotationalLimitMotor
};
var oimo_dynamics_constraint_joint_SphericalJoint = function(config) {
	oimo_dynamics_constraint_joint_Joint.call(this,config,0);
	this._sd = config.springDamper.clone();
};
oimo_dynamics_constraint_joint_SphericalJoint.__name__ = true;
oimo_dynamics_constraint_joint_SphericalJoint.__super__ = oimo_dynamics_constraint_joint_Joint;
oimo_dynamics_constraint_joint_SphericalJoint.prototype = $extend(oimo_dynamics_constraint_joint_Joint.prototype,{
	getInfo: function(info,timeStep,isPositionPart) {
		if(this._sd.frequency > 0 && isPositionPart) {
			return;
		}
		var errorX;
		var errorY;
		var errorZ;
		errorX = this._anchor2X - this._anchor1X;
		errorY = this._anchor2Y - this._anchor1Y;
		errorZ = this._anchor2Z - this._anchor1Z;
		var cfm;
		var erp;
		if(this._sd.frequency > 0) {
			var omega = 6.28318530717958 * this._sd.frequency;
			var zeta = this._sd.dampingRatio;
			if(zeta < oimo_common_Setting.minSpringDamperDampingRatio) {
				zeta = oimo_common_Setting.minSpringDamperDampingRatio;
			}
			var h = timeStep.dt;
			var c = 2 * zeta * omega;
			var k = omega * omega;
			if(this._sd.useSymplecticEuler) {
				cfm = 1 / (h * c);
				erp = k / c;
			} else {
				cfm = 1 / (h * (h * k + c));
				erp = k / (h * k + c);
			}
			cfm *= this._b1._invMass + this._b2._invMass;
		} else {
			cfm = 0;
			erp = this.getErp(timeStep,isPositionPart);
		}
		var linearRhsX;
		var linearRhsY;
		var linearRhsZ;
		linearRhsX = errorX * erp;
		linearRhsY = errorY * erp;
		linearRhsZ = errorZ * erp;
		var crossR100;
		var crossR101;
		var crossR102;
		var crossR110;
		var crossR111;
		var crossR112;
		var crossR120;
		var crossR121;
		var crossR122;
		var crossR200;
		var crossR201;
		var crossR202;
		var crossR210;
		var crossR211;
		var crossR212;
		var crossR220;
		var crossR221;
		var crossR222;
		crossR100 = 0;
		crossR101 = -this._relativeAnchor1Z;
		crossR102 = this._relativeAnchor1Y;
		crossR110 = this._relativeAnchor1Z;
		crossR111 = 0;
		crossR112 = -this._relativeAnchor1X;
		crossR120 = -this._relativeAnchor1Y;
		crossR121 = this._relativeAnchor1X;
		crossR122 = 0;
		crossR200 = 0;
		crossR201 = -this._relativeAnchor2Z;
		crossR202 = this._relativeAnchor2Y;
		crossR210 = this._relativeAnchor2Z;
		crossR211 = 0;
		crossR212 = -this._relativeAnchor2X;
		crossR220 = -this._relativeAnchor2Y;
		crossR221 = this._relativeAnchor2X;
		crossR222 = 0;
		crossR100 = -crossR100;
		crossR101 = -crossR101;
		crossR102 = -crossR102;
		crossR110 = -crossR110;
		crossR111 = -crossR111;
		crossR112 = -crossR112;
		crossR120 = -crossR120;
		crossR121 = -crossR121;
		crossR122 = -crossR122;
		crossR200 = -crossR200;
		crossR201 = -crossR201;
		crossR202 = -crossR202;
		crossR210 = -crossR210;
		crossR211 = -crossR211;
		crossR212 = -crossR212;
		crossR220 = -crossR220;
		crossR221 = -crossR221;
		crossR222 = -crossR222;
		var impulse = this._impulses[0];
		var row = info.rows[info.numRows++];
		var _this = row.jacobian;
		_this.lin1X = 0;
		_this.lin1Y = 0;
		_this.lin1Z = 0;
		_this.lin2X = 0;
		_this.lin2Y = 0;
		_this.lin2Z = 0;
		_this.ang1X = 0;
		_this.ang1Y = 0;
		_this.ang1Z = 0;
		_this.ang2X = 0;
		_this.ang2Y = 0;
		_this.ang2Z = 0;
		row.rhs = 0;
		row.cfm = 0;
		row.minImpulse = 0;
		row.maxImpulse = 0;
		row.motorSpeed = 0;
		row.motorMaxImpulse = 0;
		row.impulse = null;
		row.impulse = impulse;
		row.rhs = linearRhsX;
		row.cfm = cfm;
		row.minImpulse = -1e65536;
		row.maxImpulse = 1e65536;
		var j = row.jacobian;
		j.lin1X = 1;
		j.lin1Y = 0;
		j.lin1Z = 0;
		j.lin2X = 1;
		j.lin2Y = 0;
		j.lin2Z = 0;
		j.ang1X = crossR100;
		j.ang1Y = crossR101;
		j.ang1Z = crossR102;
		j.ang2X = crossR200;
		j.ang2Y = crossR201;
		j.ang2Z = crossR202;
		var impulse = this._impulses[1];
		var row = info.rows[info.numRows++];
		var _this = row.jacobian;
		_this.lin1X = 0;
		_this.lin1Y = 0;
		_this.lin1Z = 0;
		_this.lin2X = 0;
		_this.lin2Y = 0;
		_this.lin2Z = 0;
		_this.ang1X = 0;
		_this.ang1Y = 0;
		_this.ang1Z = 0;
		_this.ang2X = 0;
		_this.ang2Y = 0;
		_this.ang2Z = 0;
		row.rhs = 0;
		row.cfm = 0;
		row.minImpulse = 0;
		row.maxImpulse = 0;
		row.motorSpeed = 0;
		row.motorMaxImpulse = 0;
		row.impulse = null;
		row.impulse = impulse;
		row.rhs = linearRhsY;
		row.cfm = cfm;
		row.minImpulse = -1e65536;
		row.maxImpulse = 1e65536;
		j = row.jacobian;
		j.lin1X = 0;
		j.lin1Y = 1;
		j.lin1Z = 0;
		j.lin2X = 0;
		j.lin2Y = 1;
		j.lin2Z = 0;
		j.ang1X = crossR110;
		j.ang1Y = crossR111;
		j.ang1Z = crossR112;
		j.ang2X = crossR210;
		j.ang2Y = crossR211;
		j.ang2Z = crossR212;
		var impulse = this._impulses[2];
		var row = info.rows[info.numRows++];
		var _this = row.jacobian;
		_this.lin1X = 0;
		_this.lin1Y = 0;
		_this.lin1Z = 0;
		_this.lin2X = 0;
		_this.lin2Y = 0;
		_this.lin2Z = 0;
		_this.ang1X = 0;
		_this.ang1Y = 0;
		_this.ang1Z = 0;
		_this.ang2X = 0;
		_this.ang2Y = 0;
		_this.ang2Z = 0;
		row.rhs = 0;
		row.cfm = 0;
		row.minImpulse = 0;
		row.maxImpulse = 0;
		row.motorSpeed = 0;
		row.motorMaxImpulse = 0;
		row.impulse = null;
		row.impulse = impulse;
		row.rhs = linearRhsZ;
		row.cfm = cfm;
		row.minImpulse = -1e65536;
		row.maxImpulse = 1e65536;
		j = row.jacobian;
		j.lin1X = 0;
		j.lin1Y = 0;
		j.lin1Z = 1;
		j.lin2X = 0;
		j.lin2Y = 0;
		j.lin2Z = 1;
		j.ang1X = crossR120;
		j.ang1Y = crossR121;
		j.ang1Z = crossR122;
		j.ang2X = crossR220;
		j.ang2Y = crossR221;
		j.ang2Z = crossR222;
	}
	,_getVelocitySolverInfo: function(timeStep,info) {
		oimo_dynamics_constraint_joint_Joint.prototype._getVelocitySolverInfo.call(this,timeStep,info);
		this.getInfo(info,timeStep,false);
	}
	,_getPositionSolverInfo: function(info) {
		oimo_dynamics_constraint_joint_Joint.prototype._getPositionSolverInfo.call(this,info);
		this.getInfo(info,null,true);
	}
	,getSpringDamper: function() {
		return this._sd;
	}
	,__class__: oimo_dynamics_constraint_joint_SphericalJoint
});
var oimo_dynamics_constraint_joint_SphericalJointConfig = function() {
	oimo_dynamics_constraint_joint_JointConfig.call(this);
	this.springDamper = new oimo_dynamics_constraint_joint_SpringDamper();
};
oimo_dynamics_constraint_joint_SphericalJointConfig.__name__ = true;
oimo_dynamics_constraint_joint_SphericalJointConfig.__super__ = oimo_dynamics_constraint_joint_JointConfig;
oimo_dynamics_constraint_joint_SphericalJointConfig.prototype = $extend(oimo_dynamics_constraint_joint_JointConfig.prototype,{
	init: function(rigidBody1,rigidBody2,worldAnchor) {
		this._init(rigidBody1,rigidBody2,worldAnchor);
		return this;
	}
	,__class__: oimo_dynamics_constraint_joint_SphericalJointConfig
});
var oimo_dynamics_constraint_joint_SpringDamper = function() {
	this.frequency = 0;
	this.dampingRatio = 0;
	this.useSymplecticEuler = false;
};
oimo_dynamics_constraint_joint_SpringDamper.__name__ = true;
oimo_dynamics_constraint_joint_SpringDamper.prototype = {
	setSpring: function(frequency,dampingRatio) {
		this.frequency = frequency;
		this.dampingRatio = dampingRatio;
		return this;
	}
	,setSymplecticEuler: function(useSymplecticEuler) {
		this.useSymplecticEuler = useSymplecticEuler;
		return this;
	}
	,clone: function() {
		var sd = new oimo_dynamics_constraint_joint_SpringDamper();
		sd.frequency = this.frequency;
		sd.dampingRatio = this.dampingRatio;
		sd.useSymplecticEuler = this.useSymplecticEuler;
		return sd;
	}
	,__class__: oimo_dynamics_constraint_joint_SpringDamper
};
var oimo_dynamics_constraint_joint_TranslationalLimitMotor = function() {
	this.lowerLimit = 1;
	this.upperLimit = 0;
	this.motorForce = 0;
};
oimo_dynamics_constraint_joint_TranslationalLimitMotor.__name__ = true;
oimo_dynamics_constraint_joint_TranslationalLimitMotor.prototype = {
	setLimits: function(lower,upper) {
		this.lowerLimit = lower;
		this.upperLimit = upper;
		return this;
	}
	,setMotor: function(speed,force) {
		this.motorSpeed = speed;
		this.motorForce = force;
		return this;
	}
	,clone: function() {
		var lm = new oimo_dynamics_constraint_joint_TranslationalLimitMotor();
		lm.lowerLimit = this.lowerLimit;
		lm.upperLimit = this.upperLimit;
		lm.motorSpeed = this.motorSpeed;
		lm.motorForce = this.motorForce;
		return lm;
	}
	,__class__: oimo_dynamics_constraint_joint_TranslationalLimitMotor
};
var oimo_dynamics_constraint_joint_UniversalJoint = function(config) {
	oimo_dynamics_constraint_joint_Joint.call(this,config,oimo_dynamics_constraint_joint_JointType.UNIVERSAL);
	var v = config.localAxis1;
	this._localBasisX1X = v.x;
	this._localBasisX1Y = v.y;
	this._localBasisX1Z = v.z;
	var v = config.localAxis2;
	this._localBasisZ2X = v.x;
	this._localBasisZ2Y = v.y;
	this._localBasisZ2Z = v.z;
	this.buildLocalBasesFromX1Z2();
	this._angleX = 0;
	this._angleY = 0;
	this._angleZ = 0;
	this.xSingular = false;
	this.ySingular = false;
	this.zSingular = false;
	this._sd1 = config.springDamper1.clone();
	this._sd2 = config.springDamper2.clone();
	this._lm1 = config.limitMotor1.clone();
	this._lm2 = config.limitMotor2.clone();
};
oimo_dynamics_constraint_joint_UniversalJoint.__name__ = true;
oimo_dynamics_constraint_joint_UniversalJoint.__super__ = oimo_dynamics_constraint_joint_Joint;
oimo_dynamics_constraint_joint_UniversalJoint.prototype = $extend(oimo_dynamics_constraint_joint_Joint.prototype,{
	getInfo: function(info,timeStep,isPositionPart) {
		var erp = this.getErp(timeStep,isPositionPart);
		var linearRhsX;
		var linearRhsY;
		var linearRhsZ;
		linearRhsX = this.linearErrorX * erp;
		linearRhsY = this.linearErrorY * erp;
		linearRhsZ = this.linearErrorZ * erp;
		var angRhsY = this._angleY * erp;
		var crossR100;
		var crossR101;
		var crossR102;
		var crossR110;
		var crossR111;
		var crossR112;
		var crossR120;
		var crossR121;
		var crossR122;
		var crossR200;
		var crossR201;
		var crossR202;
		var crossR210;
		var crossR211;
		var crossR212;
		var crossR220;
		var crossR221;
		var crossR222;
		crossR100 = 0;
		crossR101 = -this._relativeAnchor1Z;
		crossR102 = this._relativeAnchor1Y;
		crossR110 = this._relativeAnchor1Z;
		crossR111 = 0;
		crossR112 = -this._relativeAnchor1X;
		crossR120 = -this._relativeAnchor1Y;
		crossR121 = this._relativeAnchor1X;
		crossR122 = 0;
		crossR200 = 0;
		crossR201 = -this._relativeAnchor2Z;
		crossR202 = this._relativeAnchor2Y;
		crossR210 = this._relativeAnchor2Z;
		crossR211 = 0;
		crossR212 = -this._relativeAnchor2X;
		crossR220 = -this._relativeAnchor2Y;
		crossR221 = this._relativeAnchor2X;
		crossR222 = 0;
		crossR100 = -crossR100;
		crossR101 = -crossR101;
		crossR102 = -crossR102;
		crossR110 = -crossR110;
		crossR111 = -crossR111;
		crossR112 = -crossR112;
		crossR120 = -crossR120;
		crossR121 = -crossR121;
		crossR122 = -crossR122;
		crossR200 = -crossR200;
		crossR201 = -crossR201;
		crossR202 = -crossR202;
		crossR210 = -crossR210;
		crossR211 = -crossR211;
		crossR212 = -crossR212;
		crossR220 = -crossR220;
		crossR221 = -crossR221;
		crossR222 = -crossR222;
		var motorMassX = this.computeEffectiveInertiaMoment(this._axisXX,this._axisXY,this._axisXZ);
		var motorMassZ = this.computeEffectiveInertiaMoment(this._axisZX,this._axisZY,this._axisZZ);
		var impulse = this._impulses[0];
		var row = info.rows[info.numRows++];
		var _this = row.jacobian;
		_this.lin1X = 0;
		_this.lin1Y = 0;
		_this.lin1Z = 0;
		_this.lin2X = 0;
		_this.lin2Y = 0;
		_this.lin2Z = 0;
		_this.ang1X = 0;
		_this.ang1Y = 0;
		_this.ang1Z = 0;
		_this.ang2X = 0;
		_this.ang2Y = 0;
		_this.ang2Z = 0;
		row.rhs = 0;
		row.cfm = 0;
		row.minImpulse = 0;
		row.maxImpulse = 0;
		row.motorSpeed = 0;
		row.motorMaxImpulse = 0;
		row.impulse = null;
		row.impulse = impulse;
		row.rhs = linearRhsX;
		row.cfm = 0;
		row.minImpulse = -1e65536;
		row.maxImpulse = 1e65536;
		var j = row.jacobian;
		j.lin1X = 1;
		j.lin1Y = 0;
		j.lin1Z = 0;
		j.lin2X = 1;
		j.lin2Y = 0;
		j.lin2Z = 0;
		j.ang1X = crossR100;
		j.ang1Y = crossR101;
		j.ang1Z = crossR102;
		j.ang2X = crossR200;
		j.ang2Y = crossR201;
		j.ang2Z = crossR202;
		var impulse = this._impulses[1];
		var row = info.rows[info.numRows++];
		var _this = row.jacobian;
		_this.lin1X = 0;
		_this.lin1Y = 0;
		_this.lin1Z = 0;
		_this.lin2X = 0;
		_this.lin2Y = 0;
		_this.lin2Z = 0;
		_this.ang1X = 0;
		_this.ang1Y = 0;
		_this.ang1Z = 0;
		_this.ang2X = 0;
		_this.ang2Y = 0;
		_this.ang2Z = 0;
		row.rhs = 0;
		row.cfm = 0;
		row.minImpulse = 0;
		row.maxImpulse = 0;
		row.motorSpeed = 0;
		row.motorMaxImpulse = 0;
		row.impulse = null;
		row.impulse = impulse;
		row.rhs = linearRhsY;
		row.cfm = 0;
		row.minImpulse = -1e65536;
		row.maxImpulse = 1e65536;
		j = row.jacobian;
		j.lin1X = 0;
		j.lin1Y = 1;
		j.lin1Z = 0;
		j.lin2X = 0;
		j.lin2Y = 1;
		j.lin2Z = 0;
		j.ang1X = crossR110;
		j.ang1Y = crossR111;
		j.ang1Z = crossR112;
		j.ang2X = crossR210;
		j.ang2Y = crossR211;
		j.ang2Z = crossR212;
		var impulse = this._impulses[2];
		var row = info.rows[info.numRows++];
		var _this = row.jacobian;
		_this.lin1X = 0;
		_this.lin1Y = 0;
		_this.lin1Z = 0;
		_this.lin2X = 0;
		_this.lin2Y = 0;
		_this.lin2Z = 0;
		_this.ang1X = 0;
		_this.ang1Y = 0;
		_this.ang1Z = 0;
		_this.ang2X = 0;
		_this.ang2Y = 0;
		_this.ang2Z = 0;
		row.rhs = 0;
		row.cfm = 0;
		row.minImpulse = 0;
		row.maxImpulse = 0;
		row.motorSpeed = 0;
		row.motorMaxImpulse = 0;
		row.impulse = null;
		row.impulse = impulse;
		row.rhs = linearRhsZ;
		row.cfm = 0;
		row.minImpulse = -1e65536;
		row.maxImpulse = 1e65536;
		j = row.jacobian;
		j.lin1X = 0;
		j.lin1Y = 0;
		j.lin1Z = 1;
		j.lin2X = 0;
		j.lin2Y = 0;
		j.lin2Z = 1;
		j.ang1X = crossR120;
		j.ang1Y = crossR121;
		j.ang1Z = crossR122;
		j.ang2X = crossR220;
		j.ang2Y = crossR221;
		j.ang2Z = crossR222;
		if(!this.xSingular && (this._sd1.frequency <= 0 || !isPositionPart)) {
			var impulse = this._impulses[3];
			var row = info.rows[info.numRows++];
			var _this = row.jacobian;
			_this.lin1X = 0;
			_this.lin1Y = 0;
			_this.lin1Z = 0;
			_this.lin2X = 0;
			_this.lin2Y = 0;
			_this.lin2Z = 0;
			_this.ang1X = 0;
			_this.ang1Y = 0;
			_this.ang1Z = 0;
			_this.ang2X = 0;
			_this.ang2Y = 0;
			_this.ang2Z = 0;
			row.rhs = 0;
			row.cfm = 0;
			row.minImpulse = 0;
			row.maxImpulse = 0;
			row.motorSpeed = 0;
			row.motorMaxImpulse = 0;
			row.impulse = null;
			row.impulse = impulse;
			this.setSolverInfoRowAngular(row,this._angleX,this._lm1,motorMassX,this._sd1,timeStep,isPositionPart);
			j = row.jacobian;
			j.ang1X = this._axisXX;
			j.ang1Y = this._axisXY;
			j.ang1Z = this._axisXZ;
			j.ang2X = this._axisXX;
			j.ang2Y = this._axisXY;
			j.ang2Z = this._axisXZ;
		}
		if(!this.ySingular) {
			var impulse = this._impulses[4];
			var row = info.rows[info.numRows++];
			var _this = row.jacobian;
			_this.lin1X = 0;
			_this.lin1Y = 0;
			_this.lin1Z = 0;
			_this.lin2X = 0;
			_this.lin2Y = 0;
			_this.lin2Z = 0;
			_this.ang1X = 0;
			_this.ang1Y = 0;
			_this.ang1Z = 0;
			_this.ang2X = 0;
			_this.ang2Y = 0;
			_this.ang2Z = 0;
			row.rhs = 0;
			row.cfm = 0;
			row.minImpulse = 0;
			row.maxImpulse = 0;
			row.motorSpeed = 0;
			row.motorMaxImpulse = 0;
			row.impulse = null;
			row.impulse = impulse;
			row.rhs = angRhsY;
			row.cfm = 0;
			row.minImpulse = -1e65536;
			row.maxImpulse = 1e65536;
			j = row.jacobian;
			j.ang1X = this._axisYX;
			j.ang1Y = this._axisYY;
			j.ang1Z = this._axisYZ;
			j.ang2X = this._axisYX;
			j.ang2Y = this._axisYY;
			j.ang2Z = this._axisYZ;
		}
		if(!this.zSingular && (this._sd2.frequency <= 0 || !isPositionPart)) {
			var impulse = this._impulses[5];
			var row = info.rows[info.numRows++];
			var _this = row.jacobian;
			_this.lin1X = 0;
			_this.lin1Y = 0;
			_this.lin1Z = 0;
			_this.lin2X = 0;
			_this.lin2Y = 0;
			_this.lin2Z = 0;
			_this.ang1X = 0;
			_this.ang1Y = 0;
			_this.ang1Z = 0;
			_this.ang2X = 0;
			_this.ang2Y = 0;
			_this.ang2Z = 0;
			row.rhs = 0;
			row.cfm = 0;
			row.minImpulse = 0;
			row.maxImpulse = 0;
			row.motorSpeed = 0;
			row.motorMaxImpulse = 0;
			row.impulse = null;
			row.impulse = impulse;
			this.setSolverInfoRowAngular(row,this._angleZ,this._lm2,motorMassZ,this._sd2,timeStep,isPositionPart);
			j = row.jacobian;
			j.ang1X = this._axisZX;
			j.ang1Y = this._axisZY;
			j.ang1Z = this._axisZZ;
			j.ang2X = this._axisZX;
			j.ang2Y = this._axisZY;
			j.ang2Z = this._axisZZ;
		}
	}
	,_syncAnchors: function() {
		oimo_dynamics_constraint_joint_Joint.prototype._syncAnchors.call(this);
		var angleAxisXX;
		var angleAxisXY;
		var angleAxisXZ;
		var angleAxisYX;
		var angleAxisYY;
		var angleAxisYZ;
		var angleAxisZX;
		var angleAxisZY;
		var angleAxisZZ;
		angleAxisXX = this._basisX1X;
		angleAxisXY = this._basisX1Y;
		angleAxisXZ = this._basisX1Z;
		angleAxisZX = this._basisZ2X;
		angleAxisZY = this._basisZ2Y;
		angleAxisZZ = this._basisZ2Z;
		angleAxisYX = angleAxisZY * angleAxisXZ - angleAxisZZ * angleAxisXY;
		angleAxisYY = angleAxisZZ * angleAxisXX - angleAxisZX * angleAxisXZ;
		angleAxisYZ = angleAxisZX * angleAxisXY - angleAxisZY * angleAxisXX;
		this._axisXX = angleAxisYY * angleAxisZZ - angleAxisYZ * angleAxisZY;
		this._axisXY = angleAxisYZ * angleAxisZX - angleAxisYX * angleAxisZZ;
		this._axisXZ = angleAxisYX * angleAxisZY - angleAxisYY * angleAxisZX;
		this._axisYX = angleAxisYX;
		this._axisYY = angleAxisYY;
		this._axisYZ = angleAxisYZ;
		this._axisZX = angleAxisXY * angleAxisYZ - angleAxisXZ * angleAxisYY;
		this._axisZY = angleAxisXZ * angleAxisYX - angleAxisXX * angleAxisYZ;
		this._axisZZ = angleAxisXX * angleAxisYY - angleAxisXY * angleAxisYX;
		var l = this._axisXX * this._axisXX + this._axisXY * this._axisXY + this._axisXZ * this._axisXZ;
		if(l > 0) {
			l = 1 / Math.sqrt(l);
		}
		this._axisXX *= l;
		this._axisXY *= l;
		this._axisXZ *= l;
		var l = this._axisYX * this._axisYX + this._axisYY * this._axisYY + this._axisYZ * this._axisYZ;
		if(l > 0) {
			l = 1 / Math.sqrt(l);
		}
		this._axisYX *= l;
		this._axisYY *= l;
		this._axisYZ *= l;
		var l = this._axisZX * this._axisZX + this._axisZY * this._axisZY + this._axisZZ * this._axisZZ;
		if(l > 0) {
			l = 1 / Math.sqrt(l);
		}
		this._axisZX *= l;
		this._axisZY *= l;
		this._axisZZ *= l;
		this.xSingular = this._axisXX * this._axisXX + this._axisXY * this._axisXY + this._axisXZ * this._axisXZ == 0;
		this.ySingular = this._axisYX * this._axisYX + this._axisYY * this._axisYY + this._axisYZ * this._axisYZ == 0;
		this.zSingular = this._axisZX * this._axisZX + this._axisZY * this._axisZY + this._axisZZ * this._axisZZ == 0;
		var rot100;
		var rot101;
		var rot102;
		var rot110;
		var rot111;
		var rot112;
		var rot120;
		var rot121;
		var rot122;
		var rot200;
		var rot201;
		var rot202;
		var rot210;
		var rot211;
		var rot212;
		var rot220;
		var rot221;
		var rot222;
		rot100 = this._basisX1X;
		rot101 = this._basisY1X;
		rot102 = this._basisZ1X;
		rot110 = this._basisX1Y;
		rot111 = this._basisY1Y;
		rot112 = this._basisZ1Y;
		rot120 = this._basisX1Z;
		rot121 = this._basisY1Z;
		rot122 = this._basisZ1Z;
		rot200 = this._basisX2X;
		rot201 = this._basisY2X;
		rot202 = this._basisZ2X;
		rot210 = this._basisX2Y;
		rot211 = this._basisY2Y;
		rot212 = this._basisZ2Y;
		rot220 = this._basisX2Z;
		rot221 = this._basisY2Z;
		rot222 = this._basisZ2Z;
		var relRot00;
		var relRot01;
		var relRot02;
		var relRot11;
		var relRot12;
		var relRot21;
		var relRot22;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__11;
		var __tmp__12;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = rot100 * rot200 + rot110 * rot210 + rot120 * rot220;
		__tmp__01 = rot100 * rot201 + rot110 * rot211 + rot120 * rot221;
		__tmp__02 = rot100 * rot202 + rot110 * rot212 + rot120 * rot222;
		__tmp__11 = rot101 * rot201 + rot111 * rot211 + rot121 * rot221;
		__tmp__12 = rot101 * rot202 + rot111 * rot212 + rot121 * rot222;
		__tmp__21 = rot102 * rot201 + rot112 * rot211 + rot122 * rot221;
		__tmp__22 = rot102 * rot202 + rot112 * rot212 + rot122 * rot222;
		relRot00 = __tmp__00;
		relRot01 = __tmp__01;
		relRot02 = __tmp__02;
		relRot11 = __tmp__11;
		relRot12 = __tmp__12;
		relRot21 = __tmp__21;
		relRot22 = __tmp__22;
		var anglesX;
		var anglesY;
		var anglesZ;
		var sy = relRot02;
		if(sy <= -1) {
			var xSubZ = Math.atan2(relRot21,relRot11);
			anglesX = xSubZ * 0.5;
			anglesY = -1.570796326794895;
			anglesZ = -xSubZ * 0.5;
		} else if(sy >= 1) {
			var xAddZ = Math.atan2(relRot21,relRot11);
			anglesX = xAddZ * 0.5;
			anglesY = 1.570796326794895;
			anglesZ = xAddZ * 0.5;
		} else {
			anglesX = Math.atan2(-relRot12,relRot22);
			anglesY = Math.asin(sy);
			anglesZ = Math.atan2(-relRot01,relRot00);
		}
		this._angleX = anglesX;
		this._angleY = anglesY;
		this._angleZ = anglesZ;
		this.linearErrorX = this._anchor2X - this._anchor1X;
		this.linearErrorY = this._anchor2Y - this._anchor1Y;
		this.linearErrorZ = this._anchor2Z - this._anchor1Z;
	}
	,_getVelocitySolverInfo: function(timeStep,info) {
		oimo_dynamics_constraint_joint_Joint.prototype._getVelocitySolverInfo.call(this,timeStep,info);
		this.getInfo(info,timeStep,false);
	}
	,_getPositionSolverInfo: function(info) {
		oimo_dynamics_constraint_joint_Joint.prototype._getPositionSolverInfo.call(this,info);
		this.getInfo(info,null,true);
	}
	,getAxis1: function() {
		var v = new oimo_common_Vec3();
		v.x = this._basisX1X;
		v.y = this._basisX1Y;
		v.z = this._basisX1Z;
		return v;
	}
	,getAxis2: function() {
		var v = new oimo_common_Vec3();
		v.x = this._basisZ2X;
		v.y = this._basisZ2Y;
		v.z = this._basisZ2Z;
		return v;
	}
	,getAxis1To: function(axis) {
		axis.x = this._basisX1X;
		axis.y = this._basisX1Y;
		axis.z = this._basisX1Z;
	}
	,getAxis2To: function(axis) {
		axis.x = this._basisZ2X;
		axis.y = this._basisZ2Y;
		axis.z = this._basisZ2Z;
	}
	,getLocalAxis1: function() {
		var v = new oimo_common_Vec3();
		v.x = this._localBasisX1X;
		v.y = this._localBasisX1Y;
		v.z = this._localBasisX1Z;
		return v;
	}
	,getLocalAxis2: function() {
		var v = new oimo_common_Vec3();
		v.x = this._localBasisZ2X;
		v.y = this._localBasisZ2Y;
		v.z = this._localBasisZ2Z;
		return v;
	}
	,getLocalAxis1To: function(axis) {
		axis.x = this._localBasisX1X;
		axis.y = this._localBasisX1Y;
		axis.z = this._localBasisX1Z;
	}
	,getLocalAxis2To: function(axis) {
		axis.x = this._localBasisZ2X;
		axis.y = this._localBasisZ2Y;
		axis.z = this._localBasisZ2Z;
	}
	,getSpringDamper1: function() {
		return this._sd1;
	}
	,getSpringDamper2: function() {
		return this._sd2;
	}
	,getLimitMotor1: function() {
		return this._lm1;
	}
	,getLimitMotor2: function() {
		return this._lm2;
	}
	,getAngle1: function() {
		return this._angleX;
	}
	,getAngle2: function() {
		return this._angleZ;
	}
	,__class__: oimo_dynamics_constraint_joint_UniversalJoint
});
var oimo_dynamics_constraint_joint_UniversalJointConfig = function() {
	oimo_dynamics_constraint_joint_JointConfig.call(this);
	this.localAxis1 = new oimo_common_Vec3(1,0,0);
	this.localAxis2 = new oimo_common_Vec3(1,0,0);
	this.springDamper1 = new oimo_dynamics_constraint_joint_SpringDamper();
	this.springDamper2 = new oimo_dynamics_constraint_joint_SpringDamper();
	this.limitMotor1 = new oimo_dynamics_constraint_joint_RotationalLimitMotor();
	this.limitMotor2 = new oimo_dynamics_constraint_joint_RotationalLimitMotor();
};
oimo_dynamics_constraint_joint_UniversalJointConfig.__name__ = true;
oimo_dynamics_constraint_joint_UniversalJointConfig.__super__ = oimo_dynamics_constraint_joint_JointConfig;
oimo_dynamics_constraint_joint_UniversalJointConfig.prototype = $extend(oimo_dynamics_constraint_joint_JointConfig.prototype,{
	init: function(rigidBody1,rigidBody2,worldAnchor,worldAxis1,worldAxis2) {
		this._init(rigidBody1,rigidBody2,worldAnchor);
		var localVector = this.localAxis1;
		var vX;
		var vY;
		var vZ;
		vX = worldAxis1.x;
		vY = worldAxis1.y;
		vZ = worldAxis1.z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = rigidBody1._transform._rotation00 * vX + rigidBody1._transform._rotation10 * vY + rigidBody1._transform._rotation20 * vZ;
		__tmp__Y = rigidBody1._transform._rotation01 * vX + rigidBody1._transform._rotation11 * vY + rigidBody1._transform._rotation21 * vZ;
		__tmp__Z = rigidBody1._transform._rotation02 * vX + rigidBody1._transform._rotation12 * vY + rigidBody1._transform._rotation22 * vZ;
		vX = __tmp__X;
		vY = __tmp__Y;
		vZ = __tmp__Z;
		localVector.x = vX;
		localVector.y = vY;
		localVector.z = vZ;
		var localVector = this.localAxis2;
		var vX;
		var vY;
		var vZ;
		vX = worldAxis2.x;
		vY = worldAxis2.y;
		vZ = worldAxis2.z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = rigidBody2._transform._rotation00 * vX + rigidBody2._transform._rotation10 * vY + rigidBody2._transform._rotation20 * vZ;
		__tmp__Y = rigidBody2._transform._rotation01 * vX + rigidBody2._transform._rotation11 * vY + rigidBody2._transform._rotation21 * vZ;
		__tmp__Z = rigidBody2._transform._rotation02 * vX + rigidBody2._transform._rotation12 * vY + rigidBody2._transform._rotation22 * vZ;
		vX = __tmp__X;
		vY = __tmp__Y;
		vZ = __tmp__Z;
		localVector.x = vX;
		localVector.y = vY;
		localVector.z = vZ;
		return this;
	}
	,__class__: oimo_dynamics_constraint_joint_UniversalJointConfig
});
var oimo_dynamics_constraint_solver_ConstraintSolverType = function() { };
oimo_dynamics_constraint_solver_ConstraintSolverType.__name__ = true;
var oimo_dynamics_constraint_solver_common_ContactSolverMassDataRow = function() {
	this.invMLinN1X = 0;
	this.invMLinN1Y = 0;
	this.invMLinN1Z = 0;
	this.invMLinN2X = 0;
	this.invMLinN2Y = 0;
	this.invMLinN2Z = 0;
	this.invMAngN1X = 0;
	this.invMAngN1Y = 0;
	this.invMAngN1Z = 0;
	this.invMAngN2X = 0;
	this.invMAngN2Y = 0;
	this.invMAngN2Z = 0;
	this.invMLinT1X = 0;
	this.invMLinT1Y = 0;
	this.invMLinT1Z = 0;
	this.invMLinT2X = 0;
	this.invMLinT2Y = 0;
	this.invMLinT2Z = 0;
	this.invMAngT1X = 0;
	this.invMAngT1Y = 0;
	this.invMAngT1Z = 0;
	this.invMAngT2X = 0;
	this.invMAngT2Y = 0;
	this.invMAngT2Z = 0;
	this.invMLinB1X = 0;
	this.invMLinB1Y = 0;
	this.invMLinB1Z = 0;
	this.invMLinB2X = 0;
	this.invMLinB2Y = 0;
	this.invMLinB2Z = 0;
	this.invMAngB1X = 0;
	this.invMAngB1Y = 0;
	this.invMAngB1Z = 0;
	this.invMAngB2X = 0;
	this.invMAngB2Y = 0;
	this.invMAngB2Z = 0;
	this.massN = 0;
	this.massTB00 = 0;
	this.massTB01 = 0;
	this.massTB10 = 0;
	this.massTB11 = 0;
};
oimo_dynamics_constraint_solver_common_ContactSolverMassDataRow.__name__ = true;
oimo_dynamics_constraint_solver_common_ContactSolverMassDataRow.prototype = {
	__class__: oimo_dynamics_constraint_solver_common_ContactSolverMassDataRow
};
var oimo_dynamics_constraint_solver_common_JointSolverMassDataRow = function() {
	this.invMLin1X = 0;
	this.invMLin1Y = 0;
	this.invMLin1Z = 0;
	this.invMLin2X = 0;
	this.invMLin2Y = 0;
	this.invMLin2Z = 0;
	this.invMAng1X = 0;
	this.invMAng1Y = 0;
	this.invMAng1Z = 0;
	this.invMAng2X = 0;
	this.invMAng2Y = 0;
	this.invMAng2Z = 0;
	this.mass = 0;
	this.massWithoutCfm = 0;
};
oimo_dynamics_constraint_solver_common_JointSolverMassDataRow.__name__ = true;
oimo_dynamics_constraint_solver_common_JointSolverMassDataRow.prototype = {
	__class__: oimo_dynamics_constraint_solver_common_JointSolverMassDataRow
};
var oimo_dynamics_constraint_solver_direct_Boundary = function(maxRows) {
	this.iBounded = new Array(maxRows);
	this.iUnbounded = new Array(maxRows);
	this.signs = new Array(maxRows);
	this.b = new Array(maxRows);
	this.numBounded = 0;
	this.numUnbounded = 0;
	this.matrixId = 0;
};
oimo_dynamics_constraint_solver_direct_Boundary.__name__ = true;
oimo_dynamics_constraint_solver_direct_Boundary.prototype = {
	init: function(buildInfo) {
		this.numBounded = buildInfo.numBounded;
		var _g = 0;
		var _g1 = this.numBounded;
		while(_g < _g1) {
			var i = _g++;
			this.iBounded[i] = buildInfo.iBounded[i];
			this.signs[i] = buildInfo.signs[i];
		}
		this.numUnbounded = buildInfo.numUnbounded;
		this.matrixId = 0;
		var _g = 0;
		var _g1 = this.numUnbounded;
		while(_g < _g1) {
			var i = _g++;
			var idx = buildInfo.iUnbounded[i];
			this.iUnbounded[i] = idx;
			this.matrixId |= 1 << idx;
		}
	}
	,computeImpulses: function(info,mass,relVels,impulses,dImpulses,impulseFactor,noCheck) {
		var _g = 0;
		var _g1 = this.numUnbounded;
		while(_g < _g1) {
			var idx = this.iUnbounded[_g++];
			var row = info.rows[idx];
			this.b[idx] = row.rhs * impulseFactor - relVels[idx] - row.cfm * impulses[idx];
		}
		var invMassWithoutCfm = mass._invMassWithoutCfm;
		var _g = 0;
		var _g1 = this.numBounded;
		while(_g < _g1) {
			var i = _g++;
			var idx = this.iBounded[i];
			var sign = this.signs[i];
			var row = info.rows[idx];
			var dImpulse = (sign < 0 ? row.minImpulse : sign > 0 ? row.maxImpulse : 0) - impulses[idx];
			dImpulses[idx] = dImpulse;
			if(dImpulse != 0) {
				var _g2 = 0;
				var _g3 = this.numUnbounded;
				while(_g2 < _g3) {
					var idx2 = this.iUnbounded[_g2++];
					this.b[idx2] -= invMassWithoutCfm[idx][idx2] * dImpulse;
				}
			}
		}
		var indices = this.iUnbounded;
		var n = this.numUnbounded;
		var id = 0;
		var _g = 0;
		while(_g < n) id |= 1 << indices[_g++];
		var massMatrix;
		if(mass._cacheComputed[id]) {
			massMatrix = mass._cachedSubmatrices[id];
		} else {
			mass.computeSubmatrix(id,indices,n);
			mass._cacheComputed[id] = true;
			massMatrix = mass._cachedSubmatrices[id];
		}
		var ok = true;
		var _g = 0;
		var _g1 = this.numUnbounded;
		while(_g < _g1) {
			var i = _g++;
			var idx = this.iUnbounded[i];
			var row = info.rows[idx];
			var oldImpulse = impulses[idx];
			var impulse = oldImpulse;
			var _g2 = 0;
			var _g3 = this.numUnbounded;
			while(_g2 < _g3) {
				var j = _g2++;
				impulse += this.b[this.iUnbounded[j]] * massMatrix[i][j];
			}
			if(impulse < row.minImpulse - oimo_common_Setting.directMlcpSolverEps || impulse > row.maxImpulse + oimo_common_Setting.directMlcpSolverEps) {
				ok = false;
				break;
			}
			dImpulses[idx] = impulse - oldImpulse;
		}
		if(noCheck) {
			return true;
		}
		if(!ok) {
			return false;
		}
		var _g = 0;
		var _g1 = this.numBounded;
		while(_g < _g1) {
			var i = _g++;
			var idx = this.iBounded[i];
			var row = info.rows[idx];
			var sign = this.signs[i];
			var error = 0;
			var newImpulse = impulses[idx] + dImpulses[idx];
			var relVel = relVels[idx];
			var _g2 = 0;
			var _g3 = info.numRows;
			while(_g2 < _g3) {
				var j = _g2++;
				relVel += invMassWithoutCfm[idx][j] * dImpulses[j];
			}
			error = row.rhs * impulseFactor - relVel - row.cfm * newImpulse;
			if(sign < 0 && error > oimo_common_Setting.directMlcpSolverEps || sign > 0 && error < -oimo_common_Setting.directMlcpSolverEps) {
				ok = false;
				break;
			}
		}
		return ok;
	}
	,__class__: oimo_dynamics_constraint_solver_direct_Boundary
};
var oimo_dynamics_constraint_solver_direct_BoundaryBuildInfo = function(size) {
	this.size = size;
	this.numBounded = 0;
	this.iBounded = new Array(size);
	this.signs = new Array(size);
	this.numUnbounded = 0;
	this.iUnbounded = new Array(size);
};
oimo_dynamics_constraint_solver_direct_BoundaryBuildInfo.__name__ = true;
oimo_dynamics_constraint_solver_direct_BoundaryBuildInfo.prototype = {
	__class__: oimo_dynamics_constraint_solver_direct_BoundaryBuildInfo
};
var oimo_dynamics_constraint_solver_direct_BoundaryBuilder = function(maxRows) {
	this.maxRows = maxRows;
	this.numBoundaries = 0;
	this.boundaries = new Array(1 << maxRows);
	this.bbInfo = new oimo_dynamics_constraint_solver_direct_BoundaryBuildInfo(maxRows);
};
oimo_dynamics_constraint_solver_direct_BoundaryBuilder.__name__ = true;
oimo_dynamics_constraint_solver_direct_BoundaryBuilder.prototype = {
	buildBoundariesRecursive: function(info,i) {
		if(i == info.numRows) {
			if(this.boundaries[this.numBoundaries] == null) {
				this.boundaries[this.numBoundaries] = new oimo_dynamics_constraint_solver_direct_Boundary(this.maxRows);
			}
			this.boundaries[this.numBoundaries++].init(this.bbInfo);
			return;
		}
		var row = info.rows[i];
		var lowerLimitEnabled = row.minImpulse > -1e65536;
		var upperLimitEnabled = row.maxImpulse < 1e65536;
		if(row.minImpulse == 0 && row.maxImpulse == 0) {
			var _this = this.bbInfo;
			_this.iBounded[_this.numBounded] = i;
			_this.signs[_this.numBounded] = 0;
			_this.numBounded++;
			this.buildBoundariesRecursive(info,i + 1);
			this.bbInfo.numBounded--;
			return;
		}
		var _this = this.bbInfo;
		_this.iUnbounded[_this.numUnbounded] = i;
		_this.numUnbounded++;
		this.buildBoundariesRecursive(info,i + 1);
		this.bbInfo.numUnbounded--;
		if(lowerLimitEnabled) {
			var _this = this.bbInfo;
			_this.iBounded[_this.numBounded] = i;
			_this.signs[_this.numBounded] = -1;
			_this.numBounded++;
			this.buildBoundariesRecursive(info,i + 1);
			this.bbInfo.numBounded--;
		}
		if(upperLimitEnabled) {
			var _this = this.bbInfo;
			_this.iBounded[_this.numBounded] = i;
			_this.signs[_this.numBounded] = 1;
			_this.numBounded++;
			this.buildBoundariesRecursive(info,i + 1);
			this.bbInfo.numBounded--;
		}
	}
	,buildBoundaries: function(info) {
		this.numBoundaries = 0;
		var _this = this.bbInfo;
		_this.numBounded = 0;
		_this.numUnbounded = 0;
		this.buildBoundariesRecursive(info,0);
	}
	,__class__: oimo_dynamics_constraint_solver_direct_BoundaryBuilder
};
var oimo_dynamics_constraint_solver_direct_BoundarySelector = function(n) {
	this.n = n;
	this.indices = new Array(n);
	this.tmpIndices = new Array(n);
	var _g = 0;
	while(_g < n) {
		var i = _g++;
		this.indices[i] = i;
	}
};
oimo_dynamics_constraint_solver_direct_BoundarySelector.__name__ = true;
oimo_dynamics_constraint_solver_direct_BoundarySelector.prototype = {
	getIndex: function(i) {
		return this.indices[i];
	}
	,select: function(index) {
		var i = 0;
		while(this.indices[i] != index) ++i;
		while(i > 0) {
			var tmp = this.indices[i];
			this.indices[i] = this.indices[i - 1];
			this.indices[i - 1] = tmp;
			--i;
		}
	}
	,setSize: function(size) {
		var numSmaller = 0;
		var numGreater = 0;
		var _g = 0;
		var _g1 = this.n;
		while(_g < _g1) {
			var idx = this.indices[_g++];
			if(idx < size) {
				this.tmpIndices[numSmaller] = idx;
				++numSmaller;
			} else {
				this.tmpIndices[size + numGreater] = idx;
				++numGreater;
			}
		}
		var tmp = this.indices;
		this.indices = this.tmpIndices;
		this.tmpIndices = tmp;
	}
	,__class__: oimo_dynamics_constraint_solver_direct_BoundarySelector
};
var oimo_dynamics_constraint_solver_direct_DirectJointConstraintSolver = function(joint) {
	oimo_dynamics_constraint_ConstraintSolver.call(this);
	this.joint = joint;
	this.info = new oimo_dynamics_constraint_info_joint_JointSolverInfo();
	var maxRows = oimo_common_Setting.maxJacobianRows;
	this.massMatrix = new oimo_dynamics_constraint_solver_direct_MassMatrix(maxRows);
	this.boundaryBuilder = new oimo_dynamics_constraint_solver_direct_BoundaryBuilder(maxRows);
	this.massData = new Array(maxRows);
	var _g = 0;
	var _g1 = this.massData.length;
	while(_g < _g1) this.massData[_g++] = new oimo_dynamics_constraint_solver_common_JointSolverMassDataRow();
	var numMaxBoundaries = this.boundaryBuilder.boundaries.length;
	this.velBoundarySelector = new oimo_dynamics_constraint_solver_direct_BoundarySelector(numMaxBoundaries);
	this.posBoundarySelector = new oimo_dynamics_constraint_solver_direct_BoundarySelector(numMaxBoundaries);
	this.relVels = new Array(maxRows);
	this.impulses = new Array(maxRows);
	this.dImpulses = new Array(maxRows);
	this.dTotalImpulses = new Array(maxRows);
	var _g = 0;
	while(_g < maxRows) {
		var i = _g++;
		this.relVels[i] = 0;
		this.impulses[i] = 0;
		this.dImpulses[i] = 0;
		this.dTotalImpulses[i] = 0;
	}
};
oimo_dynamics_constraint_solver_direct_DirectJointConstraintSolver.__name__ = true;
oimo_dynamics_constraint_solver_direct_DirectJointConstraintSolver.__super__ = oimo_dynamics_constraint_ConstraintSolver;
oimo_dynamics_constraint_solver_direct_DirectJointConstraintSolver.prototype = $extend(oimo_dynamics_constraint_ConstraintSolver.prototype,{
	preSolveVelocity: function(timeStep) {
		this.joint._syncAnchors();
		this.joint._getVelocitySolverInfo(timeStep,this.info);
		this._b1 = this.info.b1;
		this._b2 = this.info.b2;
		this.massMatrix.computeInvMass(this.info,this.massData);
		var _this = this.boundaryBuilder;
		_this.numBoundaries = 0;
		var _this1 = _this.bbInfo;
		_this1.numBounded = 0;
		_this1.numUnbounded = 0;
		_this.buildBoundariesRecursive(this.info,0);
		var _this = this.velBoundarySelector;
		var size = this.boundaryBuilder.numBoundaries;
		var numSmaller = 0;
		var numGreater = 0;
		var _g = 0;
		var _g1 = _this.n;
		while(_g < _g1) {
			var idx = _this.indices[_g++];
			if(idx < size) {
				_this.tmpIndices[numSmaller] = idx;
				++numSmaller;
			} else {
				_this.tmpIndices[size + numGreater] = idx;
				++numGreater;
			}
		}
		var tmp = _this.indices;
		_this.indices = _this.tmpIndices;
		_this.tmpIndices = tmp;
	}
	,warmStart: function(timeStep) {
		var factor = this.joint._positionCorrectionAlgorithm == oimo_dynamics_constraint_PositionCorrectionAlgorithm.BAUMGARTE ? oimo_common_Setting.jointWarmStartingFactorForBaungarte : oimo_common_Setting.jointWarmStartingFactor;
		factor *= timeStep.dtRatio;
		if(factor <= 0) {
			var _g = 0;
			var _g1 = this.info.numRows;
			while(_g < _g1) {
				var _this = this.info.rows[_g++].impulse;
				_this.impulse = 0;
				_this.impulseM = 0;
				_this.impulseP = 0;
			}
			return;
		}
		var _g = 0;
		var _g1 = this.info.numRows;
		while(_g < _g1) {
			var i = _g++;
			var row = this.info.rows[i];
			var imp = row.impulse;
			var impulse = imp.impulse * factor;
			if(impulse < row.minImpulse) {
				impulse = row.minImpulse;
			} else if(impulse > row.maxImpulse) {
				impulse = row.maxImpulse;
			}
			imp.impulse = impulse;
			if(row.motorMaxImpulse > 0) {
				var impulseM = imp.impulseM * factor;
				var max = row.motorMaxImpulse;
				if(impulseM < -max) {
					impulseM = -max;
				} else if(impulseM > max) {
					impulseM = max;
				}
				imp.impulseM = impulseM;
			} else {
				imp.impulseM = 0;
			}
			this.dImpulses[i] = imp.impulse + imp.impulseM;
		}
		var impulses = this.dImpulses;
		var linearSet = false;
		var angularSet = false;
		var lv1X;
		var lv1Y;
		var lv1Z;
		var lv2X;
		var lv2Y;
		var lv2Z;
		var av1X;
		var av1Y;
		var av1Z;
		var av2X;
		var av2Y;
		var av2Z;
		lv1X = this._b1._velX;
		lv1Y = this._b1._velY;
		lv1Z = this._b1._velZ;
		lv2X = this._b2._velX;
		lv2Y = this._b2._velY;
		lv2Z = this._b2._velZ;
		av1X = this._b1._angVelX;
		av1Y = this._b1._angVelY;
		av1Z = this._b1._angVelZ;
		av2X = this._b2._angVelX;
		av2Y = this._b2._angVelY;
		av2Z = this._b2._angVelZ;
		var _g = 0;
		var _g1 = this.info.numRows;
		while(_g < _g1) {
			var i = _g++;
			var j = this.info.rows[i].jacobian;
			var md = this.massData[i];
			var imp = impulses[i];
			if((j.flag & 1) != 0) {
				lv1X += md.invMLin1X * imp;
				lv1Y += md.invMLin1Y * imp;
				lv1Z += md.invMLin1Z * imp;
				lv2X += md.invMLin2X * -imp;
				lv2Y += md.invMLin2Y * -imp;
				lv2Z += md.invMLin2Z * -imp;
				linearSet = true;
			}
			if((j.flag & 2) != 0) {
				av1X += md.invMAng1X * imp;
				av1Y += md.invMAng1Y * imp;
				av1Z += md.invMAng1Z * imp;
				av2X += md.invMAng2X * -imp;
				av2Y += md.invMAng2Y * -imp;
				av2Z += md.invMAng2Z * -imp;
				angularSet = true;
			}
		}
		if(linearSet) {
			this._b1._velX = lv1X;
			this._b1._velY = lv1Y;
			this._b1._velZ = lv1Z;
			this._b2._velX = lv2X;
			this._b2._velY = lv2Y;
			this._b2._velZ = lv2Z;
		}
		if(angularSet) {
			this._b1._angVelX = av1X;
			this._b1._angVelY = av1Y;
			this._b1._angVelZ = av1Z;
			this._b2._angVelX = av2X;
			this._b2._angVelY = av2Y;
			this._b2._angVelZ = av2Z;
		}
	}
	,solveVelocity: function() {
		var numRows = this.info.numRows;
		var lv1X;
		var lv1Y;
		var lv1Z;
		var lv2X;
		var lv2Y;
		var lv2Z;
		var av1X;
		var av1Y;
		var av1Z;
		var av2X;
		var av2Y;
		var av2Z;
		lv1X = this._b1._velX;
		lv1Y = this._b1._velY;
		lv1Z = this._b1._velZ;
		lv2X = this._b2._velX;
		lv2Y = this._b2._velY;
		lv2Z = this._b2._velZ;
		av1X = this._b1._angVelX;
		av1Y = this._b1._angVelY;
		av1Z = this._b1._angVelZ;
		av2X = this._b2._angVelX;
		av2Y = this._b2._angVelY;
		av2Z = this._b2._angVelZ;
		var _g = 0;
		while(_g < numRows) {
			var i = _g++;
			var row = this.info.rows[i];
			var j = row.jacobian;
			var relVel = 0;
			relVel += lv1X * j.lin1X + lv1Y * j.lin1Y + lv1Z * j.lin1Z;
			relVel -= lv2X * j.lin2X + lv2Y * j.lin2Y + lv2Z * j.lin2Z;
			relVel += av1X * j.ang1X + av1Y * j.ang1Y + av1Z * j.ang1Z;
			relVel -= av2X * j.ang2X + av2Y * j.ang2Y + av2Z * j.ang2Z;
			this.relVels[i] = relVel;
			this.impulses[i] = row.impulse.impulse;
			this.dTotalImpulses[i] = 0;
		}
		var invMass = this.massMatrix._invMassWithoutCfm;
		var _g = 0;
		while(_g < numRows) {
			var i = _g++;
			var row = this.info.rows[i];
			var imp = row.impulse;
			if(row.motorMaxImpulse > 0) {
				var oldImpulseM = imp.impulseM;
				var impulseM = oldImpulseM + this.massData[i].massWithoutCfm * (-row.motorSpeed - this.relVels[i]);
				var maxImpulseM = row.motorMaxImpulse;
				if(impulseM < -maxImpulseM) {
					impulseM = -maxImpulseM;
				} else if(impulseM > maxImpulseM) {
					impulseM = maxImpulseM;
				}
				imp.impulseM = impulseM;
				var dImpulseM = impulseM - oldImpulseM;
				this.dTotalImpulses[i] = dImpulseM;
				var _g1 = 0;
				while(_g1 < numRows) {
					var j = _g1++;
					this.relVels[j] += dImpulseM * invMass[i][j];
				}
			}
		}
		var solved = false;
		var _g = 0;
		var _g1 = this.boundaryBuilder.numBoundaries;
		while(_g < _g1) {
			var idx = this.velBoundarySelector.indices[_g++];
			if(this.boundaryBuilder.boundaries[idx].computeImpulses(this.info,this.massMatrix,this.relVels,this.impulses,this.dImpulses,1,false)) {
				var _g2 = 0;
				while(_g2 < numRows) {
					var j = _g2++;
					var dimp = this.dImpulses[j];
					this.info.rows[j].impulse.impulse += dimp;
					this.dTotalImpulses[j] += dimp;
				}
				var impulses = this.dTotalImpulses;
				var linearSet = false;
				var angularSet = false;
				var lv1X;
				var lv1Y;
				var lv1Z;
				var lv2X;
				var lv2Y;
				var lv2Z;
				var av1X;
				var av1Y;
				var av1Z;
				var av2X;
				var av2Y;
				var av2Z;
				lv1X = this._b1._velX;
				lv1Y = this._b1._velY;
				lv1Z = this._b1._velZ;
				lv2X = this._b2._velX;
				lv2Y = this._b2._velY;
				lv2Z = this._b2._velZ;
				av1X = this._b1._angVelX;
				av1Y = this._b1._angVelY;
				av1Z = this._b1._angVelZ;
				av2X = this._b2._angVelX;
				av2Y = this._b2._angVelY;
				av2Z = this._b2._angVelZ;
				var _g3 = 0;
				var _g4 = this.info.numRows;
				while(_g3 < _g4) {
					var i = _g3++;
					var j1 = this.info.rows[i].jacobian;
					var md = this.massData[i];
					var imp = impulses[i];
					if((j1.flag & 1) != 0) {
						lv1X += md.invMLin1X * imp;
						lv1Y += md.invMLin1Y * imp;
						lv1Z += md.invMLin1Z * imp;
						lv2X += md.invMLin2X * -imp;
						lv2Y += md.invMLin2Y * -imp;
						lv2Z += md.invMLin2Z * -imp;
						linearSet = true;
					}
					if((j1.flag & 2) != 0) {
						av1X += md.invMAng1X * imp;
						av1Y += md.invMAng1Y * imp;
						av1Z += md.invMAng1Z * imp;
						av2X += md.invMAng2X * -imp;
						av2Y += md.invMAng2Y * -imp;
						av2Z += md.invMAng2Z * -imp;
						angularSet = true;
					}
				}
				if(linearSet) {
					this._b1._velX = lv1X;
					this._b1._velY = lv1Y;
					this._b1._velZ = lv1Z;
					this._b2._velX = lv2X;
					this._b2._velY = lv2Y;
					this._b2._velZ = lv2Z;
				}
				if(angularSet) {
					this._b1._angVelX = av1X;
					this._b1._angVelY = av1Y;
					this._b1._angVelZ = av1Z;
					this._b2._angVelX = av2X;
					this._b2._angVelY = av2Y;
					this._b2._angVelZ = av2Z;
				}
				var _this = this.velBoundarySelector;
				var i1 = 0;
				while(_this.indices[i1] != idx) ++i1;
				while(i1 > 0) {
					var tmp = _this.indices[i1];
					_this.indices[i1] = _this.indices[i1 - 1];
					_this.indices[i1 - 1] = tmp;
					--i1;
				}
				solved = true;
				break;
			}
		}
		if(!solved) {
			console.log("src/oimo/dynamics/constraint/solver/direct/DirectJointConstraintSolver.hx:335:","could not find solution. (velocity)");
			return;
		}
	}
	,postSolveVelocity: function(timeStep) {
		var linX;
		var linY;
		var linZ;
		var angX;
		var angY;
		var angZ;
		linX = 0;
		linY = 0;
		linZ = 0;
		angX = 0;
		angY = 0;
		angZ = 0;
		var _g = 0;
		var _g1 = this.info.numRows;
		while(_g < _g1) {
			var row = this.info.rows[_g++];
			var imp = row.impulse;
			var j = row.jacobian;
			if((j.flag & 1) != 0) {
				linX += j.lin1X * imp.impulse;
				linY += j.lin1Y * imp.impulse;
				linZ += j.lin1Z * imp.impulse;
			} else if((j.flag & 2) != 0) {
				angX += j.ang1X * imp.impulse;
				angY += j.ang1Y * imp.impulse;
				angZ += j.ang1Z * imp.impulse;
			}
		}
		this.joint._appliedForceX = linX * timeStep.invDt;
		this.joint._appliedForceY = linY * timeStep.invDt;
		this.joint._appliedForceZ = linZ * timeStep.invDt;
		this.joint._appliedTorqueX = angX * timeStep.invDt;
		this.joint._appliedTorqueY = angY * timeStep.invDt;
		this.joint._appliedTorqueZ = angZ * timeStep.invDt;
	}
	,preSolvePosition: function(timeStep) {
		this.joint._syncAnchors();
		this.joint._getPositionSolverInfo(this.info);
		this._b1 = this.info.b1;
		this._b2 = this.info.b2;
		this.massMatrix.computeInvMass(this.info,this.massData);
		var _this = this.boundaryBuilder;
		_this.numBoundaries = 0;
		var _this1 = _this.bbInfo;
		_this1.numBounded = 0;
		_this1.numUnbounded = 0;
		_this.buildBoundariesRecursive(this.info,0);
		var _this = this.posBoundarySelector;
		var size = this.boundaryBuilder.numBoundaries;
		var numSmaller = 0;
		var numGreater = 0;
		var _g = 0;
		var _g1 = _this.n;
		while(_g < _g1) {
			var idx = _this.indices[_g++];
			if(idx < size) {
				_this.tmpIndices[numSmaller] = idx;
				++numSmaller;
			} else {
				_this.tmpIndices[size + numGreater] = idx;
				++numGreater;
			}
		}
		var tmp = _this.indices;
		_this.indices = _this.tmpIndices;
		_this.tmpIndices = tmp;
		var _g = 0;
		var _g1 = this.info.numRows;
		while(_g < _g1) this.info.rows[_g++].impulse.impulseP = 0;
	}
	,solvePositionSplitImpulse: function() {
		var numRows = this.info.numRows;
		var lv1X;
		var lv1Y;
		var lv1Z;
		var lv2X;
		var lv2Y;
		var lv2Z;
		var av1X;
		var av1Y;
		var av1Z;
		var av2X;
		var av2Y;
		var av2Z;
		lv1X = this._b1._pseudoVelX;
		lv1Y = this._b1._pseudoVelY;
		lv1Z = this._b1._pseudoVelZ;
		lv2X = this._b2._pseudoVelX;
		lv2Y = this._b2._pseudoVelY;
		lv2Z = this._b2._pseudoVelZ;
		av1X = this._b1._angPseudoVelX;
		av1Y = this._b1._angPseudoVelY;
		av1Z = this._b1._angPseudoVelZ;
		av2X = this._b2._angPseudoVelX;
		av2Y = this._b2._angPseudoVelY;
		av2Z = this._b2._angPseudoVelZ;
		var _g = 0;
		while(_g < numRows) {
			var i = _g++;
			var row = this.info.rows[i];
			var j = row.jacobian;
			var relVel = 0;
			relVel += lv1X * j.lin1X + lv1Y * j.lin1Y + lv1Z * j.lin1Z;
			relVel -= lv2X * j.lin2X + lv2Y * j.lin2Y + lv2Z * j.lin2Z;
			relVel += av1X * j.ang1X + av1Y * j.ang1Y + av1Z * j.ang1Z;
			relVel -= av2X * j.ang2X + av2Y * j.ang2Y + av2Z * j.ang2Z;
			this.relVels[i] = relVel;
			this.impulses[i] = row.impulse.impulseP;
		}
		var solved = false;
		var _g = 0;
		var _g1 = this.boundaryBuilder.numBoundaries;
		while(_g < _g1) {
			var idx = this.posBoundarySelector.indices[_g++];
			if(this.boundaryBuilder.boundaries[idx].computeImpulses(this.info,this.massMatrix,this.relVels,this.impulses,this.dImpulses,oimo_common_Setting.positionSplitImpulseBaumgarte,false)) {
				var _g2 = 0;
				while(_g2 < numRows) {
					var j = _g2++;
					this.info.rows[j].impulse.impulseP += this.dImpulses[j];
				}
				var impulses = this.dImpulses;
				var linearSet = false;
				var angularSet = false;
				var lv1X;
				var lv1Y;
				var lv1Z;
				var lv2X;
				var lv2Y;
				var lv2Z;
				var av1X;
				var av1Y;
				var av1Z;
				var av2X;
				var av2Y;
				var av2Z;
				lv1X = this._b1._pseudoVelX;
				lv1Y = this._b1._pseudoVelY;
				lv1Z = this._b1._pseudoVelZ;
				lv2X = this._b2._pseudoVelX;
				lv2Y = this._b2._pseudoVelY;
				lv2Z = this._b2._pseudoVelZ;
				av1X = this._b1._angPseudoVelX;
				av1Y = this._b1._angPseudoVelY;
				av1Z = this._b1._angPseudoVelZ;
				av2X = this._b2._angPseudoVelX;
				av2Y = this._b2._angPseudoVelY;
				av2Z = this._b2._angPseudoVelZ;
				var _g3 = 0;
				var _g4 = this.info.numRows;
				while(_g3 < _g4) {
					var i = _g3++;
					var j1 = this.info.rows[i].jacobian;
					var md = this.massData[i];
					var imp = impulses[i];
					if((j1.flag & 1) != 0) {
						lv1X += md.invMLin1X * imp;
						lv1Y += md.invMLin1Y * imp;
						lv1Z += md.invMLin1Z * imp;
						lv2X += md.invMLin2X * -imp;
						lv2Y += md.invMLin2Y * -imp;
						lv2Z += md.invMLin2Z * -imp;
						linearSet = true;
					}
					if((j1.flag & 2) != 0) {
						av1X += md.invMAng1X * imp;
						av1Y += md.invMAng1Y * imp;
						av1Z += md.invMAng1Z * imp;
						av2X += md.invMAng2X * -imp;
						av2Y += md.invMAng2Y * -imp;
						av2Z += md.invMAng2Z * -imp;
						angularSet = true;
					}
				}
				if(linearSet) {
					this._b1._pseudoVelX = lv1X;
					this._b1._pseudoVelY = lv1Y;
					this._b1._pseudoVelZ = lv1Z;
					this._b2._pseudoVelX = lv2X;
					this._b2._pseudoVelY = lv2Y;
					this._b2._pseudoVelZ = lv2Z;
				}
				if(angularSet) {
					this._b1._angPseudoVelX = av1X;
					this._b1._angPseudoVelY = av1Y;
					this._b1._angPseudoVelZ = av1Z;
					this._b2._angPseudoVelX = av2X;
					this._b2._angPseudoVelY = av2Y;
					this._b2._angPseudoVelZ = av2Z;
				}
				var _this = this.posBoundarySelector;
				var i1 = 0;
				while(_this.indices[i1] != idx) ++i1;
				while(i1 > 0) {
					var tmp = _this.indices[i1];
					_this.indices[i1] = _this.indices[i1 - 1];
					_this.indices[i1 - 1] = tmp;
					--i1;
				}
				solved = true;
				break;
			}
		}
		if(!solved) {
			console.log("src/oimo/dynamics/constraint/solver/direct/DirectJointConstraintSolver.hx:450:","could not find solution. (split impulse)");
			return;
		}
	}
	,solvePositionNgs: function(timeStep) {
		this.joint._syncAnchors();
		this.joint._getPositionSolverInfo(this.info);
		this._b1 = this.info.b1;
		this._b2 = this.info.b2;
		this.massMatrix.computeInvMass(this.info,this.massData);
		var _this = this.boundaryBuilder;
		_this.numBoundaries = 0;
		var _this1 = _this.bbInfo;
		_this1.numBounded = 0;
		_this1.numUnbounded = 0;
		_this.buildBoundariesRecursive(this.info,0);
		var _this = this.posBoundarySelector;
		var size = this.boundaryBuilder.numBoundaries;
		var numSmaller = 0;
		var numGreater = 0;
		var _g = 0;
		var _g1 = _this.n;
		while(_g < _g1) {
			var idx = _this.indices[_g++];
			if(idx < size) {
				_this.tmpIndices[numSmaller] = idx;
				++numSmaller;
			} else {
				_this.tmpIndices[size + numGreater] = idx;
				++numGreater;
			}
		}
		var tmp = _this.indices;
		_this.indices = _this.tmpIndices;
		_this.tmpIndices = tmp;
		var numRows = this.info.numRows;
		var _g = 0;
		while(_g < numRows) {
			var i = _g++;
			var imp = this.info.rows[i].impulse;
			this.relVels[i] = 0;
			this.impulses[i] = imp.impulseP;
		}
		var solved = false;
		var _g = 0;
		var _g1 = this.boundaryBuilder.numBoundaries;
		while(_g < _g1) {
			var idx = this.posBoundarySelector.indices[_g++];
			if(this.boundaryBuilder.boundaries[idx].computeImpulses(this.info,this.massMatrix,this.relVels,this.impulses,this.dImpulses,oimo_common_Setting.positionNgsBaumgarte,false)) {
				var _g2 = 0;
				while(_g2 < numRows) {
					var j = _g2++;
					this.info.rows[j].impulse.impulseP += this.dImpulses[j];
				}
				var impulses = this.dImpulses;
				var linearSet = false;
				var angularSet = false;
				var lv1X;
				var lv1Y;
				var lv1Z;
				var lv2X;
				var lv2Y;
				var lv2Z;
				var av1X;
				var av1Y;
				var av1Z;
				var av2X;
				var av2Y;
				var av2Z;
				lv1X = 0;
				lv1Y = 0;
				lv1Z = 0;
				lv2X = 0;
				lv2Y = 0;
				lv2Z = 0;
				av1X = 0;
				av1Y = 0;
				av1Z = 0;
				av2X = 0;
				av2Y = 0;
				av2Z = 0;
				var _g3 = 0;
				var _g4 = this.info.numRows;
				while(_g3 < _g4) {
					var i = _g3++;
					var j1 = this.info.rows[i].jacobian;
					var md = this.massData[i];
					var imp = impulses[i];
					if((j1.flag & 1) != 0) {
						lv1X += md.invMLin1X * imp;
						lv1Y += md.invMLin1Y * imp;
						lv1Z += md.invMLin1Z * imp;
						lv2X += md.invMLin2X * -imp;
						lv2Y += md.invMLin2Y * -imp;
						lv2Z += md.invMLin2Z * -imp;
						linearSet = true;
					}
					if((j1.flag & 2) != 0) {
						av1X += md.invMAng1X * imp;
						av1Y += md.invMAng1Y * imp;
						av1Z += md.invMAng1Z * imp;
						av2X += md.invMAng2X * -imp;
						av2Y += md.invMAng2Y * -imp;
						av2Z += md.invMAng2Z * -imp;
						angularSet = true;
					}
				}
				if(linearSet) {
					var _this = this._b1;
					_this._transform._positionX += lv1X;
					_this._transform._positionY += lv1Y;
					_this._transform._positionZ += lv1Z;
					var _this1 = this._b2;
					_this1._transform._positionX += lv2X;
					_this1._transform._positionY += lv2Y;
					_this1._transform._positionZ += lv2Z;
				}
				if(angularSet) {
					var _this2 = this._b1;
					var theta = Math.sqrt(av1X * av1X + av1Y * av1Y + av1Z * av1Z);
					var halfTheta = theta * 0.5;
					var rotationToSinAxisFactor;
					var cosHalfTheta;
					if(halfTheta < 0.5) {
						var ht2 = halfTheta * halfTheta;
						rotationToSinAxisFactor = 0.5 * (1 - ht2 * 0.16666666666666666 + ht2 * ht2 * 0.0083333333333333332);
						cosHalfTheta = 1 - ht2 * 0.5 + ht2 * ht2 * 0.041666666666666664;
					} else {
						rotationToSinAxisFactor = Math.sin(halfTheta) / theta;
						cosHalfTheta = Math.cos(halfTheta);
					}
					var sinAxisX;
					var sinAxisY;
					var sinAxisZ;
					sinAxisX = av1X * rotationToSinAxisFactor;
					sinAxisY = av1Y * rotationToSinAxisFactor;
					sinAxisZ = av1Z * rotationToSinAxisFactor;
					var dqX;
					var dqY;
					var dqZ;
					var dqW;
					dqX = sinAxisX;
					dqY = sinAxisY;
					dqZ = sinAxisZ;
					dqW = cosHalfTheta;
					var qX;
					var qY;
					var qZ;
					var qW;
					var e00 = _this2._transform._rotation00;
					var e11 = _this2._transform._rotation11;
					var e22 = _this2._transform._rotation22;
					var t = e00 + e11 + e22;
					var s;
					if(t > 0) {
						s = Math.sqrt(t + 1);
						qW = 0.5 * s;
						s = 0.5 / s;
						qX = (_this2._transform._rotation21 - _this2._transform._rotation12) * s;
						qY = (_this2._transform._rotation02 - _this2._transform._rotation20) * s;
						qZ = (_this2._transform._rotation10 - _this2._transform._rotation01) * s;
					} else if(e00 > e11) {
						if(e00 > e22) {
							s = Math.sqrt(e00 - e11 - e22 + 1);
							qX = 0.5 * s;
							s = 0.5 / s;
							qY = (_this2._transform._rotation01 + _this2._transform._rotation10) * s;
							qZ = (_this2._transform._rotation02 + _this2._transform._rotation20) * s;
							qW = (_this2._transform._rotation21 - _this2._transform._rotation12) * s;
						} else {
							s = Math.sqrt(e22 - e00 - e11 + 1);
							qZ = 0.5 * s;
							s = 0.5 / s;
							qX = (_this2._transform._rotation02 + _this2._transform._rotation20) * s;
							qY = (_this2._transform._rotation12 + _this2._transform._rotation21) * s;
							qW = (_this2._transform._rotation10 - _this2._transform._rotation01) * s;
						}
					} else if(e11 > e22) {
						s = Math.sqrt(e11 - e22 - e00 + 1);
						qY = 0.5 * s;
						s = 0.5 / s;
						qX = (_this2._transform._rotation01 + _this2._transform._rotation10) * s;
						qZ = (_this2._transform._rotation12 + _this2._transform._rotation21) * s;
						qW = (_this2._transform._rotation02 - _this2._transform._rotation20) * s;
					} else {
						s = Math.sqrt(e22 - e00 - e11 + 1);
						qZ = 0.5 * s;
						s = 0.5 / s;
						qX = (_this2._transform._rotation02 + _this2._transform._rotation20) * s;
						qY = (_this2._transform._rotation12 + _this2._transform._rotation21) * s;
						qW = (_this2._transform._rotation10 - _this2._transform._rotation01) * s;
					}
					qX = dqW * qX + dqX * qW + dqY * qZ - dqZ * qY;
					qY = dqW * qY - dqX * qZ + dqY * qW + dqZ * qX;
					qZ = dqW * qZ + dqX * qY - dqY * qX + dqZ * qW;
					qW = dqW * qW - dqX * qX - dqY * qY - dqZ * qZ;
					var l = qX * qX + qY * qY + qZ * qZ + qW * qW;
					if(l > 1e-32) {
						l = 1 / Math.sqrt(l);
					}
					qX *= l;
					qY *= l;
					qZ *= l;
					qW *= l;
					var x = qX;
					var y = qY;
					var z = qZ;
					var w = qW;
					var x2 = 2 * x;
					var y2 = 2 * y;
					var z2 = 2 * z;
					var xx = x * x2;
					var yy = y * y2;
					var zz = z * z2;
					var xy = x * y2;
					var yz = y * z2;
					var xz = x * z2;
					var wx = w * x2;
					var wy = w * y2;
					var wz = w * z2;
					_this2._transform._rotation00 = 1 - yy - zz;
					_this2._transform._rotation01 = xy - wz;
					_this2._transform._rotation02 = xz + wy;
					_this2._transform._rotation10 = xy + wz;
					_this2._transform._rotation11 = 1 - xx - zz;
					_this2._transform._rotation12 = yz - wx;
					_this2._transform._rotation20 = xz - wy;
					_this2._transform._rotation21 = yz + wx;
					_this2._transform._rotation22 = 1 - xx - yy;
					var __tmp__00;
					var __tmp__01;
					var __tmp__02;
					var __tmp__10;
					var __tmp__11;
					var __tmp__12;
					var __tmp__20;
					var __tmp__21;
					var __tmp__22;
					__tmp__00 = _this2._transform._rotation00 * _this2._invLocalInertia00 + _this2._transform._rotation01 * _this2._invLocalInertia10 + _this2._transform._rotation02 * _this2._invLocalInertia20;
					__tmp__01 = _this2._transform._rotation00 * _this2._invLocalInertia01 + _this2._transform._rotation01 * _this2._invLocalInertia11 + _this2._transform._rotation02 * _this2._invLocalInertia21;
					__tmp__02 = _this2._transform._rotation00 * _this2._invLocalInertia02 + _this2._transform._rotation01 * _this2._invLocalInertia12 + _this2._transform._rotation02 * _this2._invLocalInertia22;
					__tmp__10 = _this2._transform._rotation10 * _this2._invLocalInertia00 + _this2._transform._rotation11 * _this2._invLocalInertia10 + _this2._transform._rotation12 * _this2._invLocalInertia20;
					__tmp__11 = _this2._transform._rotation10 * _this2._invLocalInertia01 + _this2._transform._rotation11 * _this2._invLocalInertia11 + _this2._transform._rotation12 * _this2._invLocalInertia21;
					__tmp__12 = _this2._transform._rotation10 * _this2._invLocalInertia02 + _this2._transform._rotation11 * _this2._invLocalInertia12 + _this2._transform._rotation12 * _this2._invLocalInertia22;
					__tmp__20 = _this2._transform._rotation20 * _this2._invLocalInertia00 + _this2._transform._rotation21 * _this2._invLocalInertia10 + _this2._transform._rotation22 * _this2._invLocalInertia20;
					__tmp__21 = _this2._transform._rotation20 * _this2._invLocalInertia01 + _this2._transform._rotation21 * _this2._invLocalInertia11 + _this2._transform._rotation22 * _this2._invLocalInertia21;
					__tmp__22 = _this2._transform._rotation20 * _this2._invLocalInertia02 + _this2._transform._rotation21 * _this2._invLocalInertia12 + _this2._transform._rotation22 * _this2._invLocalInertia22;
					_this2._invInertia00 = __tmp__00;
					_this2._invInertia01 = __tmp__01;
					_this2._invInertia02 = __tmp__02;
					_this2._invInertia10 = __tmp__10;
					_this2._invInertia11 = __tmp__11;
					_this2._invInertia12 = __tmp__12;
					_this2._invInertia20 = __tmp__20;
					_this2._invInertia21 = __tmp__21;
					_this2._invInertia22 = __tmp__22;
					var __tmp__001;
					var __tmp__011;
					var __tmp__021;
					var __tmp__101;
					var __tmp__111;
					var __tmp__121;
					var __tmp__201;
					var __tmp__211;
					var __tmp__221;
					__tmp__001 = _this2._invInertia00 * _this2._transform._rotation00 + _this2._invInertia01 * _this2._transform._rotation01 + _this2._invInertia02 * _this2._transform._rotation02;
					__tmp__011 = _this2._invInertia00 * _this2._transform._rotation10 + _this2._invInertia01 * _this2._transform._rotation11 + _this2._invInertia02 * _this2._transform._rotation12;
					__tmp__021 = _this2._invInertia00 * _this2._transform._rotation20 + _this2._invInertia01 * _this2._transform._rotation21 + _this2._invInertia02 * _this2._transform._rotation22;
					__tmp__101 = _this2._invInertia10 * _this2._transform._rotation00 + _this2._invInertia11 * _this2._transform._rotation01 + _this2._invInertia12 * _this2._transform._rotation02;
					__tmp__111 = _this2._invInertia10 * _this2._transform._rotation10 + _this2._invInertia11 * _this2._transform._rotation11 + _this2._invInertia12 * _this2._transform._rotation12;
					__tmp__121 = _this2._invInertia10 * _this2._transform._rotation20 + _this2._invInertia11 * _this2._transform._rotation21 + _this2._invInertia12 * _this2._transform._rotation22;
					__tmp__201 = _this2._invInertia20 * _this2._transform._rotation00 + _this2._invInertia21 * _this2._transform._rotation01 + _this2._invInertia22 * _this2._transform._rotation02;
					__tmp__211 = _this2._invInertia20 * _this2._transform._rotation10 + _this2._invInertia21 * _this2._transform._rotation11 + _this2._invInertia22 * _this2._transform._rotation12;
					__tmp__221 = _this2._invInertia20 * _this2._transform._rotation20 + _this2._invInertia21 * _this2._transform._rotation21 + _this2._invInertia22 * _this2._transform._rotation22;
					_this2._invInertia00 = __tmp__001;
					_this2._invInertia01 = __tmp__011;
					_this2._invInertia02 = __tmp__021;
					_this2._invInertia10 = __tmp__101;
					_this2._invInertia11 = __tmp__111;
					_this2._invInertia12 = __tmp__121;
					_this2._invInertia20 = __tmp__201;
					_this2._invInertia21 = __tmp__211;
					_this2._invInertia22 = __tmp__221;
					_this2._invInertia00 *= _this2._rotFactor.x;
					_this2._invInertia01 *= _this2._rotFactor.x;
					_this2._invInertia02 *= _this2._rotFactor.x;
					_this2._invInertia10 *= _this2._rotFactor.y;
					_this2._invInertia11 *= _this2._rotFactor.y;
					_this2._invInertia12 *= _this2._rotFactor.y;
					_this2._invInertia20 *= _this2._rotFactor.z;
					_this2._invInertia21 *= _this2._rotFactor.z;
					_this2._invInertia22 *= _this2._rotFactor.z;
					var _this3 = this._b2;
					var theta1 = Math.sqrt(av2X * av2X + av2Y * av2Y + av2Z * av2Z);
					var halfTheta1 = theta1 * 0.5;
					var rotationToSinAxisFactor1;
					var cosHalfTheta1;
					if(halfTheta1 < 0.5) {
						var ht21 = halfTheta1 * halfTheta1;
						rotationToSinAxisFactor1 = 0.5 * (1 - ht21 * 0.16666666666666666 + ht21 * ht21 * 0.0083333333333333332);
						cosHalfTheta1 = 1 - ht21 * 0.5 + ht21 * ht21 * 0.041666666666666664;
					} else {
						rotationToSinAxisFactor1 = Math.sin(halfTheta1) / theta1;
						cosHalfTheta1 = Math.cos(halfTheta1);
					}
					var sinAxisX1;
					var sinAxisY1;
					var sinAxisZ1;
					sinAxisX1 = av2X * rotationToSinAxisFactor1;
					sinAxisY1 = av2Y * rotationToSinAxisFactor1;
					sinAxisZ1 = av2Z * rotationToSinAxisFactor1;
					var dqX1;
					var dqY1;
					var dqZ1;
					var dqW1;
					dqX1 = sinAxisX1;
					dqY1 = sinAxisY1;
					dqZ1 = sinAxisZ1;
					dqW1 = cosHalfTheta1;
					var qX1;
					var qY1;
					var qZ1;
					var qW1;
					var e001 = _this3._transform._rotation00;
					var e111 = _this3._transform._rotation11;
					var e221 = _this3._transform._rotation22;
					var t1 = e001 + e111 + e221;
					var s1;
					if(t1 > 0) {
						s1 = Math.sqrt(t1 + 1);
						qW1 = 0.5 * s1;
						s1 = 0.5 / s1;
						qX1 = (_this3._transform._rotation21 - _this3._transform._rotation12) * s1;
						qY1 = (_this3._transform._rotation02 - _this3._transform._rotation20) * s1;
						qZ1 = (_this3._transform._rotation10 - _this3._transform._rotation01) * s1;
					} else if(e001 > e111) {
						if(e001 > e221) {
							s1 = Math.sqrt(e001 - e111 - e221 + 1);
							qX1 = 0.5 * s1;
							s1 = 0.5 / s1;
							qY1 = (_this3._transform._rotation01 + _this3._transform._rotation10) * s1;
							qZ1 = (_this3._transform._rotation02 + _this3._transform._rotation20) * s1;
							qW1 = (_this3._transform._rotation21 - _this3._transform._rotation12) * s1;
						} else {
							s1 = Math.sqrt(e221 - e001 - e111 + 1);
							qZ1 = 0.5 * s1;
							s1 = 0.5 / s1;
							qX1 = (_this3._transform._rotation02 + _this3._transform._rotation20) * s1;
							qY1 = (_this3._transform._rotation12 + _this3._transform._rotation21) * s1;
							qW1 = (_this3._transform._rotation10 - _this3._transform._rotation01) * s1;
						}
					} else if(e111 > e221) {
						s1 = Math.sqrt(e111 - e221 - e001 + 1);
						qY1 = 0.5 * s1;
						s1 = 0.5 / s1;
						qX1 = (_this3._transform._rotation01 + _this3._transform._rotation10) * s1;
						qZ1 = (_this3._transform._rotation12 + _this3._transform._rotation21) * s1;
						qW1 = (_this3._transform._rotation02 - _this3._transform._rotation20) * s1;
					} else {
						s1 = Math.sqrt(e221 - e001 - e111 + 1);
						qZ1 = 0.5 * s1;
						s1 = 0.5 / s1;
						qX1 = (_this3._transform._rotation02 + _this3._transform._rotation20) * s1;
						qY1 = (_this3._transform._rotation12 + _this3._transform._rotation21) * s1;
						qW1 = (_this3._transform._rotation10 - _this3._transform._rotation01) * s1;
					}
					qX1 = dqW1 * qX1 + dqX1 * qW1 + dqY1 * qZ1 - dqZ1 * qY1;
					qY1 = dqW1 * qY1 - dqX1 * qZ1 + dqY1 * qW1 + dqZ1 * qX1;
					qZ1 = dqW1 * qZ1 + dqX1 * qY1 - dqY1 * qX1 + dqZ1 * qW1;
					qW1 = dqW1 * qW1 - dqX1 * qX1 - dqY1 * qY1 - dqZ1 * qZ1;
					var l1 = qX1 * qX1 + qY1 * qY1 + qZ1 * qZ1 + qW1 * qW1;
					if(l1 > 1e-32) {
						l1 = 1 / Math.sqrt(l1);
					}
					qX1 *= l1;
					qY1 *= l1;
					qZ1 *= l1;
					qW1 *= l1;
					var x1 = qX1;
					var y1 = qY1;
					var z1 = qZ1;
					var w1 = qW1;
					var x21 = 2 * x1;
					var y21 = 2 * y1;
					var z21 = 2 * z1;
					var xx1 = x1 * x21;
					var yy1 = y1 * y21;
					var zz1 = z1 * z21;
					var xy1 = x1 * y21;
					var yz1 = y1 * z21;
					var xz1 = x1 * z21;
					var wx1 = w1 * x21;
					var wy1 = w1 * y21;
					var wz1 = w1 * z21;
					_this3._transform._rotation00 = 1 - yy1 - zz1;
					_this3._transform._rotation01 = xy1 - wz1;
					_this3._transform._rotation02 = xz1 + wy1;
					_this3._transform._rotation10 = xy1 + wz1;
					_this3._transform._rotation11 = 1 - xx1 - zz1;
					_this3._transform._rotation12 = yz1 - wx1;
					_this3._transform._rotation20 = xz1 - wy1;
					_this3._transform._rotation21 = yz1 + wx1;
					_this3._transform._rotation22 = 1 - xx1 - yy1;
					var __tmp__002;
					var __tmp__012;
					var __tmp__022;
					var __tmp__102;
					var __tmp__112;
					var __tmp__122;
					var __tmp__202;
					var __tmp__212;
					var __tmp__222;
					__tmp__002 = _this3._transform._rotation00 * _this3._invLocalInertia00 + _this3._transform._rotation01 * _this3._invLocalInertia10 + _this3._transform._rotation02 * _this3._invLocalInertia20;
					__tmp__012 = _this3._transform._rotation00 * _this3._invLocalInertia01 + _this3._transform._rotation01 * _this3._invLocalInertia11 + _this3._transform._rotation02 * _this3._invLocalInertia21;
					__tmp__022 = _this3._transform._rotation00 * _this3._invLocalInertia02 + _this3._transform._rotation01 * _this3._invLocalInertia12 + _this3._transform._rotation02 * _this3._invLocalInertia22;
					__tmp__102 = _this3._transform._rotation10 * _this3._invLocalInertia00 + _this3._transform._rotation11 * _this3._invLocalInertia10 + _this3._transform._rotation12 * _this3._invLocalInertia20;
					__tmp__112 = _this3._transform._rotation10 * _this3._invLocalInertia01 + _this3._transform._rotation11 * _this3._invLocalInertia11 + _this3._transform._rotation12 * _this3._invLocalInertia21;
					__tmp__122 = _this3._transform._rotation10 * _this3._invLocalInertia02 + _this3._transform._rotation11 * _this3._invLocalInertia12 + _this3._transform._rotation12 * _this3._invLocalInertia22;
					__tmp__202 = _this3._transform._rotation20 * _this3._invLocalInertia00 + _this3._transform._rotation21 * _this3._invLocalInertia10 + _this3._transform._rotation22 * _this3._invLocalInertia20;
					__tmp__212 = _this3._transform._rotation20 * _this3._invLocalInertia01 + _this3._transform._rotation21 * _this3._invLocalInertia11 + _this3._transform._rotation22 * _this3._invLocalInertia21;
					__tmp__222 = _this3._transform._rotation20 * _this3._invLocalInertia02 + _this3._transform._rotation21 * _this3._invLocalInertia12 + _this3._transform._rotation22 * _this3._invLocalInertia22;
					_this3._invInertia00 = __tmp__002;
					_this3._invInertia01 = __tmp__012;
					_this3._invInertia02 = __tmp__022;
					_this3._invInertia10 = __tmp__102;
					_this3._invInertia11 = __tmp__112;
					_this3._invInertia12 = __tmp__122;
					_this3._invInertia20 = __tmp__202;
					_this3._invInertia21 = __tmp__212;
					_this3._invInertia22 = __tmp__222;
					var __tmp__003;
					var __tmp__013;
					var __tmp__023;
					var __tmp__103;
					var __tmp__113;
					var __tmp__123;
					var __tmp__203;
					var __tmp__213;
					var __tmp__223;
					__tmp__003 = _this3._invInertia00 * _this3._transform._rotation00 + _this3._invInertia01 * _this3._transform._rotation01 + _this3._invInertia02 * _this3._transform._rotation02;
					__tmp__013 = _this3._invInertia00 * _this3._transform._rotation10 + _this3._invInertia01 * _this3._transform._rotation11 + _this3._invInertia02 * _this3._transform._rotation12;
					__tmp__023 = _this3._invInertia00 * _this3._transform._rotation20 + _this3._invInertia01 * _this3._transform._rotation21 + _this3._invInertia02 * _this3._transform._rotation22;
					__tmp__103 = _this3._invInertia10 * _this3._transform._rotation00 + _this3._invInertia11 * _this3._transform._rotation01 + _this3._invInertia12 * _this3._transform._rotation02;
					__tmp__113 = _this3._invInertia10 * _this3._transform._rotation10 + _this3._invInertia11 * _this3._transform._rotation11 + _this3._invInertia12 * _this3._transform._rotation12;
					__tmp__123 = _this3._invInertia10 * _this3._transform._rotation20 + _this3._invInertia11 * _this3._transform._rotation21 + _this3._invInertia12 * _this3._transform._rotation22;
					__tmp__203 = _this3._invInertia20 * _this3._transform._rotation00 + _this3._invInertia21 * _this3._transform._rotation01 + _this3._invInertia22 * _this3._transform._rotation02;
					__tmp__213 = _this3._invInertia20 * _this3._transform._rotation10 + _this3._invInertia21 * _this3._transform._rotation11 + _this3._invInertia22 * _this3._transform._rotation12;
					__tmp__223 = _this3._invInertia20 * _this3._transform._rotation20 + _this3._invInertia21 * _this3._transform._rotation21 + _this3._invInertia22 * _this3._transform._rotation22;
					_this3._invInertia00 = __tmp__003;
					_this3._invInertia01 = __tmp__013;
					_this3._invInertia02 = __tmp__023;
					_this3._invInertia10 = __tmp__103;
					_this3._invInertia11 = __tmp__113;
					_this3._invInertia12 = __tmp__123;
					_this3._invInertia20 = __tmp__203;
					_this3._invInertia21 = __tmp__213;
					_this3._invInertia22 = __tmp__223;
					_this3._invInertia00 *= _this3._rotFactor.x;
					_this3._invInertia01 *= _this3._rotFactor.x;
					_this3._invInertia02 *= _this3._rotFactor.x;
					_this3._invInertia10 *= _this3._rotFactor.y;
					_this3._invInertia11 *= _this3._rotFactor.y;
					_this3._invInertia12 *= _this3._rotFactor.y;
					_this3._invInertia20 *= _this3._rotFactor.z;
					_this3._invInertia21 *= _this3._rotFactor.z;
					_this3._invInertia22 *= _this3._rotFactor.z;
				}
				var _this4 = this.posBoundarySelector;
				var i1 = 0;
				while(_this4.indices[i1] != idx) ++i1;
				while(i1 > 0) {
					var tmp = _this4.indices[i1];
					_this4.indices[i1] = _this4.indices[i1 - 1];
					_this4.indices[i1 - 1] = tmp;
					--i1;
				}
				solved = true;
				break;
			}
		}
		if(!solved) {
			console.log("src/oimo/dynamics/constraint/solver/direct/DirectJointConstraintSolver.hx:502:","could not find solution. (NGS)");
			return;
		}
	}
	,postSolve: function() {
		this.joint._syncAnchors();
		this.joint._checkDestruction();
	}
	,__class__: oimo_dynamics_constraint_solver_direct_DirectJointConstraintSolver
});
var oimo_dynamics_constraint_solver_direct_MassMatrix = function(size) {
	this._size = size;
	this.tmpMatrix = new Array(this._size);
	this._invMass = new Array(this._size);
	this._invMassWithoutCfm = new Array(this._size);
	var _g = 0;
	var _g1 = this._size;
	while(_g < _g1) {
		var i = _g++;
		this.tmpMatrix[i] = new Array(this._size);
		this._invMass[i] = new Array(this._size);
		this._invMassWithoutCfm[i] = new Array(this._size);
		var _g2 = 0;
		var _g3 = this._size;
		while(_g2 < _g3) {
			var j = _g2++;
			this.tmpMatrix[i][j] = 0;
			this._invMass[i][j] = 0;
			this._invMassWithoutCfm[i][j] = 0;
		}
	}
	this._maxSubmatrixId = 1 << this._size;
	this._cacheComputed = new Array(this._maxSubmatrixId);
	this._cachedSubmatrices = new Array(this._maxSubmatrixId);
	var _g = 0;
	var _g1 = this._maxSubmatrixId;
	while(_g < _g1) {
		var i = _g++;
		var t = i;
		t = (i & 85) + (i >> 1 & 85);
		t = (t & 51) + (t >> 2 & 51);
		t = (t & 15) + (t >> 4 & 15);
		var matrixSize = t;
		var subMatrix = new Array(matrixSize);
		var _g2 = 0;
		while(_g2 < matrixSize) {
			var j = _g2++;
			subMatrix[j] = new Array(matrixSize);
			var _g3 = 0;
			while(_g3 < matrixSize) subMatrix[j][_g3++] = 0;
		}
		this._cacheComputed[i] = false;
		this._cachedSubmatrices[i] = subMatrix;
	}
};
oimo_dynamics_constraint_solver_direct_MassMatrix.__name__ = true;
oimo_dynamics_constraint_solver_direct_MassMatrix.prototype = {
	computeSubmatrix: function(id,indices,size) {
		var _g = 0;
		while(_g < size) {
			var i = _g++;
			var ii = indices[i];
			var _g1 = 0;
			while(_g1 < size) {
				var j = _g1++;
				this.tmpMatrix[i][j] = this._invMass[ii][indices[j]];
			}
		}
		var src = this.tmpMatrix;
		var dst = this._cachedSubmatrices[id];
		var srci;
		var dsti;
		var srcj;
		var dstj;
		var diag;
		switch(size) {
		case 4:
			srci = src[0];
			dsti = dst[0];
			diag = 1 / srci[0];
			dsti[0] = diag;
			srci[1] *= diag;
			srci[2] *= diag;
			srci[3] *= diag;
			srcj = src[1];
			dstj = dst[1];
			dstj[0] = -diag * srcj[0];
			srcj[1] -= srci[1] * srcj[0];
			srcj[2] -= srci[2] * srcj[0];
			srcj[3] -= srci[3] * srcj[0];
			srcj = src[2];
			dstj = dst[2];
			dstj[0] = -diag * srcj[0];
			srcj[1] -= srci[1] * srcj[0];
			srcj[2] -= srci[2] * srcj[0];
			srcj[3] -= srci[3] * srcj[0];
			srcj = src[3];
			dstj = dst[3];
			dstj[0] = -diag * srcj[0];
			srcj[1] -= srci[1] * srcj[0];
			srcj[2] -= srci[2] * srcj[0];
			srcj[3] -= srci[3] * srcj[0];
			srci = src[1];
			dsti = dst[1];
			diag = 1 / srci[1];
			dsti[1] = diag;
			dsti[0] *= diag;
			srci[2] *= diag;
			srci[3] *= diag;
			srcj = src[0];
			dstj = dst[0];
			dstj[0] -= dsti[0] * srcj[1];
			srcj[2] -= srci[2] * srcj[1];
			srcj[3] -= srci[3] * srcj[1];
			srcj = src[2];
			dstj = dst[2];
			dstj[0] -= dsti[0] * srcj[1];
			dstj[1] = -diag * srcj[1];
			srcj[2] -= srci[2] * srcj[1];
			srcj[3] -= srci[3] * srcj[1];
			srcj = src[3];
			dstj = dst[3];
			dstj[0] -= dsti[0] * srcj[1];
			dstj[1] = -diag * srcj[1];
			srcj[2] -= srci[2] * srcj[1];
			srcj[3] -= srci[3] * srcj[1];
			srci = src[2];
			dsti = dst[2];
			diag = 1 / srci[2];
			dsti[2] = diag;
			dsti[0] *= diag;
			dsti[1] *= diag;
			srci[3] *= diag;
			srcj = src[0];
			dstj = dst[0];
			dstj[0] -= dsti[0] * srcj[2];
			srcj[3] -= srci[3] * srcj[2];
			srcj = src[1];
			dstj = dst[1];
			dstj[0] -= dsti[0] * srcj[2];
			dstj[1] -= dsti[1] * srcj[2];
			srcj[3] -= srci[3] * srcj[2];
			srcj = src[3];
			dstj = dst[3];
			dstj[0] -= dsti[0] * srcj[2];
			dstj[1] -= dsti[1] * srcj[2];
			dstj[2] = -diag * srcj[2];
			srcj[3] -= srci[3] * srcj[2];
			srci = src[3];
			dsti = dst[3];
			diag = 1 / srci[3];
			dsti[3] = diag;
			dsti[0] *= diag;
			dsti[1] *= diag;
			dsti[2] *= diag;
			srcj = src[0];
			dstj = dst[0];
			dstj[0] -= dsti[0] * srcj[3];
			srcj = src[1];
			dstj = dst[1];
			dstj[0] -= dsti[0] * srcj[3];
			dstj[1] -= dsti[1] * srcj[3];
			srcj = src[2];
			dstj = dst[2];
			dstj[0] -= dsti[0] * srcj[3];
			dstj[1] -= dsti[1] * srcj[3];
			dstj[2] -= dsti[2] * srcj[3];
			dsti = dst[1];
			dst[0][1] = dsti[0];
			dsti = dst[2];
			dst[0][2] = dsti[0];
			dst[1][2] = dsti[1];
			dsti = dst[3];
			dst[0][3] = dsti[0];
			dst[1][3] = dsti[1];
			dst[2][3] = dsti[2];
			break;
		case 5:
			srci = src[0];
			dsti = dst[0];
			diag = 1 / srci[0];
			dsti[0] = diag;
			srci[1] *= diag;
			srci[2] *= diag;
			srci[3] *= diag;
			srci[4] *= diag;
			srcj = src[1];
			dstj = dst[1];
			dstj[0] = -diag * srcj[0];
			srcj[1] -= srci[1] * srcj[0];
			srcj[2] -= srci[2] * srcj[0];
			srcj[3] -= srci[3] * srcj[0];
			srcj[4] -= srci[4] * srcj[0];
			srcj = src[2];
			dstj = dst[2];
			dstj[0] = -diag * srcj[0];
			srcj[1] -= srci[1] * srcj[0];
			srcj[2] -= srci[2] * srcj[0];
			srcj[3] -= srci[3] * srcj[0];
			srcj[4] -= srci[4] * srcj[0];
			srcj = src[3];
			dstj = dst[3];
			dstj[0] = -diag * srcj[0];
			srcj[1] -= srci[1] * srcj[0];
			srcj[2] -= srci[2] * srcj[0];
			srcj[3] -= srci[3] * srcj[0];
			srcj[4] -= srci[4] * srcj[0];
			srcj = src[4];
			dstj = dst[4];
			dstj[0] = -diag * srcj[0];
			srcj[1] -= srci[1] * srcj[0];
			srcj[2] -= srci[2] * srcj[0];
			srcj[3] -= srci[3] * srcj[0];
			srcj[4] -= srci[4] * srcj[0];
			srci = src[1];
			dsti = dst[1];
			diag = 1 / srci[1];
			dsti[1] = diag;
			dsti[0] *= diag;
			srci[2] *= diag;
			srci[3] *= diag;
			srci[4] *= diag;
			srcj = src[0];
			dstj = dst[0];
			dstj[0] -= dsti[0] * srcj[1];
			srcj[2] -= srci[2] * srcj[1];
			srcj[3] -= srci[3] * srcj[1];
			srcj[4] -= srci[4] * srcj[1];
			srcj = src[2];
			dstj = dst[2];
			dstj[0] -= dsti[0] * srcj[1];
			dstj[1] = -diag * srcj[1];
			srcj[2] -= srci[2] * srcj[1];
			srcj[3] -= srci[3] * srcj[1];
			srcj[4] -= srci[4] * srcj[1];
			srcj = src[3];
			dstj = dst[3];
			dstj[0] -= dsti[0] * srcj[1];
			dstj[1] = -diag * srcj[1];
			srcj[2] -= srci[2] * srcj[1];
			srcj[3] -= srci[3] * srcj[1];
			srcj[4] -= srci[4] * srcj[1];
			srcj = src[4];
			dstj = dst[4];
			dstj[0] -= dsti[0] * srcj[1];
			dstj[1] = -diag * srcj[1];
			srcj[2] -= srci[2] * srcj[1];
			srcj[3] -= srci[3] * srcj[1];
			srcj[4] -= srci[4] * srcj[1];
			srci = src[2];
			dsti = dst[2];
			diag = 1 / srci[2];
			dsti[2] = diag;
			dsti[0] *= diag;
			dsti[1] *= diag;
			srci[3] *= diag;
			srci[4] *= diag;
			srcj = src[0];
			dstj = dst[0];
			dstj[0] -= dsti[0] * srcj[2];
			srcj[3] -= srci[3] * srcj[2];
			srcj[4] -= srci[4] * srcj[2];
			srcj = src[1];
			dstj = dst[1];
			dstj[0] -= dsti[0] * srcj[2];
			dstj[1] -= dsti[1] * srcj[2];
			srcj[3] -= srci[3] * srcj[2];
			srcj[4] -= srci[4] * srcj[2];
			srcj = src[3];
			dstj = dst[3];
			dstj[0] -= dsti[0] * srcj[2];
			dstj[1] -= dsti[1] * srcj[2];
			dstj[2] = -diag * srcj[2];
			srcj[3] -= srci[3] * srcj[2];
			srcj[4] -= srci[4] * srcj[2];
			srcj = src[4];
			dstj = dst[4];
			dstj[0] -= dsti[0] * srcj[2];
			dstj[1] -= dsti[1] * srcj[2];
			dstj[2] = -diag * srcj[2];
			srcj[3] -= srci[3] * srcj[2];
			srcj[4] -= srci[4] * srcj[2];
			srci = src[3];
			dsti = dst[3];
			diag = 1 / srci[3];
			dsti[3] = diag;
			dsti[0] *= diag;
			dsti[1] *= diag;
			dsti[2] *= diag;
			srci[4] *= diag;
			srcj = src[0];
			dstj = dst[0];
			dstj[0] -= dsti[0] * srcj[3];
			srcj[4] -= srci[4] * srcj[3];
			srcj = src[1];
			dstj = dst[1];
			dstj[0] -= dsti[0] * srcj[3];
			dstj[1] -= dsti[1] * srcj[3];
			srcj[4] -= srci[4] * srcj[3];
			srcj = src[2];
			dstj = dst[2];
			dstj[0] -= dsti[0] * srcj[3];
			dstj[1] -= dsti[1] * srcj[3];
			dstj[2] -= dsti[2] * srcj[3];
			srcj[4] -= srci[4] * srcj[3];
			srcj = src[4];
			dstj = dst[4];
			dstj[0] -= dsti[0] * srcj[3];
			dstj[1] -= dsti[1] * srcj[3];
			dstj[2] -= dsti[2] * srcj[3];
			dstj[3] = -diag * srcj[3];
			srcj[4] -= srci[4] * srcj[3];
			srci = src[4];
			dsti = dst[4];
			diag = 1 / srci[4];
			dsti[4] = diag;
			dsti[0] *= diag;
			dsti[1] *= diag;
			dsti[2] *= diag;
			dsti[3] *= diag;
			srcj = src[0];
			dstj = dst[0];
			dstj[0] -= dsti[0] * srcj[4];
			srcj = src[1];
			dstj = dst[1];
			dstj[0] -= dsti[0] * srcj[4];
			dstj[1] -= dsti[1] * srcj[4];
			srcj = src[2];
			dstj = dst[2];
			dstj[0] -= dsti[0] * srcj[4];
			dstj[1] -= dsti[1] * srcj[4];
			dstj[2] -= dsti[2] * srcj[4];
			srcj = src[3];
			dstj = dst[3];
			dstj[0] -= dsti[0] * srcj[4];
			dstj[1] -= dsti[1] * srcj[4];
			dstj[2] -= dsti[2] * srcj[4];
			dstj[3] -= dsti[3] * srcj[4];
			dsti = dst[1];
			dst[0][1] = dsti[0];
			dsti = dst[2];
			dst[0][2] = dsti[0];
			dst[1][2] = dsti[1];
			dsti = dst[3];
			dst[0][3] = dsti[0];
			dst[1][3] = dsti[1];
			dst[2][3] = dsti[2];
			dsti = dst[4];
			dst[0][4] = dsti[0];
			dst[1][4] = dsti[1];
			dst[2][4] = dsti[2];
			dst[3][4] = dsti[3];
			break;
		case 6:
			srci = src[0];
			dsti = dst[0];
			diag = 1 / srci[0];
			dsti[0] = diag;
			srci[1] *= diag;
			srci[2] *= diag;
			srci[3] *= diag;
			srci[4] *= diag;
			srci[5] *= diag;
			srcj = src[1];
			dstj = dst[1];
			dstj[0] = -diag * srcj[0];
			srcj[1] -= srci[1] * srcj[0];
			srcj[2] -= srci[2] * srcj[0];
			srcj[3] -= srci[3] * srcj[0];
			srcj[4] -= srci[4] * srcj[0];
			srcj[5] -= srci[5] * srcj[0];
			srcj = src[2];
			dstj = dst[2];
			dstj[0] = -diag * srcj[0];
			srcj[1] -= srci[1] * srcj[0];
			srcj[2] -= srci[2] * srcj[0];
			srcj[3] -= srci[3] * srcj[0];
			srcj[4] -= srci[4] * srcj[0];
			srcj[5] -= srci[5] * srcj[0];
			srcj = src[3];
			dstj = dst[3];
			dstj[0] = -diag * srcj[0];
			srcj[1] -= srci[1] * srcj[0];
			srcj[2] -= srci[2] * srcj[0];
			srcj[3] -= srci[3] * srcj[0];
			srcj[4] -= srci[4] * srcj[0];
			srcj[5] -= srci[5] * srcj[0];
			srcj = src[4];
			dstj = dst[4];
			dstj[0] = -diag * srcj[0];
			srcj[1] -= srci[1] * srcj[0];
			srcj[2] -= srci[2] * srcj[0];
			srcj[3] -= srci[3] * srcj[0];
			srcj[4] -= srci[4] * srcj[0];
			srcj[5] -= srci[5] * srcj[0];
			srcj = src[5];
			dstj = dst[5];
			dstj[0] = -diag * srcj[0];
			srcj[1] -= srci[1] * srcj[0];
			srcj[2] -= srci[2] * srcj[0];
			srcj[3] -= srci[3] * srcj[0];
			srcj[4] -= srci[4] * srcj[0];
			srcj[5] -= srci[5] * srcj[0];
			srci = src[1];
			dsti = dst[1];
			diag = 1 / srci[1];
			dsti[1] = diag;
			dsti[0] *= diag;
			srci[2] *= diag;
			srci[3] *= diag;
			srci[4] *= diag;
			srci[5] *= diag;
			srcj = src[0];
			dstj = dst[0];
			dstj[0] -= dsti[0] * srcj[1];
			srcj[2] -= srci[2] * srcj[1];
			srcj[3] -= srci[3] * srcj[1];
			srcj[4] -= srci[4] * srcj[1];
			srcj[5] -= srci[5] * srcj[1];
			srcj = src[2];
			dstj = dst[2];
			dstj[0] -= dsti[0] * srcj[1];
			dstj[1] = -diag * srcj[1];
			srcj[2] -= srci[2] * srcj[1];
			srcj[3] -= srci[3] * srcj[1];
			srcj[4] -= srci[4] * srcj[1];
			srcj[5] -= srci[5] * srcj[1];
			srcj = src[3];
			dstj = dst[3];
			dstj[0] -= dsti[0] * srcj[1];
			dstj[1] = -diag * srcj[1];
			srcj[2] -= srci[2] * srcj[1];
			srcj[3] -= srci[3] * srcj[1];
			srcj[4] -= srci[4] * srcj[1];
			srcj[5] -= srci[5] * srcj[1];
			srcj = src[4];
			dstj = dst[4];
			dstj[0] -= dsti[0] * srcj[1];
			dstj[1] = -diag * srcj[1];
			srcj[2] -= srci[2] * srcj[1];
			srcj[3] -= srci[3] * srcj[1];
			srcj[4] -= srci[4] * srcj[1];
			srcj[5] -= srci[5] * srcj[1];
			srcj = src[5];
			dstj = dst[5];
			dstj[0] -= dsti[0] * srcj[1];
			dstj[1] = -diag * srcj[1];
			srcj[2] -= srci[2] * srcj[1];
			srcj[3] -= srci[3] * srcj[1];
			srcj[4] -= srci[4] * srcj[1];
			srcj[5] -= srci[5] * srcj[1];
			srci = src[2];
			dsti = dst[2];
			diag = 1 / srci[2];
			dsti[2] = diag;
			dsti[0] *= diag;
			dsti[1] *= diag;
			srci[3] *= diag;
			srci[4] *= diag;
			srci[5] *= diag;
			srcj = src[0];
			dstj = dst[0];
			dstj[0] -= dsti[0] * srcj[2];
			srcj[3] -= srci[3] * srcj[2];
			srcj[4] -= srci[4] * srcj[2];
			srcj[5] -= srci[5] * srcj[2];
			srcj = src[1];
			dstj = dst[1];
			dstj[0] -= dsti[0] * srcj[2];
			dstj[1] -= dsti[1] * srcj[2];
			srcj[3] -= srci[3] * srcj[2];
			srcj[4] -= srci[4] * srcj[2];
			srcj[5] -= srci[5] * srcj[2];
			srcj = src[3];
			dstj = dst[3];
			dstj[0] -= dsti[0] * srcj[2];
			dstj[1] -= dsti[1] * srcj[2];
			dstj[2] = -diag * srcj[2];
			srcj[3] -= srci[3] * srcj[2];
			srcj[4] -= srci[4] * srcj[2];
			srcj[5] -= srci[5] * srcj[2];
			srcj = src[4];
			dstj = dst[4];
			dstj[0] -= dsti[0] * srcj[2];
			dstj[1] -= dsti[1] * srcj[2];
			dstj[2] = -diag * srcj[2];
			srcj[3] -= srci[3] * srcj[2];
			srcj[4] -= srci[4] * srcj[2];
			srcj[5] -= srci[5] * srcj[2];
			srcj = src[5];
			dstj = dst[5];
			dstj[0] -= dsti[0] * srcj[2];
			dstj[1] -= dsti[1] * srcj[2];
			dstj[2] = -diag * srcj[2];
			srcj[3] -= srci[3] * srcj[2];
			srcj[4] -= srci[4] * srcj[2];
			srcj[5] -= srci[5] * srcj[2];
			srci = src[3];
			dsti = dst[3];
			diag = 1 / srci[3];
			dsti[3] = diag;
			dsti[0] *= diag;
			dsti[1] *= diag;
			dsti[2] *= diag;
			srci[4] *= diag;
			srci[5] *= diag;
			srcj = src[0];
			dstj = dst[0];
			dstj[0] -= dsti[0] * srcj[3];
			srcj[4] -= srci[4] * srcj[3];
			srcj[5] -= srci[5] * srcj[3];
			srcj = src[1];
			dstj = dst[1];
			dstj[0] -= dsti[0] * srcj[3];
			dstj[1] -= dsti[1] * srcj[3];
			srcj[4] -= srci[4] * srcj[3];
			srcj[5] -= srci[5] * srcj[3];
			srcj = src[2];
			dstj = dst[2];
			dstj[0] -= dsti[0] * srcj[3];
			dstj[1] -= dsti[1] * srcj[3];
			dstj[2] -= dsti[2] * srcj[3];
			srcj[4] -= srci[4] * srcj[3];
			srcj[5] -= srci[5] * srcj[3];
			srcj = src[4];
			dstj = dst[4];
			dstj[0] -= dsti[0] * srcj[3];
			dstj[1] -= dsti[1] * srcj[3];
			dstj[2] -= dsti[2] * srcj[3];
			dstj[3] = -diag * srcj[3];
			srcj[4] -= srci[4] * srcj[3];
			srcj[5] -= srci[5] * srcj[3];
			srcj = src[5];
			dstj = dst[5];
			dstj[0] -= dsti[0] * srcj[3];
			dstj[1] -= dsti[1] * srcj[3];
			dstj[2] -= dsti[2] * srcj[3];
			dstj[3] = -diag * srcj[3];
			srcj[4] -= srci[4] * srcj[3];
			srcj[5] -= srci[5] * srcj[3];
			srci = src[4];
			dsti = dst[4];
			diag = 1 / srci[4];
			dsti[4] = diag;
			dsti[0] *= diag;
			dsti[1] *= diag;
			dsti[2] *= diag;
			dsti[3] *= diag;
			srci[5] *= diag;
			srcj = src[0];
			dstj = dst[0];
			dstj[0] -= dsti[0] * srcj[4];
			srcj[5] -= srci[5] * srcj[4];
			srcj = src[1];
			dstj = dst[1];
			dstj[0] -= dsti[0] * srcj[4];
			dstj[1] -= dsti[1] * srcj[4];
			srcj[5] -= srci[5] * srcj[4];
			srcj = src[2];
			dstj = dst[2];
			dstj[0] -= dsti[0] * srcj[4];
			dstj[1] -= dsti[1] * srcj[4];
			dstj[2] -= dsti[2] * srcj[4];
			srcj[5] -= srci[5] * srcj[4];
			srcj = src[3];
			dstj = dst[3];
			dstj[0] -= dsti[0] * srcj[4];
			dstj[1] -= dsti[1] * srcj[4];
			dstj[2] -= dsti[2] * srcj[4];
			dstj[3] -= dsti[3] * srcj[4];
			srcj[5] -= srci[5] * srcj[4];
			srcj = src[5];
			dstj = dst[5];
			dstj[0] -= dsti[0] * srcj[4];
			dstj[1] -= dsti[1] * srcj[4];
			dstj[2] -= dsti[2] * srcj[4];
			dstj[3] -= dsti[3] * srcj[4];
			dstj[4] = -diag * srcj[4];
			srcj[5] -= srci[5] * srcj[4];
			srci = src[5];
			dsti = dst[5];
			diag = 1 / srci[5];
			dsti[5] = diag;
			dsti[0] *= diag;
			dsti[1] *= diag;
			dsti[2] *= diag;
			dsti[3] *= diag;
			dsti[4] *= diag;
			srcj = src[0];
			dstj = dst[0];
			dstj[0] -= dsti[0] * srcj[5];
			srcj = src[1];
			dstj = dst[1];
			dstj[0] -= dsti[0] * srcj[5];
			dstj[1] -= dsti[1] * srcj[5];
			srcj = src[2];
			dstj = dst[2];
			dstj[0] -= dsti[0] * srcj[5];
			dstj[1] -= dsti[1] * srcj[5];
			dstj[2] -= dsti[2] * srcj[5];
			srcj = src[3];
			dstj = dst[3];
			dstj[0] -= dsti[0] * srcj[5];
			dstj[1] -= dsti[1] * srcj[5];
			dstj[2] -= dsti[2] * srcj[5];
			dstj[3] -= dsti[3] * srcj[5];
			srcj = src[4];
			dstj = dst[4];
			dstj[0] -= dsti[0] * srcj[5];
			dstj[1] -= dsti[1] * srcj[5];
			dstj[2] -= dsti[2] * srcj[5];
			dstj[3] -= dsti[3] * srcj[5];
			dstj[4] -= dsti[4] * srcj[5];
			dsti = dst[1];
			dst[0][1] = dsti[0];
			dsti = dst[2];
			dst[0][2] = dsti[0];
			dst[1][2] = dsti[1];
			dsti = dst[3];
			dst[0][3] = dsti[0];
			dst[1][3] = dsti[1];
			dst[2][3] = dsti[2];
			dsti = dst[4];
			dst[0][4] = dsti[0];
			dst[1][4] = dsti[1];
			dst[2][4] = dsti[2];
			dst[3][4] = dsti[3];
			dsti = dst[5];
			dst[0][5] = dsti[0];
			dst[1][5] = dsti[1];
			dst[2][5] = dsti[2];
			dst[3][5] = dsti[3];
			dst[4][5] = dsti[4];
			break;
		default:
			var _g = 0;
			while(_g < size) {
				var i = _g++;
				srci = src[i];
				dsti = dst[i];
				var diag = 1 / srci[i];
				dsti[i] = diag;
				var _g1 = 0;
				while(_g1 < i) dsti[_g1++] *= diag;
				var _g2 = i + 1;
				while(_g2 < size) srci[_g2++] *= diag;
				var _g3 = 0;
				while(_g3 < i) {
					var j = _g3++;
					srcj = src[j];
					dstj = dst[j];
					var _g4 = 0;
					var _g5 = j + 1;
					while(_g4 < _g5) {
						var k = _g4++;
						dstj[k] -= dsti[k] * srcj[i];
					}
					var _g6 = i + 1;
					while(_g6 < size) {
						var k1 = _g6++;
						srcj[k1] -= srci[k1] * srcj[i];
					}
				}
				var _g7 = i + 1;
				while(_g7 < size) {
					var j1 = _g7++;
					srcj = src[j1];
					dstj = dst[j1];
					var _g8 = 0;
					while(_g8 < i) {
						var k2 = _g8++;
						dstj[k2] -= dsti[k2] * srcj[i];
					}
					dstj[i] = -diag * srcj[i];
					var _g9 = i + 1;
					while(_g9 < size) {
						var k3 = _g9++;
						srcj[k3] -= srci[k3] * srcj[i];
					}
				}
			}
			var _g = 1;
			while(_g < size) {
				var i = _g++;
				dsti = dst[i];
				var _g1 = 0;
				while(_g1 < i) {
					var j = _g1++;
					dst[j][i] = dsti[j];
				}
			}
		}
	}
	,computeInvMass: function(info,massData) {
		var invMass = this._invMass;
		var invMassWithoutCfm = this._invMassWithoutCfm;
		var numRows = info.numRows;
		var b1 = info.b1;
		var b2 = info.b2;
		var invM1 = b1._invMass;
		var invM2 = b2._invMass;
		var invI100;
		var invI101;
		var invI102;
		var invI110;
		var invI111;
		var invI112;
		var invI120;
		var invI121;
		var invI122;
		var invI200;
		var invI201;
		var invI202;
		var invI210;
		var invI211;
		var invI212;
		var invI220;
		var invI221;
		var invI222;
		invI100 = b1._invInertia00;
		invI101 = b1._invInertia01;
		invI102 = b1._invInertia02;
		invI110 = b1._invInertia10;
		invI111 = b1._invInertia11;
		invI112 = b1._invInertia12;
		invI120 = b1._invInertia20;
		invI121 = b1._invInertia21;
		invI122 = b1._invInertia22;
		invI200 = b2._invInertia00;
		invI201 = b2._invInertia01;
		invI202 = b2._invInertia02;
		invI210 = b2._invInertia10;
		invI211 = b2._invInertia11;
		invI212 = b2._invInertia12;
		invI220 = b2._invInertia20;
		invI221 = b2._invInertia21;
		invI222 = b2._invInertia22;
		var _g = 0;
		while(_g < numRows) {
			var i = _g++;
			var j = info.rows[i].jacobian;
			var md = massData[i];
			j.updateSparsity();
			if((j.flag & 1) != 0) {
				md.invMLin1X = j.lin1X * invM1;
				md.invMLin1Y = j.lin1Y * invM1;
				md.invMLin1Z = j.lin1Z * invM1;
				md.invMLin2X = j.lin2X * invM2;
				md.invMLin2Y = j.lin2Y * invM2;
				md.invMLin2Z = j.lin2Z * invM2;
			} else {
				md.invMLin1X = 0;
				md.invMLin1Y = 0;
				md.invMLin1Z = 0;
				md.invMLin2X = 0;
				md.invMLin2Y = 0;
				md.invMLin2Z = 0;
			}
			if((j.flag & 2) != 0) {
				var __tmp__X;
				var __tmp__Y;
				var __tmp__Z;
				__tmp__X = invI100 * j.ang1X + invI101 * j.ang1Y + invI102 * j.ang1Z;
				__tmp__Y = invI110 * j.ang1X + invI111 * j.ang1Y + invI112 * j.ang1Z;
				__tmp__Z = invI120 * j.ang1X + invI121 * j.ang1Y + invI122 * j.ang1Z;
				md.invMAng1X = __tmp__X;
				md.invMAng1Y = __tmp__Y;
				md.invMAng1Z = __tmp__Z;
				var __tmp__X1;
				var __tmp__Y1;
				var __tmp__Z1;
				__tmp__X1 = invI200 * j.ang2X + invI201 * j.ang2Y + invI202 * j.ang2Z;
				__tmp__Y1 = invI210 * j.ang2X + invI211 * j.ang2Y + invI212 * j.ang2Z;
				__tmp__Z1 = invI220 * j.ang2X + invI221 * j.ang2Y + invI222 * j.ang2Z;
				md.invMAng2X = __tmp__X1;
				md.invMAng2Y = __tmp__Y1;
				md.invMAng2Z = __tmp__Z1;
			} else {
				md.invMAng1X = 0;
				md.invMAng1Y = 0;
				md.invMAng1Z = 0;
				md.invMAng2X = 0;
				md.invMAng2Y = 0;
				md.invMAng2Z = 0;
			}
		}
		var _g = 0;
		while(_g < numRows) {
			var i = _g++;
			var j1 = info.rows[i].jacobian;
			var _g1 = i;
			while(_g1 < numRows) {
				var j = _g1++;
				var md2 = massData[j];
				var val = j1.lin1X * md2.invMLin1X + j1.lin1Y * md2.invMLin1Y + j1.lin1Z * md2.invMLin1Z + (j1.ang1X * md2.invMAng1X + j1.ang1Y * md2.invMAng1Y + j1.ang1Z * md2.invMAng1Z) + (j1.lin2X * md2.invMLin2X + j1.lin2Y * md2.invMLin2Y + j1.lin2Z * md2.invMLin2Z) + (j1.ang2X * md2.invMAng2X + j1.ang2Y * md2.invMAng2Y + j1.ang2Z * md2.invMAng2Z);
				if(i == j) {
					invMass[i][j] = val + info.rows[i].cfm;
					invMassWithoutCfm[i][j] = val;
					md2.mass = val + info.rows[i].cfm;
					md2.massWithoutCfm = val;
					if(md2.mass != 0) {
						md2.mass = 1 / md2.mass;
					}
					if(md2.massWithoutCfm != 0) {
						md2.massWithoutCfm = 1 / md2.massWithoutCfm;
					}
				} else {
					invMass[i][j] = val;
					invMass[j][i] = val;
					invMassWithoutCfm[i][j] = val;
					invMassWithoutCfm[j][i] = val;
				}
			}
		}
		var _g = 0;
		var _g1 = this._maxSubmatrixId;
		while(_g < _g1) this._cacheComputed[_g++] = false;
	}
	,__class__: oimo_dynamics_constraint_solver_direct_MassMatrix
};
var oimo_dynamics_constraint_solver_pgs_PgsContactConstraintSolver = function(constraint) {
	oimo_dynamics_constraint_ConstraintSolver.call(this);
	this.constraint = constraint;
	this.info = new oimo_dynamics_constraint_info_contact_ContactSolverInfo();
	this.massData = new Array(oimo_common_Setting.maxManifoldPoints);
	var _g = 0;
	var _g1 = this.massData.length;
	while(_g < _g1) this.massData[_g++] = new oimo_dynamics_constraint_solver_common_ContactSolverMassDataRow();
};
oimo_dynamics_constraint_solver_pgs_PgsContactConstraintSolver.__name__ = true;
oimo_dynamics_constraint_solver_pgs_PgsContactConstraintSolver.__super__ = oimo_dynamics_constraint_ConstraintSolver;
oimo_dynamics_constraint_solver_pgs_PgsContactConstraintSolver.prototype = $extend(oimo_dynamics_constraint_ConstraintSolver.prototype,{
	preSolveVelocity: function(timeStep) {
		this.constraint._getVelocitySolverInfo(timeStep,this.info);
		this._b1 = this.info.b1;
		this._b2 = this.info.b2;
		var invM1 = this._b1._invMass;
		var invM2 = this._b2._invMass;
		var invI100;
		var invI101;
		var invI102;
		var invI110;
		var invI111;
		var invI112;
		var invI120;
		var invI121;
		var invI122;
		var invI200;
		var invI201;
		var invI202;
		var invI210;
		var invI211;
		var invI212;
		var invI220;
		var invI221;
		var invI222;
		invI100 = this._b1._invInertia00;
		invI101 = this._b1._invInertia01;
		invI102 = this._b1._invInertia02;
		invI110 = this._b1._invInertia10;
		invI111 = this._b1._invInertia11;
		invI112 = this._b1._invInertia12;
		invI120 = this._b1._invInertia20;
		invI121 = this._b1._invInertia21;
		invI122 = this._b1._invInertia22;
		invI200 = this._b2._invInertia00;
		invI201 = this._b2._invInertia01;
		invI202 = this._b2._invInertia02;
		invI210 = this._b2._invInertia10;
		invI211 = this._b2._invInertia11;
		invI212 = this._b2._invInertia12;
		invI220 = this._b2._invInertia20;
		invI221 = this._b2._invInertia21;
		invI222 = this._b2._invInertia22;
		var _g = 0;
		var _g1 = this.info.numRows;
		while(_g < _g1) {
			var i = _g++;
			var row = this.info.rows[i];
			var md = this.massData[i];
			var j = row.jacobianN;
			md.invMLinN1X = j.lin1X * invM1;
			md.invMLinN1Y = j.lin1Y * invM1;
			md.invMLinN1Z = j.lin1Z * invM1;
			md.invMLinN2X = j.lin2X * invM2;
			md.invMLinN2Y = j.lin2Y * invM2;
			md.invMLinN2Z = j.lin2Z * invM2;
			var __tmp__X;
			var __tmp__Y;
			var __tmp__Z;
			__tmp__X = invI100 * j.ang1X + invI101 * j.ang1Y + invI102 * j.ang1Z;
			__tmp__Y = invI110 * j.ang1X + invI111 * j.ang1Y + invI112 * j.ang1Z;
			__tmp__Z = invI120 * j.ang1X + invI121 * j.ang1Y + invI122 * j.ang1Z;
			md.invMAngN1X = __tmp__X;
			md.invMAngN1Y = __tmp__Y;
			md.invMAngN1Z = __tmp__Z;
			var __tmp__X1;
			var __tmp__Y1;
			var __tmp__Z1;
			__tmp__X1 = invI200 * j.ang2X + invI201 * j.ang2Y + invI202 * j.ang2Z;
			__tmp__Y1 = invI210 * j.ang2X + invI211 * j.ang2Y + invI212 * j.ang2Z;
			__tmp__Z1 = invI220 * j.ang2X + invI221 * j.ang2Y + invI222 * j.ang2Z;
			md.invMAngN2X = __tmp__X1;
			md.invMAngN2Y = __tmp__Y1;
			md.invMAngN2Z = __tmp__Z1;
			md.massN = invM1 + invM2 + (md.invMAngN1X * j.ang1X + md.invMAngN1Y * j.ang1Y + md.invMAngN1Z * j.ang1Z) + (md.invMAngN2X * j.ang2X + md.invMAngN2Y * j.ang2Y + md.invMAngN2Z * j.ang2Z);
			if(md.massN != 0) {
				md.massN = 1 / md.massN;
			}
			var jt = row.jacobianT;
			var jb = row.jacobianB;
			md.invMLinT1X = jt.lin1X * invM1;
			md.invMLinT1Y = jt.lin1Y * invM1;
			md.invMLinT1Z = jt.lin1Z * invM1;
			md.invMLinT2X = jt.lin2X * invM2;
			md.invMLinT2Y = jt.lin2Y * invM2;
			md.invMLinT2Z = jt.lin2Z * invM2;
			md.invMLinB1X = jb.lin1X * invM1;
			md.invMLinB1Y = jb.lin1Y * invM1;
			md.invMLinB1Z = jb.lin1Z * invM1;
			md.invMLinB2X = jb.lin2X * invM2;
			md.invMLinB2Y = jb.lin2Y * invM2;
			md.invMLinB2Z = jb.lin2Z * invM2;
			var __tmp__X2;
			var __tmp__Y2;
			var __tmp__Z2;
			__tmp__X2 = invI100 * jt.ang1X + invI101 * jt.ang1Y + invI102 * jt.ang1Z;
			__tmp__Y2 = invI110 * jt.ang1X + invI111 * jt.ang1Y + invI112 * jt.ang1Z;
			__tmp__Z2 = invI120 * jt.ang1X + invI121 * jt.ang1Y + invI122 * jt.ang1Z;
			md.invMAngT1X = __tmp__X2;
			md.invMAngT1Y = __tmp__Y2;
			md.invMAngT1Z = __tmp__Z2;
			var __tmp__X3;
			var __tmp__Y3;
			var __tmp__Z3;
			__tmp__X3 = invI200 * jt.ang2X + invI201 * jt.ang2Y + invI202 * jt.ang2Z;
			__tmp__Y3 = invI210 * jt.ang2X + invI211 * jt.ang2Y + invI212 * jt.ang2Z;
			__tmp__Z3 = invI220 * jt.ang2X + invI221 * jt.ang2Y + invI222 * jt.ang2Z;
			md.invMAngT2X = __tmp__X3;
			md.invMAngT2Y = __tmp__Y3;
			md.invMAngT2Z = __tmp__Z3;
			var __tmp__X4;
			var __tmp__Y4;
			var __tmp__Z4;
			__tmp__X4 = invI100 * jb.ang1X + invI101 * jb.ang1Y + invI102 * jb.ang1Z;
			__tmp__Y4 = invI110 * jb.ang1X + invI111 * jb.ang1Y + invI112 * jb.ang1Z;
			__tmp__Z4 = invI120 * jb.ang1X + invI121 * jb.ang1Y + invI122 * jb.ang1Z;
			md.invMAngB1X = __tmp__X4;
			md.invMAngB1Y = __tmp__Y4;
			md.invMAngB1Z = __tmp__Z4;
			var __tmp__X5;
			var __tmp__Y5;
			var __tmp__Z5;
			__tmp__X5 = invI200 * jb.ang2X + invI201 * jb.ang2Y + invI202 * jb.ang2Z;
			__tmp__Y5 = invI210 * jb.ang2X + invI211 * jb.ang2Y + invI212 * jb.ang2Z;
			__tmp__Z5 = invI220 * jb.ang2X + invI221 * jb.ang2Y + invI222 * jb.ang2Z;
			md.invMAngB2X = __tmp__X5;
			md.invMAngB2Y = __tmp__Y5;
			md.invMAngB2Z = __tmp__Z5;
			var invMassTB00 = invM1 + invM2 + (md.invMAngT1X * jt.ang1X + md.invMAngT1Y * jt.ang1Y + md.invMAngT1Z * jt.ang1Z) + (md.invMAngT2X * jt.ang2X + md.invMAngT2Y * jt.ang2Y + md.invMAngT2Z * jt.ang2Z);
			var invMassTB01 = md.invMAngT1X * jb.ang1X + md.invMAngT1Y * jb.ang1Y + md.invMAngT1Z * jb.ang1Z + (md.invMAngT2X * jb.ang2X + md.invMAngT2Y * jb.ang2Y + md.invMAngT2Z * jb.ang2Z);
			var invMassTB11 = invM1 + invM2 + (md.invMAngB1X * jb.ang1X + md.invMAngB1Y * jb.ang1Y + md.invMAngB1Z * jb.ang1Z) + (md.invMAngB2X * jb.ang2X + md.invMAngB2Y * jb.ang2Y + md.invMAngB2Z * jb.ang2Z);
			var invDet = invMassTB00 * invMassTB11 - invMassTB01 * invMassTB01;
			if(invDet != 0) {
				invDet = 1 / invDet;
			}
			md.massTB00 = invMassTB11 * invDet;
			md.massTB01 = -invMassTB01 * invDet;
			md.massTB10 = -invMassTB01 * invDet;
			md.massTB11 = invMassTB00 * invDet;
		}
	}
	,warmStart: function(timeStep) {
		var lv1X;
		var lv1Y;
		var lv1Z;
		var lv2X;
		var lv2Y;
		var lv2Z;
		var av1X;
		var av1Y;
		var av1Z;
		var av2X;
		var av2Y;
		var av2Z;
		lv1X = this._b1._velX;
		lv1Y = this._b1._velY;
		lv1Z = this._b1._velZ;
		lv2X = this._b2._velX;
		lv2Y = this._b2._velY;
		lv2Z = this._b2._velZ;
		av1X = this._b1._angVelX;
		av1Y = this._b1._angVelY;
		av1Z = this._b1._angVelZ;
		av2X = this._b2._angVelX;
		av2Y = this._b2._angVelY;
		av2Z = this._b2._angVelZ;
		var _g = 0;
		var _g1 = this.info.numRows;
		while(_g < _g1) {
			var i = _g++;
			var row = this.info.rows[i];
			var imp = row.impulse;
			var md = this.massData[i];
			var jt = row.jacobianT;
			var jb = row.jacobianB;
			var impulseN = imp.impulseN;
			var impulseT = imp.impulseLX * jt.lin1X + imp.impulseLY * jt.lin1Y + imp.impulseLZ * jt.lin1Z;
			var impulseB = imp.impulseLX * jb.lin1X + imp.impulseLY * jb.lin1Y + imp.impulseLZ * jb.lin1Z;
			imp.impulseT = impulseT;
			imp.impulseB = impulseB;
			imp.impulseN *= timeStep.dtRatio;
			imp.impulseT *= timeStep.dtRatio;
			imp.impulseB *= timeStep.dtRatio;
			lv1X += md.invMLinN1X * impulseN;
			lv1Y += md.invMLinN1Y * impulseN;
			lv1Z += md.invMLinN1Z * impulseN;
			lv1X += md.invMLinT1X * impulseT;
			lv1Y += md.invMLinT1Y * impulseT;
			lv1Z += md.invMLinT1Z * impulseT;
			lv1X += md.invMLinB1X * impulseB;
			lv1Y += md.invMLinB1Y * impulseB;
			lv1Z += md.invMLinB1Z * impulseB;
			lv2X += md.invMLinN2X * -impulseN;
			lv2Y += md.invMLinN2Y * -impulseN;
			lv2Z += md.invMLinN2Z * -impulseN;
			lv2X += md.invMLinT2X * -impulseT;
			lv2Y += md.invMLinT2Y * -impulseT;
			lv2Z += md.invMLinT2Z * -impulseT;
			lv2X += md.invMLinB2X * -impulseB;
			lv2Y += md.invMLinB2Y * -impulseB;
			lv2Z += md.invMLinB2Z * -impulseB;
			av1X += md.invMAngN1X * impulseN;
			av1Y += md.invMAngN1Y * impulseN;
			av1Z += md.invMAngN1Z * impulseN;
			av1X += md.invMAngT1X * impulseT;
			av1Y += md.invMAngT1Y * impulseT;
			av1Z += md.invMAngT1Z * impulseT;
			av1X += md.invMAngB1X * impulseB;
			av1Y += md.invMAngB1Y * impulseB;
			av1Z += md.invMAngB1Z * impulseB;
			av2X += md.invMAngN2X * -impulseN;
			av2Y += md.invMAngN2Y * -impulseN;
			av2Z += md.invMAngN2Z * -impulseN;
			av2X += md.invMAngT2X * -impulseT;
			av2Y += md.invMAngT2Y * -impulseT;
			av2Z += md.invMAngT2Z * -impulseT;
			av2X += md.invMAngB2X * -impulseB;
			av2Y += md.invMAngB2Y * -impulseB;
			av2Z += md.invMAngB2Z * -impulseB;
		}
		this._b1._velX = lv1X;
		this._b1._velY = lv1Y;
		this._b1._velZ = lv1Z;
		this._b2._velX = lv2X;
		this._b2._velY = lv2Y;
		this._b2._velZ = lv2Z;
		this._b1._angVelX = av1X;
		this._b1._angVelY = av1Y;
		this._b1._angVelZ = av1Z;
		this._b2._angVelX = av2X;
		this._b2._angVelY = av2Y;
		this._b2._angVelZ = av2Z;
	}
	,solveVelocity: function() {
		var lv1X;
		var lv1Y;
		var lv1Z;
		var lv2X;
		var lv2Y;
		var lv2Z;
		var av1X;
		var av1Y;
		var av1Z;
		var av2X;
		var av2Y;
		var av2Z;
		lv1X = this._b1._velX;
		lv1Y = this._b1._velY;
		lv1Z = this._b1._velZ;
		lv2X = this._b2._velX;
		lv2Y = this._b2._velY;
		lv2Z = this._b2._velZ;
		av1X = this._b1._angVelX;
		av1Y = this._b1._angVelY;
		av1Z = this._b1._angVelZ;
		av2X = this._b2._angVelX;
		av2Y = this._b2._angVelY;
		av2Z = this._b2._angVelZ;
		var _g = 0;
		var _g1 = this.info.numRows;
		while(_g < _g1) {
			var i = _g++;
			var row = this.info.rows[i];
			var md = this.massData[i];
			var imp = row.impulse;
			var rvt = 0;
			var j = row.jacobianT;
			rvt += lv1X * j.lin1X + lv1Y * j.lin1Y + lv1Z * j.lin1Z;
			rvt -= lv2X * j.lin2X + lv2Y * j.lin2Y + lv2Z * j.lin2Z;
			rvt += av1X * j.ang1X + av1Y * j.ang1Y + av1Z * j.ang1Z;
			rvt -= av2X * j.ang2X + av2Y * j.ang2Y + av2Z * j.ang2Z;
			var rvb = 0;
			j = row.jacobianB;
			rvb += lv1X * j.lin1X + lv1Y * j.lin1Y + lv1Z * j.lin1Z;
			rvb -= lv2X * j.lin2X + lv2Y * j.lin2Y + lv2Z * j.lin2Z;
			rvb += av1X * j.ang1X + av1Y * j.ang1Y + av1Z * j.ang1Z;
			rvb -= av2X * j.ang2X + av2Y * j.ang2Y + av2Z * j.ang2Z;
			var impulseT = -(rvt * md.massTB00 + rvb * md.massTB01);
			var impulseB = -(rvt * md.massTB10 + rvb * md.massTB11);
			var oldImpulseT = imp.impulseT;
			var oldImpulseB = imp.impulseB;
			imp.impulseT += impulseT;
			imp.impulseB += impulseB;
			var maxImpulse = row.friction * imp.impulseN;
			if(maxImpulse == 0) {
				imp.impulseT = 0;
				imp.impulseB = 0;
			} else {
				var impulseLengthSq = imp.impulseT * imp.impulseT + imp.impulseB * imp.impulseB;
				if(impulseLengthSq > maxImpulse * maxImpulse) {
					var invL = maxImpulse / Math.sqrt(impulseLengthSq);
					imp.impulseT *= invL;
					imp.impulseB *= invL;
				}
			}
			impulseT = imp.impulseT - oldImpulseT;
			impulseB = imp.impulseB - oldImpulseB;
			lv1X += md.invMLinT1X * impulseT;
			lv1Y += md.invMLinT1Y * impulseT;
			lv1Z += md.invMLinT1Z * impulseT;
			lv1X += md.invMLinB1X * impulseB;
			lv1Y += md.invMLinB1Y * impulseB;
			lv1Z += md.invMLinB1Z * impulseB;
			lv2X += md.invMLinT2X * -impulseT;
			lv2Y += md.invMLinT2Y * -impulseT;
			lv2Z += md.invMLinT2Z * -impulseT;
			lv2X += md.invMLinB2X * -impulseB;
			lv2Y += md.invMLinB2Y * -impulseB;
			lv2Z += md.invMLinB2Z * -impulseB;
			av1X += md.invMAngT1X * impulseT;
			av1Y += md.invMAngT1Y * impulseT;
			av1Z += md.invMAngT1Z * impulseT;
			av1X += md.invMAngB1X * impulseB;
			av1Y += md.invMAngB1Y * impulseB;
			av1Z += md.invMAngB1Z * impulseB;
			av2X += md.invMAngT2X * -impulseT;
			av2Y += md.invMAngT2Y * -impulseT;
			av2Z += md.invMAngT2Z * -impulseT;
			av2X += md.invMAngB2X * -impulseB;
			av2Y += md.invMAngB2Y * -impulseB;
			av2Z += md.invMAngB2Z * -impulseB;
		}
		var _g = 0;
		var _g1 = this.info.numRows;
		while(_g < _g1) {
			var i = _g++;
			var row = this.info.rows[i];
			var md = this.massData[i];
			var imp = row.impulse;
			var rvn = 0;
			var j = row.jacobianN;
			rvn += lv1X * j.lin1X + lv1Y * j.lin1Y + lv1Z * j.lin1Z;
			rvn -= lv2X * j.lin2X + lv2Y * j.lin2Y + lv2Z * j.lin2Z;
			rvn += av1X * j.ang1X + av1Y * j.ang1Y + av1Z * j.ang1Z;
			rvn -= av2X * j.ang2X + av2Y * j.ang2Y + av2Z * j.ang2Z;
			var impulseN = (row.rhs - rvn) * md.massN;
			var oldImpulseN = imp.impulseN;
			imp.impulseN += impulseN;
			if(imp.impulseN < 0) {
				imp.impulseN = 0;
			}
			impulseN = imp.impulseN - oldImpulseN;
			lv1X += md.invMLinN1X * impulseN;
			lv1Y += md.invMLinN1Y * impulseN;
			lv1Z += md.invMLinN1Z * impulseN;
			lv2X += md.invMLinN2X * -impulseN;
			lv2Y += md.invMLinN2Y * -impulseN;
			lv2Z += md.invMLinN2Z * -impulseN;
			av1X += md.invMAngN1X * impulseN;
			av1Y += md.invMAngN1Y * impulseN;
			av1Z += md.invMAngN1Z * impulseN;
			av2X += md.invMAngN2X * -impulseN;
			av2Y += md.invMAngN2Y * -impulseN;
			av2Z += md.invMAngN2Z * -impulseN;
		}
		this._b1._velX = lv1X;
		this._b1._velY = lv1Y;
		this._b1._velZ = lv1Z;
		this._b2._velX = lv2X;
		this._b2._velY = lv2Y;
		this._b2._velZ = lv2Z;
		this._b1._angVelX = av1X;
		this._b1._angVelY = av1Y;
		this._b1._angVelZ = av1Z;
		this._b2._angVelX = av2X;
		this._b2._angVelY = av2Y;
		this._b2._angVelZ = av2Z;
	}
	,preSolvePosition: function(timeStep) {
		this.constraint._syncManifold();
		this.constraint._getPositionSolverInfo(this.info);
		var invM1 = this._b1._invMass;
		var invM2 = this._b2._invMass;
		var invI100;
		var invI101;
		var invI102;
		var invI110;
		var invI111;
		var invI112;
		var invI120;
		var invI121;
		var invI122;
		var invI200;
		var invI201;
		var invI202;
		var invI210;
		var invI211;
		var invI212;
		var invI220;
		var invI221;
		var invI222;
		invI100 = this._b1._invInertia00;
		invI101 = this._b1._invInertia01;
		invI102 = this._b1._invInertia02;
		invI110 = this._b1._invInertia10;
		invI111 = this._b1._invInertia11;
		invI112 = this._b1._invInertia12;
		invI120 = this._b1._invInertia20;
		invI121 = this._b1._invInertia21;
		invI122 = this._b1._invInertia22;
		invI200 = this._b2._invInertia00;
		invI201 = this._b2._invInertia01;
		invI202 = this._b2._invInertia02;
		invI210 = this._b2._invInertia10;
		invI211 = this._b2._invInertia11;
		invI212 = this._b2._invInertia12;
		invI220 = this._b2._invInertia20;
		invI221 = this._b2._invInertia21;
		invI222 = this._b2._invInertia22;
		var _g = 0;
		var _g1 = this.info.numRows;
		while(_g < _g1) {
			var i = _g++;
			var md = this.massData[i];
			var j = this.info.rows[i].jacobianN;
			md.invMLinN1X = j.lin1X * invM1;
			md.invMLinN1Y = j.lin1Y * invM1;
			md.invMLinN1Z = j.lin1Z * invM1;
			md.invMLinN2X = j.lin2X * invM2;
			md.invMLinN2Y = j.lin2Y * invM2;
			md.invMLinN2Z = j.lin2Z * invM2;
			var __tmp__X;
			var __tmp__Y;
			var __tmp__Z;
			__tmp__X = invI100 * j.ang1X + invI101 * j.ang1Y + invI102 * j.ang1Z;
			__tmp__Y = invI110 * j.ang1X + invI111 * j.ang1Y + invI112 * j.ang1Z;
			__tmp__Z = invI120 * j.ang1X + invI121 * j.ang1Y + invI122 * j.ang1Z;
			md.invMAngN1X = __tmp__X;
			md.invMAngN1Y = __tmp__Y;
			md.invMAngN1Z = __tmp__Z;
			var __tmp__X1;
			var __tmp__Y1;
			var __tmp__Z1;
			__tmp__X1 = invI200 * j.ang2X + invI201 * j.ang2Y + invI202 * j.ang2Z;
			__tmp__Y1 = invI210 * j.ang2X + invI211 * j.ang2Y + invI212 * j.ang2Z;
			__tmp__Z1 = invI220 * j.ang2X + invI221 * j.ang2Y + invI222 * j.ang2Z;
			md.invMAngN2X = __tmp__X1;
			md.invMAngN2Y = __tmp__Y1;
			md.invMAngN2Z = __tmp__Z1;
			md.massN = invM1 + invM2 + (md.invMAngN1X * j.ang1X + md.invMAngN1Y * j.ang1Y + md.invMAngN1Z * j.ang1Z) + (md.invMAngN2X * j.ang2X + md.invMAngN2Y * j.ang2Y + md.invMAngN2Z * j.ang2Z);
			if(md.massN != 0) {
				md.massN = 1 / md.massN;
			}
		}
		var _g = 0;
		var _g1 = this.info.numRows;
		while(_g < _g1) this.info.rows[_g++].impulse.impulseP = 0;
	}
	,solvePositionSplitImpulse: function() {
		var lv1X;
		var lv1Y;
		var lv1Z;
		var lv2X;
		var lv2Y;
		var lv2Z;
		var av1X;
		var av1Y;
		var av1Z;
		var av2X;
		var av2Y;
		var av2Z;
		lv1X = this._b1._pseudoVelX;
		lv1Y = this._b1._pseudoVelY;
		lv1Z = this._b1._pseudoVelZ;
		lv2X = this._b2._pseudoVelX;
		lv2Y = this._b2._pseudoVelY;
		lv2Z = this._b2._pseudoVelZ;
		av1X = this._b1._angPseudoVelX;
		av1Y = this._b1._angPseudoVelY;
		av1Z = this._b1._angPseudoVelZ;
		av2X = this._b2._angPseudoVelX;
		av2Y = this._b2._angPseudoVelY;
		av2Z = this._b2._angPseudoVelZ;
		var _g = 0;
		var _g1 = this.info.numRows;
		while(_g < _g1) {
			var i = _g++;
			var row = this.info.rows[i];
			var md = this.massData[i];
			var imp = row.impulse;
			var j = row.jacobianN;
			var rvn = 0;
			rvn += lv1X * j.lin1X + lv1Y * j.lin1Y + lv1Z * j.lin1Z;
			rvn -= lv2X * j.lin2X + lv2Y * j.lin2Y + lv2Z * j.lin2Z;
			rvn += av1X * j.ang1X + av1Y * j.ang1Y + av1Z * j.ang1Z;
			rvn -= av2X * j.ang2X + av2Y * j.ang2Y + av2Z * j.ang2Z;
			var impulseP = (row.rhs - rvn) * md.massN * oimo_common_Setting.positionSplitImpulseBaumgarte;
			var oldImpulseP = imp.impulseP;
			imp.impulseP += impulseP;
			if(imp.impulseP < 0) {
				imp.impulseP = 0;
			}
			impulseP = imp.impulseP - oldImpulseP;
			lv1X += md.invMLinN1X * impulseP;
			lv1Y += md.invMLinN1Y * impulseP;
			lv1Z += md.invMLinN1Z * impulseP;
			lv2X += md.invMLinN2X * -impulseP;
			lv2Y += md.invMLinN2Y * -impulseP;
			lv2Z += md.invMLinN2Z * -impulseP;
			av1X += md.invMAngN1X * impulseP;
			av1Y += md.invMAngN1Y * impulseP;
			av1Z += md.invMAngN1Z * impulseP;
			av2X += md.invMAngN2X * -impulseP;
			av2Y += md.invMAngN2Y * -impulseP;
			av2Z += md.invMAngN2Z * -impulseP;
		}
		this._b1._pseudoVelX = lv1X;
		this._b1._pseudoVelY = lv1Y;
		this._b1._pseudoVelZ = lv1Z;
		this._b2._pseudoVelX = lv2X;
		this._b2._pseudoVelY = lv2Y;
		this._b2._pseudoVelZ = lv2Z;
		this._b1._angPseudoVelX = av1X;
		this._b1._angPseudoVelY = av1Y;
		this._b1._angPseudoVelZ = av1Z;
		this._b2._angPseudoVelX = av2X;
		this._b2._angPseudoVelY = av2Y;
		this._b2._angPseudoVelZ = av2Z;
	}
	,solvePositionNgs: function(timeStep) {
		this.constraint._syncManifold();
		this.constraint._getPositionSolverInfo(this.info);
		var invM1 = this._b1._invMass;
		var invM2 = this._b2._invMass;
		var invI100;
		var invI101;
		var invI102;
		var invI110;
		var invI111;
		var invI112;
		var invI120;
		var invI121;
		var invI122;
		var invI200;
		var invI201;
		var invI202;
		var invI210;
		var invI211;
		var invI212;
		var invI220;
		var invI221;
		var invI222;
		invI100 = this._b1._invInertia00;
		invI101 = this._b1._invInertia01;
		invI102 = this._b1._invInertia02;
		invI110 = this._b1._invInertia10;
		invI111 = this._b1._invInertia11;
		invI112 = this._b1._invInertia12;
		invI120 = this._b1._invInertia20;
		invI121 = this._b1._invInertia21;
		invI122 = this._b1._invInertia22;
		invI200 = this._b2._invInertia00;
		invI201 = this._b2._invInertia01;
		invI202 = this._b2._invInertia02;
		invI210 = this._b2._invInertia10;
		invI211 = this._b2._invInertia11;
		invI212 = this._b2._invInertia12;
		invI220 = this._b2._invInertia20;
		invI221 = this._b2._invInertia21;
		invI222 = this._b2._invInertia22;
		var _g = 0;
		var _g1 = this.info.numRows;
		while(_g < _g1) {
			var i = _g++;
			var md = this.massData[i];
			var j = this.info.rows[i].jacobianN;
			md.invMLinN1X = j.lin1X * invM1;
			md.invMLinN1Y = j.lin1Y * invM1;
			md.invMLinN1Z = j.lin1Z * invM1;
			md.invMLinN2X = j.lin2X * invM2;
			md.invMLinN2Y = j.lin2Y * invM2;
			md.invMLinN2Z = j.lin2Z * invM2;
			var __tmp__X;
			var __tmp__Y;
			var __tmp__Z;
			__tmp__X = invI100 * j.ang1X + invI101 * j.ang1Y + invI102 * j.ang1Z;
			__tmp__Y = invI110 * j.ang1X + invI111 * j.ang1Y + invI112 * j.ang1Z;
			__tmp__Z = invI120 * j.ang1X + invI121 * j.ang1Y + invI122 * j.ang1Z;
			md.invMAngN1X = __tmp__X;
			md.invMAngN1Y = __tmp__Y;
			md.invMAngN1Z = __tmp__Z;
			var __tmp__X1;
			var __tmp__Y1;
			var __tmp__Z1;
			__tmp__X1 = invI200 * j.ang2X + invI201 * j.ang2Y + invI202 * j.ang2Z;
			__tmp__Y1 = invI210 * j.ang2X + invI211 * j.ang2Y + invI212 * j.ang2Z;
			__tmp__Z1 = invI220 * j.ang2X + invI221 * j.ang2Y + invI222 * j.ang2Z;
			md.invMAngN2X = __tmp__X1;
			md.invMAngN2Y = __tmp__Y1;
			md.invMAngN2Z = __tmp__Z1;
			md.massN = invM1 + invM2 + (md.invMAngN1X * j.ang1X + md.invMAngN1Y * j.ang1Y + md.invMAngN1Z * j.ang1Z) + (md.invMAngN2X * j.ang2X + md.invMAngN2Y * j.ang2Y + md.invMAngN2Z * j.ang2Z);
			if(md.massN != 0) {
				md.massN = 1 / md.massN;
			}
		}
		var lv1X;
		var lv1Y;
		var lv1Z;
		var lv2X;
		var lv2Y;
		var lv2Z;
		var av1X;
		var av1Y;
		var av1Z;
		var av2X;
		var av2Y;
		var av2Z;
		lv1X = 0;
		lv1Y = 0;
		lv1Z = 0;
		lv2X = 0;
		lv2Y = 0;
		lv2Z = 0;
		av1X = 0;
		av1Y = 0;
		av1Z = 0;
		av2X = 0;
		av2Y = 0;
		av2Z = 0;
		var _g = 0;
		var _g1 = this.info.numRows;
		while(_g < _g1) {
			var i = _g++;
			var row = this.info.rows[i];
			var md = this.massData[i];
			var imp = row.impulse;
			var j = row.jacobianN;
			var rvn = 0;
			rvn += lv1X * j.lin1X + lv1Y * j.lin1Y + lv1Z * j.lin1Z;
			rvn -= lv2X * j.lin2X + lv2Y * j.lin2Y + lv2Z * j.lin2Z;
			rvn += av1X * j.ang1X + av1Y * j.ang1Y + av1Z * j.ang1Z;
			rvn -= av2X * j.ang2X + av2Y * j.ang2Y + av2Z * j.ang2Z;
			var impulseP = (row.rhs - rvn) * md.massN * oimo_common_Setting.positionNgsBaumgarte;
			var oldImpulseP = imp.impulseP;
			imp.impulseP += impulseP;
			if(imp.impulseP < 0) {
				imp.impulseP = 0;
			}
			impulseP = imp.impulseP - oldImpulseP;
			lv1X += md.invMLinN1X * impulseP;
			lv1Y += md.invMLinN1Y * impulseP;
			lv1Z += md.invMLinN1Z * impulseP;
			lv2X += md.invMLinN2X * -impulseP;
			lv2Y += md.invMLinN2Y * -impulseP;
			lv2Z += md.invMLinN2Z * -impulseP;
			av1X += md.invMAngN1X * impulseP;
			av1Y += md.invMAngN1Y * impulseP;
			av1Z += md.invMAngN1Z * impulseP;
			av2X += md.invMAngN2X * -impulseP;
			av2Y += md.invMAngN2Y * -impulseP;
			av2Z += md.invMAngN2Z * -impulseP;
		}
		var _this = this._b1;
		_this._transform._positionX += lv1X;
		_this._transform._positionY += lv1Y;
		_this._transform._positionZ += lv1Z;
		var _this = this._b2;
		_this._transform._positionX += lv2X;
		_this._transform._positionY += lv2Y;
		_this._transform._positionZ += lv2Z;
		var _this = this._b1;
		var theta = Math.sqrt(av1X * av1X + av1Y * av1Y + av1Z * av1Z);
		var halfTheta = theta * 0.5;
		var rotationToSinAxisFactor;
		var cosHalfTheta;
		if(halfTheta < 0.5) {
			var ht2 = halfTheta * halfTheta;
			rotationToSinAxisFactor = 0.5 * (1 - ht2 * 0.16666666666666666 + ht2 * ht2 * 0.0083333333333333332);
			cosHalfTheta = 1 - ht2 * 0.5 + ht2 * ht2 * 0.041666666666666664;
		} else {
			rotationToSinAxisFactor = Math.sin(halfTheta) / theta;
			cosHalfTheta = Math.cos(halfTheta);
		}
		var sinAxisX;
		var sinAxisY;
		var sinAxisZ;
		sinAxisX = av1X * rotationToSinAxisFactor;
		sinAxisY = av1Y * rotationToSinAxisFactor;
		sinAxisZ = av1Z * rotationToSinAxisFactor;
		var dqX;
		var dqY;
		var dqZ;
		var dqW;
		dqX = sinAxisX;
		dqY = sinAxisY;
		dqZ = sinAxisZ;
		dqW = cosHalfTheta;
		var qX;
		var qY;
		var qZ;
		var qW;
		var e00 = _this._transform._rotation00;
		var e11 = _this._transform._rotation11;
		var e22 = _this._transform._rotation22;
		var t = e00 + e11 + e22;
		var s;
		if(t > 0) {
			s = Math.sqrt(t + 1);
			qW = 0.5 * s;
			s = 0.5 / s;
			qX = (_this._transform._rotation21 - _this._transform._rotation12) * s;
			qY = (_this._transform._rotation02 - _this._transform._rotation20) * s;
			qZ = (_this._transform._rotation10 - _this._transform._rotation01) * s;
		} else if(e00 > e11) {
			if(e00 > e22) {
				s = Math.sqrt(e00 - e11 - e22 + 1);
				qX = 0.5 * s;
				s = 0.5 / s;
				qY = (_this._transform._rotation01 + _this._transform._rotation10) * s;
				qZ = (_this._transform._rotation02 + _this._transform._rotation20) * s;
				qW = (_this._transform._rotation21 - _this._transform._rotation12) * s;
			} else {
				s = Math.sqrt(e22 - e00 - e11 + 1);
				qZ = 0.5 * s;
				s = 0.5 / s;
				qX = (_this._transform._rotation02 + _this._transform._rotation20) * s;
				qY = (_this._transform._rotation12 + _this._transform._rotation21) * s;
				qW = (_this._transform._rotation10 - _this._transform._rotation01) * s;
			}
		} else if(e11 > e22) {
			s = Math.sqrt(e11 - e22 - e00 + 1);
			qY = 0.5 * s;
			s = 0.5 / s;
			qX = (_this._transform._rotation01 + _this._transform._rotation10) * s;
			qZ = (_this._transform._rotation12 + _this._transform._rotation21) * s;
			qW = (_this._transform._rotation02 - _this._transform._rotation20) * s;
		} else {
			s = Math.sqrt(e22 - e00 - e11 + 1);
			qZ = 0.5 * s;
			s = 0.5 / s;
			qX = (_this._transform._rotation02 + _this._transform._rotation20) * s;
			qY = (_this._transform._rotation12 + _this._transform._rotation21) * s;
			qW = (_this._transform._rotation10 - _this._transform._rotation01) * s;
		}
		qX = dqW * qX + dqX * qW + dqY * qZ - dqZ * qY;
		qY = dqW * qY - dqX * qZ + dqY * qW + dqZ * qX;
		qZ = dqW * qZ + dqX * qY - dqY * qX + dqZ * qW;
		qW = dqW * qW - dqX * qX - dqY * qY - dqZ * qZ;
		var l = qX * qX + qY * qY + qZ * qZ + qW * qW;
		if(l > 1e-32) {
			l = 1 / Math.sqrt(l);
		}
		qX *= l;
		qY *= l;
		qZ *= l;
		qW *= l;
		var x = qX;
		var y = qY;
		var z = qZ;
		var w = qW;
		var x2 = 2 * x;
		var y2 = 2 * y;
		var z2 = 2 * z;
		var xx = x * x2;
		var yy = y * y2;
		var zz = z * z2;
		var xy = x * y2;
		var yz = y * z2;
		var xz = x * z2;
		var wx = w * x2;
		var wy = w * y2;
		var wz = w * z2;
		_this._transform._rotation00 = 1 - yy - zz;
		_this._transform._rotation01 = xy - wz;
		_this._transform._rotation02 = xz + wy;
		_this._transform._rotation10 = xy + wz;
		_this._transform._rotation11 = 1 - xx - zz;
		_this._transform._rotation12 = yz - wx;
		_this._transform._rotation20 = xz - wy;
		_this._transform._rotation21 = yz + wx;
		_this._transform._rotation22 = 1 - xx - yy;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = _this._transform._rotation00 * _this._invLocalInertia00 + _this._transform._rotation01 * _this._invLocalInertia10 + _this._transform._rotation02 * _this._invLocalInertia20;
		__tmp__01 = _this._transform._rotation00 * _this._invLocalInertia01 + _this._transform._rotation01 * _this._invLocalInertia11 + _this._transform._rotation02 * _this._invLocalInertia21;
		__tmp__02 = _this._transform._rotation00 * _this._invLocalInertia02 + _this._transform._rotation01 * _this._invLocalInertia12 + _this._transform._rotation02 * _this._invLocalInertia22;
		__tmp__10 = _this._transform._rotation10 * _this._invLocalInertia00 + _this._transform._rotation11 * _this._invLocalInertia10 + _this._transform._rotation12 * _this._invLocalInertia20;
		__tmp__11 = _this._transform._rotation10 * _this._invLocalInertia01 + _this._transform._rotation11 * _this._invLocalInertia11 + _this._transform._rotation12 * _this._invLocalInertia21;
		__tmp__12 = _this._transform._rotation10 * _this._invLocalInertia02 + _this._transform._rotation11 * _this._invLocalInertia12 + _this._transform._rotation12 * _this._invLocalInertia22;
		__tmp__20 = _this._transform._rotation20 * _this._invLocalInertia00 + _this._transform._rotation21 * _this._invLocalInertia10 + _this._transform._rotation22 * _this._invLocalInertia20;
		__tmp__21 = _this._transform._rotation20 * _this._invLocalInertia01 + _this._transform._rotation21 * _this._invLocalInertia11 + _this._transform._rotation22 * _this._invLocalInertia21;
		__tmp__22 = _this._transform._rotation20 * _this._invLocalInertia02 + _this._transform._rotation21 * _this._invLocalInertia12 + _this._transform._rotation22 * _this._invLocalInertia22;
		_this._invInertia00 = __tmp__00;
		_this._invInertia01 = __tmp__01;
		_this._invInertia02 = __tmp__02;
		_this._invInertia10 = __tmp__10;
		_this._invInertia11 = __tmp__11;
		_this._invInertia12 = __tmp__12;
		_this._invInertia20 = __tmp__20;
		_this._invInertia21 = __tmp__21;
		_this._invInertia22 = __tmp__22;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = _this._invInertia00 * _this._transform._rotation00 + _this._invInertia01 * _this._transform._rotation01 + _this._invInertia02 * _this._transform._rotation02;
		__tmp__01 = _this._invInertia00 * _this._transform._rotation10 + _this._invInertia01 * _this._transform._rotation11 + _this._invInertia02 * _this._transform._rotation12;
		__tmp__02 = _this._invInertia00 * _this._transform._rotation20 + _this._invInertia01 * _this._transform._rotation21 + _this._invInertia02 * _this._transform._rotation22;
		__tmp__10 = _this._invInertia10 * _this._transform._rotation00 + _this._invInertia11 * _this._transform._rotation01 + _this._invInertia12 * _this._transform._rotation02;
		__tmp__11 = _this._invInertia10 * _this._transform._rotation10 + _this._invInertia11 * _this._transform._rotation11 + _this._invInertia12 * _this._transform._rotation12;
		__tmp__12 = _this._invInertia10 * _this._transform._rotation20 + _this._invInertia11 * _this._transform._rotation21 + _this._invInertia12 * _this._transform._rotation22;
		__tmp__20 = _this._invInertia20 * _this._transform._rotation00 + _this._invInertia21 * _this._transform._rotation01 + _this._invInertia22 * _this._transform._rotation02;
		__tmp__21 = _this._invInertia20 * _this._transform._rotation10 + _this._invInertia21 * _this._transform._rotation11 + _this._invInertia22 * _this._transform._rotation12;
		__tmp__22 = _this._invInertia20 * _this._transform._rotation20 + _this._invInertia21 * _this._transform._rotation21 + _this._invInertia22 * _this._transform._rotation22;
		_this._invInertia00 = __tmp__00;
		_this._invInertia01 = __tmp__01;
		_this._invInertia02 = __tmp__02;
		_this._invInertia10 = __tmp__10;
		_this._invInertia11 = __tmp__11;
		_this._invInertia12 = __tmp__12;
		_this._invInertia20 = __tmp__20;
		_this._invInertia21 = __tmp__21;
		_this._invInertia22 = __tmp__22;
		_this._invInertia00 *= _this._rotFactor.x;
		_this._invInertia01 *= _this._rotFactor.x;
		_this._invInertia02 *= _this._rotFactor.x;
		_this._invInertia10 *= _this._rotFactor.y;
		_this._invInertia11 *= _this._rotFactor.y;
		_this._invInertia12 *= _this._rotFactor.y;
		_this._invInertia20 *= _this._rotFactor.z;
		_this._invInertia21 *= _this._rotFactor.z;
		_this._invInertia22 *= _this._rotFactor.z;
		var _this = this._b2;
		var theta = Math.sqrt(av2X * av2X + av2Y * av2Y + av2Z * av2Z);
		var halfTheta = theta * 0.5;
		var rotationToSinAxisFactor;
		var cosHalfTheta;
		if(halfTheta < 0.5) {
			var ht2 = halfTheta * halfTheta;
			rotationToSinAxisFactor = 0.5 * (1 - ht2 * 0.16666666666666666 + ht2 * ht2 * 0.0083333333333333332);
			cosHalfTheta = 1 - ht2 * 0.5 + ht2 * ht2 * 0.041666666666666664;
		} else {
			rotationToSinAxisFactor = Math.sin(halfTheta) / theta;
			cosHalfTheta = Math.cos(halfTheta);
		}
		var sinAxisX;
		var sinAxisY;
		var sinAxisZ;
		sinAxisX = av2X * rotationToSinAxisFactor;
		sinAxisY = av2Y * rotationToSinAxisFactor;
		sinAxisZ = av2Z * rotationToSinAxisFactor;
		var dqX;
		var dqY;
		var dqZ;
		var dqW;
		dqX = sinAxisX;
		dqY = sinAxisY;
		dqZ = sinAxisZ;
		dqW = cosHalfTheta;
		var qX;
		var qY;
		var qZ;
		var qW;
		var e00 = _this._transform._rotation00;
		var e11 = _this._transform._rotation11;
		var e22 = _this._transform._rotation22;
		var t = e00 + e11 + e22;
		var s;
		if(t > 0) {
			s = Math.sqrt(t + 1);
			qW = 0.5 * s;
			s = 0.5 / s;
			qX = (_this._transform._rotation21 - _this._transform._rotation12) * s;
			qY = (_this._transform._rotation02 - _this._transform._rotation20) * s;
			qZ = (_this._transform._rotation10 - _this._transform._rotation01) * s;
		} else if(e00 > e11) {
			if(e00 > e22) {
				s = Math.sqrt(e00 - e11 - e22 + 1);
				qX = 0.5 * s;
				s = 0.5 / s;
				qY = (_this._transform._rotation01 + _this._transform._rotation10) * s;
				qZ = (_this._transform._rotation02 + _this._transform._rotation20) * s;
				qW = (_this._transform._rotation21 - _this._transform._rotation12) * s;
			} else {
				s = Math.sqrt(e22 - e00 - e11 + 1);
				qZ = 0.5 * s;
				s = 0.5 / s;
				qX = (_this._transform._rotation02 + _this._transform._rotation20) * s;
				qY = (_this._transform._rotation12 + _this._transform._rotation21) * s;
				qW = (_this._transform._rotation10 - _this._transform._rotation01) * s;
			}
		} else if(e11 > e22) {
			s = Math.sqrt(e11 - e22 - e00 + 1);
			qY = 0.5 * s;
			s = 0.5 / s;
			qX = (_this._transform._rotation01 + _this._transform._rotation10) * s;
			qZ = (_this._transform._rotation12 + _this._transform._rotation21) * s;
			qW = (_this._transform._rotation02 - _this._transform._rotation20) * s;
		} else {
			s = Math.sqrt(e22 - e00 - e11 + 1);
			qZ = 0.5 * s;
			s = 0.5 / s;
			qX = (_this._transform._rotation02 + _this._transform._rotation20) * s;
			qY = (_this._transform._rotation12 + _this._transform._rotation21) * s;
			qW = (_this._transform._rotation10 - _this._transform._rotation01) * s;
		}
		qX = dqW * qX + dqX * qW + dqY * qZ - dqZ * qY;
		qY = dqW * qY - dqX * qZ + dqY * qW + dqZ * qX;
		qZ = dqW * qZ + dqX * qY - dqY * qX + dqZ * qW;
		qW = dqW * qW - dqX * qX - dqY * qY - dqZ * qZ;
		var l = qX * qX + qY * qY + qZ * qZ + qW * qW;
		if(l > 1e-32) {
			l = 1 / Math.sqrt(l);
		}
		qX *= l;
		qY *= l;
		qZ *= l;
		qW *= l;
		var x = qX;
		var y = qY;
		var z = qZ;
		var w = qW;
		var x2 = 2 * x;
		var y2 = 2 * y;
		var z2 = 2 * z;
		var xx = x * x2;
		var yy = y * y2;
		var zz = z * z2;
		var xy = x * y2;
		var yz = y * z2;
		var xz = x * z2;
		var wx = w * x2;
		var wy = w * y2;
		var wz = w * z2;
		_this._transform._rotation00 = 1 - yy - zz;
		_this._transform._rotation01 = xy - wz;
		_this._transform._rotation02 = xz + wy;
		_this._transform._rotation10 = xy + wz;
		_this._transform._rotation11 = 1 - xx - zz;
		_this._transform._rotation12 = yz - wx;
		_this._transform._rotation20 = xz - wy;
		_this._transform._rotation21 = yz + wx;
		_this._transform._rotation22 = 1 - xx - yy;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = _this._transform._rotation00 * _this._invLocalInertia00 + _this._transform._rotation01 * _this._invLocalInertia10 + _this._transform._rotation02 * _this._invLocalInertia20;
		__tmp__01 = _this._transform._rotation00 * _this._invLocalInertia01 + _this._transform._rotation01 * _this._invLocalInertia11 + _this._transform._rotation02 * _this._invLocalInertia21;
		__tmp__02 = _this._transform._rotation00 * _this._invLocalInertia02 + _this._transform._rotation01 * _this._invLocalInertia12 + _this._transform._rotation02 * _this._invLocalInertia22;
		__tmp__10 = _this._transform._rotation10 * _this._invLocalInertia00 + _this._transform._rotation11 * _this._invLocalInertia10 + _this._transform._rotation12 * _this._invLocalInertia20;
		__tmp__11 = _this._transform._rotation10 * _this._invLocalInertia01 + _this._transform._rotation11 * _this._invLocalInertia11 + _this._transform._rotation12 * _this._invLocalInertia21;
		__tmp__12 = _this._transform._rotation10 * _this._invLocalInertia02 + _this._transform._rotation11 * _this._invLocalInertia12 + _this._transform._rotation12 * _this._invLocalInertia22;
		__tmp__20 = _this._transform._rotation20 * _this._invLocalInertia00 + _this._transform._rotation21 * _this._invLocalInertia10 + _this._transform._rotation22 * _this._invLocalInertia20;
		__tmp__21 = _this._transform._rotation20 * _this._invLocalInertia01 + _this._transform._rotation21 * _this._invLocalInertia11 + _this._transform._rotation22 * _this._invLocalInertia21;
		__tmp__22 = _this._transform._rotation20 * _this._invLocalInertia02 + _this._transform._rotation21 * _this._invLocalInertia12 + _this._transform._rotation22 * _this._invLocalInertia22;
		_this._invInertia00 = __tmp__00;
		_this._invInertia01 = __tmp__01;
		_this._invInertia02 = __tmp__02;
		_this._invInertia10 = __tmp__10;
		_this._invInertia11 = __tmp__11;
		_this._invInertia12 = __tmp__12;
		_this._invInertia20 = __tmp__20;
		_this._invInertia21 = __tmp__21;
		_this._invInertia22 = __tmp__22;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = _this._invInertia00 * _this._transform._rotation00 + _this._invInertia01 * _this._transform._rotation01 + _this._invInertia02 * _this._transform._rotation02;
		__tmp__01 = _this._invInertia00 * _this._transform._rotation10 + _this._invInertia01 * _this._transform._rotation11 + _this._invInertia02 * _this._transform._rotation12;
		__tmp__02 = _this._invInertia00 * _this._transform._rotation20 + _this._invInertia01 * _this._transform._rotation21 + _this._invInertia02 * _this._transform._rotation22;
		__tmp__10 = _this._invInertia10 * _this._transform._rotation00 + _this._invInertia11 * _this._transform._rotation01 + _this._invInertia12 * _this._transform._rotation02;
		__tmp__11 = _this._invInertia10 * _this._transform._rotation10 + _this._invInertia11 * _this._transform._rotation11 + _this._invInertia12 * _this._transform._rotation12;
		__tmp__12 = _this._invInertia10 * _this._transform._rotation20 + _this._invInertia11 * _this._transform._rotation21 + _this._invInertia12 * _this._transform._rotation22;
		__tmp__20 = _this._invInertia20 * _this._transform._rotation00 + _this._invInertia21 * _this._transform._rotation01 + _this._invInertia22 * _this._transform._rotation02;
		__tmp__21 = _this._invInertia20 * _this._transform._rotation10 + _this._invInertia21 * _this._transform._rotation11 + _this._invInertia22 * _this._transform._rotation12;
		__tmp__22 = _this._invInertia20 * _this._transform._rotation20 + _this._invInertia21 * _this._transform._rotation21 + _this._invInertia22 * _this._transform._rotation22;
		_this._invInertia00 = __tmp__00;
		_this._invInertia01 = __tmp__01;
		_this._invInertia02 = __tmp__02;
		_this._invInertia10 = __tmp__10;
		_this._invInertia11 = __tmp__11;
		_this._invInertia12 = __tmp__12;
		_this._invInertia20 = __tmp__20;
		_this._invInertia21 = __tmp__21;
		_this._invInertia22 = __tmp__22;
		_this._invInertia00 *= _this._rotFactor.x;
		_this._invInertia01 *= _this._rotFactor.x;
		_this._invInertia02 *= _this._rotFactor.x;
		_this._invInertia10 *= _this._rotFactor.y;
		_this._invInertia11 *= _this._rotFactor.y;
		_this._invInertia12 *= _this._rotFactor.y;
		_this._invInertia20 *= _this._rotFactor.z;
		_this._invInertia21 *= _this._rotFactor.z;
		_this._invInertia22 *= _this._rotFactor.z;
	}
	,postSolve: function() {
		var lin1X;
		var lin1Y;
		var lin1Z;
		var ang1X;
		var ang1Y;
		var ang1Z;
		var ang2X;
		var ang2Y;
		var ang2Z;
		lin1X = 0;
		lin1Y = 0;
		lin1Z = 0;
		ang1X = 0;
		ang1Y = 0;
		ang1Z = 0;
		ang2X = 0;
		ang2Y = 0;
		ang2Z = 0;
		var _g = 0;
		var _g1 = this.info.numRows;
		while(_g < _g1) {
			var row = this.info.rows[_g++];
			var imp = row.impulse;
			var jn = row.jacobianN;
			var jt = row.jacobianT;
			var jb = row.jacobianB;
			var impN = imp.impulseN;
			var impT = imp.impulseT;
			var impB = imp.impulseB;
			var impulseLX;
			var impulseLY;
			var impulseLZ;
			impulseLX = 0;
			impulseLY = 0;
			impulseLZ = 0;
			impulseLX += jt.lin1X * impT;
			impulseLY += jt.lin1Y * impT;
			impulseLZ += jt.lin1Z * impT;
			impulseLX += jb.lin1X * impB;
			impulseLY += jb.lin1Y * impB;
			impulseLZ += jb.lin1Z * impB;
			imp.impulseLX = impulseLX;
			imp.impulseLY = impulseLY;
			imp.impulseLZ = impulseLZ;
			lin1X += jn.lin1X * impN;
			lin1Y += jn.lin1Y * impN;
			lin1Z += jn.lin1Z * impN;
			ang1X += jn.ang1X * impN;
			ang1Y += jn.ang1Y * impN;
			ang1Z += jn.ang1Z * impN;
			ang2X += jn.ang2X * impN;
			ang2Y += jn.ang2Y * impN;
			ang2Z += jn.ang2Z * impN;
			lin1X += jt.lin1X * impT;
			lin1Y += jt.lin1Y * impT;
			lin1Z += jt.lin1Z * impT;
			ang1X += jt.ang1X * impT;
			ang1Y += jt.ang1Y * impT;
			ang1Z += jt.ang1Z * impT;
			ang2X += jt.ang2X * impT;
			ang2Y += jt.ang2Y * impT;
			ang2Z += jt.ang2Z * impT;
			lin1X += jb.lin1X * impB;
			lin1Y += jb.lin1Y * impB;
			lin1Z += jb.lin1Z * impB;
			ang1X += jb.ang1X * impB;
			ang1Y += jb.ang1Y * impB;
			ang1Z += jb.ang1Z * impB;
			ang2X += jb.ang2X * impB;
			ang2Y += jb.ang2Y * impB;
			ang2Z += jb.ang2Z * impB;
		}
		this._b1._linearContactImpulseX += lin1X;
		this._b1._linearContactImpulseY += lin1Y;
		this._b1._linearContactImpulseZ += lin1Z;
		this._b1._angularContactImpulseX += ang1X;
		this._b1._angularContactImpulseY += ang1Y;
		this._b1._angularContactImpulseZ += ang1Z;
		this._b2._linearContactImpulseX -= lin1X;
		this._b2._linearContactImpulseY -= lin1Y;
		this._b2._linearContactImpulseZ -= lin1Z;
		this._b2._angularContactImpulseX -= ang2X;
		this._b2._angularContactImpulseY -= ang2Y;
		this._b2._angularContactImpulseZ -= ang2Z;
		this.constraint._syncManifold();
	}
	,__class__: oimo_dynamics_constraint_solver_pgs_PgsContactConstraintSolver
});
var oimo_dynamics_constraint_solver_pgs_PgsJointConstraintSolver = function(joint) {
	oimo_dynamics_constraint_ConstraintSolver.call(this);
	this.joint = joint;
	this.info = new oimo_dynamics_constraint_info_joint_JointSolverInfo();
	this.massData = new Array(oimo_common_Setting.maxJacobianRows);
	var _g = 0;
	var _g1 = this.massData.length;
	while(_g < _g1) this.massData[_g++] = new oimo_dynamics_constraint_solver_common_JointSolverMassDataRow();
};
oimo_dynamics_constraint_solver_pgs_PgsJointConstraintSolver.__name__ = true;
oimo_dynamics_constraint_solver_pgs_PgsJointConstraintSolver.__super__ = oimo_dynamics_constraint_ConstraintSolver;
oimo_dynamics_constraint_solver_pgs_PgsJointConstraintSolver.prototype = $extend(oimo_dynamics_constraint_ConstraintSolver.prototype,{
	preSolveVelocity: function(timeStep) {
		this.joint._syncAnchors();
		this.joint._getVelocitySolverInfo(timeStep,this.info);
		this._b1 = this.info.b1;
		this._b2 = this.info.b2;
		var invM1 = this._b1._invMass;
		var invM2 = this._b2._invMass;
		var invI100;
		var invI101;
		var invI102;
		var invI110;
		var invI111;
		var invI112;
		var invI120;
		var invI121;
		var invI122;
		var invI200;
		var invI201;
		var invI202;
		var invI210;
		var invI211;
		var invI212;
		var invI220;
		var invI221;
		var invI222;
		invI100 = this._b1._invInertia00;
		invI101 = this._b1._invInertia01;
		invI102 = this._b1._invInertia02;
		invI110 = this._b1._invInertia10;
		invI111 = this._b1._invInertia11;
		invI112 = this._b1._invInertia12;
		invI120 = this._b1._invInertia20;
		invI121 = this._b1._invInertia21;
		invI122 = this._b1._invInertia22;
		invI200 = this._b2._invInertia00;
		invI201 = this._b2._invInertia01;
		invI202 = this._b2._invInertia02;
		invI210 = this._b2._invInertia10;
		invI211 = this._b2._invInertia11;
		invI212 = this._b2._invInertia12;
		invI220 = this._b2._invInertia20;
		invI221 = this._b2._invInertia21;
		invI222 = this._b2._invInertia22;
		var _g = 0;
		var _g1 = this.info.numRows;
		while(_g < _g1) {
			var i = _g++;
			var row = this.info.rows[i];
			var md = this.massData[i];
			var j = row.jacobian;
			j.updateSparsity();
			if((j.flag & 1) != 0) {
				md.invMLin1X = j.lin1X * invM1;
				md.invMLin1Y = j.lin1Y * invM1;
				md.invMLin1Z = j.lin1Z * invM1;
				md.invMLin2X = j.lin2X * invM2;
				md.invMLin2Y = j.lin2Y * invM2;
				md.invMLin2Z = j.lin2Z * invM2;
			} else {
				md.invMLin1X = 0;
				md.invMLin1Y = 0;
				md.invMLin1Z = 0;
				md.invMLin2X = 0;
				md.invMLin2Y = 0;
				md.invMLin2Z = 0;
			}
			if((j.flag & 2) != 0) {
				var __tmp__X;
				var __tmp__Y;
				var __tmp__Z;
				__tmp__X = invI100 * j.ang1X + invI101 * j.ang1Y + invI102 * j.ang1Z;
				__tmp__Y = invI110 * j.ang1X + invI111 * j.ang1Y + invI112 * j.ang1Z;
				__tmp__Z = invI120 * j.ang1X + invI121 * j.ang1Y + invI122 * j.ang1Z;
				md.invMAng1X = __tmp__X;
				md.invMAng1Y = __tmp__Y;
				md.invMAng1Z = __tmp__Z;
				var __tmp__X1;
				var __tmp__Y1;
				var __tmp__Z1;
				__tmp__X1 = invI200 * j.ang2X + invI201 * j.ang2Y + invI202 * j.ang2Z;
				__tmp__Y1 = invI210 * j.ang2X + invI211 * j.ang2Y + invI212 * j.ang2Z;
				__tmp__Z1 = invI220 * j.ang2X + invI221 * j.ang2Y + invI222 * j.ang2Z;
				md.invMAng2X = __tmp__X1;
				md.invMAng2Y = __tmp__Y1;
				md.invMAng2Z = __tmp__Z1;
			} else {
				md.invMAng1X = 0;
				md.invMAng1Y = 0;
				md.invMAng1Z = 0;
				md.invMAng2X = 0;
				md.invMAng2Y = 0;
				md.invMAng2Z = 0;
			}
			md.massWithoutCfm = md.invMLin1X * j.lin1X + md.invMLin1Y * j.lin1Y + md.invMLin1Z * j.lin1Z + (md.invMLin2X * j.lin2X + md.invMLin2Y * j.lin2Y + md.invMLin2Z * j.lin2Z) + (md.invMAng1X * j.ang1X + md.invMAng1Y * j.ang1Y + md.invMAng1Z * j.ang1Z) + (md.invMAng2X * j.ang2X + md.invMAng2Y * j.ang2Y + md.invMAng2Z * j.ang2Z);
			md.mass = md.massWithoutCfm + row.cfm;
			if(md.massWithoutCfm != 0) {
				md.massWithoutCfm = 1 / md.massWithoutCfm;
			}
			if(md.mass != 0) {
				md.mass = 1 / md.mass;
			}
		}
	}
	,warmStart: function(timeStep) {
		var factor = this.joint._positionCorrectionAlgorithm == oimo_dynamics_constraint_PositionCorrectionAlgorithm.BAUMGARTE ? oimo_common_Setting.jointWarmStartingFactorForBaungarte : oimo_common_Setting.jointWarmStartingFactor;
		factor *= timeStep.dtRatio;
		if(factor <= 0) {
			var _g = 0;
			var _g1 = this.info.numRows;
			while(_g < _g1) {
				var _this = this.info.rows[_g++].impulse;
				_this.impulse = 0;
				_this.impulseM = 0;
				_this.impulseP = 0;
			}
			return;
		}
		var lv1X;
		var lv1Y;
		var lv1Z;
		var lv2X;
		var lv2Y;
		var lv2Z;
		var av1X;
		var av1Y;
		var av1Z;
		var av2X;
		var av2Y;
		var av2Z;
		lv1X = this._b1._velX;
		lv1Y = this._b1._velY;
		lv1Z = this._b1._velZ;
		lv2X = this._b2._velX;
		lv2Y = this._b2._velY;
		lv2Z = this._b2._velZ;
		av1X = this._b1._angVelX;
		av1Y = this._b1._angVelY;
		av1Z = this._b1._angVelZ;
		av2X = this._b2._angVelX;
		av2Y = this._b2._angVelY;
		av2Z = this._b2._angVelZ;
		var _g = 0;
		var _g1 = this.info.numRows;
		while(_g < _g1) {
			var i = _g++;
			var md = this.massData[i];
			var imp = this.info.rows[i].impulse;
			imp.impulse *= factor;
			imp.impulseM *= factor;
			var impulse = imp.impulse + imp.impulseM;
			lv1X += md.invMLin1X * impulse;
			lv1Y += md.invMLin1Y * impulse;
			lv1Z += md.invMLin1Z * impulse;
			lv2X += md.invMLin2X * -impulse;
			lv2Y += md.invMLin2Y * -impulse;
			lv2Z += md.invMLin2Z * -impulse;
			av1X += md.invMAng1X * impulse;
			av1Y += md.invMAng1Y * impulse;
			av1Z += md.invMAng1Z * impulse;
			av2X += md.invMAng2X * -impulse;
			av2Y += md.invMAng2Y * -impulse;
			av2Z += md.invMAng2Z * -impulse;
		}
		this._b1._velX = lv1X;
		this._b1._velY = lv1Y;
		this._b1._velZ = lv1Z;
		this._b2._velX = lv2X;
		this._b2._velY = lv2Y;
		this._b2._velZ = lv2Z;
		this._b1._angVelX = av1X;
		this._b1._angVelY = av1Y;
		this._b1._angVelZ = av1Z;
		this._b2._angVelX = av2X;
		this._b2._angVelY = av2Y;
		this._b2._angVelZ = av2Z;
	}
	,solveVelocity: function() {
		var lv1X;
		var lv1Y;
		var lv1Z;
		var lv2X;
		var lv2Y;
		var lv2Z;
		var av1X;
		var av1Y;
		var av1Z;
		var av2X;
		var av2Y;
		var av2Z;
		lv1X = this._b1._velX;
		lv1Y = this._b1._velY;
		lv1Z = this._b1._velZ;
		lv2X = this._b2._velX;
		lv2Y = this._b2._velY;
		lv2Z = this._b2._velZ;
		av1X = this._b1._angVelX;
		av1Y = this._b1._angVelY;
		av1Z = this._b1._angVelZ;
		av2X = this._b2._angVelX;
		av2Y = this._b2._angVelY;
		av2Z = this._b2._angVelZ;
		var _g = 0;
		var _g1 = this.info.numRows;
		while(_g < _g1) {
			var i = _g++;
			var row = this.info.rows[i];
			var md = this.massData[i];
			var imp = row.impulse;
			var j = row.jacobian;
			if(row.motorMaxImpulse == 0) {
				continue;
			}
			var rv = 0;
			rv += lv1X * j.lin1X + lv1Y * j.lin1Y + lv1Z * j.lin1Z;
			rv -= lv2X * j.lin2X + lv2Y * j.lin2Y + lv2Z * j.lin2Z;
			rv += av1X * j.ang1X + av1Y * j.ang1Y + av1Z * j.ang1Z;
			rv -= av2X * j.ang2X + av2Y * j.ang2Y + av2Z * j.ang2Z;
			var impulseM = (-row.motorSpeed - rv) * md.massWithoutCfm;
			var oldImpulseM = imp.impulseM;
			imp.impulseM += impulseM;
			if(imp.impulseM < -row.motorMaxImpulse) {
				imp.impulseM = -row.motorMaxImpulse;
			} else if(imp.impulseM > row.motorMaxImpulse) {
				imp.impulseM = row.motorMaxImpulse;
			}
			impulseM = imp.impulseM - oldImpulseM;
			if((j.flag & 1) != 0) {
				lv1X += md.invMLin1X * impulseM;
				lv1Y += md.invMLin1Y * impulseM;
				lv1Z += md.invMLin1Z * impulseM;
				lv2X += md.invMLin2X * -impulseM;
				lv2Y += md.invMLin2Y * -impulseM;
				lv2Z += md.invMLin2Z * -impulseM;
			}
			if((j.flag & 2) != 0) {
				av1X += md.invMAng1X * impulseM;
				av1Y += md.invMAng1Y * impulseM;
				av1Z += md.invMAng1Z * impulseM;
				av2X += md.invMAng2X * -impulseM;
				av2Y += md.invMAng2Y * -impulseM;
				av2Z += md.invMAng2Z * -impulseM;
			}
		}
		var _g = 0;
		var _g1 = this.info.numRows;
		while(_g < _g1) {
			var i = _g++;
			var row = this.info.rows[i];
			var md = this.massData[i];
			var imp = row.impulse;
			var j = row.jacobian;
			var rv = 0;
			rv += lv1X * j.lin1X + lv1Y * j.lin1Y + lv1Z * j.lin1Z;
			rv -= lv2X * j.lin2X + lv2Y * j.lin2Y + lv2Z * j.lin2Z;
			rv += av1X * j.ang1X + av1Y * j.ang1Y + av1Z * j.ang1Z;
			rv -= av2X * j.ang2X + av2Y * j.ang2Y + av2Z * j.ang2Z;
			var impulse = (row.rhs - rv - imp.impulse * row.cfm) * md.mass;
			var oldImpulse = imp.impulse;
			imp.impulse += impulse;
			if(imp.impulse < row.minImpulse) {
				imp.impulse = row.minImpulse;
			} else if(imp.impulse > row.maxImpulse) {
				imp.impulse = row.maxImpulse;
			}
			impulse = imp.impulse - oldImpulse;
			if((j.flag & 1) != 0) {
				lv1X += md.invMLin1X * impulse;
				lv1Y += md.invMLin1Y * impulse;
				lv1Z += md.invMLin1Z * impulse;
				lv2X += md.invMLin2X * -impulse;
				lv2Y += md.invMLin2Y * -impulse;
				lv2Z += md.invMLin2Z * -impulse;
			}
			if((j.flag & 2) != 0) {
				av1X += md.invMAng1X * impulse;
				av1Y += md.invMAng1Y * impulse;
				av1Z += md.invMAng1Z * impulse;
				av2X += md.invMAng2X * -impulse;
				av2Y += md.invMAng2Y * -impulse;
				av2Z += md.invMAng2Z * -impulse;
			}
		}
		this._b1._velX = lv1X;
		this._b1._velY = lv1Y;
		this._b1._velZ = lv1Z;
		this._b2._velX = lv2X;
		this._b2._velY = lv2Y;
		this._b2._velZ = lv2Z;
		this._b1._angVelX = av1X;
		this._b1._angVelY = av1Y;
		this._b1._angVelZ = av1Z;
		this._b2._angVelX = av2X;
		this._b2._angVelY = av2Y;
		this._b2._angVelZ = av2Z;
	}
	,postSolveVelocity: function(timeStep) {
		var linX;
		var linY;
		var linZ;
		var angX;
		var angY;
		var angZ;
		linX = 0;
		linY = 0;
		linZ = 0;
		angX = 0;
		angY = 0;
		angZ = 0;
		var _g = 0;
		var _g1 = this.info.numRows;
		while(_g < _g1) {
			var row = this.info.rows[_g++];
			var imp = row.impulse;
			var j = row.jacobian;
			if((j.flag & 1) != 0) {
				linX += j.lin1X * imp.impulse;
				linY += j.lin1Y * imp.impulse;
				linZ += j.lin1Z * imp.impulse;
			} else if((j.flag & 2) != 0) {
				angX += j.ang1X * imp.impulse;
				angY += j.ang1Y * imp.impulse;
				angZ += j.ang1Z * imp.impulse;
			}
		}
		this.joint._appliedForceX = linX * timeStep.invDt;
		this.joint._appliedForceY = linY * timeStep.invDt;
		this.joint._appliedForceZ = linZ * timeStep.invDt;
		this.joint._appliedTorqueX = angX * timeStep.invDt;
		this.joint._appliedTorqueY = angY * timeStep.invDt;
		this.joint._appliedTorqueZ = angZ * timeStep.invDt;
	}
	,preSolvePosition: function(timeStep) {
		this.joint._syncAnchors();
		this.joint._getPositionSolverInfo(this.info);
		this._b1 = this.info.b1;
		this._b2 = this.info.b2;
		var invM1 = this._b1._invMass;
		var invM2 = this._b2._invMass;
		var invI100;
		var invI101;
		var invI102;
		var invI110;
		var invI111;
		var invI112;
		var invI120;
		var invI121;
		var invI122;
		var invI200;
		var invI201;
		var invI202;
		var invI210;
		var invI211;
		var invI212;
		var invI220;
		var invI221;
		var invI222;
		invI100 = this._b1._invInertia00;
		invI101 = this._b1._invInertia01;
		invI102 = this._b1._invInertia02;
		invI110 = this._b1._invInertia10;
		invI111 = this._b1._invInertia11;
		invI112 = this._b1._invInertia12;
		invI120 = this._b1._invInertia20;
		invI121 = this._b1._invInertia21;
		invI122 = this._b1._invInertia22;
		invI200 = this._b2._invInertia00;
		invI201 = this._b2._invInertia01;
		invI202 = this._b2._invInertia02;
		invI210 = this._b2._invInertia10;
		invI211 = this._b2._invInertia11;
		invI212 = this._b2._invInertia12;
		invI220 = this._b2._invInertia20;
		invI221 = this._b2._invInertia21;
		invI222 = this._b2._invInertia22;
		var _g = 0;
		var _g1 = this.info.numRows;
		while(_g < _g1) {
			var i = _g++;
			var md = this.massData[i];
			var j = this.info.rows[i].jacobian;
			md.invMLin1X = j.lin1X * invM1;
			md.invMLin1Y = j.lin1Y * invM1;
			md.invMLin1Z = j.lin1Z * invM1;
			md.invMLin2X = j.lin2X * invM2;
			md.invMLin2Y = j.lin2Y * invM2;
			md.invMLin2Z = j.lin2Z * invM2;
			var __tmp__X;
			var __tmp__Y;
			var __tmp__Z;
			__tmp__X = invI100 * j.ang1X + invI101 * j.ang1Y + invI102 * j.ang1Z;
			__tmp__Y = invI110 * j.ang1X + invI111 * j.ang1Y + invI112 * j.ang1Z;
			__tmp__Z = invI120 * j.ang1X + invI121 * j.ang1Y + invI122 * j.ang1Z;
			md.invMAng1X = __tmp__X;
			md.invMAng1Y = __tmp__Y;
			md.invMAng1Z = __tmp__Z;
			var __tmp__X1;
			var __tmp__Y1;
			var __tmp__Z1;
			__tmp__X1 = invI200 * j.ang2X + invI201 * j.ang2Y + invI202 * j.ang2Z;
			__tmp__Y1 = invI210 * j.ang2X + invI211 * j.ang2Y + invI212 * j.ang2Z;
			__tmp__Z1 = invI220 * j.ang2X + invI221 * j.ang2Y + invI222 * j.ang2Z;
			md.invMAng2X = __tmp__X1;
			md.invMAng2Y = __tmp__Y1;
			md.invMAng2Z = __tmp__Z1;
			md.mass = md.invMLin1X * j.lin1X + md.invMLin1Y * j.lin1Y + md.invMLin1Z * j.lin1Z + (md.invMLin2X * j.lin2X + md.invMLin2Y * j.lin2Y + md.invMLin2Z * j.lin2Z) + (md.invMAng1X * j.ang1X + md.invMAng1Y * j.ang1Y + md.invMAng1Z * j.ang1Z) + (md.invMAng2X * j.ang2X + md.invMAng2Y * j.ang2Y + md.invMAng2Z * j.ang2Z);
			if(md.mass != 0) {
				md.mass = 1 / md.mass;
			}
		}
		var _g = 0;
		var _g1 = this.info.numRows;
		while(_g < _g1) this.info.rows[_g++].impulse.impulseP = 0;
	}
	,solvePositionSplitImpulse: function() {
		var lv1X;
		var lv1Y;
		var lv1Z;
		var lv2X;
		var lv2Y;
		var lv2Z;
		var av1X;
		var av1Y;
		var av1Z;
		var av2X;
		var av2Y;
		var av2Z;
		lv1X = this._b1._pseudoVelX;
		lv1Y = this._b1._pseudoVelY;
		lv1Z = this._b1._pseudoVelZ;
		lv2X = this._b2._pseudoVelX;
		lv2Y = this._b2._pseudoVelY;
		lv2Z = this._b2._pseudoVelZ;
		av1X = this._b1._angPseudoVelX;
		av1Y = this._b1._angPseudoVelY;
		av1Z = this._b1._angPseudoVelZ;
		av2X = this._b2._angPseudoVelX;
		av2Y = this._b2._angPseudoVelY;
		av2Z = this._b2._angPseudoVelZ;
		var _g = 0;
		var _g1 = this.info.numRows;
		while(_g < _g1) {
			var i = _g++;
			var row = this.info.rows[i];
			var md = this.massData[i];
			var imp = row.impulse;
			var j = row.jacobian;
			var rv = 0;
			rv += lv1X * j.lin1X + lv1Y * j.lin1Y + lv1Z * j.lin1Z;
			rv -= lv2X * j.lin2X + lv2Y * j.lin2Y + lv2Z * j.lin2Z;
			rv += av1X * j.ang1X + av1Y * j.ang1Y + av1Z * j.ang1Z;
			rv -= av2X * j.ang2X + av2Y * j.ang2Y + av2Z * j.ang2Z;
			var impulseP = (row.rhs * oimo_common_Setting.positionSplitImpulseBaumgarte - rv) * md.mass;
			var oldImpulseP = imp.impulseP;
			imp.impulseP += impulseP;
			if(imp.impulseP < row.minImpulse) {
				imp.impulseP = row.minImpulse;
			} else if(imp.impulseP > row.maxImpulse) {
				imp.impulseP = row.maxImpulse;
			}
			impulseP = imp.impulseP - oldImpulseP;
			lv1X += md.invMLin1X * impulseP;
			lv1Y += md.invMLin1Y * impulseP;
			lv1Z += md.invMLin1Z * impulseP;
			lv2X += md.invMLin2X * -impulseP;
			lv2Y += md.invMLin2Y * -impulseP;
			lv2Z += md.invMLin2Z * -impulseP;
			av1X += md.invMAng1X * impulseP;
			av1Y += md.invMAng1Y * impulseP;
			av1Z += md.invMAng1Z * impulseP;
			av2X += md.invMAng2X * -impulseP;
			av2Y += md.invMAng2Y * -impulseP;
			av2Z += md.invMAng2Z * -impulseP;
		}
		this._b1._pseudoVelX = lv1X;
		this._b1._pseudoVelY = lv1Y;
		this._b1._pseudoVelZ = lv1Z;
		this._b2._pseudoVelX = lv2X;
		this._b2._pseudoVelY = lv2Y;
		this._b2._pseudoVelZ = lv2Z;
		this._b1._angPseudoVelX = av1X;
		this._b1._angPseudoVelY = av1Y;
		this._b1._angPseudoVelZ = av1Z;
		this._b2._angPseudoVelX = av2X;
		this._b2._angPseudoVelY = av2Y;
		this._b2._angPseudoVelZ = av2Z;
	}
	,solvePositionNgs: function(timeStep) {
		this.joint._syncAnchors();
		this.joint._getPositionSolverInfo(this.info);
		this._b1 = this.info.b1;
		this._b2 = this.info.b2;
		var invM1 = this._b1._invMass;
		var invM2 = this._b2._invMass;
		var invI100;
		var invI101;
		var invI102;
		var invI110;
		var invI111;
		var invI112;
		var invI120;
		var invI121;
		var invI122;
		var invI200;
		var invI201;
		var invI202;
		var invI210;
		var invI211;
		var invI212;
		var invI220;
		var invI221;
		var invI222;
		invI100 = this._b1._invInertia00;
		invI101 = this._b1._invInertia01;
		invI102 = this._b1._invInertia02;
		invI110 = this._b1._invInertia10;
		invI111 = this._b1._invInertia11;
		invI112 = this._b1._invInertia12;
		invI120 = this._b1._invInertia20;
		invI121 = this._b1._invInertia21;
		invI122 = this._b1._invInertia22;
		invI200 = this._b2._invInertia00;
		invI201 = this._b2._invInertia01;
		invI202 = this._b2._invInertia02;
		invI210 = this._b2._invInertia10;
		invI211 = this._b2._invInertia11;
		invI212 = this._b2._invInertia12;
		invI220 = this._b2._invInertia20;
		invI221 = this._b2._invInertia21;
		invI222 = this._b2._invInertia22;
		var _g = 0;
		var _g1 = this.info.numRows;
		while(_g < _g1) {
			var i = _g++;
			var md = this.massData[i];
			var j = this.info.rows[i].jacobian;
			md.invMLin1X = j.lin1X * invM1;
			md.invMLin1Y = j.lin1Y * invM1;
			md.invMLin1Z = j.lin1Z * invM1;
			md.invMLin2X = j.lin2X * invM2;
			md.invMLin2Y = j.lin2Y * invM2;
			md.invMLin2Z = j.lin2Z * invM2;
			var __tmp__X;
			var __tmp__Y;
			var __tmp__Z;
			__tmp__X = invI100 * j.ang1X + invI101 * j.ang1Y + invI102 * j.ang1Z;
			__tmp__Y = invI110 * j.ang1X + invI111 * j.ang1Y + invI112 * j.ang1Z;
			__tmp__Z = invI120 * j.ang1X + invI121 * j.ang1Y + invI122 * j.ang1Z;
			md.invMAng1X = __tmp__X;
			md.invMAng1Y = __tmp__Y;
			md.invMAng1Z = __tmp__Z;
			var __tmp__X1;
			var __tmp__Y1;
			var __tmp__Z1;
			__tmp__X1 = invI200 * j.ang2X + invI201 * j.ang2Y + invI202 * j.ang2Z;
			__tmp__Y1 = invI210 * j.ang2X + invI211 * j.ang2Y + invI212 * j.ang2Z;
			__tmp__Z1 = invI220 * j.ang2X + invI221 * j.ang2Y + invI222 * j.ang2Z;
			md.invMAng2X = __tmp__X1;
			md.invMAng2Y = __tmp__Y1;
			md.invMAng2Z = __tmp__Z1;
			md.mass = md.invMLin1X * j.lin1X + md.invMLin1Y * j.lin1Y + md.invMLin1Z * j.lin1Z + (md.invMLin2X * j.lin2X + md.invMLin2Y * j.lin2Y + md.invMLin2Z * j.lin2Z) + (md.invMAng1X * j.ang1X + md.invMAng1Y * j.ang1Y + md.invMAng1Z * j.ang1Z) + (md.invMAng2X * j.ang2X + md.invMAng2Y * j.ang2Y + md.invMAng2Z * j.ang2Z);
			if(md.mass != 0) {
				md.mass = 1 / md.mass;
			}
		}
		var lv1X;
		var lv1Y;
		var lv1Z;
		var lv2X;
		var lv2Y;
		var lv2Z;
		var av1X;
		var av1Y;
		var av1Z;
		var av2X;
		var av2Y;
		var av2Z;
		lv1X = 0;
		lv1Y = 0;
		lv1Z = 0;
		lv2X = 0;
		lv2Y = 0;
		lv2Z = 0;
		av1X = 0;
		av1Y = 0;
		av1Z = 0;
		av2X = 0;
		av2Y = 0;
		av2Z = 0;
		var _g = 0;
		var _g1 = this.info.numRows;
		while(_g < _g1) {
			var i = _g++;
			var row = this.info.rows[i];
			var md = this.massData[i];
			var imp = row.impulse;
			var j = row.jacobian;
			var rv = 0;
			rv += lv1X * j.lin1X + lv1Y * j.lin1Y + lv1Z * j.lin1Z;
			rv -= lv2X * j.lin2X + lv2Y * j.lin2Y + lv2Z * j.lin2Z;
			rv += av1X * j.ang1X + av1Y * j.ang1Y + av1Z * j.ang1Z;
			rv -= av2X * j.ang2X + av2Y * j.ang2Y + av2Z * j.ang2Z;
			var impulseP = (row.rhs * oimo_common_Setting.positionNgsBaumgarte - rv) * md.mass;
			var oldImpulseP = imp.impulseP;
			imp.impulseP += impulseP;
			if(imp.impulseP < row.minImpulse) {
				imp.impulseP = row.minImpulse;
			} else if(imp.impulseP > row.maxImpulse) {
				imp.impulseP = row.maxImpulse;
			}
			impulseP = imp.impulseP - oldImpulseP;
			lv1X += md.invMLin1X * impulseP;
			lv1Y += md.invMLin1Y * impulseP;
			lv1Z += md.invMLin1Z * impulseP;
			lv2X += md.invMLin2X * -impulseP;
			lv2Y += md.invMLin2Y * -impulseP;
			lv2Z += md.invMLin2Z * -impulseP;
			av1X += md.invMAng1X * impulseP;
			av1Y += md.invMAng1Y * impulseP;
			av1Z += md.invMAng1Z * impulseP;
			av2X += md.invMAng2X * -impulseP;
			av2Y += md.invMAng2Y * -impulseP;
			av2Z += md.invMAng2Z * -impulseP;
		}
		var _this = this._b1;
		_this._transform._positionX += lv1X;
		_this._transform._positionY += lv1Y;
		_this._transform._positionZ += lv1Z;
		var _this = this._b2;
		_this._transform._positionX += lv2X;
		_this._transform._positionY += lv2Y;
		_this._transform._positionZ += lv2Z;
		var _this = this._b1;
		var theta = Math.sqrt(av1X * av1X + av1Y * av1Y + av1Z * av1Z);
		var halfTheta = theta * 0.5;
		var rotationToSinAxisFactor;
		var cosHalfTheta;
		if(halfTheta < 0.5) {
			var ht2 = halfTheta * halfTheta;
			rotationToSinAxisFactor = 0.5 * (1 - ht2 * 0.16666666666666666 + ht2 * ht2 * 0.0083333333333333332);
			cosHalfTheta = 1 - ht2 * 0.5 + ht2 * ht2 * 0.041666666666666664;
		} else {
			rotationToSinAxisFactor = Math.sin(halfTheta) / theta;
			cosHalfTheta = Math.cos(halfTheta);
		}
		var sinAxisX;
		var sinAxisY;
		var sinAxisZ;
		sinAxisX = av1X * rotationToSinAxisFactor;
		sinAxisY = av1Y * rotationToSinAxisFactor;
		sinAxisZ = av1Z * rotationToSinAxisFactor;
		var dqX;
		var dqY;
		var dqZ;
		var dqW;
		dqX = sinAxisX;
		dqY = sinAxisY;
		dqZ = sinAxisZ;
		dqW = cosHalfTheta;
		var qX;
		var qY;
		var qZ;
		var qW;
		var e00 = _this._transform._rotation00;
		var e11 = _this._transform._rotation11;
		var e22 = _this._transform._rotation22;
		var t = e00 + e11 + e22;
		var s;
		if(t > 0) {
			s = Math.sqrt(t + 1);
			qW = 0.5 * s;
			s = 0.5 / s;
			qX = (_this._transform._rotation21 - _this._transform._rotation12) * s;
			qY = (_this._transform._rotation02 - _this._transform._rotation20) * s;
			qZ = (_this._transform._rotation10 - _this._transform._rotation01) * s;
		} else if(e00 > e11) {
			if(e00 > e22) {
				s = Math.sqrt(e00 - e11 - e22 + 1);
				qX = 0.5 * s;
				s = 0.5 / s;
				qY = (_this._transform._rotation01 + _this._transform._rotation10) * s;
				qZ = (_this._transform._rotation02 + _this._transform._rotation20) * s;
				qW = (_this._transform._rotation21 - _this._transform._rotation12) * s;
			} else {
				s = Math.sqrt(e22 - e00 - e11 + 1);
				qZ = 0.5 * s;
				s = 0.5 / s;
				qX = (_this._transform._rotation02 + _this._transform._rotation20) * s;
				qY = (_this._transform._rotation12 + _this._transform._rotation21) * s;
				qW = (_this._transform._rotation10 - _this._transform._rotation01) * s;
			}
		} else if(e11 > e22) {
			s = Math.sqrt(e11 - e22 - e00 + 1);
			qY = 0.5 * s;
			s = 0.5 / s;
			qX = (_this._transform._rotation01 + _this._transform._rotation10) * s;
			qZ = (_this._transform._rotation12 + _this._transform._rotation21) * s;
			qW = (_this._transform._rotation02 - _this._transform._rotation20) * s;
		} else {
			s = Math.sqrt(e22 - e00 - e11 + 1);
			qZ = 0.5 * s;
			s = 0.5 / s;
			qX = (_this._transform._rotation02 + _this._transform._rotation20) * s;
			qY = (_this._transform._rotation12 + _this._transform._rotation21) * s;
			qW = (_this._transform._rotation10 - _this._transform._rotation01) * s;
		}
		qX = dqW * qX + dqX * qW + dqY * qZ - dqZ * qY;
		qY = dqW * qY - dqX * qZ + dqY * qW + dqZ * qX;
		qZ = dqW * qZ + dqX * qY - dqY * qX + dqZ * qW;
		qW = dqW * qW - dqX * qX - dqY * qY - dqZ * qZ;
		var l = qX * qX + qY * qY + qZ * qZ + qW * qW;
		if(l > 1e-32) {
			l = 1 / Math.sqrt(l);
		}
		qX *= l;
		qY *= l;
		qZ *= l;
		qW *= l;
		var x = qX;
		var y = qY;
		var z = qZ;
		var w = qW;
		var x2 = 2 * x;
		var y2 = 2 * y;
		var z2 = 2 * z;
		var xx = x * x2;
		var yy = y * y2;
		var zz = z * z2;
		var xy = x * y2;
		var yz = y * z2;
		var xz = x * z2;
		var wx = w * x2;
		var wy = w * y2;
		var wz = w * z2;
		_this._transform._rotation00 = 1 - yy - zz;
		_this._transform._rotation01 = xy - wz;
		_this._transform._rotation02 = xz + wy;
		_this._transform._rotation10 = xy + wz;
		_this._transform._rotation11 = 1 - xx - zz;
		_this._transform._rotation12 = yz - wx;
		_this._transform._rotation20 = xz - wy;
		_this._transform._rotation21 = yz + wx;
		_this._transform._rotation22 = 1 - xx - yy;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = _this._transform._rotation00 * _this._invLocalInertia00 + _this._transform._rotation01 * _this._invLocalInertia10 + _this._transform._rotation02 * _this._invLocalInertia20;
		__tmp__01 = _this._transform._rotation00 * _this._invLocalInertia01 + _this._transform._rotation01 * _this._invLocalInertia11 + _this._transform._rotation02 * _this._invLocalInertia21;
		__tmp__02 = _this._transform._rotation00 * _this._invLocalInertia02 + _this._transform._rotation01 * _this._invLocalInertia12 + _this._transform._rotation02 * _this._invLocalInertia22;
		__tmp__10 = _this._transform._rotation10 * _this._invLocalInertia00 + _this._transform._rotation11 * _this._invLocalInertia10 + _this._transform._rotation12 * _this._invLocalInertia20;
		__tmp__11 = _this._transform._rotation10 * _this._invLocalInertia01 + _this._transform._rotation11 * _this._invLocalInertia11 + _this._transform._rotation12 * _this._invLocalInertia21;
		__tmp__12 = _this._transform._rotation10 * _this._invLocalInertia02 + _this._transform._rotation11 * _this._invLocalInertia12 + _this._transform._rotation12 * _this._invLocalInertia22;
		__tmp__20 = _this._transform._rotation20 * _this._invLocalInertia00 + _this._transform._rotation21 * _this._invLocalInertia10 + _this._transform._rotation22 * _this._invLocalInertia20;
		__tmp__21 = _this._transform._rotation20 * _this._invLocalInertia01 + _this._transform._rotation21 * _this._invLocalInertia11 + _this._transform._rotation22 * _this._invLocalInertia21;
		__tmp__22 = _this._transform._rotation20 * _this._invLocalInertia02 + _this._transform._rotation21 * _this._invLocalInertia12 + _this._transform._rotation22 * _this._invLocalInertia22;
		_this._invInertia00 = __tmp__00;
		_this._invInertia01 = __tmp__01;
		_this._invInertia02 = __tmp__02;
		_this._invInertia10 = __tmp__10;
		_this._invInertia11 = __tmp__11;
		_this._invInertia12 = __tmp__12;
		_this._invInertia20 = __tmp__20;
		_this._invInertia21 = __tmp__21;
		_this._invInertia22 = __tmp__22;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = _this._invInertia00 * _this._transform._rotation00 + _this._invInertia01 * _this._transform._rotation01 + _this._invInertia02 * _this._transform._rotation02;
		__tmp__01 = _this._invInertia00 * _this._transform._rotation10 + _this._invInertia01 * _this._transform._rotation11 + _this._invInertia02 * _this._transform._rotation12;
		__tmp__02 = _this._invInertia00 * _this._transform._rotation20 + _this._invInertia01 * _this._transform._rotation21 + _this._invInertia02 * _this._transform._rotation22;
		__tmp__10 = _this._invInertia10 * _this._transform._rotation00 + _this._invInertia11 * _this._transform._rotation01 + _this._invInertia12 * _this._transform._rotation02;
		__tmp__11 = _this._invInertia10 * _this._transform._rotation10 + _this._invInertia11 * _this._transform._rotation11 + _this._invInertia12 * _this._transform._rotation12;
		__tmp__12 = _this._invInertia10 * _this._transform._rotation20 + _this._invInertia11 * _this._transform._rotation21 + _this._invInertia12 * _this._transform._rotation22;
		__tmp__20 = _this._invInertia20 * _this._transform._rotation00 + _this._invInertia21 * _this._transform._rotation01 + _this._invInertia22 * _this._transform._rotation02;
		__tmp__21 = _this._invInertia20 * _this._transform._rotation10 + _this._invInertia21 * _this._transform._rotation11 + _this._invInertia22 * _this._transform._rotation12;
		__tmp__22 = _this._invInertia20 * _this._transform._rotation20 + _this._invInertia21 * _this._transform._rotation21 + _this._invInertia22 * _this._transform._rotation22;
		_this._invInertia00 = __tmp__00;
		_this._invInertia01 = __tmp__01;
		_this._invInertia02 = __tmp__02;
		_this._invInertia10 = __tmp__10;
		_this._invInertia11 = __tmp__11;
		_this._invInertia12 = __tmp__12;
		_this._invInertia20 = __tmp__20;
		_this._invInertia21 = __tmp__21;
		_this._invInertia22 = __tmp__22;
		_this._invInertia00 *= _this._rotFactor.x;
		_this._invInertia01 *= _this._rotFactor.x;
		_this._invInertia02 *= _this._rotFactor.x;
		_this._invInertia10 *= _this._rotFactor.y;
		_this._invInertia11 *= _this._rotFactor.y;
		_this._invInertia12 *= _this._rotFactor.y;
		_this._invInertia20 *= _this._rotFactor.z;
		_this._invInertia21 *= _this._rotFactor.z;
		_this._invInertia22 *= _this._rotFactor.z;
		var _this = this._b2;
		var theta = Math.sqrt(av2X * av2X + av2Y * av2Y + av2Z * av2Z);
		var halfTheta = theta * 0.5;
		var rotationToSinAxisFactor;
		var cosHalfTheta;
		if(halfTheta < 0.5) {
			var ht2 = halfTheta * halfTheta;
			rotationToSinAxisFactor = 0.5 * (1 - ht2 * 0.16666666666666666 + ht2 * ht2 * 0.0083333333333333332);
			cosHalfTheta = 1 - ht2 * 0.5 + ht2 * ht2 * 0.041666666666666664;
		} else {
			rotationToSinAxisFactor = Math.sin(halfTheta) / theta;
			cosHalfTheta = Math.cos(halfTheta);
		}
		var sinAxisX;
		var sinAxisY;
		var sinAxisZ;
		sinAxisX = av2X * rotationToSinAxisFactor;
		sinAxisY = av2Y * rotationToSinAxisFactor;
		sinAxisZ = av2Z * rotationToSinAxisFactor;
		var dqX;
		var dqY;
		var dqZ;
		var dqW;
		dqX = sinAxisX;
		dqY = sinAxisY;
		dqZ = sinAxisZ;
		dqW = cosHalfTheta;
		var qX;
		var qY;
		var qZ;
		var qW;
		var e00 = _this._transform._rotation00;
		var e11 = _this._transform._rotation11;
		var e22 = _this._transform._rotation22;
		var t = e00 + e11 + e22;
		var s;
		if(t > 0) {
			s = Math.sqrt(t + 1);
			qW = 0.5 * s;
			s = 0.5 / s;
			qX = (_this._transform._rotation21 - _this._transform._rotation12) * s;
			qY = (_this._transform._rotation02 - _this._transform._rotation20) * s;
			qZ = (_this._transform._rotation10 - _this._transform._rotation01) * s;
		} else if(e00 > e11) {
			if(e00 > e22) {
				s = Math.sqrt(e00 - e11 - e22 + 1);
				qX = 0.5 * s;
				s = 0.5 / s;
				qY = (_this._transform._rotation01 + _this._transform._rotation10) * s;
				qZ = (_this._transform._rotation02 + _this._transform._rotation20) * s;
				qW = (_this._transform._rotation21 - _this._transform._rotation12) * s;
			} else {
				s = Math.sqrt(e22 - e00 - e11 + 1);
				qZ = 0.5 * s;
				s = 0.5 / s;
				qX = (_this._transform._rotation02 + _this._transform._rotation20) * s;
				qY = (_this._transform._rotation12 + _this._transform._rotation21) * s;
				qW = (_this._transform._rotation10 - _this._transform._rotation01) * s;
			}
		} else if(e11 > e22) {
			s = Math.sqrt(e11 - e22 - e00 + 1);
			qY = 0.5 * s;
			s = 0.5 / s;
			qX = (_this._transform._rotation01 + _this._transform._rotation10) * s;
			qZ = (_this._transform._rotation12 + _this._transform._rotation21) * s;
			qW = (_this._transform._rotation02 - _this._transform._rotation20) * s;
		} else {
			s = Math.sqrt(e22 - e00 - e11 + 1);
			qZ = 0.5 * s;
			s = 0.5 / s;
			qX = (_this._transform._rotation02 + _this._transform._rotation20) * s;
			qY = (_this._transform._rotation12 + _this._transform._rotation21) * s;
			qW = (_this._transform._rotation10 - _this._transform._rotation01) * s;
		}
		qX = dqW * qX + dqX * qW + dqY * qZ - dqZ * qY;
		qY = dqW * qY - dqX * qZ + dqY * qW + dqZ * qX;
		qZ = dqW * qZ + dqX * qY - dqY * qX + dqZ * qW;
		qW = dqW * qW - dqX * qX - dqY * qY - dqZ * qZ;
		var l = qX * qX + qY * qY + qZ * qZ + qW * qW;
		if(l > 1e-32) {
			l = 1 / Math.sqrt(l);
		}
		qX *= l;
		qY *= l;
		qZ *= l;
		qW *= l;
		var x = qX;
		var y = qY;
		var z = qZ;
		var w = qW;
		var x2 = 2 * x;
		var y2 = 2 * y;
		var z2 = 2 * z;
		var xx = x * x2;
		var yy = y * y2;
		var zz = z * z2;
		var xy = x * y2;
		var yz = y * z2;
		var xz = x * z2;
		var wx = w * x2;
		var wy = w * y2;
		var wz = w * z2;
		_this._transform._rotation00 = 1 - yy - zz;
		_this._transform._rotation01 = xy - wz;
		_this._transform._rotation02 = xz + wy;
		_this._transform._rotation10 = xy + wz;
		_this._transform._rotation11 = 1 - xx - zz;
		_this._transform._rotation12 = yz - wx;
		_this._transform._rotation20 = xz - wy;
		_this._transform._rotation21 = yz + wx;
		_this._transform._rotation22 = 1 - xx - yy;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = _this._transform._rotation00 * _this._invLocalInertia00 + _this._transform._rotation01 * _this._invLocalInertia10 + _this._transform._rotation02 * _this._invLocalInertia20;
		__tmp__01 = _this._transform._rotation00 * _this._invLocalInertia01 + _this._transform._rotation01 * _this._invLocalInertia11 + _this._transform._rotation02 * _this._invLocalInertia21;
		__tmp__02 = _this._transform._rotation00 * _this._invLocalInertia02 + _this._transform._rotation01 * _this._invLocalInertia12 + _this._transform._rotation02 * _this._invLocalInertia22;
		__tmp__10 = _this._transform._rotation10 * _this._invLocalInertia00 + _this._transform._rotation11 * _this._invLocalInertia10 + _this._transform._rotation12 * _this._invLocalInertia20;
		__tmp__11 = _this._transform._rotation10 * _this._invLocalInertia01 + _this._transform._rotation11 * _this._invLocalInertia11 + _this._transform._rotation12 * _this._invLocalInertia21;
		__tmp__12 = _this._transform._rotation10 * _this._invLocalInertia02 + _this._transform._rotation11 * _this._invLocalInertia12 + _this._transform._rotation12 * _this._invLocalInertia22;
		__tmp__20 = _this._transform._rotation20 * _this._invLocalInertia00 + _this._transform._rotation21 * _this._invLocalInertia10 + _this._transform._rotation22 * _this._invLocalInertia20;
		__tmp__21 = _this._transform._rotation20 * _this._invLocalInertia01 + _this._transform._rotation21 * _this._invLocalInertia11 + _this._transform._rotation22 * _this._invLocalInertia21;
		__tmp__22 = _this._transform._rotation20 * _this._invLocalInertia02 + _this._transform._rotation21 * _this._invLocalInertia12 + _this._transform._rotation22 * _this._invLocalInertia22;
		_this._invInertia00 = __tmp__00;
		_this._invInertia01 = __tmp__01;
		_this._invInertia02 = __tmp__02;
		_this._invInertia10 = __tmp__10;
		_this._invInertia11 = __tmp__11;
		_this._invInertia12 = __tmp__12;
		_this._invInertia20 = __tmp__20;
		_this._invInertia21 = __tmp__21;
		_this._invInertia22 = __tmp__22;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = _this._invInertia00 * _this._transform._rotation00 + _this._invInertia01 * _this._transform._rotation01 + _this._invInertia02 * _this._transform._rotation02;
		__tmp__01 = _this._invInertia00 * _this._transform._rotation10 + _this._invInertia01 * _this._transform._rotation11 + _this._invInertia02 * _this._transform._rotation12;
		__tmp__02 = _this._invInertia00 * _this._transform._rotation20 + _this._invInertia01 * _this._transform._rotation21 + _this._invInertia02 * _this._transform._rotation22;
		__tmp__10 = _this._invInertia10 * _this._transform._rotation00 + _this._invInertia11 * _this._transform._rotation01 + _this._invInertia12 * _this._transform._rotation02;
		__tmp__11 = _this._invInertia10 * _this._transform._rotation10 + _this._invInertia11 * _this._transform._rotation11 + _this._invInertia12 * _this._transform._rotation12;
		__tmp__12 = _this._invInertia10 * _this._transform._rotation20 + _this._invInertia11 * _this._transform._rotation21 + _this._invInertia12 * _this._transform._rotation22;
		__tmp__20 = _this._invInertia20 * _this._transform._rotation00 + _this._invInertia21 * _this._transform._rotation01 + _this._invInertia22 * _this._transform._rotation02;
		__tmp__21 = _this._invInertia20 * _this._transform._rotation10 + _this._invInertia21 * _this._transform._rotation11 + _this._invInertia22 * _this._transform._rotation12;
		__tmp__22 = _this._invInertia20 * _this._transform._rotation20 + _this._invInertia21 * _this._transform._rotation21 + _this._invInertia22 * _this._transform._rotation22;
		_this._invInertia00 = __tmp__00;
		_this._invInertia01 = __tmp__01;
		_this._invInertia02 = __tmp__02;
		_this._invInertia10 = __tmp__10;
		_this._invInertia11 = __tmp__11;
		_this._invInertia12 = __tmp__12;
		_this._invInertia20 = __tmp__20;
		_this._invInertia21 = __tmp__21;
		_this._invInertia22 = __tmp__22;
		_this._invInertia00 *= _this._rotFactor.x;
		_this._invInertia01 *= _this._rotFactor.x;
		_this._invInertia02 *= _this._rotFactor.x;
		_this._invInertia10 *= _this._rotFactor.y;
		_this._invInertia11 *= _this._rotFactor.y;
		_this._invInertia12 *= _this._rotFactor.y;
		_this._invInertia20 *= _this._rotFactor.z;
		_this._invInertia21 *= _this._rotFactor.z;
		_this._invInertia22 *= _this._rotFactor.z;
	}
	,postSolve: function() {
		this.joint._syncAnchors();
		this.joint._checkDestruction();
	}
	,__class__: oimo_dynamics_constraint_solver_pgs_PgsJointConstraintSolver
});
var oimo_dynamics_rigidbody_MassData = function() {
	this.mass = 0;
	this.localInertia = new oimo_common_Mat3();
};
oimo_dynamics_rigidbody_MassData.__name__ = true;
oimo_dynamics_rigidbody_MassData.prototype = {
	__class__: oimo_dynamics_rigidbody_MassData
};
var oimo_dynamics_rigidbody_RigidBody = function(config) {
	this._next = null;
	this._prev = null;
	this._shapeList = null;
	this._shapeListLast = null;
	this._numShapes = 0;
	this._contactLinkList = null;
	this._contactLinkListLast = null;
	this._numContactLinks = 0;
	this._jointLinkList = null;
	this._jointLinkListLast = null;
	this._numJointLinks = 0;
	var v = config.linearVelocity;
	this._velX = v.x;
	this._velY = v.y;
	this._velZ = v.z;
	var v = config.angularVelocity;
	this._angVelX = v.x;
	this._angVelY = v.y;
	this._angVelZ = v.z;
	this._pseudoVelX = 0;
	this._pseudoVelY = 0;
	this._pseudoVelZ = 0;
	this._angPseudoVelX = 0;
	this._angPseudoVelY = 0;
	this._angPseudoVelZ = 0;
	this._ptransform = new oimo_common_Transform();
	this._transform = new oimo_common_Transform();
	var v = config.position;
	this._ptransform._positionX = v.x;
	this._ptransform._positionY = v.y;
	this._ptransform._positionZ = v.z;
	var m = config.rotation;
	this._ptransform._rotation00 = m.e00;
	this._ptransform._rotation01 = m.e01;
	this._ptransform._rotation02 = m.e02;
	this._ptransform._rotation10 = m.e10;
	this._ptransform._rotation11 = m.e11;
	this._ptransform._rotation12 = m.e12;
	this._ptransform._rotation20 = m.e20;
	this._ptransform._rotation21 = m.e21;
	this._ptransform._rotation22 = m.e22;
	var dst = this._transform;
	var src = this._ptransform;
	dst._positionX = src._positionX;
	dst._positionY = src._positionY;
	dst._positionZ = src._positionZ;
	dst._rotation00 = src._rotation00;
	dst._rotation01 = src._rotation01;
	dst._rotation02 = src._rotation02;
	dst._rotation10 = src._rotation10;
	dst._rotation11 = src._rotation11;
	dst._rotation12 = src._rotation12;
	dst._rotation20 = src._rotation20;
	dst._rotation21 = src._rotation21;
	dst._rotation22 = src._rotation22;
	this._type = config.type;
	this._sleepTime = 0;
	this._sleeping = false;
	this._autoSleep = config.autoSleep;
	this._mass = 0;
	this._invMass = 0;
	this._localInertia00 = 0;
	this._localInertia01 = 0;
	this._localInertia02 = 0;
	this._localInertia10 = 0;
	this._localInertia11 = 0;
	this._localInertia12 = 0;
	this._localInertia20 = 0;
	this._localInertia21 = 0;
	this._localInertia22 = 0;
	this._invLocalInertia00 = 0;
	this._invLocalInertia01 = 0;
	this._invLocalInertia02 = 0;
	this._invLocalInertia10 = 0;
	this._invLocalInertia11 = 0;
	this._invLocalInertia12 = 0;
	this._invLocalInertia20 = 0;
	this._invLocalInertia21 = 0;
	this._invLocalInertia22 = 0;
	this._invLocalInertiaWithoutRotFactor00 = 0;
	this._invLocalInertiaWithoutRotFactor01 = 0;
	this._invLocalInertiaWithoutRotFactor02 = 0;
	this._invLocalInertiaWithoutRotFactor10 = 0;
	this._invLocalInertiaWithoutRotFactor11 = 0;
	this._invLocalInertiaWithoutRotFactor12 = 0;
	this._invLocalInertiaWithoutRotFactor20 = 0;
	this._invLocalInertiaWithoutRotFactor21 = 0;
	this._invLocalInertiaWithoutRotFactor22 = 0;
	this._invInertia00 = 0;
	this._invInertia01 = 0;
	this._invInertia02 = 0;
	this._invInertia10 = 0;
	this._invInertia11 = 0;
	this._invInertia12 = 0;
	this._invInertia20 = 0;
	this._invInertia21 = 0;
	this._invInertia22 = 0;
	this._linearDamping = config.linearDamping;
	this._angularDamping = config.angularDamping;
	this._forceX = 0;
	this._forceY = 0;
	this._forceZ = 0;
	this._torqueX = 0;
	this._torqueY = 0;
	this._torqueZ = 0;
	this._linearContactImpulseX = 0;
	this._linearContactImpulseY = 0;
	this._linearContactImpulseZ = 0;
	this._angularContactImpulseX = 0;
	this._angularContactImpulseY = 0;
	this._angularContactImpulseZ = 0;
	this._rotFactor = new oimo_common_Vec3(1,1,1);
	this._addedToIsland = false;
	this._gravityScale = 1;
	this._world = null;
};
oimo_dynamics_rigidbody_RigidBody.__name__ = true;
oimo_dynamics_rigidbody_RigidBody.prototype = {
	_integrate: function(dt) {
		switch(this._type) {
		case 1:
			this._velX = 0;
			this._velY = 0;
			this._velZ = 0;
			this._angVelX = 0;
			this._angVelY = 0;
			this._angVelZ = 0;
			this._pseudoVelX = 0;
			this._pseudoVelY = 0;
			this._pseudoVelZ = 0;
			this._angPseudoVelX = 0;
			this._angPseudoVelY = 0;
			this._angPseudoVelZ = 0;
			break;
		case 0:case 2:
			var translationX;
			var translationY;
			var translationZ;
			var rotationX;
			var rotationY;
			var rotationZ;
			translationX = this._velX * dt;
			translationY = this._velY * dt;
			translationZ = this._velZ * dt;
			rotationX = this._angVelX * dt;
			rotationY = this._angVelY * dt;
			rotationZ = this._angVelZ * dt;
			var translationLengthSq = translationX * translationX + translationY * translationY + translationZ * translationZ;
			var rotationLengthSq = rotationX * rotationX + rotationY * rotationY + rotationZ * rotationZ;
			if(translationLengthSq == 0 && rotationLengthSq == 0) {
				return;
			}
			if(translationLengthSq > oimo_common_Setting.maxTranslationPerStep * oimo_common_Setting.maxTranslationPerStep) {
				var l = oimo_common_Setting.maxTranslationPerStep / Math.sqrt(translationLengthSq);
				this._velX *= l;
				this._velY *= l;
				this._velZ *= l;
				translationX *= l;
				translationY *= l;
				translationZ *= l;
			}
			if(rotationLengthSq > oimo_common_Setting.maxRotationPerStep * oimo_common_Setting.maxRotationPerStep) {
				var l = oimo_common_Setting.maxRotationPerStep / Math.sqrt(rotationLengthSq);
				this._angVelX *= l;
				this._angVelY *= l;
				this._angVelZ *= l;
				rotationX *= l;
				rotationY *= l;
				rotationZ *= l;
			}
			this._transform._positionX += translationX;
			this._transform._positionY += translationY;
			this._transform._positionZ += translationZ;
			var theta = Math.sqrt(rotationX * rotationX + rotationY * rotationY + rotationZ * rotationZ);
			var halfTheta = theta * 0.5;
			var rotationToSinAxisFactor;
			var cosHalfTheta;
			if(halfTheta < 0.5) {
				var ht2 = halfTheta * halfTheta;
				rotationToSinAxisFactor = 0.5 * (1 - ht2 * 0.16666666666666666 + ht2 * ht2 * 0.0083333333333333332);
				cosHalfTheta = 1 - ht2 * 0.5 + ht2 * ht2 * 0.041666666666666664;
			} else {
				rotationToSinAxisFactor = Math.sin(halfTheta) / theta;
				cosHalfTheta = Math.cos(halfTheta);
			}
			var sinAxisX;
			var sinAxisY;
			var sinAxisZ;
			sinAxisX = rotationX * rotationToSinAxisFactor;
			sinAxisY = rotationY * rotationToSinAxisFactor;
			sinAxisZ = rotationZ * rotationToSinAxisFactor;
			var dqX;
			var dqY;
			var dqZ;
			var dqW;
			dqX = sinAxisX;
			dqY = sinAxisY;
			dqZ = sinAxisZ;
			dqW = cosHalfTheta;
			var qX;
			var qY;
			var qZ;
			var qW;
			var e00 = this._transform._rotation00;
			var e11 = this._transform._rotation11;
			var e22 = this._transform._rotation22;
			var t = e00 + e11 + e22;
			var s;
			if(t > 0) {
				s = Math.sqrt(t + 1);
				qW = 0.5 * s;
				s = 0.5 / s;
				qX = (this._transform._rotation21 - this._transform._rotation12) * s;
				qY = (this._transform._rotation02 - this._transform._rotation20) * s;
				qZ = (this._transform._rotation10 - this._transform._rotation01) * s;
			} else if(e00 > e11) {
				if(e00 > e22) {
					s = Math.sqrt(e00 - e11 - e22 + 1);
					qX = 0.5 * s;
					s = 0.5 / s;
					qY = (this._transform._rotation01 + this._transform._rotation10) * s;
					qZ = (this._transform._rotation02 + this._transform._rotation20) * s;
					qW = (this._transform._rotation21 - this._transform._rotation12) * s;
				} else {
					s = Math.sqrt(e22 - e00 - e11 + 1);
					qZ = 0.5 * s;
					s = 0.5 / s;
					qX = (this._transform._rotation02 + this._transform._rotation20) * s;
					qY = (this._transform._rotation12 + this._transform._rotation21) * s;
					qW = (this._transform._rotation10 - this._transform._rotation01) * s;
				}
			} else if(e11 > e22) {
				s = Math.sqrt(e11 - e22 - e00 + 1);
				qY = 0.5 * s;
				s = 0.5 / s;
				qX = (this._transform._rotation01 + this._transform._rotation10) * s;
				qZ = (this._transform._rotation12 + this._transform._rotation21) * s;
				qW = (this._transform._rotation02 - this._transform._rotation20) * s;
			} else {
				s = Math.sqrt(e22 - e00 - e11 + 1);
				qZ = 0.5 * s;
				s = 0.5 / s;
				qX = (this._transform._rotation02 + this._transform._rotation20) * s;
				qY = (this._transform._rotation12 + this._transform._rotation21) * s;
				qW = (this._transform._rotation10 - this._transform._rotation01) * s;
			}
			qX = dqW * qX + dqX * qW + dqY * qZ - dqZ * qY;
			qY = dqW * qY - dqX * qZ + dqY * qW + dqZ * qX;
			qZ = dqW * qZ + dqX * qY - dqY * qX + dqZ * qW;
			qW = dqW * qW - dqX * qX - dqY * qY - dqZ * qZ;
			var l = qX * qX + qY * qY + qZ * qZ + qW * qW;
			if(l > 1e-32) {
				l = 1 / Math.sqrt(l);
			}
			qX *= l;
			qY *= l;
			qZ *= l;
			qW *= l;
			var x = qX;
			var y = qY;
			var z = qZ;
			var w = qW;
			var x2 = 2 * x;
			var y2 = 2 * y;
			var z2 = 2 * z;
			var xx = x * x2;
			var yy = y * y2;
			var zz = z * z2;
			var xy = x * y2;
			var yz = y * z2;
			var xz = x * z2;
			var wx = w * x2;
			var wy = w * y2;
			var wz = w * z2;
			this._transform._rotation00 = 1 - yy - zz;
			this._transform._rotation01 = xy - wz;
			this._transform._rotation02 = xz + wy;
			this._transform._rotation10 = xy + wz;
			this._transform._rotation11 = 1 - xx - zz;
			this._transform._rotation12 = yz - wx;
			this._transform._rotation20 = xz - wy;
			this._transform._rotation21 = yz + wx;
			this._transform._rotation22 = 1 - xx - yy;
			var __tmp__00;
			var __tmp__01;
			var __tmp__02;
			var __tmp__10;
			var __tmp__11;
			var __tmp__12;
			var __tmp__20;
			var __tmp__21;
			var __tmp__22;
			__tmp__00 = this._transform._rotation00 * this._invLocalInertia00 + this._transform._rotation01 * this._invLocalInertia10 + this._transform._rotation02 * this._invLocalInertia20;
			__tmp__01 = this._transform._rotation00 * this._invLocalInertia01 + this._transform._rotation01 * this._invLocalInertia11 + this._transform._rotation02 * this._invLocalInertia21;
			__tmp__02 = this._transform._rotation00 * this._invLocalInertia02 + this._transform._rotation01 * this._invLocalInertia12 + this._transform._rotation02 * this._invLocalInertia22;
			__tmp__10 = this._transform._rotation10 * this._invLocalInertia00 + this._transform._rotation11 * this._invLocalInertia10 + this._transform._rotation12 * this._invLocalInertia20;
			__tmp__11 = this._transform._rotation10 * this._invLocalInertia01 + this._transform._rotation11 * this._invLocalInertia11 + this._transform._rotation12 * this._invLocalInertia21;
			__tmp__12 = this._transform._rotation10 * this._invLocalInertia02 + this._transform._rotation11 * this._invLocalInertia12 + this._transform._rotation12 * this._invLocalInertia22;
			__tmp__20 = this._transform._rotation20 * this._invLocalInertia00 + this._transform._rotation21 * this._invLocalInertia10 + this._transform._rotation22 * this._invLocalInertia20;
			__tmp__21 = this._transform._rotation20 * this._invLocalInertia01 + this._transform._rotation21 * this._invLocalInertia11 + this._transform._rotation22 * this._invLocalInertia21;
			__tmp__22 = this._transform._rotation20 * this._invLocalInertia02 + this._transform._rotation21 * this._invLocalInertia12 + this._transform._rotation22 * this._invLocalInertia22;
			this._invInertia00 = __tmp__00;
			this._invInertia01 = __tmp__01;
			this._invInertia02 = __tmp__02;
			this._invInertia10 = __tmp__10;
			this._invInertia11 = __tmp__11;
			this._invInertia12 = __tmp__12;
			this._invInertia20 = __tmp__20;
			this._invInertia21 = __tmp__21;
			this._invInertia22 = __tmp__22;
			var __tmp__00;
			var __tmp__01;
			var __tmp__02;
			var __tmp__10;
			var __tmp__11;
			var __tmp__12;
			var __tmp__20;
			var __tmp__21;
			var __tmp__22;
			__tmp__00 = this._invInertia00 * this._transform._rotation00 + this._invInertia01 * this._transform._rotation01 + this._invInertia02 * this._transform._rotation02;
			__tmp__01 = this._invInertia00 * this._transform._rotation10 + this._invInertia01 * this._transform._rotation11 + this._invInertia02 * this._transform._rotation12;
			__tmp__02 = this._invInertia00 * this._transform._rotation20 + this._invInertia01 * this._transform._rotation21 + this._invInertia02 * this._transform._rotation22;
			__tmp__10 = this._invInertia10 * this._transform._rotation00 + this._invInertia11 * this._transform._rotation01 + this._invInertia12 * this._transform._rotation02;
			__tmp__11 = this._invInertia10 * this._transform._rotation10 + this._invInertia11 * this._transform._rotation11 + this._invInertia12 * this._transform._rotation12;
			__tmp__12 = this._invInertia10 * this._transform._rotation20 + this._invInertia11 * this._transform._rotation21 + this._invInertia12 * this._transform._rotation22;
			__tmp__20 = this._invInertia20 * this._transform._rotation00 + this._invInertia21 * this._transform._rotation01 + this._invInertia22 * this._transform._rotation02;
			__tmp__21 = this._invInertia20 * this._transform._rotation10 + this._invInertia21 * this._transform._rotation11 + this._invInertia22 * this._transform._rotation12;
			__tmp__22 = this._invInertia20 * this._transform._rotation20 + this._invInertia21 * this._transform._rotation21 + this._invInertia22 * this._transform._rotation22;
			this._invInertia00 = __tmp__00;
			this._invInertia01 = __tmp__01;
			this._invInertia02 = __tmp__02;
			this._invInertia10 = __tmp__10;
			this._invInertia11 = __tmp__11;
			this._invInertia12 = __tmp__12;
			this._invInertia20 = __tmp__20;
			this._invInertia21 = __tmp__21;
			this._invInertia22 = __tmp__22;
			this._invInertia00 *= this._rotFactor.x;
			this._invInertia01 *= this._rotFactor.x;
			this._invInertia02 *= this._rotFactor.x;
			this._invInertia10 *= this._rotFactor.y;
			this._invInertia11 *= this._rotFactor.y;
			this._invInertia12 *= this._rotFactor.y;
			this._invInertia20 *= this._rotFactor.z;
			this._invInertia21 *= this._rotFactor.z;
			this._invInertia22 *= this._rotFactor.z;
			break;
		}
	}
	,_integratePseudoVelocity: function() {
		if(this._pseudoVelX * this._pseudoVelX + this._pseudoVelY * this._pseudoVelY + this._pseudoVelZ * this._pseudoVelZ == 0 && this._angPseudoVelX * this._angPseudoVelX + this._angPseudoVelY * this._angPseudoVelY + this._angPseudoVelZ * this._angPseudoVelZ == 0) {
			return;
		}
		switch(this._type) {
		case 1:
			this._pseudoVelX = 0;
			this._pseudoVelY = 0;
			this._pseudoVelZ = 0;
			this._angPseudoVelX = 0;
			this._angPseudoVelY = 0;
			this._angPseudoVelZ = 0;
			break;
		case 0:case 2:
			var translationX;
			var translationY;
			var translationZ;
			var rotationX;
			var rotationY;
			var rotationZ;
			translationX = this._pseudoVelX;
			translationY = this._pseudoVelY;
			translationZ = this._pseudoVelZ;
			rotationX = this._angPseudoVelX;
			rotationY = this._angPseudoVelY;
			rotationZ = this._angPseudoVelZ;
			this._pseudoVelX = 0;
			this._pseudoVelY = 0;
			this._pseudoVelZ = 0;
			this._angPseudoVelX = 0;
			this._angPseudoVelY = 0;
			this._angPseudoVelZ = 0;
			this._transform._positionX += translationX;
			this._transform._positionY += translationY;
			this._transform._positionZ += translationZ;
			var theta = Math.sqrt(rotationX * rotationX + rotationY * rotationY + rotationZ * rotationZ);
			var halfTheta = theta * 0.5;
			var rotationToSinAxisFactor;
			var cosHalfTheta;
			if(halfTheta < 0.5) {
				var ht2 = halfTheta * halfTheta;
				rotationToSinAxisFactor = 0.5 * (1 - ht2 * 0.16666666666666666 + ht2 * ht2 * 0.0083333333333333332);
				cosHalfTheta = 1 - ht2 * 0.5 + ht2 * ht2 * 0.041666666666666664;
			} else {
				rotationToSinAxisFactor = Math.sin(halfTheta) / theta;
				cosHalfTheta = Math.cos(halfTheta);
			}
			var sinAxisX;
			var sinAxisY;
			var sinAxisZ;
			sinAxisX = rotationX * rotationToSinAxisFactor;
			sinAxisY = rotationY * rotationToSinAxisFactor;
			sinAxisZ = rotationZ * rotationToSinAxisFactor;
			var dqX;
			var dqY;
			var dqZ;
			var dqW;
			dqX = sinAxisX;
			dqY = sinAxisY;
			dqZ = sinAxisZ;
			dqW = cosHalfTheta;
			var qX;
			var qY;
			var qZ;
			var qW;
			var e00 = this._transform._rotation00;
			var e11 = this._transform._rotation11;
			var e22 = this._transform._rotation22;
			var t = e00 + e11 + e22;
			var s;
			if(t > 0) {
				s = Math.sqrt(t + 1);
				qW = 0.5 * s;
				s = 0.5 / s;
				qX = (this._transform._rotation21 - this._transform._rotation12) * s;
				qY = (this._transform._rotation02 - this._transform._rotation20) * s;
				qZ = (this._transform._rotation10 - this._transform._rotation01) * s;
			} else if(e00 > e11) {
				if(e00 > e22) {
					s = Math.sqrt(e00 - e11 - e22 + 1);
					qX = 0.5 * s;
					s = 0.5 / s;
					qY = (this._transform._rotation01 + this._transform._rotation10) * s;
					qZ = (this._transform._rotation02 + this._transform._rotation20) * s;
					qW = (this._transform._rotation21 - this._transform._rotation12) * s;
				} else {
					s = Math.sqrt(e22 - e00 - e11 + 1);
					qZ = 0.5 * s;
					s = 0.5 / s;
					qX = (this._transform._rotation02 + this._transform._rotation20) * s;
					qY = (this._transform._rotation12 + this._transform._rotation21) * s;
					qW = (this._transform._rotation10 - this._transform._rotation01) * s;
				}
			} else if(e11 > e22) {
				s = Math.sqrt(e11 - e22 - e00 + 1);
				qY = 0.5 * s;
				s = 0.5 / s;
				qX = (this._transform._rotation01 + this._transform._rotation10) * s;
				qZ = (this._transform._rotation12 + this._transform._rotation21) * s;
				qW = (this._transform._rotation02 - this._transform._rotation20) * s;
			} else {
				s = Math.sqrt(e22 - e00 - e11 + 1);
				qZ = 0.5 * s;
				s = 0.5 / s;
				qX = (this._transform._rotation02 + this._transform._rotation20) * s;
				qY = (this._transform._rotation12 + this._transform._rotation21) * s;
				qW = (this._transform._rotation10 - this._transform._rotation01) * s;
			}
			qX = dqW * qX + dqX * qW + dqY * qZ - dqZ * qY;
			qY = dqW * qY - dqX * qZ + dqY * qW + dqZ * qX;
			qZ = dqW * qZ + dqX * qY - dqY * qX + dqZ * qW;
			qW = dqW * qW - dqX * qX - dqY * qY - dqZ * qZ;
			var l = qX * qX + qY * qY + qZ * qZ + qW * qW;
			if(l > 1e-32) {
				l = 1 / Math.sqrt(l);
			}
			qX *= l;
			qY *= l;
			qZ *= l;
			qW *= l;
			var x = qX;
			var y = qY;
			var z = qZ;
			var w = qW;
			var x2 = 2 * x;
			var y2 = 2 * y;
			var z2 = 2 * z;
			var xx = x * x2;
			var yy = y * y2;
			var zz = z * z2;
			var xy = x * y2;
			var yz = y * z2;
			var xz = x * z2;
			var wx = w * x2;
			var wy = w * y2;
			var wz = w * z2;
			this._transform._rotation00 = 1 - yy - zz;
			this._transform._rotation01 = xy - wz;
			this._transform._rotation02 = xz + wy;
			this._transform._rotation10 = xy + wz;
			this._transform._rotation11 = 1 - xx - zz;
			this._transform._rotation12 = yz - wx;
			this._transform._rotation20 = xz - wy;
			this._transform._rotation21 = yz + wx;
			this._transform._rotation22 = 1 - xx - yy;
			var __tmp__00;
			var __tmp__01;
			var __tmp__02;
			var __tmp__10;
			var __tmp__11;
			var __tmp__12;
			var __tmp__20;
			var __tmp__21;
			var __tmp__22;
			__tmp__00 = this._transform._rotation00 * this._invLocalInertia00 + this._transform._rotation01 * this._invLocalInertia10 + this._transform._rotation02 * this._invLocalInertia20;
			__tmp__01 = this._transform._rotation00 * this._invLocalInertia01 + this._transform._rotation01 * this._invLocalInertia11 + this._transform._rotation02 * this._invLocalInertia21;
			__tmp__02 = this._transform._rotation00 * this._invLocalInertia02 + this._transform._rotation01 * this._invLocalInertia12 + this._transform._rotation02 * this._invLocalInertia22;
			__tmp__10 = this._transform._rotation10 * this._invLocalInertia00 + this._transform._rotation11 * this._invLocalInertia10 + this._transform._rotation12 * this._invLocalInertia20;
			__tmp__11 = this._transform._rotation10 * this._invLocalInertia01 + this._transform._rotation11 * this._invLocalInertia11 + this._transform._rotation12 * this._invLocalInertia21;
			__tmp__12 = this._transform._rotation10 * this._invLocalInertia02 + this._transform._rotation11 * this._invLocalInertia12 + this._transform._rotation12 * this._invLocalInertia22;
			__tmp__20 = this._transform._rotation20 * this._invLocalInertia00 + this._transform._rotation21 * this._invLocalInertia10 + this._transform._rotation22 * this._invLocalInertia20;
			__tmp__21 = this._transform._rotation20 * this._invLocalInertia01 + this._transform._rotation21 * this._invLocalInertia11 + this._transform._rotation22 * this._invLocalInertia21;
			__tmp__22 = this._transform._rotation20 * this._invLocalInertia02 + this._transform._rotation21 * this._invLocalInertia12 + this._transform._rotation22 * this._invLocalInertia22;
			this._invInertia00 = __tmp__00;
			this._invInertia01 = __tmp__01;
			this._invInertia02 = __tmp__02;
			this._invInertia10 = __tmp__10;
			this._invInertia11 = __tmp__11;
			this._invInertia12 = __tmp__12;
			this._invInertia20 = __tmp__20;
			this._invInertia21 = __tmp__21;
			this._invInertia22 = __tmp__22;
			var __tmp__00;
			var __tmp__01;
			var __tmp__02;
			var __tmp__10;
			var __tmp__11;
			var __tmp__12;
			var __tmp__20;
			var __tmp__21;
			var __tmp__22;
			__tmp__00 = this._invInertia00 * this._transform._rotation00 + this._invInertia01 * this._transform._rotation01 + this._invInertia02 * this._transform._rotation02;
			__tmp__01 = this._invInertia00 * this._transform._rotation10 + this._invInertia01 * this._transform._rotation11 + this._invInertia02 * this._transform._rotation12;
			__tmp__02 = this._invInertia00 * this._transform._rotation20 + this._invInertia01 * this._transform._rotation21 + this._invInertia02 * this._transform._rotation22;
			__tmp__10 = this._invInertia10 * this._transform._rotation00 + this._invInertia11 * this._transform._rotation01 + this._invInertia12 * this._transform._rotation02;
			__tmp__11 = this._invInertia10 * this._transform._rotation10 + this._invInertia11 * this._transform._rotation11 + this._invInertia12 * this._transform._rotation12;
			__tmp__12 = this._invInertia10 * this._transform._rotation20 + this._invInertia11 * this._transform._rotation21 + this._invInertia12 * this._transform._rotation22;
			__tmp__20 = this._invInertia20 * this._transform._rotation00 + this._invInertia21 * this._transform._rotation01 + this._invInertia22 * this._transform._rotation02;
			__tmp__21 = this._invInertia20 * this._transform._rotation10 + this._invInertia21 * this._transform._rotation11 + this._invInertia22 * this._transform._rotation12;
			__tmp__22 = this._invInertia20 * this._transform._rotation20 + this._invInertia21 * this._transform._rotation21 + this._invInertia22 * this._transform._rotation22;
			this._invInertia00 = __tmp__00;
			this._invInertia01 = __tmp__01;
			this._invInertia02 = __tmp__02;
			this._invInertia10 = __tmp__10;
			this._invInertia11 = __tmp__11;
			this._invInertia12 = __tmp__12;
			this._invInertia20 = __tmp__20;
			this._invInertia21 = __tmp__21;
			this._invInertia22 = __tmp__22;
			this._invInertia00 *= this._rotFactor.x;
			this._invInertia01 *= this._rotFactor.x;
			this._invInertia02 *= this._rotFactor.x;
			this._invInertia10 *= this._rotFactor.y;
			this._invInertia11 *= this._rotFactor.y;
			this._invInertia12 *= this._rotFactor.y;
			this._invInertia20 *= this._rotFactor.z;
			this._invInertia21 *= this._rotFactor.z;
			this._invInertia22 *= this._rotFactor.z;
			break;
		}
	}
	,updateMass: function() {
		var totalInertia00;
		var totalInertia01;
		var totalInertia02;
		var totalInertia10;
		var totalInertia11;
		var totalInertia12;
		var totalInertia20;
		var totalInertia21;
		var totalInertia22;
		totalInertia00 = 0;
		totalInertia01 = 0;
		totalInertia02 = 0;
		totalInertia10 = 0;
		totalInertia11 = 0;
		totalInertia12 = 0;
		totalInertia20 = 0;
		totalInertia21 = 0;
		totalInertia22 = 0;
		var totalMass = 0;
		var s = this._shapeList;
		while(s != null) {
			var n = s._next;
			var g = s._geom;
			g._updateMass();
			var mass = s._density * g._volume;
			var inertia00;
			var inertia01;
			var inertia02;
			var inertia10;
			var inertia11;
			var inertia12;
			var inertia20;
			var inertia21;
			var inertia22;
			var __tmp__00;
			var __tmp__01;
			var __tmp__02;
			var __tmp__10;
			var __tmp__11;
			var __tmp__12;
			var __tmp__20;
			var __tmp__21;
			var __tmp__22;
			__tmp__00 = s._localTransform._rotation00 * g._inertiaCoeff00 + s._localTransform._rotation01 * g._inertiaCoeff10 + s._localTransform._rotation02 * g._inertiaCoeff20;
			__tmp__01 = s._localTransform._rotation00 * g._inertiaCoeff01 + s._localTransform._rotation01 * g._inertiaCoeff11 + s._localTransform._rotation02 * g._inertiaCoeff21;
			__tmp__02 = s._localTransform._rotation00 * g._inertiaCoeff02 + s._localTransform._rotation01 * g._inertiaCoeff12 + s._localTransform._rotation02 * g._inertiaCoeff22;
			__tmp__10 = s._localTransform._rotation10 * g._inertiaCoeff00 + s._localTransform._rotation11 * g._inertiaCoeff10 + s._localTransform._rotation12 * g._inertiaCoeff20;
			__tmp__11 = s._localTransform._rotation10 * g._inertiaCoeff01 + s._localTransform._rotation11 * g._inertiaCoeff11 + s._localTransform._rotation12 * g._inertiaCoeff21;
			__tmp__12 = s._localTransform._rotation10 * g._inertiaCoeff02 + s._localTransform._rotation11 * g._inertiaCoeff12 + s._localTransform._rotation12 * g._inertiaCoeff22;
			__tmp__20 = s._localTransform._rotation20 * g._inertiaCoeff00 + s._localTransform._rotation21 * g._inertiaCoeff10 + s._localTransform._rotation22 * g._inertiaCoeff20;
			__tmp__21 = s._localTransform._rotation20 * g._inertiaCoeff01 + s._localTransform._rotation21 * g._inertiaCoeff11 + s._localTransform._rotation22 * g._inertiaCoeff21;
			__tmp__22 = s._localTransform._rotation20 * g._inertiaCoeff02 + s._localTransform._rotation21 * g._inertiaCoeff12 + s._localTransform._rotation22 * g._inertiaCoeff22;
			inertia00 = __tmp__00;
			inertia01 = __tmp__01;
			inertia02 = __tmp__02;
			inertia10 = __tmp__10;
			inertia11 = __tmp__11;
			inertia12 = __tmp__12;
			inertia20 = __tmp__20;
			inertia21 = __tmp__21;
			inertia22 = __tmp__22;
			var __tmp__001;
			var __tmp__011;
			var __tmp__021;
			var __tmp__101;
			var __tmp__111;
			var __tmp__121;
			var __tmp__201;
			var __tmp__211;
			var __tmp__221;
			__tmp__001 = inertia00 * s._localTransform._rotation00 + inertia01 * s._localTransform._rotation01 + inertia02 * s._localTransform._rotation02;
			__tmp__011 = inertia00 * s._localTransform._rotation10 + inertia01 * s._localTransform._rotation11 + inertia02 * s._localTransform._rotation12;
			__tmp__021 = inertia00 * s._localTransform._rotation20 + inertia01 * s._localTransform._rotation21 + inertia02 * s._localTransform._rotation22;
			__tmp__101 = inertia10 * s._localTransform._rotation00 + inertia11 * s._localTransform._rotation01 + inertia12 * s._localTransform._rotation02;
			__tmp__111 = inertia10 * s._localTransform._rotation10 + inertia11 * s._localTransform._rotation11 + inertia12 * s._localTransform._rotation12;
			__tmp__121 = inertia10 * s._localTransform._rotation20 + inertia11 * s._localTransform._rotation21 + inertia12 * s._localTransform._rotation22;
			__tmp__201 = inertia20 * s._localTransform._rotation00 + inertia21 * s._localTransform._rotation01 + inertia22 * s._localTransform._rotation02;
			__tmp__211 = inertia20 * s._localTransform._rotation10 + inertia21 * s._localTransform._rotation11 + inertia22 * s._localTransform._rotation12;
			__tmp__221 = inertia20 * s._localTransform._rotation20 + inertia21 * s._localTransform._rotation21 + inertia22 * s._localTransform._rotation22;
			inertia00 = __tmp__001;
			inertia01 = __tmp__011;
			inertia02 = __tmp__021;
			inertia10 = __tmp__101;
			inertia11 = __tmp__111;
			inertia12 = __tmp__121;
			inertia20 = __tmp__201;
			inertia21 = __tmp__211;
			inertia22 = __tmp__221;
			inertia00 *= mass;
			inertia01 *= mass;
			inertia02 *= mass;
			inertia10 *= mass;
			inertia11 *= mass;
			inertia12 *= mass;
			inertia20 *= mass;
			inertia21 *= mass;
			inertia22 *= mass;
			var cogInertia00;
			var cogInertia01;
			var cogInertia02;
			var cogInertia10;
			var cogInertia11;
			var cogInertia12;
			var cogInertia20;
			var cogInertia21;
			var cogInertia22;
			var xx = s._localTransform._positionX * s._localTransform._positionX;
			var yy = s._localTransform._positionY * s._localTransform._positionY;
			var zz = s._localTransform._positionZ * s._localTransform._positionZ;
			var xy = -s._localTransform._positionX * s._localTransform._positionY;
			var yz = -s._localTransform._positionY * s._localTransform._positionZ;
			var zx = -s._localTransform._positionZ * s._localTransform._positionX;
			cogInertia00 = yy + zz;
			cogInertia01 = xy;
			cogInertia02 = zx;
			cogInertia10 = xy;
			cogInertia11 = xx + zz;
			cogInertia12 = yz;
			cogInertia20 = zx;
			cogInertia21 = yz;
			cogInertia22 = xx + yy;
			inertia00 += cogInertia00 * mass;
			inertia01 += cogInertia01 * mass;
			inertia02 += cogInertia02 * mass;
			inertia10 += cogInertia10 * mass;
			inertia11 += cogInertia11 * mass;
			inertia12 += cogInertia12 * mass;
			inertia20 += cogInertia20 * mass;
			inertia21 += cogInertia21 * mass;
			inertia22 += cogInertia22 * mass;
			totalMass += mass;
			totalInertia00 += inertia00;
			totalInertia01 += inertia01;
			totalInertia02 += inertia02;
			totalInertia10 += inertia10;
			totalInertia11 += inertia11;
			totalInertia12 += inertia12;
			totalInertia20 += inertia20;
			totalInertia21 += inertia21;
			totalInertia22 += inertia22;
			s = n;
		}
		this._mass = totalMass;
		this._localInertia00 = totalInertia00;
		this._localInertia01 = totalInertia01;
		this._localInertia02 = totalInertia02;
		this._localInertia10 = totalInertia10;
		this._localInertia11 = totalInertia11;
		this._localInertia12 = totalInertia12;
		this._localInertia20 = totalInertia20;
		this._localInertia21 = totalInertia21;
		this._localInertia22 = totalInertia22;
		if(this._mass > 0 && this._localInertia00 * (this._localInertia11 * this._localInertia22 - this._localInertia12 * this._localInertia21) - this._localInertia01 * (this._localInertia10 * this._localInertia22 - this._localInertia12 * this._localInertia20) + this._localInertia02 * (this._localInertia10 * this._localInertia21 - this._localInertia11 * this._localInertia20) > 0 && this._type == 0) {
			this._invMass = 1 / this._mass;
			var d00 = this._localInertia11 * this._localInertia22 - this._localInertia12 * this._localInertia21;
			var d01 = this._localInertia10 * this._localInertia22 - this._localInertia12 * this._localInertia20;
			var d02 = this._localInertia10 * this._localInertia21 - this._localInertia11 * this._localInertia20;
			var d = this._localInertia00 * d00 - this._localInertia01 * d01 + this._localInertia02 * d02;
			if(d < -1e-32 || d > 1e-32) {
				d = 1 / d;
			}
			this._invLocalInertia00 = d00 * d;
			this._invLocalInertia01 = -(this._localInertia01 * this._localInertia22 - this._localInertia02 * this._localInertia21) * d;
			this._invLocalInertia02 = (this._localInertia01 * this._localInertia12 - this._localInertia02 * this._localInertia11) * d;
			this._invLocalInertia10 = -d01 * d;
			this._invLocalInertia11 = (this._localInertia00 * this._localInertia22 - this._localInertia02 * this._localInertia20) * d;
			this._invLocalInertia12 = -(this._localInertia00 * this._localInertia12 - this._localInertia02 * this._localInertia10) * d;
			this._invLocalInertia20 = d02 * d;
			this._invLocalInertia21 = -(this._localInertia00 * this._localInertia21 - this._localInertia01 * this._localInertia20) * d;
			this._invLocalInertia22 = (this._localInertia00 * this._localInertia11 - this._localInertia01 * this._localInertia10) * d;
			this._invLocalInertiaWithoutRotFactor00 = this._invLocalInertia00;
			this._invLocalInertiaWithoutRotFactor01 = this._invLocalInertia01;
			this._invLocalInertiaWithoutRotFactor02 = this._invLocalInertia02;
			this._invLocalInertiaWithoutRotFactor10 = this._invLocalInertia10;
			this._invLocalInertiaWithoutRotFactor11 = this._invLocalInertia11;
			this._invLocalInertiaWithoutRotFactor12 = this._invLocalInertia12;
			this._invLocalInertiaWithoutRotFactor20 = this._invLocalInertia20;
			this._invLocalInertiaWithoutRotFactor21 = this._invLocalInertia21;
			this._invLocalInertiaWithoutRotFactor22 = this._invLocalInertia22;
			this._invLocalInertia00 = this._invLocalInertiaWithoutRotFactor00 * this._rotFactor.x;
			this._invLocalInertia01 = this._invLocalInertiaWithoutRotFactor01 * this._rotFactor.x;
			this._invLocalInertia02 = this._invLocalInertiaWithoutRotFactor02 * this._rotFactor.x;
			this._invLocalInertia10 = this._invLocalInertiaWithoutRotFactor10 * this._rotFactor.y;
			this._invLocalInertia11 = this._invLocalInertiaWithoutRotFactor11 * this._rotFactor.y;
			this._invLocalInertia12 = this._invLocalInertiaWithoutRotFactor12 * this._rotFactor.y;
			this._invLocalInertia20 = this._invLocalInertiaWithoutRotFactor20 * this._rotFactor.z;
			this._invLocalInertia21 = this._invLocalInertiaWithoutRotFactor21 * this._rotFactor.z;
			this._invLocalInertia22 = this._invLocalInertiaWithoutRotFactor22 * this._rotFactor.z;
		} else {
			this._invMass = 0;
			this._invLocalInertia00 = 0;
			this._invLocalInertia01 = 0;
			this._invLocalInertia02 = 0;
			this._invLocalInertia10 = 0;
			this._invLocalInertia11 = 0;
			this._invLocalInertia12 = 0;
			this._invLocalInertia20 = 0;
			this._invLocalInertia21 = 0;
			this._invLocalInertia22 = 0;
			this._invLocalInertiaWithoutRotFactor00 = 0;
			this._invLocalInertiaWithoutRotFactor01 = 0;
			this._invLocalInertiaWithoutRotFactor02 = 0;
			this._invLocalInertiaWithoutRotFactor10 = 0;
			this._invLocalInertiaWithoutRotFactor11 = 0;
			this._invLocalInertiaWithoutRotFactor12 = 0;
			this._invLocalInertiaWithoutRotFactor20 = 0;
			this._invLocalInertiaWithoutRotFactor21 = 0;
			this._invLocalInertiaWithoutRotFactor22 = 0;
			if(this._type == 0) {
				this._type = 1;
			}
		}
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = this._transform._rotation00 * this._invLocalInertia00 + this._transform._rotation01 * this._invLocalInertia10 + this._transform._rotation02 * this._invLocalInertia20;
		__tmp__01 = this._transform._rotation00 * this._invLocalInertia01 + this._transform._rotation01 * this._invLocalInertia11 + this._transform._rotation02 * this._invLocalInertia21;
		__tmp__02 = this._transform._rotation00 * this._invLocalInertia02 + this._transform._rotation01 * this._invLocalInertia12 + this._transform._rotation02 * this._invLocalInertia22;
		__tmp__10 = this._transform._rotation10 * this._invLocalInertia00 + this._transform._rotation11 * this._invLocalInertia10 + this._transform._rotation12 * this._invLocalInertia20;
		__tmp__11 = this._transform._rotation10 * this._invLocalInertia01 + this._transform._rotation11 * this._invLocalInertia11 + this._transform._rotation12 * this._invLocalInertia21;
		__tmp__12 = this._transform._rotation10 * this._invLocalInertia02 + this._transform._rotation11 * this._invLocalInertia12 + this._transform._rotation12 * this._invLocalInertia22;
		__tmp__20 = this._transform._rotation20 * this._invLocalInertia00 + this._transform._rotation21 * this._invLocalInertia10 + this._transform._rotation22 * this._invLocalInertia20;
		__tmp__21 = this._transform._rotation20 * this._invLocalInertia01 + this._transform._rotation21 * this._invLocalInertia11 + this._transform._rotation22 * this._invLocalInertia21;
		__tmp__22 = this._transform._rotation20 * this._invLocalInertia02 + this._transform._rotation21 * this._invLocalInertia12 + this._transform._rotation22 * this._invLocalInertia22;
		this._invInertia00 = __tmp__00;
		this._invInertia01 = __tmp__01;
		this._invInertia02 = __tmp__02;
		this._invInertia10 = __tmp__10;
		this._invInertia11 = __tmp__11;
		this._invInertia12 = __tmp__12;
		this._invInertia20 = __tmp__20;
		this._invInertia21 = __tmp__21;
		this._invInertia22 = __tmp__22;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = this._invInertia00 * this._transform._rotation00 + this._invInertia01 * this._transform._rotation01 + this._invInertia02 * this._transform._rotation02;
		__tmp__01 = this._invInertia00 * this._transform._rotation10 + this._invInertia01 * this._transform._rotation11 + this._invInertia02 * this._transform._rotation12;
		__tmp__02 = this._invInertia00 * this._transform._rotation20 + this._invInertia01 * this._transform._rotation21 + this._invInertia02 * this._transform._rotation22;
		__tmp__10 = this._invInertia10 * this._transform._rotation00 + this._invInertia11 * this._transform._rotation01 + this._invInertia12 * this._transform._rotation02;
		__tmp__11 = this._invInertia10 * this._transform._rotation10 + this._invInertia11 * this._transform._rotation11 + this._invInertia12 * this._transform._rotation12;
		__tmp__12 = this._invInertia10 * this._transform._rotation20 + this._invInertia11 * this._transform._rotation21 + this._invInertia12 * this._transform._rotation22;
		__tmp__20 = this._invInertia20 * this._transform._rotation00 + this._invInertia21 * this._transform._rotation01 + this._invInertia22 * this._transform._rotation02;
		__tmp__21 = this._invInertia20 * this._transform._rotation10 + this._invInertia21 * this._transform._rotation11 + this._invInertia22 * this._transform._rotation12;
		__tmp__22 = this._invInertia20 * this._transform._rotation20 + this._invInertia21 * this._transform._rotation21 + this._invInertia22 * this._transform._rotation22;
		this._invInertia00 = __tmp__00;
		this._invInertia01 = __tmp__01;
		this._invInertia02 = __tmp__02;
		this._invInertia10 = __tmp__10;
		this._invInertia11 = __tmp__11;
		this._invInertia12 = __tmp__12;
		this._invInertia20 = __tmp__20;
		this._invInertia21 = __tmp__21;
		this._invInertia22 = __tmp__22;
		this._invInertia00 *= this._rotFactor.x;
		this._invInertia01 *= this._rotFactor.x;
		this._invInertia02 *= this._rotFactor.x;
		this._invInertia10 *= this._rotFactor.y;
		this._invInertia11 *= this._rotFactor.y;
		this._invInertia12 *= this._rotFactor.y;
		this._invInertia20 *= this._rotFactor.z;
		this._invInertia21 *= this._rotFactor.z;
		this._invInertia22 *= this._rotFactor.z;
		this._sleeping = false;
		this._sleepTime = 0;
	}
	,getPosition: function() {
		var v = new oimo_common_Vec3();
		v.x = this._transform._positionX;
		v.y = this._transform._positionY;
		v.z = this._transform._positionZ;
		return v;
	}
	,getPositionTo: function(position) {
		position.x = this._transform._positionX;
		position.y = this._transform._positionY;
		position.z = this._transform._positionZ;
	}
	,setPosition: function(position) {
		this._transform._positionX = position.x;
		this._transform._positionY = position.y;
		this._transform._positionZ = position.z;
		var dst = this._ptransform;
		var src = this._transform;
		dst._positionX = src._positionX;
		dst._positionY = src._positionY;
		dst._positionZ = src._positionZ;
		dst._rotation00 = src._rotation00;
		dst._rotation01 = src._rotation01;
		dst._rotation02 = src._rotation02;
		dst._rotation10 = src._rotation10;
		dst._rotation11 = src._rotation11;
		dst._rotation12 = src._rotation12;
		dst._rotation20 = src._rotation20;
		dst._rotation21 = src._rotation21;
		dst._rotation22 = src._rotation22;
		var s = this._shapeList;
		while(s != null) {
			var n = s._next;
			var tf1 = this._ptransform;
			var tf2 = this._transform;
			var dst = s._ptransform;
			var src1 = s._localTransform;
			var __tmp__00;
			var __tmp__01;
			var __tmp__02;
			var __tmp__10;
			var __tmp__11;
			var __tmp__12;
			var __tmp__20;
			var __tmp__21;
			var __tmp__22;
			__tmp__00 = tf1._rotation00 * src1._rotation00 + tf1._rotation01 * src1._rotation10 + tf1._rotation02 * src1._rotation20;
			__tmp__01 = tf1._rotation00 * src1._rotation01 + tf1._rotation01 * src1._rotation11 + tf1._rotation02 * src1._rotation21;
			__tmp__02 = tf1._rotation00 * src1._rotation02 + tf1._rotation01 * src1._rotation12 + tf1._rotation02 * src1._rotation22;
			__tmp__10 = tf1._rotation10 * src1._rotation00 + tf1._rotation11 * src1._rotation10 + tf1._rotation12 * src1._rotation20;
			__tmp__11 = tf1._rotation10 * src1._rotation01 + tf1._rotation11 * src1._rotation11 + tf1._rotation12 * src1._rotation21;
			__tmp__12 = tf1._rotation10 * src1._rotation02 + tf1._rotation11 * src1._rotation12 + tf1._rotation12 * src1._rotation22;
			__tmp__20 = tf1._rotation20 * src1._rotation00 + tf1._rotation21 * src1._rotation10 + tf1._rotation22 * src1._rotation20;
			__tmp__21 = tf1._rotation20 * src1._rotation01 + tf1._rotation21 * src1._rotation11 + tf1._rotation22 * src1._rotation21;
			__tmp__22 = tf1._rotation20 * src1._rotation02 + tf1._rotation21 * src1._rotation12 + tf1._rotation22 * src1._rotation22;
			dst._rotation00 = __tmp__00;
			dst._rotation01 = __tmp__01;
			dst._rotation02 = __tmp__02;
			dst._rotation10 = __tmp__10;
			dst._rotation11 = __tmp__11;
			dst._rotation12 = __tmp__12;
			dst._rotation20 = __tmp__20;
			dst._rotation21 = __tmp__21;
			dst._rotation22 = __tmp__22;
			var __tmp__X;
			var __tmp__Y;
			var __tmp__Z;
			__tmp__X = tf1._rotation00 * src1._positionX + tf1._rotation01 * src1._positionY + tf1._rotation02 * src1._positionZ;
			__tmp__Y = tf1._rotation10 * src1._positionX + tf1._rotation11 * src1._positionY + tf1._rotation12 * src1._positionZ;
			__tmp__Z = tf1._rotation20 * src1._positionX + tf1._rotation21 * src1._positionY + tf1._rotation22 * src1._positionZ;
			dst._positionX = __tmp__X;
			dst._positionY = __tmp__Y;
			dst._positionZ = __tmp__Z;
			dst._positionX += tf1._positionX;
			dst._positionY += tf1._positionY;
			dst._positionZ += tf1._positionZ;
			var dst1 = s._transform;
			var src11 = s._localTransform;
			var __tmp__001;
			var __tmp__011;
			var __tmp__021;
			var __tmp__101;
			var __tmp__111;
			var __tmp__121;
			var __tmp__201;
			var __tmp__211;
			var __tmp__221;
			__tmp__001 = tf2._rotation00 * src11._rotation00 + tf2._rotation01 * src11._rotation10 + tf2._rotation02 * src11._rotation20;
			__tmp__011 = tf2._rotation00 * src11._rotation01 + tf2._rotation01 * src11._rotation11 + tf2._rotation02 * src11._rotation21;
			__tmp__021 = tf2._rotation00 * src11._rotation02 + tf2._rotation01 * src11._rotation12 + tf2._rotation02 * src11._rotation22;
			__tmp__101 = tf2._rotation10 * src11._rotation00 + tf2._rotation11 * src11._rotation10 + tf2._rotation12 * src11._rotation20;
			__tmp__111 = tf2._rotation10 * src11._rotation01 + tf2._rotation11 * src11._rotation11 + tf2._rotation12 * src11._rotation21;
			__tmp__121 = tf2._rotation10 * src11._rotation02 + tf2._rotation11 * src11._rotation12 + tf2._rotation12 * src11._rotation22;
			__tmp__201 = tf2._rotation20 * src11._rotation00 + tf2._rotation21 * src11._rotation10 + tf2._rotation22 * src11._rotation20;
			__tmp__211 = tf2._rotation20 * src11._rotation01 + tf2._rotation21 * src11._rotation11 + tf2._rotation22 * src11._rotation21;
			__tmp__221 = tf2._rotation20 * src11._rotation02 + tf2._rotation21 * src11._rotation12 + tf2._rotation22 * src11._rotation22;
			dst1._rotation00 = __tmp__001;
			dst1._rotation01 = __tmp__011;
			dst1._rotation02 = __tmp__021;
			dst1._rotation10 = __tmp__101;
			dst1._rotation11 = __tmp__111;
			dst1._rotation12 = __tmp__121;
			dst1._rotation20 = __tmp__201;
			dst1._rotation21 = __tmp__211;
			dst1._rotation22 = __tmp__221;
			var __tmp__X1;
			var __tmp__Y1;
			var __tmp__Z1;
			__tmp__X1 = tf2._rotation00 * src11._positionX + tf2._rotation01 * src11._positionY + tf2._rotation02 * src11._positionZ;
			__tmp__Y1 = tf2._rotation10 * src11._positionX + tf2._rotation11 * src11._positionY + tf2._rotation12 * src11._positionZ;
			__tmp__Z1 = tf2._rotation20 * src11._positionX + tf2._rotation21 * src11._positionY + tf2._rotation22 * src11._positionZ;
			dst1._positionX = __tmp__X1;
			dst1._positionY = __tmp__Y1;
			dst1._positionZ = __tmp__Z1;
			dst1._positionX += tf2._positionX;
			dst1._positionY += tf2._positionY;
			dst1._positionZ += tf2._positionZ;
			var minX;
			var minY;
			var minZ;
			var maxX;
			var maxY;
			var maxZ;
			s._geom._computeAabb(s._aabb,s._ptransform);
			minX = s._aabb._minX;
			minY = s._aabb._minY;
			minZ = s._aabb._minZ;
			maxX = s._aabb._maxX;
			maxY = s._aabb._maxY;
			maxZ = s._aabb._maxZ;
			s._geom._computeAabb(s._aabb,s._transform);
			s._aabb._minX = minX < s._aabb._minX ? minX : s._aabb._minX;
			s._aabb._minY = minY < s._aabb._minY ? minY : s._aabb._minY;
			s._aabb._minZ = minZ < s._aabb._minZ ? minZ : s._aabb._minZ;
			s._aabb._maxX = maxX > s._aabb._maxX ? maxX : s._aabb._maxX;
			s._aabb._maxY = maxY > s._aabb._maxY ? maxY : s._aabb._maxY;
			s._aabb._maxZ = maxZ > s._aabb._maxZ ? maxZ : s._aabb._maxZ;
			if(s._proxy != null) {
				var dX;
				var dY;
				var dZ;
				dX = s._transform._positionX - s._ptransform._positionX;
				dY = s._transform._positionY - s._ptransform._positionY;
				dZ = s._transform._positionZ - s._ptransform._positionZ;
				var v = s.displacement;
				v.x = dX;
				v.y = dY;
				v.z = dZ;
				s._rigidBody._world._broadPhase.moveProxy(s._proxy,s._aabb,s.displacement);
			}
			s = n;
		}
		this._sleeping = false;
		this._sleepTime = 0;
	}
	,translate: function(translation) {
		var diffX;
		var diffY;
		var diffZ;
		diffX = translation.x;
		diffY = translation.y;
		diffZ = translation.z;
		this._transform._positionX += diffX;
		this._transform._positionY += diffY;
		this._transform._positionZ += diffZ;
		var dst = this._ptransform;
		var src = this._transform;
		dst._positionX = src._positionX;
		dst._positionY = src._positionY;
		dst._positionZ = src._positionZ;
		dst._rotation00 = src._rotation00;
		dst._rotation01 = src._rotation01;
		dst._rotation02 = src._rotation02;
		dst._rotation10 = src._rotation10;
		dst._rotation11 = src._rotation11;
		dst._rotation12 = src._rotation12;
		dst._rotation20 = src._rotation20;
		dst._rotation21 = src._rotation21;
		dst._rotation22 = src._rotation22;
		var s = this._shapeList;
		while(s != null) {
			var n = s._next;
			var tf1 = this._ptransform;
			var tf2 = this._transform;
			var dst = s._ptransform;
			var src1 = s._localTransform;
			var __tmp__00;
			var __tmp__01;
			var __tmp__02;
			var __tmp__10;
			var __tmp__11;
			var __tmp__12;
			var __tmp__20;
			var __tmp__21;
			var __tmp__22;
			__tmp__00 = tf1._rotation00 * src1._rotation00 + tf1._rotation01 * src1._rotation10 + tf1._rotation02 * src1._rotation20;
			__tmp__01 = tf1._rotation00 * src1._rotation01 + tf1._rotation01 * src1._rotation11 + tf1._rotation02 * src1._rotation21;
			__tmp__02 = tf1._rotation00 * src1._rotation02 + tf1._rotation01 * src1._rotation12 + tf1._rotation02 * src1._rotation22;
			__tmp__10 = tf1._rotation10 * src1._rotation00 + tf1._rotation11 * src1._rotation10 + tf1._rotation12 * src1._rotation20;
			__tmp__11 = tf1._rotation10 * src1._rotation01 + tf1._rotation11 * src1._rotation11 + tf1._rotation12 * src1._rotation21;
			__tmp__12 = tf1._rotation10 * src1._rotation02 + tf1._rotation11 * src1._rotation12 + tf1._rotation12 * src1._rotation22;
			__tmp__20 = tf1._rotation20 * src1._rotation00 + tf1._rotation21 * src1._rotation10 + tf1._rotation22 * src1._rotation20;
			__tmp__21 = tf1._rotation20 * src1._rotation01 + tf1._rotation21 * src1._rotation11 + tf1._rotation22 * src1._rotation21;
			__tmp__22 = tf1._rotation20 * src1._rotation02 + tf1._rotation21 * src1._rotation12 + tf1._rotation22 * src1._rotation22;
			dst._rotation00 = __tmp__00;
			dst._rotation01 = __tmp__01;
			dst._rotation02 = __tmp__02;
			dst._rotation10 = __tmp__10;
			dst._rotation11 = __tmp__11;
			dst._rotation12 = __tmp__12;
			dst._rotation20 = __tmp__20;
			dst._rotation21 = __tmp__21;
			dst._rotation22 = __tmp__22;
			var __tmp__X;
			var __tmp__Y;
			var __tmp__Z;
			__tmp__X = tf1._rotation00 * src1._positionX + tf1._rotation01 * src1._positionY + tf1._rotation02 * src1._positionZ;
			__tmp__Y = tf1._rotation10 * src1._positionX + tf1._rotation11 * src1._positionY + tf1._rotation12 * src1._positionZ;
			__tmp__Z = tf1._rotation20 * src1._positionX + tf1._rotation21 * src1._positionY + tf1._rotation22 * src1._positionZ;
			dst._positionX = __tmp__X;
			dst._positionY = __tmp__Y;
			dst._positionZ = __tmp__Z;
			dst._positionX += tf1._positionX;
			dst._positionY += tf1._positionY;
			dst._positionZ += tf1._positionZ;
			var dst1 = s._transform;
			var src11 = s._localTransform;
			var __tmp__001;
			var __tmp__011;
			var __tmp__021;
			var __tmp__101;
			var __tmp__111;
			var __tmp__121;
			var __tmp__201;
			var __tmp__211;
			var __tmp__221;
			__tmp__001 = tf2._rotation00 * src11._rotation00 + tf2._rotation01 * src11._rotation10 + tf2._rotation02 * src11._rotation20;
			__tmp__011 = tf2._rotation00 * src11._rotation01 + tf2._rotation01 * src11._rotation11 + tf2._rotation02 * src11._rotation21;
			__tmp__021 = tf2._rotation00 * src11._rotation02 + tf2._rotation01 * src11._rotation12 + tf2._rotation02 * src11._rotation22;
			__tmp__101 = tf2._rotation10 * src11._rotation00 + tf2._rotation11 * src11._rotation10 + tf2._rotation12 * src11._rotation20;
			__tmp__111 = tf2._rotation10 * src11._rotation01 + tf2._rotation11 * src11._rotation11 + tf2._rotation12 * src11._rotation21;
			__tmp__121 = tf2._rotation10 * src11._rotation02 + tf2._rotation11 * src11._rotation12 + tf2._rotation12 * src11._rotation22;
			__tmp__201 = tf2._rotation20 * src11._rotation00 + tf2._rotation21 * src11._rotation10 + tf2._rotation22 * src11._rotation20;
			__tmp__211 = tf2._rotation20 * src11._rotation01 + tf2._rotation21 * src11._rotation11 + tf2._rotation22 * src11._rotation21;
			__tmp__221 = tf2._rotation20 * src11._rotation02 + tf2._rotation21 * src11._rotation12 + tf2._rotation22 * src11._rotation22;
			dst1._rotation00 = __tmp__001;
			dst1._rotation01 = __tmp__011;
			dst1._rotation02 = __tmp__021;
			dst1._rotation10 = __tmp__101;
			dst1._rotation11 = __tmp__111;
			dst1._rotation12 = __tmp__121;
			dst1._rotation20 = __tmp__201;
			dst1._rotation21 = __tmp__211;
			dst1._rotation22 = __tmp__221;
			var __tmp__X1;
			var __tmp__Y1;
			var __tmp__Z1;
			__tmp__X1 = tf2._rotation00 * src11._positionX + tf2._rotation01 * src11._positionY + tf2._rotation02 * src11._positionZ;
			__tmp__Y1 = tf2._rotation10 * src11._positionX + tf2._rotation11 * src11._positionY + tf2._rotation12 * src11._positionZ;
			__tmp__Z1 = tf2._rotation20 * src11._positionX + tf2._rotation21 * src11._positionY + tf2._rotation22 * src11._positionZ;
			dst1._positionX = __tmp__X1;
			dst1._positionY = __tmp__Y1;
			dst1._positionZ = __tmp__Z1;
			dst1._positionX += tf2._positionX;
			dst1._positionY += tf2._positionY;
			dst1._positionZ += tf2._positionZ;
			var minX;
			var minY;
			var minZ;
			var maxX;
			var maxY;
			var maxZ;
			s._geom._computeAabb(s._aabb,s._ptransform);
			minX = s._aabb._minX;
			minY = s._aabb._minY;
			minZ = s._aabb._minZ;
			maxX = s._aabb._maxX;
			maxY = s._aabb._maxY;
			maxZ = s._aabb._maxZ;
			s._geom._computeAabb(s._aabb,s._transform);
			s._aabb._minX = minX < s._aabb._minX ? minX : s._aabb._minX;
			s._aabb._minY = minY < s._aabb._minY ? minY : s._aabb._minY;
			s._aabb._minZ = minZ < s._aabb._minZ ? minZ : s._aabb._minZ;
			s._aabb._maxX = maxX > s._aabb._maxX ? maxX : s._aabb._maxX;
			s._aabb._maxY = maxY > s._aabb._maxY ? maxY : s._aabb._maxY;
			s._aabb._maxZ = maxZ > s._aabb._maxZ ? maxZ : s._aabb._maxZ;
			if(s._proxy != null) {
				var dX;
				var dY;
				var dZ;
				dX = s._transform._positionX - s._ptransform._positionX;
				dY = s._transform._positionY - s._ptransform._positionY;
				dZ = s._transform._positionZ - s._ptransform._positionZ;
				var v = s.displacement;
				v.x = dX;
				v.y = dY;
				v.z = dZ;
				s._rigidBody._world._broadPhase.moveProxy(s._proxy,s._aabb,s.displacement);
			}
			s = n;
		}
		this._sleeping = false;
		this._sleepTime = 0;
	}
	,getRotation: function() {
		var m = new oimo_common_Mat3();
		m.e00 = this._transform._rotation00;
		m.e01 = this._transform._rotation01;
		m.e02 = this._transform._rotation02;
		m.e10 = this._transform._rotation10;
		m.e11 = this._transform._rotation11;
		m.e12 = this._transform._rotation12;
		m.e20 = this._transform._rotation20;
		m.e21 = this._transform._rotation21;
		m.e22 = this._transform._rotation22;
		return m;
	}
	,getRotationTo: function(rotation) {
		rotation.e00 = this._transform._rotation00;
		rotation.e01 = this._transform._rotation01;
		rotation.e02 = this._transform._rotation02;
		rotation.e10 = this._transform._rotation10;
		rotation.e11 = this._transform._rotation11;
		rotation.e12 = this._transform._rotation12;
		rotation.e20 = this._transform._rotation20;
		rotation.e21 = this._transform._rotation21;
		rotation.e22 = this._transform._rotation22;
	}
	,setRotation: function(rotation) {
		this._transform._rotation00 = rotation.e00;
		this._transform._rotation01 = rotation.e01;
		this._transform._rotation02 = rotation.e02;
		this._transform._rotation10 = rotation.e10;
		this._transform._rotation11 = rotation.e11;
		this._transform._rotation12 = rotation.e12;
		this._transform._rotation20 = rotation.e20;
		this._transform._rotation21 = rotation.e21;
		this._transform._rotation22 = rotation.e22;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = this._transform._rotation00 * this._invLocalInertia00 + this._transform._rotation01 * this._invLocalInertia10 + this._transform._rotation02 * this._invLocalInertia20;
		__tmp__01 = this._transform._rotation00 * this._invLocalInertia01 + this._transform._rotation01 * this._invLocalInertia11 + this._transform._rotation02 * this._invLocalInertia21;
		__tmp__02 = this._transform._rotation00 * this._invLocalInertia02 + this._transform._rotation01 * this._invLocalInertia12 + this._transform._rotation02 * this._invLocalInertia22;
		__tmp__10 = this._transform._rotation10 * this._invLocalInertia00 + this._transform._rotation11 * this._invLocalInertia10 + this._transform._rotation12 * this._invLocalInertia20;
		__tmp__11 = this._transform._rotation10 * this._invLocalInertia01 + this._transform._rotation11 * this._invLocalInertia11 + this._transform._rotation12 * this._invLocalInertia21;
		__tmp__12 = this._transform._rotation10 * this._invLocalInertia02 + this._transform._rotation11 * this._invLocalInertia12 + this._transform._rotation12 * this._invLocalInertia22;
		__tmp__20 = this._transform._rotation20 * this._invLocalInertia00 + this._transform._rotation21 * this._invLocalInertia10 + this._transform._rotation22 * this._invLocalInertia20;
		__tmp__21 = this._transform._rotation20 * this._invLocalInertia01 + this._transform._rotation21 * this._invLocalInertia11 + this._transform._rotation22 * this._invLocalInertia21;
		__tmp__22 = this._transform._rotation20 * this._invLocalInertia02 + this._transform._rotation21 * this._invLocalInertia12 + this._transform._rotation22 * this._invLocalInertia22;
		this._invInertia00 = __tmp__00;
		this._invInertia01 = __tmp__01;
		this._invInertia02 = __tmp__02;
		this._invInertia10 = __tmp__10;
		this._invInertia11 = __tmp__11;
		this._invInertia12 = __tmp__12;
		this._invInertia20 = __tmp__20;
		this._invInertia21 = __tmp__21;
		this._invInertia22 = __tmp__22;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = this._invInertia00 * this._transform._rotation00 + this._invInertia01 * this._transform._rotation01 + this._invInertia02 * this._transform._rotation02;
		__tmp__01 = this._invInertia00 * this._transform._rotation10 + this._invInertia01 * this._transform._rotation11 + this._invInertia02 * this._transform._rotation12;
		__tmp__02 = this._invInertia00 * this._transform._rotation20 + this._invInertia01 * this._transform._rotation21 + this._invInertia02 * this._transform._rotation22;
		__tmp__10 = this._invInertia10 * this._transform._rotation00 + this._invInertia11 * this._transform._rotation01 + this._invInertia12 * this._transform._rotation02;
		__tmp__11 = this._invInertia10 * this._transform._rotation10 + this._invInertia11 * this._transform._rotation11 + this._invInertia12 * this._transform._rotation12;
		__tmp__12 = this._invInertia10 * this._transform._rotation20 + this._invInertia11 * this._transform._rotation21 + this._invInertia12 * this._transform._rotation22;
		__tmp__20 = this._invInertia20 * this._transform._rotation00 + this._invInertia21 * this._transform._rotation01 + this._invInertia22 * this._transform._rotation02;
		__tmp__21 = this._invInertia20 * this._transform._rotation10 + this._invInertia21 * this._transform._rotation11 + this._invInertia22 * this._transform._rotation12;
		__tmp__22 = this._invInertia20 * this._transform._rotation20 + this._invInertia21 * this._transform._rotation21 + this._invInertia22 * this._transform._rotation22;
		this._invInertia00 = __tmp__00;
		this._invInertia01 = __tmp__01;
		this._invInertia02 = __tmp__02;
		this._invInertia10 = __tmp__10;
		this._invInertia11 = __tmp__11;
		this._invInertia12 = __tmp__12;
		this._invInertia20 = __tmp__20;
		this._invInertia21 = __tmp__21;
		this._invInertia22 = __tmp__22;
		this._invInertia00 *= this._rotFactor.x;
		this._invInertia01 *= this._rotFactor.x;
		this._invInertia02 *= this._rotFactor.x;
		this._invInertia10 *= this._rotFactor.y;
		this._invInertia11 *= this._rotFactor.y;
		this._invInertia12 *= this._rotFactor.y;
		this._invInertia20 *= this._rotFactor.z;
		this._invInertia21 *= this._rotFactor.z;
		this._invInertia22 *= this._rotFactor.z;
		var dst = this._ptransform;
		var src = this._transform;
		dst._positionX = src._positionX;
		dst._positionY = src._positionY;
		dst._positionZ = src._positionZ;
		dst._rotation00 = src._rotation00;
		dst._rotation01 = src._rotation01;
		dst._rotation02 = src._rotation02;
		dst._rotation10 = src._rotation10;
		dst._rotation11 = src._rotation11;
		dst._rotation12 = src._rotation12;
		dst._rotation20 = src._rotation20;
		dst._rotation21 = src._rotation21;
		dst._rotation22 = src._rotation22;
		var s = this._shapeList;
		while(s != null) {
			var n = s._next;
			var tf1 = this._ptransform;
			var tf2 = this._transform;
			var dst = s._ptransform;
			var src1 = s._localTransform;
			var __tmp__00;
			var __tmp__01;
			var __tmp__02;
			var __tmp__10;
			var __tmp__11;
			var __tmp__12;
			var __tmp__20;
			var __tmp__21;
			var __tmp__22;
			__tmp__00 = tf1._rotation00 * src1._rotation00 + tf1._rotation01 * src1._rotation10 + tf1._rotation02 * src1._rotation20;
			__tmp__01 = tf1._rotation00 * src1._rotation01 + tf1._rotation01 * src1._rotation11 + tf1._rotation02 * src1._rotation21;
			__tmp__02 = tf1._rotation00 * src1._rotation02 + tf1._rotation01 * src1._rotation12 + tf1._rotation02 * src1._rotation22;
			__tmp__10 = tf1._rotation10 * src1._rotation00 + tf1._rotation11 * src1._rotation10 + tf1._rotation12 * src1._rotation20;
			__tmp__11 = tf1._rotation10 * src1._rotation01 + tf1._rotation11 * src1._rotation11 + tf1._rotation12 * src1._rotation21;
			__tmp__12 = tf1._rotation10 * src1._rotation02 + tf1._rotation11 * src1._rotation12 + tf1._rotation12 * src1._rotation22;
			__tmp__20 = tf1._rotation20 * src1._rotation00 + tf1._rotation21 * src1._rotation10 + tf1._rotation22 * src1._rotation20;
			__tmp__21 = tf1._rotation20 * src1._rotation01 + tf1._rotation21 * src1._rotation11 + tf1._rotation22 * src1._rotation21;
			__tmp__22 = tf1._rotation20 * src1._rotation02 + tf1._rotation21 * src1._rotation12 + tf1._rotation22 * src1._rotation22;
			dst._rotation00 = __tmp__00;
			dst._rotation01 = __tmp__01;
			dst._rotation02 = __tmp__02;
			dst._rotation10 = __tmp__10;
			dst._rotation11 = __tmp__11;
			dst._rotation12 = __tmp__12;
			dst._rotation20 = __tmp__20;
			dst._rotation21 = __tmp__21;
			dst._rotation22 = __tmp__22;
			var __tmp__X;
			var __tmp__Y;
			var __tmp__Z;
			__tmp__X = tf1._rotation00 * src1._positionX + tf1._rotation01 * src1._positionY + tf1._rotation02 * src1._positionZ;
			__tmp__Y = tf1._rotation10 * src1._positionX + tf1._rotation11 * src1._positionY + tf1._rotation12 * src1._positionZ;
			__tmp__Z = tf1._rotation20 * src1._positionX + tf1._rotation21 * src1._positionY + tf1._rotation22 * src1._positionZ;
			dst._positionX = __tmp__X;
			dst._positionY = __tmp__Y;
			dst._positionZ = __tmp__Z;
			dst._positionX += tf1._positionX;
			dst._positionY += tf1._positionY;
			dst._positionZ += tf1._positionZ;
			var dst1 = s._transform;
			var src11 = s._localTransform;
			var __tmp__001;
			var __tmp__011;
			var __tmp__021;
			var __tmp__101;
			var __tmp__111;
			var __tmp__121;
			var __tmp__201;
			var __tmp__211;
			var __tmp__221;
			__tmp__001 = tf2._rotation00 * src11._rotation00 + tf2._rotation01 * src11._rotation10 + tf2._rotation02 * src11._rotation20;
			__tmp__011 = tf2._rotation00 * src11._rotation01 + tf2._rotation01 * src11._rotation11 + tf2._rotation02 * src11._rotation21;
			__tmp__021 = tf2._rotation00 * src11._rotation02 + tf2._rotation01 * src11._rotation12 + tf2._rotation02 * src11._rotation22;
			__tmp__101 = tf2._rotation10 * src11._rotation00 + tf2._rotation11 * src11._rotation10 + tf2._rotation12 * src11._rotation20;
			__tmp__111 = tf2._rotation10 * src11._rotation01 + tf2._rotation11 * src11._rotation11 + tf2._rotation12 * src11._rotation21;
			__tmp__121 = tf2._rotation10 * src11._rotation02 + tf2._rotation11 * src11._rotation12 + tf2._rotation12 * src11._rotation22;
			__tmp__201 = tf2._rotation20 * src11._rotation00 + tf2._rotation21 * src11._rotation10 + tf2._rotation22 * src11._rotation20;
			__tmp__211 = tf2._rotation20 * src11._rotation01 + tf2._rotation21 * src11._rotation11 + tf2._rotation22 * src11._rotation21;
			__tmp__221 = tf2._rotation20 * src11._rotation02 + tf2._rotation21 * src11._rotation12 + tf2._rotation22 * src11._rotation22;
			dst1._rotation00 = __tmp__001;
			dst1._rotation01 = __tmp__011;
			dst1._rotation02 = __tmp__021;
			dst1._rotation10 = __tmp__101;
			dst1._rotation11 = __tmp__111;
			dst1._rotation12 = __tmp__121;
			dst1._rotation20 = __tmp__201;
			dst1._rotation21 = __tmp__211;
			dst1._rotation22 = __tmp__221;
			var __tmp__X1;
			var __tmp__Y1;
			var __tmp__Z1;
			__tmp__X1 = tf2._rotation00 * src11._positionX + tf2._rotation01 * src11._positionY + tf2._rotation02 * src11._positionZ;
			__tmp__Y1 = tf2._rotation10 * src11._positionX + tf2._rotation11 * src11._positionY + tf2._rotation12 * src11._positionZ;
			__tmp__Z1 = tf2._rotation20 * src11._positionX + tf2._rotation21 * src11._positionY + tf2._rotation22 * src11._positionZ;
			dst1._positionX = __tmp__X1;
			dst1._positionY = __tmp__Y1;
			dst1._positionZ = __tmp__Z1;
			dst1._positionX += tf2._positionX;
			dst1._positionY += tf2._positionY;
			dst1._positionZ += tf2._positionZ;
			var minX;
			var minY;
			var minZ;
			var maxX;
			var maxY;
			var maxZ;
			s._geom._computeAabb(s._aabb,s._ptransform);
			minX = s._aabb._minX;
			minY = s._aabb._minY;
			minZ = s._aabb._minZ;
			maxX = s._aabb._maxX;
			maxY = s._aabb._maxY;
			maxZ = s._aabb._maxZ;
			s._geom._computeAabb(s._aabb,s._transform);
			s._aabb._minX = minX < s._aabb._minX ? minX : s._aabb._minX;
			s._aabb._minY = minY < s._aabb._minY ? minY : s._aabb._minY;
			s._aabb._minZ = minZ < s._aabb._minZ ? minZ : s._aabb._minZ;
			s._aabb._maxX = maxX > s._aabb._maxX ? maxX : s._aabb._maxX;
			s._aabb._maxY = maxY > s._aabb._maxY ? maxY : s._aabb._maxY;
			s._aabb._maxZ = maxZ > s._aabb._maxZ ? maxZ : s._aabb._maxZ;
			if(s._proxy != null) {
				var dX;
				var dY;
				var dZ;
				dX = s._transform._positionX - s._ptransform._positionX;
				dY = s._transform._positionY - s._ptransform._positionY;
				dZ = s._transform._positionZ - s._ptransform._positionZ;
				var v = s.displacement;
				v.x = dX;
				v.y = dY;
				v.z = dZ;
				s._rigidBody._world._broadPhase.moveProxy(s._proxy,s._aabb,s.displacement);
			}
			s = n;
		}
		this._sleeping = false;
		this._sleepTime = 0;
	}
	,setRotationXyz: function(eulerAngles) {
		var xyzX;
		var xyzY;
		var xyzZ;
		xyzX = eulerAngles.x;
		xyzY = eulerAngles.y;
		xyzZ = eulerAngles.z;
		var sx = Math.sin(xyzX);
		var sy = Math.sin(xyzY);
		var sz = Math.sin(xyzZ);
		var cx = Math.cos(xyzX);
		var cy = Math.cos(xyzY);
		var cz = Math.cos(xyzZ);
		this._transform._rotation00 = cy * cz;
		this._transform._rotation01 = -cy * sz;
		this._transform._rotation02 = sy;
		this._transform._rotation10 = cx * sz + cz * sx * sy;
		this._transform._rotation11 = cx * cz - sx * sy * sz;
		this._transform._rotation12 = -cy * sx;
		this._transform._rotation20 = sx * sz - cx * cz * sy;
		this._transform._rotation21 = cz * sx + cx * sy * sz;
		this._transform._rotation22 = cx * cy;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = this._transform._rotation00 * this._invLocalInertia00 + this._transform._rotation01 * this._invLocalInertia10 + this._transform._rotation02 * this._invLocalInertia20;
		__tmp__01 = this._transform._rotation00 * this._invLocalInertia01 + this._transform._rotation01 * this._invLocalInertia11 + this._transform._rotation02 * this._invLocalInertia21;
		__tmp__02 = this._transform._rotation00 * this._invLocalInertia02 + this._transform._rotation01 * this._invLocalInertia12 + this._transform._rotation02 * this._invLocalInertia22;
		__tmp__10 = this._transform._rotation10 * this._invLocalInertia00 + this._transform._rotation11 * this._invLocalInertia10 + this._transform._rotation12 * this._invLocalInertia20;
		__tmp__11 = this._transform._rotation10 * this._invLocalInertia01 + this._transform._rotation11 * this._invLocalInertia11 + this._transform._rotation12 * this._invLocalInertia21;
		__tmp__12 = this._transform._rotation10 * this._invLocalInertia02 + this._transform._rotation11 * this._invLocalInertia12 + this._transform._rotation12 * this._invLocalInertia22;
		__tmp__20 = this._transform._rotation20 * this._invLocalInertia00 + this._transform._rotation21 * this._invLocalInertia10 + this._transform._rotation22 * this._invLocalInertia20;
		__tmp__21 = this._transform._rotation20 * this._invLocalInertia01 + this._transform._rotation21 * this._invLocalInertia11 + this._transform._rotation22 * this._invLocalInertia21;
		__tmp__22 = this._transform._rotation20 * this._invLocalInertia02 + this._transform._rotation21 * this._invLocalInertia12 + this._transform._rotation22 * this._invLocalInertia22;
		this._invInertia00 = __tmp__00;
		this._invInertia01 = __tmp__01;
		this._invInertia02 = __tmp__02;
		this._invInertia10 = __tmp__10;
		this._invInertia11 = __tmp__11;
		this._invInertia12 = __tmp__12;
		this._invInertia20 = __tmp__20;
		this._invInertia21 = __tmp__21;
		this._invInertia22 = __tmp__22;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = this._invInertia00 * this._transform._rotation00 + this._invInertia01 * this._transform._rotation01 + this._invInertia02 * this._transform._rotation02;
		__tmp__01 = this._invInertia00 * this._transform._rotation10 + this._invInertia01 * this._transform._rotation11 + this._invInertia02 * this._transform._rotation12;
		__tmp__02 = this._invInertia00 * this._transform._rotation20 + this._invInertia01 * this._transform._rotation21 + this._invInertia02 * this._transform._rotation22;
		__tmp__10 = this._invInertia10 * this._transform._rotation00 + this._invInertia11 * this._transform._rotation01 + this._invInertia12 * this._transform._rotation02;
		__tmp__11 = this._invInertia10 * this._transform._rotation10 + this._invInertia11 * this._transform._rotation11 + this._invInertia12 * this._transform._rotation12;
		__tmp__12 = this._invInertia10 * this._transform._rotation20 + this._invInertia11 * this._transform._rotation21 + this._invInertia12 * this._transform._rotation22;
		__tmp__20 = this._invInertia20 * this._transform._rotation00 + this._invInertia21 * this._transform._rotation01 + this._invInertia22 * this._transform._rotation02;
		__tmp__21 = this._invInertia20 * this._transform._rotation10 + this._invInertia21 * this._transform._rotation11 + this._invInertia22 * this._transform._rotation12;
		__tmp__22 = this._invInertia20 * this._transform._rotation20 + this._invInertia21 * this._transform._rotation21 + this._invInertia22 * this._transform._rotation22;
		this._invInertia00 = __tmp__00;
		this._invInertia01 = __tmp__01;
		this._invInertia02 = __tmp__02;
		this._invInertia10 = __tmp__10;
		this._invInertia11 = __tmp__11;
		this._invInertia12 = __tmp__12;
		this._invInertia20 = __tmp__20;
		this._invInertia21 = __tmp__21;
		this._invInertia22 = __tmp__22;
		this._invInertia00 *= this._rotFactor.x;
		this._invInertia01 *= this._rotFactor.x;
		this._invInertia02 *= this._rotFactor.x;
		this._invInertia10 *= this._rotFactor.y;
		this._invInertia11 *= this._rotFactor.y;
		this._invInertia12 *= this._rotFactor.y;
		this._invInertia20 *= this._rotFactor.z;
		this._invInertia21 *= this._rotFactor.z;
		this._invInertia22 *= this._rotFactor.z;
		var dst = this._ptransform;
		var src = this._transform;
		dst._positionX = src._positionX;
		dst._positionY = src._positionY;
		dst._positionZ = src._positionZ;
		dst._rotation00 = src._rotation00;
		dst._rotation01 = src._rotation01;
		dst._rotation02 = src._rotation02;
		dst._rotation10 = src._rotation10;
		dst._rotation11 = src._rotation11;
		dst._rotation12 = src._rotation12;
		dst._rotation20 = src._rotation20;
		dst._rotation21 = src._rotation21;
		dst._rotation22 = src._rotation22;
		var s = this._shapeList;
		while(s != null) {
			var n = s._next;
			var tf1 = this._ptransform;
			var tf2 = this._transform;
			var dst = s._ptransform;
			var src1 = s._localTransform;
			var __tmp__00;
			var __tmp__01;
			var __tmp__02;
			var __tmp__10;
			var __tmp__11;
			var __tmp__12;
			var __tmp__20;
			var __tmp__21;
			var __tmp__22;
			__tmp__00 = tf1._rotation00 * src1._rotation00 + tf1._rotation01 * src1._rotation10 + tf1._rotation02 * src1._rotation20;
			__tmp__01 = tf1._rotation00 * src1._rotation01 + tf1._rotation01 * src1._rotation11 + tf1._rotation02 * src1._rotation21;
			__tmp__02 = tf1._rotation00 * src1._rotation02 + tf1._rotation01 * src1._rotation12 + tf1._rotation02 * src1._rotation22;
			__tmp__10 = tf1._rotation10 * src1._rotation00 + tf1._rotation11 * src1._rotation10 + tf1._rotation12 * src1._rotation20;
			__tmp__11 = tf1._rotation10 * src1._rotation01 + tf1._rotation11 * src1._rotation11 + tf1._rotation12 * src1._rotation21;
			__tmp__12 = tf1._rotation10 * src1._rotation02 + tf1._rotation11 * src1._rotation12 + tf1._rotation12 * src1._rotation22;
			__tmp__20 = tf1._rotation20 * src1._rotation00 + tf1._rotation21 * src1._rotation10 + tf1._rotation22 * src1._rotation20;
			__tmp__21 = tf1._rotation20 * src1._rotation01 + tf1._rotation21 * src1._rotation11 + tf1._rotation22 * src1._rotation21;
			__tmp__22 = tf1._rotation20 * src1._rotation02 + tf1._rotation21 * src1._rotation12 + tf1._rotation22 * src1._rotation22;
			dst._rotation00 = __tmp__00;
			dst._rotation01 = __tmp__01;
			dst._rotation02 = __tmp__02;
			dst._rotation10 = __tmp__10;
			dst._rotation11 = __tmp__11;
			dst._rotation12 = __tmp__12;
			dst._rotation20 = __tmp__20;
			dst._rotation21 = __tmp__21;
			dst._rotation22 = __tmp__22;
			var __tmp__X;
			var __tmp__Y;
			var __tmp__Z;
			__tmp__X = tf1._rotation00 * src1._positionX + tf1._rotation01 * src1._positionY + tf1._rotation02 * src1._positionZ;
			__tmp__Y = tf1._rotation10 * src1._positionX + tf1._rotation11 * src1._positionY + tf1._rotation12 * src1._positionZ;
			__tmp__Z = tf1._rotation20 * src1._positionX + tf1._rotation21 * src1._positionY + tf1._rotation22 * src1._positionZ;
			dst._positionX = __tmp__X;
			dst._positionY = __tmp__Y;
			dst._positionZ = __tmp__Z;
			dst._positionX += tf1._positionX;
			dst._positionY += tf1._positionY;
			dst._positionZ += tf1._positionZ;
			var dst1 = s._transform;
			var src11 = s._localTransform;
			var __tmp__001;
			var __tmp__011;
			var __tmp__021;
			var __tmp__101;
			var __tmp__111;
			var __tmp__121;
			var __tmp__201;
			var __tmp__211;
			var __tmp__221;
			__tmp__001 = tf2._rotation00 * src11._rotation00 + tf2._rotation01 * src11._rotation10 + tf2._rotation02 * src11._rotation20;
			__tmp__011 = tf2._rotation00 * src11._rotation01 + tf2._rotation01 * src11._rotation11 + tf2._rotation02 * src11._rotation21;
			__tmp__021 = tf2._rotation00 * src11._rotation02 + tf2._rotation01 * src11._rotation12 + tf2._rotation02 * src11._rotation22;
			__tmp__101 = tf2._rotation10 * src11._rotation00 + tf2._rotation11 * src11._rotation10 + tf2._rotation12 * src11._rotation20;
			__tmp__111 = tf2._rotation10 * src11._rotation01 + tf2._rotation11 * src11._rotation11 + tf2._rotation12 * src11._rotation21;
			__tmp__121 = tf2._rotation10 * src11._rotation02 + tf2._rotation11 * src11._rotation12 + tf2._rotation12 * src11._rotation22;
			__tmp__201 = tf2._rotation20 * src11._rotation00 + tf2._rotation21 * src11._rotation10 + tf2._rotation22 * src11._rotation20;
			__tmp__211 = tf2._rotation20 * src11._rotation01 + tf2._rotation21 * src11._rotation11 + tf2._rotation22 * src11._rotation21;
			__tmp__221 = tf2._rotation20 * src11._rotation02 + tf2._rotation21 * src11._rotation12 + tf2._rotation22 * src11._rotation22;
			dst1._rotation00 = __tmp__001;
			dst1._rotation01 = __tmp__011;
			dst1._rotation02 = __tmp__021;
			dst1._rotation10 = __tmp__101;
			dst1._rotation11 = __tmp__111;
			dst1._rotation12 = __tmp__121;
			dst1._rotation20 = __tmp__201;
			dst1._rotation21 = __tmp__211;
			dst1._rotation22 = __tmp__221;
			var __tmp__X1;
			var __tmp__Y1;
			var __tmp__Z1;
			__tmp__X1 = tf2._rotation00 * src11._positionX + tf2._rotation01 * src11._positionY + tf2._rotation02 * src11._positionZ;
			__tmp__Y1 = tf2._rotation10 * src11._positionX + tf2._rotation11 * src11._positionY + tf2._rotation12 * src11._positionZ;
			__tmp__Z1 = tf2._rotation20 * src11._positionX + tf2._rotation21 * src11._positionY + tf2._rotation22 * src11._positionZ;
			dst1._positionX = __tmp__X1;
			dst1._positionY = __tmp__Y1;
			dst1._positionZ = __tmp__Z1;
			dst1._positionX += tf2._positionX;
			dst1._positionY += tf2._positionY;
			dst1._positionZ += tf2._positionZ;
			var minX;
			var minY;
			var minZ;
			var maxX;
			var maxY;
			var maxZ;
			s._geom._computeAabb(s._aabb,s._ptransform);
			minX = s._aabb._minX;
			minY = s._aabb._minY;
			minZ = s._aabb._minZ;
			maxX = s._aabb._maxX;
			maxY = s._aabb._maxY;
			maxZ = s._aabb._maxZ;
			s._geom._computeAabb(s._aabb,s._transform);
			s._aabb._minX = minX < s._aabb._minX ? minX : s._aabb._minX;
			s._aabb._minY = minY < s._aabb._minY ? minY : s._aabb._minY;
			s._aabb._minZ = minZ < s._aabb._minZ ? minZ : s._aabb._minZ;
			s._aabb._maxX = maxX > s._aabb._maxX ? maxX : s._aabb._maxX;
			s._aabb._maxY = maxY > s._aabb._maxY ? maxY : s._aabb._maxY;
			s._aabb._maxZ = maxZ > s._aabb._maxZ ? maxZ : s._aabb._maxZ;
			if(s._proxy != null) {
				var dX;
				var dY;
				var dZ;
				dX = s._transform._positionX - s._ptransform._positionX;
				dY = s._transform._positionY - s._ptransform._positionY;
				dZ = s._transform._positionZ - s._ptransform._positionZ;
				var v = s.displacement;
				v.x = dX;
				v.y = dY;
				v.z = dZ;
				s._rigidBody._world._broadPhase.moveProxy(s._proxy,s._aabb,s.displacement);
			}
			s = n;
		}
		this._sleeping = false;
		this._sleepTime = 0;
	}
	,rotate: function(rotation) {
		var rot00;
		var rot01;
		var rot02;
		var rot10;
		var rot11;
		var rot12;
		var rot20;
		var rot21;
		var rot22;
		rot00 = rotation.e00;
		rot01 = rotation.e01;
		rot02 = rotation.e02;
		rot10 = rotation.e10;
		rot11 = rotation.e11;
		rot12 = rotation.e12;
		rot20 = rotation.e20;
		rot21 = rotation.e21;
		rot22 = rotation.e22;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = rot00 * this._transform._rotation00 + rot01 * this._transform._rotation10 + rot02 * this._transform._rotation20;
		__tmp__01 = rot00 * this._transform._rotation01 + rot01 * this._transform._rotation11 + rot02 * this._transform._rotation21;
		__tmp__02 = rot00 * this._transform._rotation02 + rot01 * this._transform._rotation12 + rot02 * this._transform._rotation22;
		__tmp__10 = rot10 * this._transform._rotation00 + rot11 * this._transform._rotation10 + rot12 * this._transform._rotation20;
		__tmp__11 = rot10 * this._transform._rotation01 + rot11 * this._transform._rotation11 + rot12 * this._transform._rotation21;
		__tmp__12 = rot10 * this._transform._rotation02 + rot11 * this._transform._rotation12 + rot12 * this._transform._rotation22;
		__tmp__20 = rot20 * this._transform._rotation00 + rot21 * this._transform._rotation10 + rot22 * this._transform._rotation20;
		__tmp__21 = rot20 * this._transform._rotation01 + rot21 * this._transform._rotation11 + rot22 * this._transform._rotation21;
		__tmp__22 = rot20 * this._transform._rotation02 + rot21 * this._transform._rotation12 + rot22 * this._transform._rotation22;
		this._transform._rotation00 = __tmp__00;
		this._transform._rotation01 = __tmp__01;
		this._transform._rotation02 = __tmp__02;
		this._transform._rotation10 = __tmp__10;
		this._transform._rotation11 = __tmp__11;
		this._transform._rotation12 = __tmp__12;
		this._transform._rotation20 = __tmp__20;
		this._transform._rotation21 = __tmp__21;
		this._transform._rotation22 = __tmp__22;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = this._transform._rotation00 * this._invLocalInertia00 + this._transform._rotation01 * this._invLocalInertia10 + this._transform._rotation02 * this._invLocalInertia20;
		__tmp__01 = this._transform._rotation00 * this._invLocalInertia01 + this._transform._rotation01 * this._invLocalInertia11 + this._transform._rotation02 * this._invLocalInertia21;
		__tmp__02 = this._transform._rotation00 * this._invLocalInertia02 + this._transform._rotation01 * this._invLocalInertia12 + this._transform._rotation02 * this._invLocalInertia22;
		__tmp__10 = this._transform._rotation10 * this._invLocalInertia00 + this._transform._rotation11 * this._invLocalInertia10 + this._transform._rotation12 * this._invLocalInertia20;
		__tmp__11 = this._transform._rotation10 * this._invLocalInertia01 + this._transform._rotation11 * this._invLocalInertia11 + this._transform._rotation12 * this._invLocalInertia21;
		__tmp__12 = this._transform._rotation10 * this._invLocalInertia02 + this._transform._rotation11 * this._invLocalInertia12 + this._transform._rotation12 * this._invLocalInertia22;
		__tmp__20 = this._transform._rotation20 * this._invLocalInertia00 + this._transform._rotation21 * this._invLocalInertia10 + this._transform._rotation22 * this._invLocalInertia20;
		__tmp__21 = this._transform._rotation20 * this._invLocalInertia01 + this._transform._rotation21 * this._invLocalInertia11 + this._transform._rotation22 * this._invLocalInertia21;
		__tmp__22 = this._transform._rotation20 * this._invLocalInertia02 + this._transform._rotation21 * this._invLocalInertia12 + this._transform._rotation22 * this._invLocalInertia22;
		this._invInertia00 = __tmp__00;
		this._invInertia01 = __tmp__01;
		this._invInertia02 = __tmp__02;
		this._invInertia10 = __tmp__10;
		this._invInertia11 = __tmp__11;
		this._invInertia12 = __tmp__12;
		this._invInertia20 = __tmp__20;
		this._invInertia21 = __tmp__21;
		this._invInertia22 = __tmp__22;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = this._invInertia00 * this._transform._rotation00 + this._invInertia01 * this._transform._rotation01 + this._invInertia02 * this._transform._rotation02;
		__tmp__01 = this._invInertia00 * this._transform._rotation10 + this._invInertia01 * this._transform._rotation11 + this._invInertia02 * this._transform._rotation12;
		__tmp__02 = this._invInertia00 * this._transform._rotation20 + this._invInertia01 * this._transform._rotation21 + this._invInertia02 * this._transform._rotation22;
		__tmp__10 = this._invInertia10 * this._transform._rotation00 + this._invInertia11 * this._transform._rotation01 + this._invInertia12 * this._transform._rotation02;
		__tmp__11 = this._invInertia10 * this._transform._rotation10 + this._invInertia11 * this._transform._rotation11 + this._invInertia12 * this._transform._rotation12;
		__tmp__12 = this._invInertia10 * this._transform._rotation20 + this._invInertia11 * this._transform._rotation21 + this._invInertia12 * this._transform._rotation22;
		__tmp__20 = this._invInertia20 * this._transform._rotation00 + this._invInertia21 * this._transform._rotation01 + this._invInertia22 * this._transform._rotation02;
		__tmp__21 = this._invInertia20 * this._transform._rotation10 + this._invInertia21 * this._transform._rotation11 + this._invInertia22 * this._transform._rotation12;
		__tmp__22 = this._invInertia20 * this._transform._rotation20 + this._invInertia21 * this._transform._rotation21 + this._invInertia22 * this._transform._rotation22;
		this._invInertia00 = __tmp__00;
		this._invInertia01 = __tmp__01;
		this._invInertia02 = __tmp__02;
		this._invInertia10 = __tmp__10;
		this._invInertia11 = __tmp__11;
		this._invInertia12 = __tmp__12;
		this._invInertia20 = __tmp__20;
		this._invInertia21 = __tmp__21;
		this._invInertia22 = __tmp__22;
		this._invInertia00 *= this._rotFactor.x;
		this._invInertia01 *= this._rotFactor.x;
		this._invInertia02 *= this._rotFactor.x;
		this._invInertia10 *= this._rotFactor.y;
		this._invInertia11 *= this._rotFactor.y;
		this._invInertia12 *= this._rotFactor.y;
		this._invInertia20 *= this._rotFactor.z;
		this._invInertia21 *= this._rotFactor.z;
		this._invInertia22 *= this._rotFactor.z;
		var dst = this._ptransform;
		var src = this._transform;
		dst._positionX = src._positionX;
		dst._positionY = src._positionY;
		dst._positionZ = src._positionZ;
		dst._rotation00 = src._rotation00;
		dst._rotation01 = src._rotation01;
		dst._rotation02 = src._rotation02;
		dst._rotation10 = src._rotation10;
		dst._rotation11 = src._rotation11;
		dst._rotation12 = src._rotation12;
		dst._rotation20 = src._rotation20;
		dst._rotation21 = src._rotation21;
		dst._rotation22 = src._rotation22;
		var s = this._shapeList;
		while(s != null) {
			var n = s._next;
			var tf1 = this._ptransform;
			var tf2 = this._transform;
			var dst = s._ptransform;
			var src1 = s._localTransform;
			var __tmp__00;
			var __tmp__01;
			var __tmp__02;
			var __tmp__10;
			var __tmp__11;
			var __tmp__12;
			var __tmp__20;
			var __tmp__21;
			var __tmp__22;
			__tmp__00 = tf1._rotation00 * src1._rotation00 + tf1._rotation01 * src1._rotation10 + tf1._rotation02 * src1._rotation20;
			__tmp__01 = tf1._rotation00 * src1._rotation01 + tf1._rotation01 * src1._rotation11 + tf1._rotation02 * src1._rotation21;
			__tmp__02 = tf1._rotation00 * src1._rotation02 + tf1._rotation01 * src1._rotation12 + tf1._rotation02 * src1._rotation22;
			__tmp__10 = tf1._rotation10 * src1._rotation00 + tf1._rotation11 * src1._rotation10 + tf1._rotation12 * src1._rotation20;
			__tmp__11 = tf1._rotation10 * src1._rotation01 + tf1._rotation11 * src1._rotation11 + tf1._rotation12 * src1._rotation21;
			__tmp__12 = tf1._rotation10 * src1._rotation02 + tf1._rotation11 * src1._rotation12 + tf1._rotation12 * src1._rotation22;
			__tmp__20 = tf1._rotation20 * src1._rotation00 + tf1._rotation21 * src1._rotation10 + tf1._rotation22 * src1._rotation20;
			__tmp__21 = tf1._rotation20 * src1._rotation01 + tf1._rotation21 * src1._rotation11 + tf1._rotation22 * src1._rotation21;
			__tmp__22 = tf1._rotation20 * src1._rotation02 + tf1._rotation21 * src1._rotation12 + tf1._rotation22 * src1._rotation22;
			dst._rotation00 = __tmp__00;
			dst._rotation01 = __tmp__01;
			dst._rotation02 = __tmp__02;
			dst._rotation10 = __tmp__10;
			dst._rotation11 = __tmp__11;
			dst._rotation12 = __tmp__12;
			dst._rotation20 = __tmp__20;
			dst._rotation21 = __tmp__21;
			dst._rotation22 = __tmp__22;
			var __tmp__X;
			var __tmp__Y;
			var __tmp__Z;
			__tmp__X = tf1._rotation00 * src1._positionX + tf1._rotation01 * src1._positionY + tf1._rotation02 * src1._positionZ;
			__tmp__Y = tf1._rotation10 * src1._positionX + tf1._rotation11 * src1._positionY + tf1._rotation12 * src1._positionZ;
			__tmp__Z = tf1._rotation20 * src1._positionX + tf1._rotation21 * src1._positionY + tf1._rotation22 * src1._positionZ;
			dst._positionX = __tmp__X;
			dst._positionY = __tmp__Y;
			dst._positionZ = __tmp__Z;
			dst._positionX += tf1._positionX;
			dst._positionY += tf1._positionY;
			dst._positionZ += tf1._positionZ;
			var dst1 = s._transform;
			var src11 = s._localTransform;
			var __tmp__001;
			var __tmp__011;
			var __tmp__021;
			var __tmp__101;
			var __tmp__111;
			var __tmp__121;
			var __tmp__201;
			var __tmp__211;
			var __tmp__221;
			__tmp__001 = tf2._rotation00 * src11._rotation00 + tf2._rotation01 * src11._rotation10 + tf2._rotation02 * src11._rotation20;
			__tmp__011 = tf2._rotation00 * src11._rotation01 + tf2._rotation01 * src11._rotation11 + tf2._rotation02 * src11._rotation21;
			__tmp__021 = tf2._rotation00 * src11._rotation02 + tf2._rotation01 * src11._rotation12 + tf2._rotation02 * src11._rotation22;
			__tmp__101 = tf2._rotation10 * src11._rotation00 + tf2._rotation11 * src11._rotation10 + tf2._rotation12 * src11._rotation20;
			__tmp__111 = tf2._rotation10 * src11._rotation01 + tf2._rotation11 * src11._rotation11 + tf2._rotation12 * src11._rotation21;
			__tmp__121 = tf2._rotation10 * src11._rotation02 + tf2._rotation11 * src11._rotation12 + tf2._rotation12 * src11._rotation22;
			__tmp__201 = tf2._rotation20 * src11._rotation00 + tf2._rotation21 * src11._rotation10 + tf2._rotation22 * src11._rotation20;
			__tmp__211 = tf2._rotation20 * src11._rotation01 + tf2._rotation21 * src11._rotation11 + tf2._rotation22 * src11._rotation21;
			__tmp__221 = tf2._rotation20 * src11._rotation02 + tf2._rotation21 * src11._rotation12 + tf2._rotation22 * src11._rotation22;
			dst1._rotation00 = __tmp__001;
			dst1._rotation01 = __tmp__011;
			dst1._rotation02 = __tmp__021;
			dst1._rotation10 = __tmp__101;
			dst1._rotation11 = __tmp__111;
			dst1._rotation12 = __tmp__121;
			dst1._rotation20 = __tmp__201;
			dst1._rotation21 = __tmp__211;
			dst1._rotation22 = __tmp__221;
			var __tmp__X1;
			var __tmp__Y1;
			var __tmp__Z1;
			__tmp__X1 = tf2._rotation00 * src11._positionX + tf2._rotation01 * src11._positionY + tf2._rotation02 * src11._positionZ;
			__tmp__Y1 = tf2._rotation10 * src11._positionX + tf2._rotation11 * src11._positionY + tf2._rotation12 * src11._positionZ;
			__tmp__Z1 = tf2._rotation20 * src11._positionX + tf2._rotation21 * src11._positionY + tf2._rotation22 * src11._positionZ;
			dst1._positionX = __tmp__X1;
			dst1._positionY = __tmp__Y1;
			dst1._positionZ = __tmp__Z1;
			dst1._positionX += tf2._positionX;
			dst1._positionY += tf2._positionY;
			dst1._positionZ += tf2._positionZ;
			var minX;
			var minY;
			var minZ;
			var maxX;
			var maxY;
			var maxZ;
			s._geom._computeAabb(s._aabb,s._ptransform);
			minX = s._aabb._minX;
			minY = s._aabb._minY;
			minZ = s._aabb._minZ;
			maxX = s._aabb._maxX;
			maxY = s._aabb._maxY;
			maxZ = s._aabb._maxZ;
			s._geom._computeAabb(s._aabb,s._transform);
			s._aabb._minX = minX < s._aabb._minX ? minX : s._aabb._minX;
			s._aabb._minY = minY < s._aabb._minY ? minY : s._aabb._minY;
			s._aabb._minZ = minZ < s._aabb._minZ ? minZ : s._aabb._minZ;
			s._aabb._maxX = maxX > s._aabb._maxX ? maxX : s._aabb._maxX;
			s._aabb._maxY = maxY > s._aabb._maxY ? maxY : s._aabb._maxY;
			s._aabb._maxZ = maxZ > s._aabb._maxZ ? maxZ : s._aabb._maxZ;
			if(s._proxy != null) {
				var dX;
				var dY;
				var dZ;
				dX = s._transform._positionX - s._ptransform._positionX;
				dY = s._transform._positionY - s._ptransform._positionY;
				dZ = s._transform._positionZ - s._ptransform._positionZ;
				var v = s.displacement;
				v.x = dX;
				v.y = dY;
				v.z = dZ;
				s._rigidBody._world._broadPhase.moveProxy(s._proxy,s._aabb,s.displacement);
			}
			s = n;
		}
		this._sleeping = false;
		this._sleepTime = 0;
	}
	,rotateXyz: function(eulerAngles) {
		var xyzX;
		var xyzY;
		var xyzZ;
		var rot00;
		var rot01;
		var rot02;
		var rot10;
		var rot11;
		var rot12;
		var rot20;
		var rot21;
		var rot22;
		xyzX = eulerAngles.x;
		xyzY = eulerAngles.y;
		xyzZ = eulerAngles.z;
		var sx = Math.sin(xyzX);
		var sy = Math.sin(xyzY);
		var sz = Math.sin(xyzZ);
		var cx = Math.cos(xyzX);
		var cy = Math.cos(xyzY);
		var cz = Math.cos(xyzZ);
		rot00 = cy * cz;
		rot01 = -cy * sz;
		rot02 = sy;
		rot10 = cx * sz + cz * sx * sy;
		rot11 = cx * cz - sx * sy * sz;
		rot12 = -cy * sx;
		rot20 = sx * sz - cx * cz * sy;
		rot21 = cz * sx + cx * sy * sz;
		rot22 = cx * cy;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = rot00 * this._transform._rotation00 + rot01 * this._transform._rotation10 + rot02 * this._transform._rotation20;
		__tmp__01 = rot00 * this._transform._rotation01 + rot01 * this._transform._rotation11 + rot02 * this._transform._rotation21;
		__tmp__02 = rot00 * this._transform._rotation02 + rot01 * this._transform._rotation12 + rot02 * this._transform._rotation22;
		__tmp__10 = rot10 * this._transform._rotation00 + rot11 * this._transform._rotation10 + rot12 * this._transform._rotation20;
		__tmp__11 = rot10 * this._transform._rotation01 + rot11 * this._transform._rotation11 + rot12 * this._transform._rotation21;
		__tmp__12 = rot10 * this._transform._rotation02 + rot11 * this._transform._rotation12 + rot12 * this._transform._rotation22;
		__tmp__20 = rot20 * this._transform._rotation00 + rot21 * this._transform._rotation10 + rot22 * this._transform._rotation20;
		__tmp__21 = rot20 * this._transform._rotation01 + rot21 * this._transform._rotation11 + rot22 * this._transform._rotation21;
		__tmp__22 = rot20 * this._transform._rotation02 + rot21 * this._transform._rotation12 + rot22 * this._transform._rotation22;
		this._transform._rotation00 = __tmp__00;
		this._transform._rotation01 = __tmp__01;
		this._transform._rotation02 = __tmp__02;
		this._transform._rotation10 = __tmp__10;
		this._transform._rotation11 = __tmp__11;
		this._transform._rotation12 = __tmp__12;
		this._transform._rotation20 = __tmp__20;
		this._transform._rotation21 = __tmp__21;
		this._transform._rotation22 = __tmp__22;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = this._transform._rotation00 * this._invLocalInertia00 + this._transform._rotation01 * this._invLocalInertia10 + this._transform._rotation02 * this._invLocalInertia20;
		__tmp__01 = this._transform._rotation00 * this._invLocalInertia01 + this._transform._rotation01 * this._invLocalInertia11 + this._transform._rotation02 * this._invLocalInertia21;
		__tmp__02 = this._transform._rotation00 * this._invLocalInertia02 + this._transform._rotation01 * this._invLocalInertia12 + this._transform._rotation02 * this._invLocalInertia22;
		__tmp__10 = this._transform._rotation10 * this._invLocalInertia00 + this._transform._rotation11 * this._invLocalInertia10 + this._transform._rotation12 * this._invLocalInertia20;
		__tmp__11 = this._transform._rotation10 * this._invLocalInertia01 + this._transform._rotation11 * this._invLocalInertia11 + this._transform._rotation12 * this._invLocalInertia21;
		__tmp__12 = this._transform._rotation10 * this._invLocalInertia02 + this._transform._rotation11 * this._invLocalInertia12 + this._transform._rotation12 * this._invLocalInertia22;
		__tmp__20 = this._transform._rotation20 * this._invLocalInertia00 + this._transform._rotation21 * this._invLocalInertia10 + this._transform._rotation22 * this._invLocalInertia20;
		__tmp__21 = this._transform._rotation20 * this._invLocalInertia01 + this._transform._rotation21 * this._invLocalInertia11 + this._transform._rotation22 * this._invLocalInertia21;
		__tmp__22 = this._transform._rotation20 * this._invLocalInertia02 + this._transform._rotation21 * this._invLocalInertia12 + this._transform._rotation22 * this._invLocalInertia22;
		this._invInertia00 = __tmp__00;
		this._invInertia01 = __tmp__01;
		this._invInertia02 = __tmp__02;
		this._invInertia10 = __tmp__10;
		this._invInertia11 = __tmp__11;
		this._invInertia12 = __tmp__12;
		this._invInertia20 = __tmp__20;
		this._invInertia21 = __tmp__21;
		this._invInertia22 = __tmp__22;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = this._invInertia00 * this._transform._rotation00 + this._invInertia01 * this._transform._rotation01 + this._invInertia02 * this._transform._rotation02;
		__tmp__01 = this._invInertia00 * this._transform._rotation10 + this._invInertia01 * this._transform._rotation11 + this._invInertia02 * this._transform._rotation12;
		__tmp__02 = this._invInertia00 * this._transform._rotation20 + this._invInertia01 * this._transform._rotation21 + this._invInertia02 * this._transform._rotation22;
		__tmp__10 = this._invInertia10 * this._transform._rotation00 + this._invInertia11 * this._transform._rotation01 + this._invInertia12 * this._transform._rotation02;
		__tmp__11 = this._invInertia10 * this._transform._rotation10 + this._invInertia11 * this._transform._rotation11 + this._invInertia12 * this._transform._rotation12;
		__tmp__12 = this._invInertia10 * this._transform._rotation20 + this._invInertia11 * this._transform._rotation21 + this._invInertia12 * this._transform._rotation22;
		__tmp__20 = this._invInertia20 * this._transform._rotation00 + this._invInertia21 * this._transform._rotation01 + this._invInertia22 * this._transform._rotation02;
		__tmp__21 = this._invInertia20 * this._transform._rotation10 + this._invInertia21 * this._transform._rotation11 + this._invInertia22 * this._transform._rotation12;
		__tmp__22 = this._invInertia20 * this._transform._rotation20 + this._invInertia21 * this._transform._rotation21 + this._invInertia22 * this._transform._rotation22;
		this._invInertia00 = __tmp__00;
		this._invInertia01 = __tmp__01;
		this._invInertia02 = __tmp__02;
		this._invInertia10 = __tmp__10;
		this._invInertia11 = __tmp__11;
		this._invInertia12 = __tmp__12;
		this._invInertia20 = __tmp__20;
		this._invInertia21 = __tmp__21;
		this._invInertia22 = __tmp__22;
		this._invInertia00 *= this._rotFactor.x;
		this._invInertia01 *= this._rotFactor.x;
		this._invInertia02 *= this._rotFactor.x;
		this._invInertia10 *= this._rotFactor.y;
		this._invInertia11 *= this._rotFactor.y;
		this._invInertia12 *= this._rotFactor.y;
		this._invInertia20 *= this._rotFactor.z;
		this._invInertia21 *= this._rotFactor.z;
		this._invInertia22 *= this._rotFactor.z;
		var dst = this._ptransform;
		var src = this._transform;
		dst._positionX = src._positionX;
		dst._positionY = src._positionY;
		dst._positionZ = src._positionZ;
		dst._rotation00 = src._rotation00;
		dst._rotation01 = src._rotation01;
		dst._rotation02 = src._rotation02;
		dst._rotation10 = src._rotation10;
		dst._rotation11 = src._rotation11;
		dst._rotation12 = src._rotation12;
		dst._rotation20 = src._rotation20;
		dst._rotation21 = src._rotation21;
		dst._rotation22 = src._rotation22;
		var s = this._shapeList;
		while(s != null) {
			var n = s._next;
			var tf1 = this._ptransform;
			var tf2 = this._transform;
			var dst = s._ptransform;
			var src1 = s._localTransform;
			var __tmp__00;
			var __tmp__01;
			var __tmp__02;
			var __tmp__10;
			var __tmp__11;
			var __tmp__12;
			var __tmp__20;
			var __tmp__21;
			var __tmp__22;
			__tmp__00 = tf1._rotation00 * src1._rotation00 + tf1._rotation01 * src1._rotation10 + tf1._rotation02 * src1._rotation20;
			__tmp__01 = tf1._rotation00 * src1._rotation01 + tf1._rotation01 * src1._rotation11 + tf1._rotation02 * src1._rotation21;
			__tmp__02 = tf1._rotation00 * src1._rotation02 + tf1._rotation01 * src1._rotation12 + tf1._rotation02 * src1._rotation22;
			__tmp__10 = tf1._rotation10 * src1._rotation00 + tf1._rotation11 * src1._rotation10 + tf1._rotation12 * src1._rotation20;
			__tmp__11 = tf1._rotation10 * src1._rotation01 + tf1._rotation11 * src1._rotation11 + tf1._rotation12 * src1._rotation21;
			__tmp__12 = tf1._rotation10 * src1._rotation02 + tf1._rotation11 * src1._rotation12 + tf1._rotation12 * src1._rotation22;
			__tmp__20 = tf1._rotation20 * src1._rotation00 + tf1._rotation21 * src1._rotation10 + tf1._rotation22 * src1._rotation20;
			__tmp__21 = tf1._rotation20 * src1._rotation01 + tf1._rotation21 * src1._rotation11 + tf1._rotation22 * src1._rotation21;
			__tmp__22 = tf1._rotation20 * src1._rotation02 + tf1._rotation21 * src1._rotation12 + tf1._rotation22 * src1._rotation22;
			dst._rotation00 = __tmp__00;
			dst._rotation01 = __tmp__01;
			dst._rotation02 = __tmp__02;
			dst._rotation10 = __tmp__10;
			dst._rotation11 = __tmp__11;
			dst._rotation12 = __tmp__12;
			dst._rotation20 = __tmp__20;
			dst._rotation21 = __tmp__21;
			dst._rotation22 = __tmp__22;
			var __tmp__X;
			var __tmp__Y;
			var __tmp__Z;
			__tmp__X = tf1._rotation00 * src1._positionX + tf1._rotation01 * src1._positionY + tf1._rotation02 * src1._positionZ;
			__tmp__Y = tf1._rotation10 * src1._positionX + tf1._rotation11 * src1._positionY + tf1._rotation12 * src1._positionZ;
			__tmp__Z = tf1._rotation20 * src1._positionX + tf1._rotation21 * src1._positionY + tf1._rotation22 * src1._positionZ;
			dst._positionX = __tmp__X;
			dst._positionY = __tmp__Y;
			dst._positionZ = __tmp__Z;
			dst._positionX += tf1._positionX;
			dst._positionY += tf1._positionY;
			dst._positionZ += tf1._positionZ;
			var dst1 = s._transform;
			var src11 = s._localTransform;
			var __tmp__001;
			var __tmp__011;
			var __tmp__021;
			var __tmp__101;
			var __tmp__111;
			var __tmp__121;
			var __tmp__201;
			var __tmp__211;
			var __tmp__221;
			__tmp__001 = tf2._rotation00 * src11._rotation00 + tf2._rotation01 * src11._rotation10 + tf2._rotation02 * src11._rotation20;
			__tmp__011 = tf2._rotation00 * src11._rotation01 + tf2._rotation01 * src11._rotation11 + tf2._rotation02 * src11._rotation21;
			__tmp__021 = tf2._rotation00 * src11._rotation02 + tf2._rotation01 * src11._rotation12 + tf2._rotation02 * src11._rotation22;
			__tmp__101 = tf2._rotation10 * src11._rotation00 + tf2._rotation11 * src11._rotation10 + tf2._rotation12 * src11._rotation20;
			__tmp__111 = tf2._rotation10 * src11._rotation01 + tf2._rotation11 * src11._rotation11 + tf2._rotation12 * src11._rotation21;
			__tmp__121 = tf2._rotation10 * src11._rotation02 + tf2._rotation11 * src11._rotation12 + tf2._rotation12 * src11._rotation22;
			__tmp__201 = tf2._rotation20 * src11._rotation00 + tf2._rotation21 * src11._rotation10 + tf2._rotation22 * src11._rotation20;
			__tmp__211 = tf2._rotation20 * src11._rotation01 + tf2._rotation21 * src11._rotation11 + tf2._rotation22 * src11._rotation21;
			__tmp__221 = tf2._rotation20 * src11._rotation02 + tf2._rotation21 * src11._rotation12 + tf2._rotation22 * src11._rotation22;
			dst1._rotation00 = __tmp__001;
			dst1._rotation01 = __tmp__011;
			dst1._rotation02 = __tmp__021;
			dst1._rotation10 = __tmp__101;
			dst1._rotation11 = __tmp__111;
			dst1._rotation12 = __tmp__121;
			dst1._rotation20 = __tmp__201;
			dst1._rotation21 = __tmp__211;
			dst1._rotation22 = __tmp__221;
			var __tmp__X1;
			var __tmp__Y1;
			var __tmp__Z1;
			__tmp__X1 = tf2._rotation00 * src11._positionX + tf2._rotation01 * src11._positionY + tf2._rotation02 * src11._positionZ;
			__tmp__Y1 = tf2._rotation10 * src11._positionX + tf2._rotation11 * src11._positionY + tf2._rotation12 * src11._positionZ;
			__tmp__Z1 = tf2._rotation20 * src11._positionX + tf2._rotation21 * src11._positionY + tf2._rotation22 * src11._positionZ;
			dst1._positionX = __tmp__X1;
			dst1._positionY = __tmp__Y1;
			dst1._positionZ = __tmp__Z1;
			dst1._positionX += tf2._positionX;
			dst1._positionY += tf2._positionY;
			dst1._positionZ += tf2._positionZ;
			var minX;
			var minY;
			var minZ;
			var maxX;
			var maxY;
			var maxZ;
			s._geom._computeAabb(s._aabb,s._ptransform);
			minX = s._aabb._minX;
			minY = s._aabb._minY;
			minZ = s._aabb._minZ;
			maxX = s._aabb._maxX;
			maxY = s._aabb._maxY;
			maxZ = s._aabb._maxZ;
			s._geom._computeAabb(s._aabb,s._transform);
			s._aabb._minX = minX < s._aabb._minX ? minX : s._aabb._minX;
			s._aabb._minY = minY < s._aabb._minY ? minY : s._aabb._minY;
			s._aabb._minZ = minZ < s._aabb._minZ ? minZ : s._aabb._minZ;
			s._aabb._maxX = maxX > s._aabb._maxX ? maxX : s._aabb._maxX;
			s._aabb._maxY = maxY > s._aabb._maxY ? maxY : s._aabb._maxY;
			s._aabb._maxZ = maxZ > s._aabb._maxZ ? maxZ : s._aabb._maxZ;
			if(s._proxy != null) {
				var dX;
				var dY;
				var dZ;
				dX = s._transform._positionX - s._ptransform._positionX;
				dY = s._transform._positionY - s._ptransform._positionY;
				dZ = s._transform._positionZ - s._ptransform._positionZ;
				var v = s.displacement;
				v.x = dX;
				v.y = dY;
				v.z = dZ;
				s._rigidBody._world._broadPhase.moveProxy(s._proxy,s._aabb,s.displacement);
			}
			s = n;
		}
		this._sleeping = false;
		this._sleepTime = 0;
	}
	,getOrientation: function() {
		var q = new oimo_common_Quat();
		var iqX;
		var iqY;
		var iqZ;
		var iqW;
		var e00 = this._transform._rotation00;
		var e11 = this._transform._rotation11;
		var e22 = this._transform._rotation22;
		var t = e00 + e11 + e22;
		var s;
		if(t > 0) {
			s = Math.sqrt(t + 1);
			iqW = 0.5 * s;
			s = 0.5 / s;
			iqX = (this._transform._rotation21 - this._transform._rotation12) * s;
			iqY = (this._transform._rotation02 - this._transform._rotation20) * s;
			iqZ = (this._transform._rotation10 - this._transform._rotation01) * s;
		} else if(e00 > e11) {
			if(e00 > e22) {
				s = Math.sqrt(e00 - e11 - e22 + 1);
				iqX = 0.5 * s;
				s = 0.5 / s;
				iqY = (this._transform._rotation01 + this._transform._rotation10) * s;
				iqZ = (this._transform._rotation02 + this._transform._rotation20) * s;
				iqW = (this._transform._rotation21 - this._transform._rotation12) * s;
			} else {
				s = Math.sqrt(e22 - e00 - e11 + 1);
				iqZ = 0.5 * s;
				s = 0.5 / s;
				iqX = (this._transform._rotation02 + this._transform._rotation20) * s;
				iqY = (this._transform._rotation12 + this._transform._rotation21) * s;
				iqW = (this._transform._rotation10 - this._transform._rotation01) * s;
			}
		} else if(e11 > e22) {
			s = Math.sqrt(e11 - e22 - e00 + 1);
			iqY = 0.5 * s;
			s = 0.5 / s;
			iqX = (this._transform._rotation01 + this._transform._rotation10) * s;
			iqZ = (this._transform._rotation12 + this._transform._rotation21) * s;
			iqW = (this._transform._rotation02 - this._transform._rotation20) * s;
		} else {
			s = Math.sqrt(e22 - e00 - e11 + 1);
			iqZ = 0.5 * s;
			s = 0.5 / s;
			iqX = (this._transform._rotation02 + this._transform._rotation20) * s;
			iqY = (this._transform._rotation12 + this._transform._rotation21) * s;
			iqW = (this._transform._rotation10 - this._transform._rotation01) * s;
		}
		q.x = iqX;
		q.y = iqY;
		q.z = iqZ;
		q.w = iqW;
		return q;
	}
	,getOrientationTo: function(orientation) {
		var iqX;
		var iqY;
		var iqZ;
		var iqW;
		var e00 = this._transform._rotation00;
		var e11 = this._transform._rotation11;
		var e22 = this._transform._rotation22;
		var t = e00 + e11 + e22;
		var s;
		if(t > 0) {
			s = Math.sqrt(t + 1);
			iqW = 0.5 * s;
			s = 0.5 / s;
			iqX = (this._transform._rotation21 - this._transform._rotation12) * s;
			iqY = (this._transform._rotation02 - this._transform._rotation20) * s;
			iqZ = (this._transform._rotation10 - this._transform._rotation01) * s;
		} else if(e00 > e11) {
			if(e00 > e22) {
				s = Math.sqrt(e00 - e11 - e22 + 1);
				iqX = 0.5 * s;
				s = 0.5 / s;
				iqY = (this._transform._rotation01 + this._transform._rotation10) * s;
				iqZ = (this._transform._rotation02 + this._transform._rotation20) * s;
				iqW = (this._transform._rotation21 - this._transform._rotation12) * s;
			} else {
				s = Math.sqrt(e22 - e00 - e11 + 1);
				iqZ = 0.5 * s;
				s = 0.5 / s;
				iqX = (this._transform._rotation02 + this._transform._rotation20) * s;
				iqY = (this._transform._rotation12 + this._transform._rotation21) * s;
				iqW = (this._transform._rotation10 - this._transform._rotation01) * s;
			}
		} else if(e11 > e22) {
			s = Math.sqrt(e11 - e22 - e00 + 1);
			iqY = 0.5 * s;
			s = 0.5 / s;
			iqX = (this._transform._rotation01 + this._transform._rotation10) * s;
			iqZ = (this._transform._rotation12 + this._transform._rotation21) * s;
			iqW = (this._transform._rotation02 - this._transform._rotation20) * s;
		} else {
			s = Math.sqrt(e22 - e00 - e11 + 1);
			iqZ = 0.5 * s;
			s = 0.5 / s;
			iqX = (this._transform._rotation02 + this._transform._rotation20) * s;
			iqY = (this._transform._rotation12 + this._transform._rotation21) * s;
			iqW = (this._transform._rotation10 - this._transform._rotation01) * s;
		}
		orientation.x = iqX;
		orientation.y = iqY;
		orientation.z = iqZ;
		orientation.w = iqW;
	}
	,setOrientation: function(quaternion) {
		var qX;
		var qY;
		var qZ;
		var qW;
		qX = quaternion.x;
		qY = quaternion.y;
		qZ = quaternion.z;
		qW = quaternion.w;
		var x = qX;
		var y = qY;
		var z = qZ;
		var w = qW;
		var x2 = 2 * x;
		var y2 = 2 * y;
		var z2 = 2 * z;
		var xx = x * x2;
		var yy = y * y2;
		var zz = z * z2;
		var xy = x * y2;
		var yz = y * z2;
		var xz = x * z2;
		var wx = w * x2;
		var wy = w * y2;
		var wz = w * z2;
		this._transform._rotation00 = 1 - yy - zz;
		this._transform._rotation01 = xy - wz;
		this._transform._rotation02 = xz + wy;
		this._transform._rotation10 = xy + wz;
		this._transform._rotation11 = 1 - xx - zz;
		this._transform._rotation12 = yz - wx;
		this._transform._rotation20 = xz - wy;
		this._transform._rotation21 = yz + wx;
		this._transform._rotation22 = 1 - xx - yy;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = this._transform._rotation00 * this._invLocalInertia00 + this._transform._rotation01 * this._invLocalInertia10 + this._transform._rotation02 * this._invLocalInertia20;
		__tmp__01 = this._transform._rotation00 * this._invLocalInertia01 + this._transform._rotation01 * this._invLocalInertia11 + this._transform._rotation02 * this._invLocalInertia21;
		__tmp__02 = this._transform._rotation00 * this._invLocalInertia02 + this._transform._rotation01 * this._invLocalInertia12 + this._transform._rotation02 * this._invLocalInertia22;
		__tmp__10 = this._transform._rotation10 * this._invLocalInertia00 + this._transform._rotation11 * this._invLocalInertia10 + this._transform._rotation12 * this._invLocalInertia20;
		__tmp__11 = this._transform._rotation10 * this._invLocalInertia01 + this._transform._rotation11 * this._invLocalInertia11 + this._transform._rotation12 * this._invLocalInertia21;
		__tmp__12 = this._transform._rotation10 * this._invLocalInertia02 + this._transform._rotation11 * this._invLocalInertia12 + this._transform._rotation12 * this._invLocalInertia22;
		__tmp__20 = this._transform._rotation20 * this._invLocalInertia00 + this._transform._rotation21 * this._invLocalInertia10 + this._transform._rotation22 * this._invLocalInertia20;
		__tmp__21 = this._transform._rotation20 * this._invLocalInertia01 + this._transform._rotation21 * this._invLocalInertia11 + this._transform._rotation22 * this._invLocalInertia21;
		__tmp__22 = this._transform._rotation20 * this._invLocalInertia02 + this._transform._rotation21 * this._invLocalInertia12 + this._transform._rotation22 * this._invLocalInertia22;
		this._invInertia00 = __tmp__00;
		this._invInertia01 = __tmp__01;
		this._invInertia02 = __tmp__02;
		this._invInertia10 = __tmp__10;
		this._invInertia11 = __tmp__11;
		this._invInertia12 = __tmp__12;
		this._invInertia20 = __tmp__20;
		this._invInertia21 = __tmp__21;
		this._invInertia22 = __tmp__22;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = this._invInertia00 * this._transform._rotation00 + this._invInertia01 * this._transform._rotation01 + this._invInertia02 * this._transform._rotation02;
		__tmp__01 = this._invInertia00 * this._transform._rotation10 + this._invInertia01 * this._transform._rotation11 + this._invInertia02 * this._transform._rotation12;
		__tmp__02 = this._invInertia00 * this._transform._rotation20 + this._invInertia01 * this._transform._rotation21 + this._invInertia02 * this._transform._rotation22;
		__tmp__10 = this._invInertia10 * this._transform._rotation00 + this._invInertia11 * this._transform._rotation01 + this._invInertia12 * this._transform._rotation02;
		__tmp__11 = this._invInertia10 * this._transform._rotation10 + this._invInertia11 * this._transform._rotation11 + this._invInertia12 * this._transform._rotation12;
		__tmp__12 = this._invInertia10 * this._transform._rotation20 + this._invInertia11 * this._transform._rotation21 + this._invInertia12 * this._transform._rotation22;
		__tmp__20 = this._invInertia20 * this._transform._rotation00 + this._invInertia21 * this._transform._rotation01 + this._invInertia22 * this._transform._rotation02;
		__tmp__21 = this._invInertia20 * this._transform._rotation10 + this._invInertia21 * this._transform._rotation11 + this._invInertia22 * this._transform._rotation12;
		__tmp__22 = this._invInertia20 * this._transform._rotation20 + this._invInertia21 * this._transform._rotation21 + this._invInertia22 * this._transform._rotation22;
		this._invInertia00 = __tmp__00;
		this._invInertia01 = __tmp__01;
		this._invInertia02 = __tmp__02;
		this._invInertia10 = __tmp__10;
		this._invInertia11 = __tmp__11;
		this._invInertia12 = __tmp__12;
		this._invInertia20 = __tmp__20;
		this._invInertia21 = __tmp__21;
		this._invInertia22 = __tmp__22;
		this._invInertia00 *= this._rotFactor.x;
		this._invInertia01 *= this._rotFactor.x;
		this._invInertia02 *= this._rotFactor.x;
		this._invInertia10 *= this._rotFactor.y;
		this._invInertia11 *= this._rotFactor.y;
		this._invInertia12 *= this._rotFactor.y;
		this._invInertia20 *= this._rotFactor.z;
		this._invInertia21 *= this._rotFactor.z;
		this._invInertia22 *= this._rotFactor.z;
		var dst = this._ptransform;
		var src = this._transform;
		dst._positionX = src._positionX;
		dst._positionY = src._positionY;
		dst._positionZ = src._positionZ;
		dst._rotation00 = src._rotation00;
		dst._rotation01 = src._rotation01;
		dst._rotation02 = src._rotation02;
		dst._rotation10 = src._rotation10;
		dst._rotation11 = src._rotation11;
		dst._rotation12 = src._rotation12;
		dst._rotation20 = src._rotation20;
		dst._rotation21 = src._rotation21;
		dst._rotation22 = src._rotation22;
		var s = this._shapeList;
		while(s != null) {
			var n = s._next;
			var tf1 = this._ptransform;
			var tf2 = this._transform;
			var dst = s._ptransform;
			var src1 = s._localTransform;
			var __tmp__00;
			var __tmp__01;
			var __tmp__02;
			var __tmp__10;
			var __tmp__11;
			var __tmp__12;
			var __tmp__20;
			var __tmp__21;
			var __tmp__22;
			__tmp__00 = tf1._rotation00 * src1._rotation00 + tf1._rotation01 * src1._rotation10 + tf1._rotation02 * src1._rotation20;
			__tmp__01 = tf1._rotation00 * src1._rotation01 + tf1._rotation01 * src1._rotation11 + tf1._rotation02 * src1._rotation21;
			__tmp__02 = tf1._rotation00 * src1._rotation02 + tf1._rotation01 * src1._rotation12 + tf1._rotation02 * src1._rotation22;
			__tmp__10 = tf1._rotation10 * src1._rotation00 + tf1._rotation11 * src1._rotation10 + tf1._rotation12 * src1._rotation20;
			__tmp__11 = tf1._rotation10 * src1._rotation01 + tf1._rotation11 * src1._rotation11 + tf1._rotation12 * src1._rotation21;
			__tmp__12 = tf1._rotation10 * src1._rotation02 + tf1._rotation11 * src1._rotation12 + tf1._rotation12 * src1._rotation22;
			__tmp__20 = tf1._rotation20 * src1._rotation00 + tf1._rotation21 * src1._rotation10 + tf1._rotation22 * src1._rotation20;
			__tmp__21 = tf1._rotation20 * src1._rotation01 + tf1._rotation21 * src1._rotation11 + tf1._rotation22 * src1._rotation21;
			__tmp__22 = tf1._rotation20 * src1._rotation02 + tf1._rotation21 * src1._rotation12 + tf1._rotation22 * src1._rotation22;
			dst._rotation00 = __tmp__00;
			dst._rotation01 = __tmp__01;
			dst._rotation02 = __tmp__02;
			dst._rotation10 = __tmp__10;
			dst._rotation11 = __tmp__11;
			dst._rotation12 = __tmp__12;
			dst._rotation20 = __tmp__20;
			dst._rotation21 = __tmp__21;
			dst._rotation22 = __tmp__22;
			var __tmp__X;
			var __tmp__Y;
			var __tmp__Z;
			__tmp__X = tf1._rotation00 * src1._positionX + tf1._rotation01 * src1._positionY + tf1._rotation02 * src1._positionZ;
			__tmp__Y = tf1._rotation10 * src1._positionX + tf1._rotation11 * src1._positionY + tf1._rotation12 * src1._positionZ;
			__tmp__Z = tf1._rotation20 * src1._positionX + tf1._rotation21 * src1._positionY + tf1._rotation22 * src1._positionZ;
			dst._positionX = __tmp__X;
			dst._positionY = __tmp__Y;
			dst._positionZ = __tmp__Z;
			dst._positionX += tf1._positionX;
			dst._positionY += tf1._positionY;
			dst._positionZ += tf1._positionZ;
			var dst1 = s._transform;
			var src11 = s._localTransform;
			var __tmp__001;
			var __tmp__011;
			var __tmp__021;
			var __tmp__101;
			var __tmp__111;
			var __tmp__121;
			var __tmp__201;
			var __tmp__211;
			var __tmp__221;
			__tmp__001 = tf2._rotation00 * src11._rotation00 + tf2._rotation01 * src11._rotation10 + tf2._rotation02 * src11._rotation20;
			__tmp__011 = tf2._rotation00 * src11._rotation01 + tf2._rotation01 * src11._rotation11 + tf2._rotation02 * src11._rotation21;
			__tmp__021 = tf2._rotation00 * src11._rotation02 + tf2._rotation01 * src11._rotation12 + tf2._rotation02 * src11._rotation22;
			__tmp__101 = tf2._rotation10 * src11._rotation00 + tf2._rotation11 * src11._rotation10 + tf2._rotation12 * src11._rotation20;
			__tmp__111 = tf2._rotation10 * src11._rotation01 + tf2._rotation11 * src11._rotation11 + tf2._rotation12 * src11._rotation21;
			__tmp__121 = tf2._rotation10 * src11._rotation02 + tf2._rotation11 * src11._rotation12 + tf2._rotation12 * src11._rotation22;
			__tmp__201 = tf2._rotation20 * src11._rotation00 + tf2._rotation21 * src11._rotation10 + tf2._rotation22 * src11._rotation20;
			__tmp__211 = tf2._rotation20 * src11._rotation01 + tf2._rotation21 * src11._rotation11 + tf2._rotation22 * src11._rotation21;
			__tmp__221 = tf2._rotation20 * src11._rotation02 + tf2._rotation21 * src11._rotation12 + tf2._rotation22 * src11._rotation22;
			dst1._rotation00 = __tmp__001;
			dst1._rotation01 = __tmp__011;
			dst1._rotation02 = __tmp__021;
			dst1._rotation10 = __tmp__101;
			dst1._rotation11 = __tmp__111;
			dst1._rotation12 = __tmp__121;
			dst1._rotation20 = __tmp__201;
			dst1._rotation21 = __tmp__211;
			dst1._rotation22 = __tmp__221;
			var __tmp__X1;
			var __tmp__Y1;
			var __tmp__Z1;
			__tmp__X1 = tf2._rotation00 * src11._positionX + tf2._rotation01 * src11._positionY + tf2._rotation02 * src11._positionZ;
			__tmp__Y1 = tf2._rotation10 * src11._positionX + tf2._rotation11 * src11._positionY + tf2._rotation12 * src11._positionZ;
			__tmp__Z1 = tf2._rotation20 * src11._positionX + tf2._rotation21 * src11._positionY + tf2._rotation22 * src11._positionZ;
			dst1._positionX = __tmp__X1;
			dst1._positionY = __tmp__Y1;
			dst1._positionZ = __tmp__Z1;
			dst1._positionX += tf2._positionX;
			dst1._positionY += tf2._positionY;
			dst1._positionZ += tf2._positionZ;
			var minX;
			var minY;
			var minZ;
			var maxX;
			var maxY;
			var maxZ;
			s._geom._computeAabb(s._aabb,s._ptransform);
			minX = s._aabb._minX;
			minY = s._aabb._minY;
			minZ = s._aabb._minZ;
			maxX = s._aabb._maxX;
			maxY = s._aabb._maxY;
			maxZ = s._aabb._maxZ;
			s._geom._computeAabb(s._aabb,s._transform);
			s._aabb._minX = minX < s._aabb._minX ? minX : s._aabb._minX;
			s._aabb._minY = minY < s._aabb._minY ? minY : s._aabb._minY;
			s._aabb._minZ = minZ < s._aabb._minZ ? minZ : s._aabb._minZ;
			s._aabb._maxX = maxX > s._aabb._maxX ? maxX : s._aabb._maxX;
			s._aabb._maxY = maxY > s._aabb._maxY ? maxY : s._aabb._maxY;
			s._aabb._maxZ = maxZ > s._aabb._maxZ ? maxZ : s._aabb._maxZ;
			if(s._proxy != null) {
				var dX;
				var dY;
				var dZ;
				dX = s._transform._positionX - s._ptransform._positionX;
				dY = s._transform._positionY - s._ptransform._positionY;
				dZ = s._transform._positionZ - s._ptransform._positionZ;
				var v = s.displacement;
				v.x = dX;
				v.y = dY;
				v.z = dZ;
				s._rigidBody._world._broadPhase.moveProxy(s._proxy,s._aabb,s.displacement);
			}
			s = n;
		}
		this._sleeping = false;
		this._sleepTime = 0;
	}
	,getTransform: function() {
		var _this = this._transform;
		var tf = new oimo_common_Transform();
		tf._positionX = _this._positionX;
		tf._positionY = _this._positionY;
		tf._positionZ = _this._positionZ;
		tf._rotation00 = _this._rotation00;
		tf._rotation01 = _this._rotation01;
		tf._rotation02 = _this._rotation02;
		tf._rotation10 = _this._rotation10;
		tf._rotation11 = _this._rotation11;
		tf._rotation12 = _this._rotation12;
		tf._rotation20 = _this._rotation20;
		tf._rotation21 = _this._rotation21;
		tf._rotation22 = _this._rotation22;
		return tf;
	}
	,getTransformTo: function(transform) {
		var transform1 = this._transform;
		transform._positionX = transform1._positionX;
		transform._positionY = transform1._positionY;
		transform._positionZ = transform1._positionZ;
		transform._rotation00 = transform1._rotation00;
		transform._rotation01 = transform1._rotation01;
		transform._rotation02 = transform1._rotation02;
		transform._rotation10 = transform1._rotation10;
		transform._rotation11 = transform1._rotation11;
		transform._rotation12 = transform1._rotation12;
		transform._rotation20 = transform1._rotation20;
		transform._rotation21 = transform1._rotation21;
		transform._rotation22 = transform1._rotation22;
	}
	,setTransform: function(transform) {
		this._transform._positionX = transform._positionX;
		this._transform._positionY = transform._positionY;
		this._transform._positionZ = transform._positionZ;
		this._transform._rotation00 = transform._rotation00;
		this._transform._rotation01 = transform._rotation01;
		this._transform._rotation02 = transform._rotation02;
		this._transform._rotation10 = transform._rotation10;
		this._transform._rotation11 = transform._rotation11;
		this._transform._rotation12 = transform._rotation12;
		this._transform._rotation20 = transform._rotation20;
		this._transform._rotation21 = transform._rotation21;
		this._transform._rotation22 = transform._rotation22;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = this._transform._rotation00 * this._invLocalInertia00 + this._transform._rotation01 * this._invLocalInertia10 + this._transform._rotation02 * this._invLocalInertia20;
		__tmp__01 = this._transform._rotation00 * this._invLocalInertia01 + this._transform._rotation01 * this._invLocalInertia11 + this._transform._rotation02 * this._invLocalInertia21;
		__tmp__02 = this._transform._rotation00 * this._invLocalInertia02 + this._transform._rotation01 * this._invLocalInertia12 + this._transform._rotation02 * this._invLocalInertia22;
		__tmp__10 = this._transform._rotation10 * this._invLocalInertia00 + this._transform._rotation11 * this._invLocalInertia10 + this._transform._rotation12 * this._invLocalInertia20;
		__tmp__11 = this._transform._rotation10 * this._invLocalInertia01 + this._transform._rotation11 * this._invLocalInertia11 + this._transform._rotation12 * this._invLocalInertia21;
		__tmp__12 = this._transform._rotation10 * this._invLocalInertia02 + this._transform._rotation11 * this._invLocalInertia12 + this._transform._rotation12 * this._invLocalInertia22;
		__tmp__20 = this._transform._rotation20 * this._invLocalInertia00 + this._transform._rotation21 * this._invLocalInertia10 + this._transform._rotation22 * this._invLocalInertia20;
		__tmp__21 = this._transform._rotation20 * this._invLocalInertia01 + this._transform._rotation21 * this._invLocalInertia11 + this._transform._rotation22 * this._invLocalInertia21;
		__tmp__22 = this._transform._rotation20 * this._invLocalInertia02 + this._transform._rotation21 * this._invLocalInertia12 + this._transform._rotation22 * this._invLocalInertia22;
		this._invInertia00 = __tmp__00;
		this._invInertia01 = __tmp__01;
		this._invInertia02 = __tmp__02;
		this._invInertia10 = __tmp__10;
		this._invInertia11 = __tmp__11;
		this._invInertia12 = __tmp__12;
		this._invInertia20 = __tmp__20;
		this._invInertia21 = __tmp__21;
		this._invInertia22 = __tmp__22;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = this._invInertia00 * this._transform._rotation00 + this._invInertia01 * this._transform._rotation01 + this._invInertia02 * this._transform._rotation02;
		__tmp__01 = this._invInertia00 * this._transform._rotation10 + this._invInertia01 * this._transform._rotation11 + this._invInertia02 * this._transform._rotation12;
		__tmp__02 = this._invInertia00 * this._transform._rotation20 + this._invInertia01 * this._transform._rotation21 + this._invInertia02 * this._transform._rotation22;
		__tmp__10 = this._invInertia10 * this._transform._rotation00 + this._invInertia11 * this._transform._rotation01 + this._invInertia12 * this._transform._rotation02;
		__tmp__11 = this._invInertia10 * this._transform._rotation10 + this._invInertia11 * this._transform._rotation11 + this._invInertia12 * this._transform._rotation12;
		__tmp__12 = this._invInertia10 * this._transform._rotation20 + this._invInertia11 * this._transform._rotation21 + this._invInertia12 * this._transform._rotation22;
		__tmp__20 = this._invInertia20 * this._transform._rotation00 + this._invInertia21 * this._transform._rotation01 + this._invInertia22 * this._transform._rotation02;
		__tmp__21 = this._invInertia20 * this._transform._rotation10 + this._invInertia21 * this._transform._rotation11 + this._invInertia22 * this._transform._rotation12;
		__tmp__22 = this._invInertia20 * this._transform._rotation20 + this._invInertia21 * this._transform._rotation21 + this._invInertia22 * this._transform._rotation22;
		this._invInertia00 = __tmp__00;
		this._invInertia01 = __tmp__01;
		this._invInertia02 = __tmp__02;
		this._invInertia10 = __tmp__10;
		this._invInertia11 = __tmp__11;
		this._invInertia12 = __tmp__12;
		this._invInertia20 = __tmp__20;
		this._invInertia21 = __tmp__21;
		this._invInertia22 = __tmp__22;
		this._invInertia00 *= this._rotFactor.x;
		this._invInertia01 *= this._rotFactor.x;
		this._invInertia02 *= this._rotFactor.x;
		this._invInertia10 *= this._rotFactor.y;
		this._invInertia11 *= this._rotFactor.y;
		this._invInertia12 *= this._rotFactor.y;
		this._invInertia20 *= this._rotFactor.z;
		this._invInertia21 *= this._rotFactor.z;
		this._invInertia22 *= this._rotFactor.z;
		var dst = this._ptransform;
		var src = this._transform;
		dst._positionX = src._positionX;
		dst._positionY = src._positionY;
		dst._positionZ = src._positionZ;
		dst._rotation00 = src._rotation00;
		dst._rotation01 = src._rotation01;
		dst._rotation02 = src._rotation02;
		dst._rotation10 = src._rotation10;
		dst._rotation11 = src._rotation11;
		dst._rotation12 = src._rotation12;
		dst._rotation20 = src._rotation20;
		dst._rotation21 = src._rotation21;
		dst._rotation22 = src._rotation22;
		var s = this._shapeList;
		while(s != null) {
			var n = s._next;
			var tf1 = this._ptransform;
			var tf2 = this._transform;
			var dst = s._ptransform;
			var src1 = s._localTransform;
			var __tmp__00;
			var __tmp__01;
			var __tmp__02;
			var __tmp__10;
			var __tmp__11;
			var __tmp__12;
			var __tmp__20;
			var __tmp__21;
			var __tmp__22;
			__tmp__00 = tf1._rotation00 * src1._rotation00 + tf1._rotation01 * src1._rotation10 + tf1._rotation02 * src1._rotation20;
			__tmp__01 = tf1._rotation00 * src1._rotation01 + tf1._rotation01 * src1._rotation11 + tf1._rotation02 * src1._rotation21;
			__tmp__02 = tf1._rotation00 * src1._rotation02 + tf1._rotation01 * src1._rotation12 + tf1._rotation02 * src1._rotation22;
			__tmp__10 = tf1._rotation10 * src1._rotation00 + tf1._rotation11 * src1._rotation10 + tf1._rotation12 * src1._rotation20;
			__tmp__11 = tf1._rotation10 * src1._rotation01 + tf1._rotation11 * src1._rotation11 + tf1._rotation12 * src1._rotation21;
			__tmp__12 = tf1._rotation10 * src1._rotation02 + tf1._rotation11 * src1._rotation12 + tf1._rotation12 * src1._rotation22;
			__tmp__20 = tf1._rotation20 * src1._rotation00 + tf1._rotation21 * src1._rotation10 + tf1._rotation22 * src1._rotation20;
			__tmp__21 = tf1._rotation20 * src1._rotation01 + tf1._rotation21 * src1._rotation11 + tf1._rotation22 * src1._rotation21;
			__tmp__22 = tf1._rotation20 * src1._rotation02 + tf1._rotation21 * src1._rotation12 + tf1._rotation22 * src1._rotation22;
			dst._rotation00 = __tmp__00;
			dst._rotation01 = __tmp__01;
			dst._rotation02 = __tmp__02;
			dst._rotation10 = __tmp__10;
			dst._rotation11 = __tmp__11;
			dst._rotation12 = __tmp__12;
			dst._rotation20 = __tmp__20;
			dst._rotation21 = __tmp__21;
			dst._rotation22 = __tmp__22;
			var __tmp__X;
			var __tmp__Y;
			var __tmp__Z;
			__tmp__X = tf1._rotation00 * src1._positionX + tf1._rotation01 * src1._positionY + tf1._rotation02 * src1._positionZ;
			__tmp__Y = tf1._rotation10 * src1._positionX + tf1._rotation11 * src1._positionY + tf1._rotation12 * src1._positionZ;
			__tmp__Z = tf1._rotation20 * src1._positionX + tf1._rotation21 * src1._positionY + tf1._rotation22 * src1._positionZ;
			dst._positionX = __tmp__X;
			dst._positionY = __tmp__Y;
			dst._positionZ = __tmp__Z;
			dst._positionX += tf1._positionX;
			dst._positionY += tf1._positionY;
			dst._positionZ += tf1._positionZ;
			var dst1 = s._transform;
			var src11 = s._localTransform;
			var __tmp__001;
			var __tmp__011;
			var __tmp__021;
			var __tmp__101;
			var __tmp__111;
			var __tmp__121;
			var __tmp__201;
			var __tmp__211;
			var __tmp__221;
			__tmp__001 = tf2._rotation00 * src11._rotation00 + tf2._rotation01 * src11._rotation10 + tf2._rotation02 * src11._rotation20;
			__tmp__011 = tf2._rotation00 * src11._rotation01 + tf2._rotation01 * src11._rotation11 + tf2._rotation02 * src11._rotation21;
			__tmp__021 = tf2._rotation00 * src11._rotation02 + tf2._rotation01 * src11._rotation12 + tf2._rotation02 * src11._rotation22;
			__tmp__101 = tf2._rotation10 * src11._rotation00 + tf2._rotation11 * src11._rotation10 + tf2._rotation12 * src11._rotation20;
			__tmp__111 = tf2._rotation10 * src11._rotation01 + tf2._rotation11 * src11._rotation11 + tf2._rotation12 * src11._rotation21;
			__tmp__121 = tf2._rotation10 * src11._rotation02 + tf2._rotation11 * src11._rotation12 + tf2._rotation12 * src11._rotation22;
			__tmp__201 = tf2._rotation20 * src11._rotation00 + tf2._rotation21 * src11._rotation10 + tf2._rotation22 * src11._rotation20;
			__tmp__211 = tf2._rotation20 * src11._rotation01 + tf2._rotation21 * src11._rotation11 + tf2._rotation22 * src11._rotation21;
			__tmp__221 = tf2._rotation20 * src11._rotation02 + tf2._rotation21 * src11._rotation12 + tf2._rotation22 * src11._rotation22;
			dst1._rotation00 = __tmp__001;
			dst1._rotation01 = __tmp__011;
			dst1._rotation02 = __tmp__021;
			dst1._rotation10 = __tmp__101;
			dst1._rotation11 = __tmp__111;
			dst1._rotation12 = __tmp__121;
			dst1._rotation20 = __tmp__201;
			dst1._rotation21 = __tmp__211;
			dst1._rotation22 = __tmp__221;
			var __tmp__X1;
			var __tmp__Y1;
			var __tmp__Z1;
			__tmp__X1 = tf2._rotation00 * src11._positionX + tf2._rotation01 * src11._positionY + tf2._rotation02 * src11._positionZ;
			__tmp__Y1 = tf2._rotation10 * src11._positionX + tf2._rotation11 * src11._positionY + tf2._rotation12 * src11._positionZ;
			__tmp__Z1 = tf2._rotation20 * src11._positionX + tf2._rotation21 * src11._positionY + tf2._rotation22 * src11._positionZ;
			dst1._positionX = __tmp__X1;
			dst1._positionY = __tmp__Y1;
			dst1._positionZ = __tmp__Z1;
			dst1._positionX += tf2._positionX;
			dst1._positionY += tf2._positionY;
			dst1._positionZ += tf2._positionZ;
			var minX;
			var minY;
			var minZ;
			var maxX;
			var maxY;
			var maxZ;
			s._geom._computeAabb(s._aabb,s._ptransform);
			minX = s._aabb._minX;
			minY = s._aabb._minY;
			minZ = s._aabb._minZ;
			maxX = s._aabb._maxX;
			maxY = s._aabb._maxY;
			maxZ = s._aabb._maxZ;
			s._geom._computeAabb(s._aabb,s._transform);
			s._aabb._minX = minX < s._aabb._minX ? minX : s._aabb._minX;
			s._aabb._minY = minY < s._aabb._minY ? minY : s._aabb._minY;
			s._aabb._minZ = minZ < s._aabb._minZ ? minZ : s._aabb._minZ;
			s._aabb._maxX = maxX > s._aabb._maxX ? maxX : s._aabb._maxX;
			s._aabb._maxY = maxY > s._aabb._maxY ? maxY : s._aabb._maxY;
			s._aabb._maxZ = maxZ > s._aabb._maxZ ? maxZ : s._aabb._maxZ;
			if(s._proxy != null) {
				var dX;
				var dY;
				var dZ;
				dX = s._transform._positionX - s._ptransform._positionX;
				dY = s._transform._positionY - s._ptransform._positionY;
				dZ = s._transform._positionZ - s._ptransform._positionZ;
				var v = s.displacement;
				v.x = dX;
				v.y = dY;
				v.z = dZ;
				s._rigidBody._world._broadPhase.moveProxy(s._proxy,s._aabb,s.displacement);
			}
			s = n;
		}
		this._sleeping = false;
		this._sleepTime = 0;
	}
	,getMass: function() {
		return this._mass;
	}
	,getLocalInertia: function() {
		var m = new oimo_common_Mat3();
		m.e00 = this._localInertia00;
		m.e01 = this._localInertia01;
		m.e02 = this._localInertia02;
		m.e10 = this._localInertia10;
		m.e11 = this._localInertia11;
		m.e12 = this._localInertia12;
		m.e20 = this._localInertia20;
		m.e21 = this._localInertia21;
		m.e22 = this._localInertia22;
		return m;
	}
	,getLocalInertiaTo: function(inertia) {
		inertia.e00 = this._localInertia00;
		inertia.e01 = this._localInertia01;
		inertia.e02 = this._localInertia02;
		inertia.e10 = this._localInertia10;
		inertia.e11 = this._localInertia11;
		inertia.e12 = this._localInertia12;
		inertia.e20 = this._localInertia20;
		inertia.e21 = this._localInertia21;
		inertia.e22 = this._localInertia22;
	}
	,getMassData: function() {
		var md = new oimo_dynamics_rigidbody_MassData();
		md.mass = this._mass;
		var m = md.localInertia;
		m.e00 = this._localInertia00;
		m.e01 = this._localInertia01;
		m.e02 = this._localInertia02;
		m.e10 = this._localInertia10;
		m.e11 = this._localInertia11;
		m.e12 = this._localInertia12;
		m.e20 = this._localInertia20;
		m.e21 = this._localInertia21;
		m.e22 = this._localInertia22;
		return md;
	}
	,getMassDataTo: function(massData) {
		massData.mass = this._mass;
		var m = massData.localInertia;
		m.e00 = this._localInertia00;
		m.e01 = this._localInertia01;
		m.e02 = this._localInertia02;
		m.e10 = this._localInertia10;
		m.e11 = this._localInertia11;
		m.e12 = this._localInertia12;
		m.e20 = this._localInertia20;
		m.e21 = this._localInertia21;
		m.e22 = this._localInertia22;
	}
	,setMassData: function(massData) {
		this._mass = massData.mass;
		var m = massData.localInertia;
		this._localInertia00 = m.e00;
		this._localInertia01 = m.e01;
		this._localInertia02 = m.e02;
		this._localInertia10 = m.e10;
		this._localInertia11 = m.e11;
		this._localInertia12 = m.e12;
		this._localInertia20 = m.e20;
		this._localInertia21 = m.e21;
		this._localInertia22 = m.e22;
		if(this._mass > 0 && this._localInertia00 * (this._localInertia11 * this._localInertia22 - this._localInertia12 * this._localInertia21) - this._localInertia01 * (this._localInertia10 * this._localInertia22 - this._localInertia12 * this._localInertia20) + this._localInertia02 * (this._localInertia10 * this._localInertia21 - this._localInertia11 * this._localInertia20) > 0 && this._type == 0) {
			this._invMass = 1 / this._mass;
			var d00 = this._localInertia11 * this._localInertia22 - this._localInertia12 * this._localInertia21;
			var d01 = this._localInertia10 * this._localInertia22 - this._localInertia12 * this._localInertia20;
			var d02 = this._localInertia10 * this._localInertia21 - this._localInertia11 * this._localInertia20;
			var d = this._localInertia00 * d00 - this._localInertia01 * d01 + this._localInertia02 * d02;
			if(d < -1e-32 || d > 1e-32) {
				d = 1 / d;
			}
			this._invLocalInertia00 = d00 * d;
			this._invLocalInertia01 = -(this._localInertia01 * this._localInertia22 - this._localInertia02 * this._localInertia21) * d;
			this._invLocalInertia02 = (this._localInertia01 * this._localInertia12 - this._localInertia02 * this._localInertia11) * d;
			this._invLocalInertia10 = -d01 * d;
			this._invLocalInertia11 = (this._localInertia00 * this._localInertia22 - this._localInertia02 * this._localInertia20) * d;
			this._invLocalInertia12 = -(this._localInertia00 * this._localInertia12 - this._localInertia02 * this._localInertia10) * d;
			this._invLocalInertia20 = d02 * d;
			this._invLocalInertia21 = -(this._localInertia00 * this._localInertia21 - this._localInertia01 * this._localInertia20) * d;
			this._invLocalInertia22 = (this._localInertia00 * this._localInertia11 - this._localInertia01 * this._localInertia10) * d;
			this._invLocalInertiaWithoutRotFactor00 = this._invLocalInertia00;
			this._invLocalInertiaWithoutRotFactor01 = this._invLocalInertia01;
			this._invLocalInertiaWithoutRotFactor02 = this._invLocalInertia02;
			this._invLocalInertiaWithoutRotFactor10 = this._invLocalInertia10;
			this._invLocalInertiaWithoutRotFactor11 = this._invLocalInertia11;
			this._invLocalInertiaWithoutRotFactor12 = this._invLocalInertia12;
			this._invLocalInertiaWithoutRotFactor20 = this._invLocalInertia20;
			this._invLocalInertiaWithoutRotFactor21 = this._invLocalInertia21;
			this._invLocalInertiaWithoutRotFactor22 = this._invLocalInertia22;
			this._invLocalInertia00 = this._invLocalInertiaWithoutRotFactor00 * this._rotFactor.x;
			this._invLocalInertia01 = this._invLocalInertiaWithoutRotFactor01 * this._rotFactor.x;
			this._invLocalInertia02 = this._invLocalInertiaWithoutRotFactor02 * this._rotFactor.x;
			this._invLocalInertia10 = this._invLocalInertiaWithoutRotFactor10 * this._rotFactor.y;
			this._invLocalInertia11 = this._invLocalInertiaWithoutRotFactor11 * this._rotFactor.y;
			this._invLocalInertia12 = this._invLocalInertiaWithoutRotFactor12 * this._rotFactor.y;
			this._invLocalInertia20 = this._invLocalInertiaWithoutRotFactor20 * this._rotFactor.z;
			this._invLocalInertia21 = this._invLocalInertiaWithoutRotFactor21 * this._rotFactor.z;
			this._invLocalInertia22 = this._invLocalInertiaWithoutRotFactor22 * this._rotFactor.z;
		} else {
			this._invMass = 0;
			this._invLocalInertia00 = 0;
			this._invLocalInertia01 = 0;
			this._invLocalInertia02 = 0;
			this._invLocalInertia10 = 0;
			this._invLocalInertia11 = 0;
			this._invLocalInertia12 = 0;
			this._invLocalInertia20 = 0;
			this._invLocalInertia21 = 0;
			this._invLocalInertia22 = 0;
			this._invLocalInertiaWithoutRotFactor00 = 0;
			this._invLocalInertiaWithoutRotFactor01 = 0;
			this._invLocalInertiaWithoutRotFactor02 = 0;
			this._invLocalInertiaWithoutRotFactor10 = 0;
			this._invLocalInertiaWithoutRotFactor11 = 0;
			this._invLocalInertiaWithoutRotFactor12 = 0;
			this._invLocalInertiaWithoutRotFactor20 = 0;
			this._invLocalInertiaWithoutRotFactor21 = 0;
			this._invLocalInertiaWithoutRotFactor22 = 0;
			if(this._type == 0) {
				this._type = 1;
			}
		}
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = this._transform._rotation00 * this._invLocalInertia00 + this._transform._rotation01 * this._invLocalInertia10 + this._transform._rotation02 * this._invLocalInertia20;
		__tmp__01 = this._transform._rotation00 * this._invLocalInertia01 + this._transform._rotation01 * this._invLocalInertia11 + this._transform._rotation02 * this._invLocalInertia21;
		__tmp__02 = this._transform._rotation00 * this._invLocalInertia02 + this._transform._rotation01 * this._invLocalInertia12 + this._transform._rotation02 * this._invLocalInertia22;
		__tmp__10 = this._transform._rotation10 * this._invLocalInertia00 + this._transform._rotation11 * this._invLocalInertia10 + this._transform._rotation12 * this._invLocalInertia20;
		__tmp__11 = this._transform._rotation10 * this._invLocalInertia01 + this._transform._rotation11 * this._invLocalInertia11 + this._transform._rotation12 * this._invLocalInertia21;
		__tmp__12 = this._transform._rotation10 * this._invLocalInertia02 + this._transform._rotation11 * this._invLocalInertia12 + this._transform._rotation12 * this._invLocalInertia22;
		__tmp__20 = this._transform._rotation20 * this._invLocalInertia00 + this._transform._rotation21 * this._invLocalInertia10 + this._transform._rotation22 * this._invLocalInertia20;
		__tmp__21 = this._transform._rotation20 * this._invLocalInertia01 + this._transform._rotation21 * this._invLocalInertia11 + this._transform._rotation22 * this._invLocalInertia21;
		__tmp__22 = this._transform._rotation20 * this._invLocalInertia02 + this._transform._rotation21 * this._invLocalInertia12 + this._transform._rotation22 * this._invLocalInertia22;
		this._invInertia00 = __tmp__00;
		this._invInertia01 = __tmp__01;
		this._invInertia02 = __tmp__02;
		this._invInertia10 = __tmp__10;
		this._invInertia11 = __tmp__11;
		this._invInertia12 = __tmp__12;
		this._invInertia20 = __tmp__20;
		this._invInertia21 = __tmp__21;
		this._invInertia22 = __tmp__22;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = this._invInertia00 * this._transform._rotation00 + this._invInertia01 * this._transform._rotation01 + this._invInertia02 * this._transform._rotation02;
		__tmp__01 = this._invInertia00 * this._transform._rotation10 + this._invInertia01 * this._transform._rotation11 + this._invInertia02 * this._transform._rotation12;
		__tmp__02 = this._invInertia00 * this._transform._rotation20 + this._invInertia01 * this._transform._rotation21 + this._invInertia02 * this._transform._rotation22;
		__tmp__10 = this._invInertia10 * this._transform._rotation00 + this._invInertia11 * this._transform._rotation01 + this._invInertia12 * this._transform._rotation02;
		__tmp__11 = this._invInertia10 * this._transform._rotation10 + this._invInertia11 * this._transform._rotation11 + this._invInertia12 * this._transform._rotation12;
		__tmp__12 = this._invInertia10 * this._transform._rotation20 + this._invInertia11 * this._transform._rotation21 + this._invInertia12 * this._transform._rotation22;
		__tmp__20 = this._invInertia20 * this._transform._rotation00 + this._invInertia21 * this._transform._rotation01 + this._invInertia22 * this._transform._rotation02;
		__tmp__21 = this._invInertia20 * this._transform._rotation10 + this._invInertia21 * this._transform._rotation11 + this._invInertia22 * this._transform._rotation12;
		__tmp__22 = this._invInertia20 * this._transform._rotation20 + this._invInertia21 * this._transform._rotation21 + this._invInertia22 * this._transform._rotation22;
		this._invInertia00 = __tmp__00;
		this._invInertia01 = __tmp__01;
		this._invInertia02 = __tmp__02;
		this._invInertia10 = __tmp__10;
		this._invInertia11 = __tmp__11;
		this._invInertia12 = __tmp__12;
		this._invInertia20 = __tmp__20;
		this._invInertia21 = __tmp__21;
		this._invInertia22 = __tmp__22;
		this._invInertia00 *= this._rotFactor.x;
		this._invInertia01 *= this._rotFactor.x;
		this._invInertia02 *= this._rotFactor.x;
		this._invInertia10 *= this._rotFactor.y;
		this._invInertia11 *= this._rotFactor.y;
		this._invInertia12 *= this._rotFactor.y;
		this._invInertia20 *= this._rotFactor.z;
		this._invInertia21 *= this._rotFactor.z;
		this._invInertia22 *= this._rotFactor.z;
		this._sleeping = false;
		this._sleepTime = 0;
	}
	,getRotationFactor: function() {
		var _this = this._rotFactor;
		return new oimo_common_Vec3(_this.x,_this.y,_this.z);
	}
	,setRotationFactor: function(rotationFactor) {
		var _this = this._rotFactor;
		_this.x = rotationFactor.x;
		_this.y = rotationFactor.y;
		_this.z = rotationFactor.z;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = this._transform._rotation00 * this._invLocalInertia00 + this._transform._rotation01 * this._invLocalInertia10 + this._transform._rotation02 * this._invLocalInertia20;
		__tmp__01 = this._transform._rotation00 * this._invLocalInertia01 + this._transform._rotation01 * this._invLocalInertia11 + this._transform._rotation02 * this._invLocalInertia21;
		__tmp__02 = this._transform._rotation00 * this._invLocalInertia02 + this._transform._rotation01 * this._invLocalInertia12 + this._transform._rotation02 * this._invLocalInertia22;
		__tmp__10 = this._transform._rotation10 * this._invLocalInertia00 + this._transform._rotation11 * this._invLocalInertia10 + this._transform._rotation12 * this._invLocalInertia20;
		__tmp__11 = this._transform._rotation10 * this._invLocalInertia01 + this._transform._rotation11 * this._invLocalInertia11 + this._transform._rotation12 * this._invLocalInertia21;
		__tmp__12 = this._transform._rotation10 * this._invLocalInertia02 + this._transform._rotation11 * this._invLocalInertia12 + this._transform._rotation12 * this._invLocalInertia22;
		__tmp__20 = this._transform._rotation20 * this._invLocalInertia00 + this._transform._rotation21 * this._invLocalInertia10 + this._transform._rotation22 * this._invLocalInertia20;
		__tmp__21 = this._transform._rotation20 * this._invLocalInertia01 + this._transform._rotation21 * this._invLocalInertia11 + this._transform._rotation22 * this._invLocalInertia21;
		__tmp__22 = this._transform._rotation20 * this._invLocalInertia02 + this._transform._rotation21 * this._invLocalInertia12 + this._transform._rotation22 * this._invLocalInertia22;
		this._invInertia00 = __tmp__00;
		this._invInertia01 = __tmp__01;
		this._invInertia02 = __tmp__02;
		this._invInertia10 = __tmp__10;
		this._invInertia11 = __tmp__11;
		this._invInertia12 = __tmp__12;
		this._invInertia20 = __tmp__20;
		this._invInertia21 = __tmp__21;
		this._invInertia22 = __tmp__22;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = this._invInertia00 * this._transform._rotation00 + this._invInertia01 * this._transform._rotation01 + this._invInertia02 * this._transform._rotation02;
		__tmp__01 = this._invInertia00 * this._transform._rotation10 + this._invInertia01 * this._transform._rotation11 + this._invInertia02 * this._transform._rotation12;
		__tmp__02 = this._invInertia00 * this._transform._rotation20 + this._invInertia01 * this._transform._rotation21 + this._invInertia02 * this._transform._rotation22;
		__tmp__10 = this._invInertia10 * this._transform._rotation00 + this._invInertia11 * this._transform._rotation01 + this._invInertia12 * this._transform._rotation02;
		__tmp__11 = this._invInertia10 * this._transform._rotation10 + this._invInertia11 * this._transform._rotation11 + this._invInertia12 * this._transform._rotation12;
		__tmp__12 = this._invInertia10 * this._transform._rotation20 + this._invInertia11 * this._transform._rotation21 + this._invInertia12 * this._transform._rotation22;
		__tmp__20 = this._invInertia20 * this._transform._rotation00 + this._invInertia21 * this._transform._rotation01 + this._invInertia22 * this._transform._rotation02;
		__tmp__21 = this._invInertia20 * this._transform._rotation10 + this._invInertia21 * this._transform._rotation11 + this._invInertia22 * this._transform._rotation12;
		__tmp__22 = this._invInertia20 * this._transform._rotation20 + this._invInertia21 * this._transform._rotation21 + this._invInertia22 * this._transform._rotation22;
		this._invInertia00 = __tmp__00;
		this._invInertia01 = __tmp__01;
		this._invInertia02 = __tmp__02;
		this._invInertia10 = __tmp__10;
		this._invInertia11 = __tmp__11;
		this._invInertia12 = __tmp__12;
		this._invInertia20 = __tmp__20;
		this._invInertia21 = __tmp__21;
		this._invInertia22 = __tmp__22;
		this._invInertia00 *= this._rotFactor.x;
		this._invInertia01 *= this._rotFactor.x;
		this._invInertia02 *= this._rotFactor.x;
		this._invInertia10 *= this._rotFactor.y;
		this._invInertia11 *= this._rotFactor.y;
		this._invInertia12 *= this._rotFactor.y;
		this._invInertia20 *= this._rotFactor.z;
		this._invInertia21 *= this._rotFactor.z;
		this._invInertia22 *= this._rotFactor.z;
		this._sleeping = false;
		this._sleepTime = 0;
	}
	,getLinearVelocity: function() {
		var v = new oimo_common_Vec3();
		v.x = this._velX;
		v.y = this._velY;
		v.z = this._velZ;
		return v;
	}
	,getLinearVelocityTo: function(linearVelocity) {
		linearVelocity.x = this._velX;
		linearVelocity.y = this._velY;
		linearVelocity.z = this._velZ;
	}
	,setLinearVelocity: function(linearVelocity) {
		if(this._type == 1) {
			this._velX = 0;
			this._velY = 0;
			this._velZ = 0;
		} else {
			this._velX = linearVelocity.x;
			this._velY = linearVelocity.y;
			this._velZ = linearVelocity.z;
		}
		this._sleeping = false;
		this._sleepTime = 0;
	}
	,getAngularVelocity: function() {
		var v = new oimo_common_Vec3();
		v.x = this._angVelX;
		v.y = this._angVelY;
		v.z = this._angVelZ;
		return v;
	}
	,getAngularVelocityTo: function(angularVelocity) {
		angularVelocity.x = this._velX;
		angularVelocity.y = this._velY;
		angularVelocity.z = this._velZ;
	}
	,setAngularVelocity: function(angularVelocity) {
		if(this._type == 1) {
			this._angVelX = 0;
			this._angVelY = 0;
			this._angVelZ = 0;
		} else {
			this._angVelX = angularVelocity.x;
			this._angVelY = angularVelocity.y;
			this._angVelZ = angularVelocity.z;
		}
		this._sleeping = false;
		this._sleepTime = 0;
	}
	,addLinearVelocity: function(linearVelocityChange) {
		if(this._type != 1) {
			var dX;
			var dY;
			var dZ;
			dX = linearVelocityChange.x;
			dY = linearVelocityChange.y;
			dZ = linearVelocityChange.z;
			this._velX += dX;
			this._velY += dY;
			this._velZ += dZ;
		}
		this._sleeping = false;
		this._sleepTime = 0;
	}
	,addAngularVelocity: function(angularVelocityChange) {
		if(this._type != 1) {
			var dX;
			var dY;
			var dZ;
			dX = angularVelocityChange.x;
			dY = angularVelocityChange.y;
			dZ = angularVelocityChange.z;
			this._angVelX += dX;
			this._angVelY += dY;
			this._angVelZ += dZ;
		}
		this._sleeping = false;
		this._sleepTime = 0;
	}
	,applyImpulse: function(impulse,positionInWorld) {
		var impX;
		var impY;
		var impZ;
		impX = impulse.x;
		impY = impulse.y;
		impZ = impulse.z;
		this._velX += impX * this._invMass;
		this._velY += impY * this._invMass;
		this._velZ += impZ * this._invMass;
		var aimpX;
		var aimpY;
		var aimpZ;
		var posX;
		var posY;
		var posZ;
		posX = positionInWorld.x;
		posY = positionInWorld.y;
		posZ = positionInWorld.z;
		posX -= this._transform._positionX;
		posY -= this._transform._positionY;
		posZ -= this._transform._positionZ;
		aimpX = posY * impZ - posZ * impY;
		aimpY = posZ * impX - posX * impZ;
		aimpZ = posX * impY - posY * impX;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = this._invInertia00 * aimpX + this._invInertia01 * aimpY + this._invInertia02 * aimpZ;
		__tmp__Y = this._invInertia10 * aimpX + this._invInertia11 * aimpY + this._invInertia12 * aimpZ;
		__tmp__Z = this._invInertia20 * aimpX + this._invInertia21 * aimpY + this._invInertia22 * aimpZ;
		aimpX = __tmp__X;
		aimpY = __tmp__Y;
		aimpZ = __tmp__Z;
		this._angVelX += aimpX;
		this._angVelY += aimpY;
		this._angVelZ += aimpZ;
		this._sleeping = false;
		this._sleepTime = 0;
	}
	,applyLinearImpulse: function(impulse) {
		var impX;
		var impY;
		var impZ;
		impX = impulse.x;
		impY = impulse.y;
		impZ = impulse.z;
		this._velX += impX * this._invMass;
		this._velY += impY * this._invMass;
		this._velZ += impZ * this._invMass;
		this._sleeping = false;
		this._sleepTime = 0;
	}
	,applyAngularImpulse: function(impulse) {
		var impX;
		var impY;
		var impZ;
		impX = impulse.x;
		impY = impulse.y;
		impZ = impulse.z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = this._invInertia00 * impX + this._invInertia01 * impY + this._invInertia02 * impZ;
		__tmp__Y = this._invInertia10 * impX + this._invInertia11 * impY + this._invInertia12 * impZ;
		__tmp__Z = this._invInertia20 * impX + this._invInertia21 * impY + this._invInertia22 * impZ;
		impX = __tmp__X;
		impY = __tmp__Y;
		impZ = __tmp__Z;
		this._angVelX += impX;
		this._angVelY += impY;
		this._angVelZ += impZ;
		this._sleeping = false;
		this._sleepTime = 0;
	}
	,applyForce: function(force,positionInWorld) {
		var iforceX;
		var iforceY;
		var iforceZ;
		iforceX = force.x;
		iforceY = force.y;
		iforceZ = force.z;
		this._forceX += iforceX;
		this._forceY += iforceY;
		this._forceZ += iforceZ;
		var itorqueX;
		var itorqueY;
		var itorqueZ;
		var posX;
		var posY;
		var posZ;
		posX = positionInWorld.x;
		posY = positionInWorld.y;
		posZ = positionInWorld.z;
		posX -= this._transform._positionX;
		posY -= this._transform._positionY;
		posZ -= this._transform._positionZ;
		itorqueX = posY * iforceZ - posZ * iforceY;
		itorqueY = posZ * iforceX - posX * iforceZ;
		itorqueZ = posX * iforceY - posY * iforceX;
		this._torqueX += itorqueX;
		this._torqueY += itorqueY;
		this._torqueZ += itorqueZ;
		this._sleeping = false;
		this._sleepTime = 0;
	}
	,applyForceToCenter: function(force) {
		var iforceX;
		var iforceY;
		var iforceZ;
		iforceX = force.x;
		iforceY = force.y;
		iforceZ = force.z;
		this._forceX += iforceX;
		this._forceY += iforceY;
		this._forceZ += iforceZ;
		this._sleeping = false;
		this._sleepTime = 0;
	}
	,applyTorque: function(torque) {
		var itorqueX;
		var itorqueY;
		var itorqueZ;
		itorqueX = torque.x;
		itorqueY = torque.y;
		itorqueZ = torque.z;
		this._torqueX += itorqueX;
		this._torqueY += itorqueY;
		this._torqueZ += itorqueZ;
		this._sleeping = false;
		this._sleepTime = 0;
	}
	,getLinearContactImpulse: function() {
		var res = new oimo_common_Vec3();
		res.x = this._linearContactImpulseX;
		res.y = this._linearContactImpulseY;
		res.z = this._linearContactImpulseZ;
		return res;
	}
	,getLinearContactImpulseTo: function(linearContactImpulse) {
		linearContactImpulse.x = this._linearContactImpulseX;
		linearContactImpulse.y = this._linearContactImpulseY;
		linearContactImpulse.z = this._linearContactImpulseZ;
	}
	,getAngularContactImpulse: function() {
		var res = new oimo_common_Vec3();
		res.x = this._angularContactImpulseX;
		res.y = this._angularContactImpulseY;
		res.z = this._angularContactImpulseZ;
		return res;
	}
	,getAngularContactImpulseTo: function(angularContactImpulse) {
		angularContactImpulse.x = this._angularContactImpulseX;
		angularContactImpulse.y = this._angularContactImpulseY;
		angularContactImpulse.z = this._angularContactImpulseZ;
	}
	,getGravityScale: function() {
		return this._gravityScale;
	}
	,setGravityScale: function(gravityScale) {
		this._gravityScale = gravityScale;
		this._sleeping = false;
		this._sleepTime = 0;
	}
	,getLocalPoint: function(worldPoint) {
		var vX;
		var vY;
		var vZ;
		vX = worldPoint.x;
		vY = worldPoint.y;
		vZ = worldPoint.z;
		vX -= this._transform._positionX;
		vY -= this._transform._positionY;
		vZ -= this._transform._positionZ;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = this._transform._rotation00 * vX + this._transform._rotation10 * vY + this._transform._rotation20 * vZ;
		__tmp__Y = this._transform._rotation01 * vX + this._transform._rotation11 * vY + this._transform._rotation21 * vZ;
		__tmp__Z = this._transform._rotation02 * vX + this._transform._rotation12 * vY + this._transform._rotation22 * vZ;
		vX = __tmp__X;
		vY = __tmp__Y;
		vZ = __tmp__Z;
		var res = new oimo_common_Vec3();
		res.x = vX;
		res.y = vY;
		res.z = vZ;
		return res;
	}
	,getLocalPointTo: function(worldPoint,localPoint) {
		var vX;
		var vY;
		var vZ;
		vX = worldPoint.x;
		vY = worldPoint.y;
		vZ = worldPoint.z;
		vX -= this._transform._positionX;
		vY -= this._transform._positionY;
		vZ -= this._transform._positionZ;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = this._transform._rotation00 * vX + this._transform._rotation10 * vY + this._transform._rotation20 * vZ;
		__tmp__Y = this._transform._rotation01 * vX + this._transform._rotation11 * vY + this._transform._rotation21 * vZ;
		__tmp__Z = this._transform._rotation02 * vX + this._transform._rotation12 * vY + this._transform._rotation22 * vZ;
		vX = __tmp__X;
		vY = __tmp__Y;
		vZ = __tmp__Z;
		localPoint.x = vX;
		localPoint.y = vY;
		localPoint.z = vZ;
	}
	,getLocalVector: function(worldVector) {
		var vX;
		var vY;
		var vZ;
		vX = worldVector.x;
		vY = worldVector.y;
		vZ = worldVector.z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = this._transform._rotation00 * vX + this._transform._rotation10 * vY + this._transform._rotation20 * vZ;
		__tmp__Y = this._transform._rotation01 * vX + this._transform._rotation11 * vY + this._transform._rotation21 * vZ;
		__tmp__Z = this._transform._rotation02 * vX + this._transform._rotation12 * vY + this._transform._rotation22 * vZ;
		vX = __tmp__X;
		vY = __tmp__Y;
		vZ = __tmp__Z;
		var res = new oimo_common_Vec3();
		res.x = vX;
		res.y = vY;
		res.z = vZ;
		return res;
	}
	,getLocalVectorTo: function(worldVector,localVector) {
		var vX;
		var vY;
		var vZ;
		vX = worldVector.x;
		vY = worldVector.y;
		vZ = worldVector.z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = this._transform._rotation00 * vX + this._transform._rotation10 * vY + this._transform._rotation20 * vZ;
		__tmp__Y = this._transform._rotation01 * vX + this._transform._rotation11 * vY + this._transform._rotation21 * vZ;
		__tmp__Z = this._transform._rotation02 * vX + this._transform._rotation12 * vY + this._transform._rotation22 * vZ;
		vX = __tmp__X;
		vY = __tmp__Y;
		vZ = __tmp__Z;
		localVector.x = vX;
		localVector.y = vY;
		localVector.z = vZ;
	}
	,getWorldPoint: function(localPoint) {
		var vX;
		var vY;
		var vZ;
		vX = localPoint.x;
		vY = localPoint.y;
		vZ = localPoint.z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = this._transform._rotation00 * vX + this._transform._rotation01 * vY + this._transform._rotation02 * vZ;
		__tmp__Y = this._transform._rotation10 * vX + this._transform._rotation11 * vY + this._transform._rotation12 * vZ;
		__tmp__Z = this._transform._rotation20 * vX + this._transform._rotation21 * vY + this._transform._rotation22 * vZ;
		vX = __tmp__X;
		vY = __tmp__Y;
		vZ = __tmp__Z;
		vX += this._transform._positionX;
		vY += this._transform._positionY;
		vZ += this._transform._positionZ;
		var res = new oimo_common_Vec3();
		res.x = vX;
		res.y = vY;
		res.z = vZ;
		return res;
	}
	,getWorldPointTo: function(localPoint,worldPoint) {
		var vX;
		var vY;
		var vZ;
		vX = localPoint.x;
		vY = localPoint.y;
		vZ = localPoint.z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = this._transform._rotation00 * vX + this._transform._rotation01 * vY + this._transform._rotation02 * vZ;
		__tmp__Y = this._transform._rotation10 * vX + this._transform._rotation11 * vY + this._transform._rotation12 * vZ;
		__tmp__Z = this._transform._rotation20 * vX + this._transform._rotation21 * vY + this._transform._rotation22 * vZ;
		vX = __tmp__X;
		vY = __tmp__Y;
		vZ = __tmp__Z;
		vX += this._transform._positionX;
		vY += this._transform._positionY;
		vZ += this._transform._positionZ;
		worldPoint.x = vX;
		worldPoint.y = vY;
		worldPoint.z = vZ;
	}
	,getWorldVector: function(localVector) {
		var vX;
		var vY;
		var vZ;
		vX = localVector.x;
		vY = localVector.y;
		vZ = localVector.z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = this._transform._rotation00 * vX + this._transform._rotation01 * vY + this._transform._rotation02 * vZ;
		__tmp__Y = this._transform._rotation10 * vX + this._transform._rotation11 * vY + this._transform._rotation12 * vZ;
		__tmp__Z = this._transform._rotation20 * vX + this._transform._rotation21 * vY + this._transform._rotation22 * vZ;
		vX = __tmp__X;
		vY = __tmp__Y;
		vZ = __tmp__Z;
		var res = new oimo_common_Vec3();
		res.x = vX;
		res.y = vY;
		res.z = vZ;
		return res;
	}
	,getWorldVectorTo: function(localVector,worldVector) {
		var vX;
		var vY;
		var vZ;
		vX = localVector.x;
		vY = localVector.y;
		vZ = localVector.z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = this._transform._rotation00 * vX + this._transform._rotation01 * vY + this._transform._rotation02 * vZ;
		__tmp__Y = this._transform._rotation10 * vX + this._transform._rotation11 * vY + this._transform._rotation12 * vZ;
		__tmp__Z = this._transform._rotation20 * vX + this._transform._rotation21 * vY + this._transform._rotation22 * vZ;
		vX = __tmp__X;
		vY = __tmp__Y;
		vZ = __tmp__Z;
		worldVector.x = vX;
		worldVector.y = vY;
		worldVector.z = vZ;
	}
	,getNumShapes: function() {
		return this._numShapes;
	}
	,getShapeList: function() {
		return this._shapeList;
	}
	,getNumContactLinks: function() {
		return this._numContactLinks;
	}
	,getContactLinkList: function() {
		return this._contactLinkList;
	}
	,getNumJointLinks: function() {
		return this._numJointLinks;
	}
	,getJointLinkList: function() {
		return this._jointLinkList;
	}
	,addShape: function(shape) {
		if(this._shapeList == null) {
			this._shapeList = shape;
			this._shapeListLast = shape;
		} else {
			this._shapeListLast._next = shape;
			shape._prev = this._shapeListLast;
			this._shapeListLast = shape;
		}
		this._numShapes++;
		shape._rigidBody = this;
		if(this._world != null) {
			var _this = this._world;
			shape._proxy = _this._broadPhase.createProxy(shape,shape._aabb);
			shape._id = _this._shapeIdCount++;
			_this._numShapes++;
		}
		this.updateMass();
		var s = this._shapeList;
		while(s != null) {
			var n = s._next;
			var tf1 = this._ptransform;
			var tf2 = this._transform;
			var dst = s._ptransform;
			var src1 = s._localTransform;
			var __tmp__00;
			var __tmp__01;
			var __tmp__02;
			var __tmp__10;
			var __tmp__11;
			var __tmp__12;
			var __tmp__20;
			var __tmp__21;
			var __tmp__22;
			__tmp__00 = tf1._rotation00 * src1._rotation00 + tf1._rotation01 * src1._rotation10 + tf1._rotation02 * src1._rotation20;
			__tmp__01 = tf1._rotation00 * src1._rotation01 + tf1._rotation01 * src1._rotation11 + tf1._rotation02 * src1._rotation21;
			__tmp__02 = tf1._rotation00 * src1._rotation02 + tf1._rotation01 * src1._rotation12 + tf1._rotation02 * src1._rotation22;
			__tmp__10 = tf1._rotation10 * src1._rotation00 + tf1._rotation11 * src1._rotation10 + tf1._rotation12 * src1._rotation20;
			__tmp__11 = tf1._rotation10 * src1._rotation01 + tf1._rotation11 * src1._rotation11 + tf1._rotation12 * src1._rotation21;
			__tmp__12 = tf1._rotation10 * src1._rotation02 + tf1._rotation11 * src1._rotation12 + tf1._rotation12 * src1._rotation22;
			__tmp__20 = tf1._rotation20 * src1._rotation00 + tf1._rotation21 * src1._rotation10 + tf1._rotation22 * src1._rotation20;
			__tmp__21 = tf1._rotation20 * src1._rotation01 + tf1._rotation21 * src1._rotation11 + tf1._rotation22 * src1._rotation21;
			__tmp__22 = tf1._rotation20 * src1._rotation02 + tf1._rotation21 * src1._rotation12 + tf1._rotation22 * src1._rotation22;
			dst._rotation00 = __tmp__00;
			dst._rotation01 = __tmp__01;
			dst._rotation02 = __tmp__02;
			dst._rotation10 = __tmp__10;
			dst._rotation11 = __tmp__11;
			dst._rotation12 = __tmp__12;
			dst._rotation20 = __tmp__20;
			dst._rotation21 = __tmp__21;
			dst._rotation22 = __tmp__22;
			var __tmp__X;
			var __tmp__Y;
			var __tmp__Z;
			__tmp__X = tf1._rotation00 * src1._positionX + tf1._rotation01 * src1._positionY + tf1._rotation02 * src1._positionZ;
			__tmp__Y = tf1._rotation10 * src1._positionX + tf1._rotation11 * src1._positionY + tf1._rotation12 * src1._positionZ;
			__tmp__Z = tf1._rotation20 * src1._positionX + tf1._rotation21 * src1._positionY + tf1._rotation22 * src1._positionZ;
			dst._positionX = __tmp__X;
			dst._positionY = __tmp__Y;
			dst._positionZ = __tmp__Z;
			dst._positionX += tf1._positionX;
			dst._positionY += tf1._positionY;
			dst._positionZ += tf1._positionZ;
			var dst1 = s._transform;
			var src11 = s._localTransform;
			var __tmp__001;
			var __tmp__011;
			var __tmp__021;
			var __tmp__101;
			var __tmp__111;
			var __tmp__121;
			var __tmp__201;
			var __tmp__211;
			var __tmp__221;
			__tmp__001 = tf2._rotation00 * src11._rotation00 + tf2._rotation01 * src11._rotation10 + tf2._rotation02 * src11._rotation20;
			__tmp__011 = tf2._rotation00 * src11._rotation01 + tf2._rotation01 * src11._rotation11 + tf2._rotation02 * src11._rotation21;
			__tmp__021 = tf2._rotation00 * src11._rotation02 + tf2._rotation01 * src11._rotation12 + tf2._rotation02 * src11._rotation22;
			__tmp__101 = tf2._rotation10 * src11._rotation00 + tf2._rotation11 * src11._rotation10 + tf2._rotation12 * src11._rotation20;
			__tmp__111 = tf2._rotation10 * src11._rotation01 + tf2._rotation11 * src11._rotation11 + tf2._rotation12 * src11._rotation21;
			__tmp__121 = tf2._rotation10 * src11._rotation02 + tf2._rotation11 * src11._rotation12 + tf2._rotation12 * src11._rotation22;
			__tmp__201 = tf2._rotation20 * src11._rotation00 + tf2._rotation21 * src11._rotation10 + tf2._rotation22 * src11._rotation20;
			__tmp__211 = tf2._rotation20 * src11._rotation01 + tf2._rotation21 * src11._rotation11 + tf2._rotation22 * src11._rotation21;
			__tmp__221 = tf2._rotation20 * src11._rotation02 + tf2._rotation21 * src11._rotation12 + tf2._rotation22 * src11._rotation22;
			dst1._rotation00 = __tmp__001;
			dst1._rotation01 = __tmp__011;
			dst1._rotation02 = __tmp__021;
			dst1._rotation10 = __tmp__101;
			dst1._rotation11 = __tmp__111;
			dst1._rotation12 = __tmp__121;
			dst1._rotation20 = __tmp__201;
			dst1._rotation21 = __tmp__211;
			dst1._rotation22 = __tmp__221;
			var __tmp__X1;
			var __tmp__Y1;
			var __tmp__Z1;
			__tmp__X1 = tf2._rotation00 * src11._positionX + tf2._rotation01 * src11._positionY + tf2._rotation02 * src11._positionZ;
			__tmp__Y1 = tf2._rotation10 * src11._positionX + tf2._rotation11 * src11._positionY + tf2._rotation12 * src11._positionZ;
			__tmp__Z1 = tf2._rotation20 * src11._positionX + tf2._rotation21 * src11._positionY + tf2._rotation22 * src11._positionZ;
			dst1._positionX = __tmp__X1;
			dst1._positionY = __tmp__Y1;
			dst1._positionZ = __tmp__Z1;
			dst1._positionX += tf2._positionX;
			dst1._positionY += tf2._positionY;
			dst1._positionZ += tf2._positionZ;
			var minX;
			var minY;
			var minZ;
			var maxX;
			var maxY;
			var maxZ;
			s._geom._computeAabb(s._aabb,s._ptransform);
			minX = s._aabb._minX;
			minY = s._aabb._minY;
			minZ = s._aabb._minZ;
			maxX = s._aabb._maxX;
			maxY = s._aabb._maxY;
			maxZ = s._aabb._maxZ;
			s._geom._computeAabb(s._aabb,s._transform);
			s._aabb._minX = minX < s._aabb._minX ? minX : s._aabb._minX;
			s._aabb._minY = minY < s._aabb._minY ? minY : s._aabb._minY;
			s._aabb._minZ = minZ < s._aabb._minZ ? minZ : s._aabb._minZ;
			s._aabb._maxX = maxX > s._aabb._maxX ? maxX : s._aabb._maxX;
			s._aabb._maxY = maxY > s._aabb._maxY ? maxY : s._aabb._maxY;
			s._aabb._maxZ = maxZ > s._aabb._maxZ ? maxZ : s._aabb._maxZ;
			if(s._proxy != null) {
				var dX;
				var dY;
				var dZ;
				dX = s._transform._positionX - s._ptransform._positionX;
				dY = s._transform._positionY - s._ptransform._positionY;
				dZ = s._transform._positionZ - s._ptransform._positionZ;
				var v = s.displacement;
				v.x = dX;
				v.y = dY;
				v.z = dZ;
				s._rigidBody._world._broadPhase.moveProxy(s._proxy,s._aabb,s.displacement);
			}
			s = n;
		}
	}
	,removeShape: function(shape) {
		var prev = shape._prev;
		var next = shape._next;
		if(prev != null) {
			prev._next = next;
		}
		if(next != null) {
			next._prev = prev;
		}
		if(shape == this._shapeList) {
			this._shapeList = this._shapeList._next;
		}
		if(shape == this._shapeListLast) {
			this._shapeListLast = this._shapeListLast._prev;
		}
		shape._next = null;
		shape._prev = null;
		this._numShapes--;
		shape._rigidBody = null;
		if(this._world != null) {
			var _this = this._world;
			_this._broadPhase.destroyProxy(shape._proxy);
			shape._proxy = null;
			shape._id = -1;
			var cl = shape._rigidBody._contactLinkList;
			while(cl != null) {
				var n = cl._next;
				var c = cl._contact;
				if(c._s1 == shape || c._s2 == shape) {
					var _this1 = cl._other;
					_this1._sleeping = false;
					_this1._sleepTime = 0;
					var _this2 = _this._contactManager;
					var prev = c._prev;
					var next = c._next;
					if(prev != null) {
						prev._next = next;
					}
					if(next != null) {
						next._prev = prev;
					}
					if(c == _this2._contactList) {
						_this2._contactList = _this2._contactList._next;
					}
					if(c == _this2._contactListLast) {
						_this2._contactListLast = _this2._contactListLast._prev;
					}
					c._next = null;
					c._prev = null;
					if(c._touching) {
						var cc1 = c._s1._contactCallback;
						var cc2 = c._s2._contactCallback;
						if(cc1 == cc2) {
							cc2 = null;
						}
						if(cc1 != null) {
							cc1.endContact(c);
						}
						if(cc2 != null) {
							cc2.endContact(c);
						}
					}
					var prev1 = c._link1._prev;
					var next1 = c._link1._next;
					if(prev1 != null) {
						prev1._next = next1;
					}
					if(next1 != null) {
						next1._prev = prev1;
					}
					if(c._link1 == c._b1._contactLinkList) {
						c._b1._contactLinkList = c._b1._contactLinkList._next;
					}
					if(c._link1 == c._b1._contactLinkListLast) {
						c._b1._contactLinkListLast = c._b1._contactLinkListLast._prev;
					}
					c._link1._next = null;
					c._link1._prev = null;
					var prev2 = c._link2._prev;
					var next2 = c._link2._next;
					if(prev2 != null) {
						prev2._next = next2;
					}
					if(next2 != null) {
						next2._prev = prev2;
					}
					if(c._link2 == c._b2._contactLinkList) {
						c._b2._contactLinkList = c._b2._contactLinkList._next;
					}
					if(c._link2 == c._b2._contactLinkListLast) {
						c._b2._contactLinkListLast = c._b2._contactLinkListLast._prev;
					}
					c._link2._next = null;
					c._link2._prev = null;
					c._b1._numContactLinks--;
					c._b2._numContactLinks--;
					c._link1._other = null;
					c._link2._other = null;
					c._link1._contact = null;
					c._link2._contact = null;
					c._s1 = null;
					c._s2 = null;
					c._b1 = null;
					c._b2 = null;
					c._touching = false;
					c._cachedDetectorData._clear();
					c._manifold._clear();
					c._detector = null;
					var _this3 = c._contactConstraint;
					_this3._s1 = null;
					_this3._s2 = null;
					_this3._b1 = null;
					_this3._b2 = null;
					_this3._tf1 = null;
					_this3._tf2 = null;
					c._next = _this2._contactPool;
					_this2._contactPool = c;
					_this2._numContacts--;
				}
				cl = n;
			}
			_this._numShapes--;
		}
		this.updateMass();
		var s = this._shapeList;
		while(s != null) {
			var n = s._next;
			var tf1 = this._ptransform;
			var tf2 = this._transform;
			var dst = s._ptransform;
			var src1 = s._localTransform;
			var __tmp__00;
			var __tmp__01;
			var __tmp__02;
			var __tmp__10;
			var __tmp__11;
			var __tmp__12;
			var __tmp__20;
			var __tmp__21;
			var __tmp__22;
			__tmp__00 = tf1._rotation00 * src1._rotation00 + tf1._rotation01 * src1._rotation10 + tf1._rotation02 * src1._rotation20;
			__tmp__01 = tf1._rotation00 * src1._rotation01 + tf1._rotation01 * src1._rotation11 + tf1._rotation02 * src1._rotation21;
			__tmp__02 = tf1._rotation00 * src1._rotation02 + tf1._rotation01 * src1._rotation12 + tf1._rotation02 * src1._rotation22;
			__tmp__10 = tf1._rotation10 * src1._rotation00 + tf1._rotation11 * src1._rotation10 + tf1._rotation12 * src1._rotation20;
			__tmp__11 = tf1._rotation10 * src1._rotation01 + tf1._rotation11 * src1._rotation11 + tf1._rotation12 * src1._rotation21;
			__tmp__12 = tf1._rotation10 * src1._rotation02 + tf1._rotation11 * src1._rotation12 + tf1._rotation12 * src1._rotation22;
			__tmp__20 = tf1._rotation20 * src1._rotation00 + tf1._rotation21 * src1._rotation10 + tf1._rotation22 * src1._rotation20;
			__tmp__21 = tf1._rotation20 * src1._rotation01 + tf1._rotation21 * src1._rotation11 + tf1._rotation22 * src1._rotation21;
			__tmp__22 = tf1._rotation20 * src1._rotation02 + tf1._rotation21 * src1._rotation12 + tf1._rotation22 * src1._rotation22;
			dst._rotation00 = __tmp__00;
			dst._rotation01 = __tmp__01;
			dst._rotation02 = __tmp__02;
			dst._rotation10 = __tmp__10;
			dst._rotation11 = __tmp__11;
			dst._rotation12 = __tmp__12;
			dst._rotation20 = __tmp__20;
			dst._rotation21 = __tmp__21;
			dst._rotation22 = __tmp__22;
			var __tmp__X;
			var __tmp__Y;
			var __tmp__Z;
			__tmp__X = tf1._rotation00 * src1._positionX + tf1._rotation01 * src1._positionY + tf1._rotation02 * src1._positionZ;
			__tmp__Y = tf1._rotation10 * src1._positionX + tf1._rotation11 * src1._positionY + tf1._rotation12 * src1._positionZ;
			__tmp__Z = tf1._rotation20 * src1._positionX + tf1._rotation21 * src1._positionY + tf1._rotation22 * src1._positionZ;
			dst._positionX = __tmp__X;
			dst._positionY = __tmp__Y;
			dst._positionZ = __tmp__Z;
			dst._positionX += tf1._positionX;
			dst._positionY += tf1._positionY;
			dst._positionZ += tf1._positionZ;
			var dst1 = s._transform;
			var src11 = s._localTransform;
			var __tmp__001;
			var __tmp__011;
			var __tmp__021;
			var __tmp__101;
			var __tmp__111;
			var __tmp__121;
			var __tmp__201;
			var __tmp__211;
			var __tmp__221;
			__tmp__001 = tf2._rotation00 * src11._rotation00 + tf2._rotation01 * src11._rotation10 + tf2._rotation02 * src11._rotation20;
			__tmp__011 = tf2._rotation00 * src11._rotation01 + tf2._rotation01 * src11._rotation11 + tf2._rotation02 * src11._rotation21;
			__tmp__021 = tf2._rotation00 * src11._rotation02 + tf2._rotation01 * src11._rotation12 + tf2._rotation02 * src11._rotation22;
			__tmp__101 = tf2._rotation10 * src11._rotation00 + tf2._rotation11 * src11._rotation10 + tf2._rotation12 * src11._rotation20;
			__tmp__111 = tf2._rotation10 * src11._rotation01 + tf2._rotation11 * src11._rotation11 + tf2._rotation12 * src11._rotation21;
			__tmp__121 = tf2._rotation10 * src11._rotation02 + tf2._rotation11 * src11._rotation12 + tf2._rotation12 * src11._rotation22;
			__tmp__201 = tf2._rotation20 * src11._rotation00 + tf2._rotation21 * src11._rotation10 + tf2._rotation22 * src11._rotation20;
			__tmp__211 = tf2._rotation20 * src11._rotation01 + tf2._rotation21 * src11._rotation11 + tf2._rotation22 * src11._rotation21;
			__tmp__221 = tf2._rotation20 * src11._rotation02 + tf2._rotation21 * src11._rotation12 + tf2._rotation22 * src11._rotation22;
			dst1._rotation00 = __tmp__001;
			dst1._rotation01 = __tmp__011;
			dst1._rotation02 = __tmp__021;
			dst1._rotation10 = __tmp__101;
			dst1._rotation11 = __tmp__111;
			dst1._rotation12 = __tmp__121;
			dst1._rotation20 = __tmp__201;
			dst1._rotation21 = __tmp__211;
			dst1._rotation22 = __tmp__221;
			var __tmp__X1;
			var __tmp__Y1;
			var __tmp__Z1;
			__tmp__X1 = tf2._rotation00 * src11._positionX + tf2._rotation01 * src11._positionY + tf2._rotation02 * src11._positionZ;
			__tmp__Y1 = tf2._rotation10 * src11._positionX + tf2._rotation11 * src11._positionY + tf2._rotation12 * src11._positionZ;
			__tmp__Z1 = tf2._rotation20 * src11._positionX + tf2._rotation21 * src11._positionY + tf2._rotation22 * src11._positionZ;
			dst1._positionX = __tmp__X1;
			dst1._positionY = __tmp__Y1;
			dst1._positionZ = __tmp__Z1;
			dst1._positionX += tf2._positionX;
			dst1._positionY += tf2._positionY;
			dst1._positionZ += tf2._positionZ;
			var minX;
			var minY;
			var minZ;
			var maxX;
			var maxY;
			var maxZ;
			s._geom._computeAabb(s._aabb,s._ptransform);
			minX = s._aabb._minX;
			minY = s._aabb._minY;
			minZ = s._aabb._minZ;
			maxX = s._aabb._maxX;
			maxY = s._aabb._maxY;
			maxZ = s._aabb._maxZ;
			s._geom._computeAabb(s._aabb,s._transform);
			s._aabb._minX = minX < s._aabb._minX ? minX : s._aabb._minX;
			s._aabb._minY = minY < s._aabb._minY ? minY : s._aabb._minY;
			s._aabb._minZ = minZ < s._aabb._minZ ? minZ : s._aabb._minZ;
			s._aabb._maxX = maxX > s._aabb._maxX ? maxX : s._aabb._maxX;
			s._aabb._maxY = maxY > s._aabb._maxY ? maxY : s._aabb._maxY;
			s._aabb._maxZ = maxZ > s._aabb._maxZ ? maxZ : s._aabb._maxZ;
			if(s._proxy != null) {
				var dX;
				var dY;
				var dZ;
				dX = s._transform._positionX - s._ptransform._positionX;
				dY = s._transform._positionY - s._ptransform._positionY;
				dZ = s._transform._positionZ - s._ptransform._positionZ;
				var v = s.displacement;
				v.x = dX;
				v.y = dY;
				v.z = dZ;
				s._rigidBody._world._broadPhase.moveProxy(s._proxy,s._aabb,s.displacement);
			}
			s = n;
		}
	}
	,getType: function() {
		return this._type;
	}
	,setType: function(type) {
		this._type = type;
		this.updateMass();
	}
	,wakeUp: function() {
		this._sleeping = false;
		this._sleepTime = 0;
	}
	,sleep: function() {
		this._sleeping = true;
		this._sleepTime = 0;
	}
	,isSleeping: function() {
		return this._sleeping;
	}
	,getSleepTime: function() {
		return this._sleepTime;
	}
	,setAutoSleep: function(autoSleepEnabled) {
		this._autoSleep = autoSleepEnabled;
		this._sleeping = false;
		this._sleepTime = 0;
	}
	,getLinearDamping: function() {
		return this._linearDamping;
	}
	,setLinearDamping: function(damping) {
		this._linearDamping = damping;
	}
	,getAngularDamping: function() {
		return this._angularDamping;
	}
	,setAngularDamping: function(damping) {
		this._angularDamping = damping;
	}
	,getPrev: function() {
		return this._prev;
	}
	,getNext: function() {
		return this._next;
	}
	,__class__: oimo_dynamics_rigidbody_RigidBody
};
var oimo_dynamics_rigidbody_RigidBodyConfig = function() {
	this.position = new oimo_common_Vec3();
	this.rotation = new oimo_common_Mat3();
	this.linearVelocity = new oimo_common_Vec3();
	this.angularVelocity = new oimo_common_Vec3();
	this.type = 0;
	this.autoSleep = true;
	this.linearDamping = 0;
	this.angularDamping = 0;
};
oimo_dynamics_rigidbody_RigidBodyConfig.__name__ = true;
oimo_dynamics_rigidbody_RigidBodyConfig.prototype = {
	__class__: oimo_dynamics_rigidbody_RigidBodyConfig
};
var oimo_dynamics_rigidbody_RigidBodyType = function() { };
oimo_dynamics_rigidbody_RigidBodyType.__name__ = true;
var oimo_dynamics_rigidbody_Shape = function(config) {
	this._id = -1;
	this._localTransform = new oimo_common_Transform();
	this._ptransform = new oimo_common_Transform();
	this._transform = new oimo_common_Transform();
	var v = config.position;
	this._localTransform._positionX = v.x;
	this._localTransform._positionY = v.y;
	this._localTransform._positionZ = v.z;
	var m = config.rotation;
	this._localTransform._rotation00 = m.e00;
	this._localTransform._rotation01 = m.e01;
	this._localTransform._rotation02 = m.e02;
	this._localTransform._rotation10 = m.e10;
	this._localTransform._rotation11 = m.e11;
	this._localTransform._rotation12 = m.e12;
	this._localTransform._rotation20 = m.e20;
	this._localTransform._rotation21 = m.e21;
	this._localTransform._rotation22 = m.e22;
	var dst = this._ptransform;
	var src = this._localTransform;
	dst._positionX = src._positionX;
	dst._positionY = src._positionY;
	dst._positionZ = src._positionZ;
	dst._rotation00 = src._rotation00;
	dst._rotation01 = src._rotation01;
	dst._rotation02 = src._rotation02;
	dst._rotation10 = src._rotation10;
	dst._rotation11 = src._rotation11;
	dst._rotation12 = src._rotation12;
	dst._rotation20 = src._rotation20;
	dst._rotation21 = src._rotation21;
	dst._rotation22 = src._rotation22;
	var dst = this._transform;
	var src = this._localTransform;
	dst._positionX = src._positionX;
	dst._positionY = src._positionY;
	dst._positionZ = src._positionZ;
	dst._rotation00 = src._rotation00;
	dst._rotation01 = src._rotation01;
	dst._rotation02 = src._rotation02;
	dst._rotation10 = src._rotation10;
	dst._rotation11 = src._rotation11;
	dst._rotation12 = src._rotation12;
	dst._rotation20 = src._rotation20;
	dst._rotation21 = src._rotation21;
	dst._rotation22 = src._rotation22;
	this._restitution = config.restitution;
	this._friction = config.friction;
	this._density = config.density;
	this._geom = config.geometry;
	this._collisionGroup = config.collisionGroup;
	this._collisionMask = config.collisionMask;
	this._contactCallback = config.contactCallback;
	this._aabb = new oimo_collision_geometry_Aabb();
	this._proxy = null;
	this.displacement = new oimo_common_Vec3();
};
oimo_dynamics_rigidbody_Shape.__name__ = true;
oimo_dynamics_rigidbody_Shape.prototype = {
	getFriction: function() {
		return this._friction;
	}
	,setFriction: function(friction) {
		this._friction = friction;
	}
	,getRestitution: function() {
		return this._restitution;
	}
	,setRestitution: function(restitution) {
		this._restitution = restitution;
	}
	,getLocalTransform: function() {
		var _this = this._localTransform;
		var tf = new oimo_common_Transform();
		tf._positionX = _this._positionX;
		tf._positionY = _this._positionY;
		tf._positionZ = _this._positionZ;
		tf._rotation00 = _this._rotation00;
		tf._rotation01 = _this._rotation01;
		tf._rotation02 = _this._rotation02;
		tf._rotation10 = _this._rotation10;
		tf._rotation11 = _this._rotation11;
		tf._rotation12 = _this._rotation12;
		tf._rotation20 = _this._rotation20;
		tf._rotation21 = _this._rotation21;
		tf._rotation22 = _this._rotation22;
		return tf;
	}
	,getLocalTransformTo: function(transform) {
		var transform1 = this._localTransform;
		transform._positionX = transform1._positionX;
		transform._positionY = transform1._positionY;
		transform._positionZ = transform1._positionZ;
		transform._rotation00 = transform1._rotation00;
		transform._rotation01 = transform1._rotation01;
		transform._rotation02 = transform1._rotation02;
		transform._rotation10 = transform1._rotation10;
		transform._rotation11 = transform1._rotation11;
		transform._rotation12 = transform1._rotation12;
		transform._rotation20 = transform1._rotation20;
		transform._rotation21 = transform1._rotation21;
		transform._rotation22 = transform1._rotation22;
	}
	,getTransform: function() {
		var _this = this._transform;
		var tf = new oimo_common_Transform();
		tf._positionX = _this._positionX;
		tf._positionY = _this._positionY;
		tf._positionZ = _this._positionZ;
		tf._rotation00 = _this._rotation00;
		tf._rotation01 = _this._rotation01;
		tf._rotation02 = _this._rotation02;
		tf._rotation10 = _this._rotation10;
		tf._rotation11 = _this._rotation11;
		tf._rotation12 = _this._rotation12;
		tf._rotation20 = _this._rotation20;
		tf._rotation21 = _this._rotation21;
		tf._rotation22 = _this._rotation22;
		return tf;
	}
	,getTransformTo: function(transform) {
		var transform1 = this._transform;
		transform._positionX = transform1._positionX;
		transform._positionY = transform1._positionY;
		transform._positionZ = transform1._positionZ;
		transform._rotation00 = transform1._rotation00;
		transform._rotation01 = transform1._rotation01;
		transform._rotation02 = transform1._rotation02;
		transform._rotation10 = transform1._rotation10;
		transform._rotation11 = transform1._rotation11;
		transform._rotation12 = transform1._rotation12;
		transform._rotation20 = transform1._rotation20;
		transform._rotation21 = transform1._rotation21;
		transform._rotation22 = transform1._rotation22;
	}
	,setLocalTransform: function(transform) {
		var _this = this._localTransform;
		_this._positionX = transform._positionX;
		_this._positionY = transform._positionY;
		_this._positionZ = transform._positionZ;
		_this._rotation00 = transform._rotation00;
		_this._rotation01 = transform._rotation01;
		_this._rotation02 = transform._rotation02;
		_this._rotation10 = transform._rotation10;
		_this._rotation11 = transform._rotation11;
		_this._rotation12 = transform._rotation12;
		_this._rotation20 = transform._rotation20;
		_this._rotation21 = transform._rotation21;
		_this._rotation22 = transform._rotation22;
		if(this._rigidBody != null) {
			var _this = this._rigidBody;
			_this.updateMass();
			var s = _this._shapeList;
			while(s != null) {
				var n = s._next;
				var tf1 = _this._ptransform;
				var tf2 = _this._transform;
				var dst = s._ptransform;
				var src1 = s._localTransform;
				var __tmp__00;
				var __tmp__01;
				var __tmp__02;
				var __tmp__10;
				var __tmp__11;
				var __tmp__12;
				var __tmp__20;
				var __tmp__21;
				var __tmp__22;
				__tmp__00 = tf1._rotation00 * src1._rotation00 + tf1._rotation01 * src1._rotation10 + tf1._rotation02 * src1._rotation20;
				__tmp__01 = tf1._rotation00 * src1._rotation01 + tf1._rotation01 * src1._rotation11 + tf1._rotation02 * src1._rotation21;
				__tmp__02 = tf1._rotation00 * src1._rotation02 + tf1._rotation01 * src1._rotation12 + tf1._rotation02 * src1._rotation22;
				__tmp__10 = tf1._rotation10 * src1._rotation00 + tf1._rotation11 * src1._rotation10 + tf1._rotation12 * src1._rotation20;
				__tmp__11 = tf1._rotation10 * src1._rotation01 + tf1._rotation11 * src1._rotation11 + tf1._rotation12 * src1._rotation21;
				__tmp__12 = tf1._rotation10 * src1._rotation02 + tf1._rotation11 * src1._rotation12 + tf1._rotation12 * src1._rotation22;
				__tmp__20 = tf1._rotation20 * src1._rotation00 + tf1._rotation21 * src1._rotation10 + tf1._rotation22 * src1._rotation20;
				__tmp__21 = tf1._rotation20 * src1._rotation01 + tf1._rotation21 * src1._rotation11 + tf1._rotation22 * src1._rotation21;
				__tmp__22 = tf1._rotation20 * src1._rotation02 + tf1._rotation21 * src1._rotation12 + tf1._rotation22 * src1._rotation22;
				dst._rotation00 = __tmp__00;
				dst._rotation01 = __tmp__01;
				dst._rotation02 = __tmp__02;
				dst._rotation10 = __tmp__10;
				dst._rotation11 = __tmp__11;
				dst._rotation12 = __tmp__12;
				dst._rotation20 = __tmp__20;
				dst._rotation21 = __tmp__21;
				dst._rotation22 = __tmp__22;
				var __tmp__X;
				var __tmp__Y;
				var __tmp__Z;
				__tmp__X = tf1._rotation00 * src1._positionX + tf1._rotation01 * src1._positionY + tf1._rotation02 * src1._positionZ;
				__tmp__Y = tf1._rotation10 * src1._positionX + tf1._rotation11 * src1._positionY + tf1._rotation12 * src1._positionZ;
				__tmp__Z = tf1._rotation20 * src1._positionX + tf1._rotation21 * src1._positionY + tf1._rotation22 * src1._positionZ;
				dst._positionX = __tmp__X;
				dst._positionY = __tmp__Y;
				dst._positionZ = __tmp__Z;
				dst._positionX += tf1._positionX;
				dst._positionY += tf1._positionY;
				dst._positionZ += tf1._positionZ;
				var dst1 = s._transform;
				var src11 = s._localTransform;
				var __tmp__001;
				var __tmp__011;
				var __tmp__021;
				var __tmp__101;
				var __tmp__111;
				var __tmp__121;
				var __tmp__201;
				var __tmp__211;
				var __tmp__221;
				__tmp__001 = tf2._rotation00 * src11._rotation00 + tf2._rotation01 * src11._rotation10 + tf2._rotation02 * src11._rotation20;
				__tmp__011 = tf2._rotation00 * src11._rotation01 + tf2._rotation01 * src11._rotation11 + tf2._rotation02 * src11._rotation21;
				__tmp__021 = tf2._rotation00 * src11._rotation02 + tf2._rotation01 * src11._rotation12 + tf2._rotation02 * src11._rotation22;
				__tmp__101 = tf2._rotation10 * src11._rotation00 + tf2._rotation11 * src11._rotation10 + tf2._rotation12 * src11._rotation20;
				__tmp__111 = tf2._rotation10 * src11._rotation01 + tf2._rotation11 * src11._rotation11 + tf2._rotation12 * src11._rotation21;
				__tmp__121 = tf2._rotation10 * src11._rotation02 + tf2._rotation11 * src11._rotation12 + tf2._rotation12 * src11._rotation22;
				__tmp__201 = tf2._rotation20 * src11._rotation00 + tf2._rotation21 * src11._rotation10 + tf2._rotation22 * src11._rotation20;
				__tmp__211 = tf2._rotation20 * src11._rotation01 + tf2._rotation21 * src11._rotation11 + tf2._rotation22 * src11._rotation21;
				__tmp__221 = tf2._rotation20 * src11._rotation02 + tf2._rotation21 * src11._rotation12 + tf2._rotation22 * src11._rotation22;
				dst1._rotation00 = __tmp__001;
				dst1._rotation01 = __tmp__011;
				dst1._rotation02 = __tmp__021;
				dst1._rotation10 = __tmp__101;
				dst1._rotation11 = __tmp__111;
				dst1._rotation12 = __tmp__121;
				dst1._rotation20 = __tmp__201;
				dst1._rotation21 = __tmp__211;
				dst1._rotation22 = __tmp__221;
				var __tmp__X1;
				var __tmp__Y1;
				var __tmp__Z1;
				__tmp__X1 = tf2._rotation00 * src11._positionX + tf2._rotation01 * src11._positionY + tf2._rotation02 * src11._positionZ;
				__tmp__Y1 = tf2._rotation10 * src11._positionX + tf2._rotation11 * src11._positionY + tf2._rotation12 * src11._positionZ;
				__tmp__Z1 = tf2._rotation20 * src11._positionX + tf2._rotation21 * src11._positionY + tf2._rotation22 * src11._positionZ;
				dst1._positionX = __tmp__X1;
				dst1._positionY = __tmp__Y1;
				dst1._positionZ = __tmp__Z1;
				dst1._positionX += tf2._positionX;
				dst1._positionY += tf2._positionY;
				dst1._positionZ += tf2._positionZ;
				var minX;
				var minY;
				var minZ;
				var maxX;
				var maxY;
				var maxZ;
				s._geom._computeAabb(s._aabb,s._ptransform);
				minX = s._aabb._minX;
				minY = s._aabb._minY;
				minZ = s._aabb._minZ;
				maxX = s._aabb._maxX;
				maxY = s._aabb._maxY;
				maxZ = s._aabb._maxZ;
				s._geom._computeAabb(s._aabb,s._transform);
				s._aabb._minX = minX < s._aabb._minX ? minX : s._aabb._minX;
				s._aabb._minY = minY < s._aabb._minY ? minY : s._aabb._minY;
				s._aabb._minZ = minZ < s._aabb._minZ ? minZ : s._aabb._minZ;
				s._aabb._maxX = maxX > s._aabb._maxX ? maxX : s._aabb._maxX;
				s._aabb._maxY = maxY > s._aabb._maxY ? maxY : s._aabb._maxY;
				s._aabb._maxZ = maxZ > s._aabb._maxZ ? maxZ : s._aabb._maxZ;
				if(s._proxy != null) {
					var dX;
					var dY;
					var dZ;
					dX = s._transform._positionX - s._ptransform._positionX;
					dY = s._transform._positionY - s._ptransform._positionY;
					dZ = s._transform._positionZ - s._ptransform._positionZ;
					var v = s.displacement;
					v.x = dX;
					v.y = dY;
					v.z = dZ;
					s._rigidBody._world._broadPhase.moveProxy(s._proxy,s._aabb,s.displacement);
				}
				s = n;
			}
		}
	}
	,getDensity: function() {
		return this._density;
	}
	,setDensity: function(density) {
		this._density = density;
		if(this._rigidBody != null) {
			var _this = this._rigidBody;
			_this.updateMass();
			var s = _this._shapeList;
			while(s != null) {
				var n = s._next;
				var tf1 = _this._ptransform;
				var tf2 = _this._transform;
				var dst = s._ptransform;
				var src1 = s._localTransform;
				var __tmp__00;
				var __tmp__01;
				var __tmp__02;
				var __tmp__10;
				var __tmp__11;
				var __tmp__12;
				var __tmp__20;
				var __tmp__21;
				var __tmp__22;
				__tmp__00 = tf1._rotation00 * src1._rotation00 + tf1._rotation01 * src1._rotation10 + tf1._rotation02 * src1._rotation20;
				__tmp__01 = tf1._rotation00 * src1._rotation01 + tf1._rotation01 * src1._rotation11 + tf1._rotation02 * src1._rotation21;
				__tmp__02 = tf1._rotation00 * src1._rotation02 + tf1._rotation01 * src1._rotation12 + tf1._rotation02 * src1._rotation22;
				__tmp__10 = tf1._rotation10 * src1._rotation00 + tf1._rotation11 * src1._rotation10 + tf1._rotation12 * src1._rotation20;
				__tmp__11 = tf1._rotation10 * src1._rotation01 + tf1._rotation11 * src1._rotation11 + tf1._rotation12 * src1._rotation21;
				__tmp__12 = tf1._rotation10 * src1._rotation02 + tf1._rotation11 * src1._rotation12 + tf1._rotation12 * src1._rotation22;
				__tmp__20 = tf1._rotation20 * src1._rotation00 + tf1._rotation21 * src1._rotation10 + tf1._rotation22 * src1._rotation20;
				__tmp__21 = tf1._rotation20 * src1._rotation01 + tf1._rotation21 * src1._rotation11 + tf1._rotation22 * src1._rotation21;
				__tmp__22 = tf1._rotation20 * src1._rotation02 + tf1._rotation21 * src1._rotation12 + tf1._rotation22 * src1._rotation22;
				dst._rotation00 = __tmp__00;
				dst._rotation01 = __tmp__01;
				dst._rotation02 = __tmp__02;
				dst._rotation10 = __tmp__10;
				dst._rotation11 = __tmp__11;
				dst._rotation12 = __tmp__12;
				dst._rotation20 = __tmp__20;
				dst._rotation21 = __tmp__21;
				dst._rotation22 = __tmp__22;
				var __tmp__X;
				var __tmp__Y;
				var __tmp__Z;
				__tmp__X = tf1._rotation00 * src1._positionX + tf1._rotation01 * src1._positionY + tf1._rotation02 * src1._positionZ;
				__tmp__Y = tf1._rotation10 * src1._positionX + tf1._rotation11 * src1._positionY + tf1._rotation12 * src1._positionZ;
				__tmp__Z = tf1._rotation20 * src1._positionX + tf1._rotation21 * src1._positionY + tf1._rotation22 * src1._positionZ;
				dst._positionX = __tmp__X;
				dst._positionY = __tmp__Y;
				dst._positionZ = __tmp__Z;
				dst._positionX += tf1._positionX;
				dst._positionY += tf1._positionY;
				dst._positionZ += tf1._positionZ;
				var dst1 = s._transform;
				var src11 = s._localTransform;
				var __tmp__001;
				var __tmp__011;
				var __tmp__021;
				var __tmp__101;
				var __tmp__111;
				var __tmp__121;
				var __tmp__201;
				var __tmp__211;
				var __tmp__221;
				__tmp__001 = tf2._rotation00 * src11._rotation00 + tf2._rotation01 * src11._rotation10 + tf2._rotation02 * src11._rotation20;
				__tmp__011 = tf2._rotation00 * src11._rotation01 + tf2._rotation01 * src11._rotation11 + tf2._rotation02 * src11._rotation21;
				__tmp__021 = tf2._rotation00 * src11._rotation02 + tf2._rotation01 * src11._rotation12 + tf2._rotation02 * src11._rotation22;
				__tmp__101 = tf2._rotation10 * src11._rotation00 + tf2._rotation11 * src11._rotation10 + tf2._rotation12 * src11._rotation20;
				__tmp__111 = tf2._rotation10 * src11._rotation01 + tf2._rotation11 * src11._rotation11 + tf2._rotation12 * src11._rotation21;
				__tmp__121 = tf2._rotation10 * src11._rotation02 + tf2._rotation11 * src11._rotation12 + tf2._rotation12 * src11._rotation22;
				__tmp__201 = tf2._rotation20 * src11._rotation00 + tf2._rotation21 * src11._rotation10 + tf2._rotation22 * src11._rotation20;
				__tmp__211 = tf2._rotation20 * src11._rotation01 + tf2._rotation21 * src11._rotation11 + tf2._rotation22 * src11._rotation21;
				__tmp__221 = tf2._rotation20 * src11._rotation02 + tf2._rotation21 * src11._rotation12 + tf2._rotation22 * src11._rotation22;
				dst1._rotation00 = __tmp__001;
				dst1._rotation01 = __tmp__011;
				dst1._rotation02 = __tmp__021;
				dst1._rotation10 = __tmp__101;
				dst1._rotation11 = __tmp__111;
				dst1._rotation12 = __tmp__121;
				dst1._rotation20 = __tmp__201;
				dst1._rotation21 = __tmp__211;
				dst1._rotation22 = __tmp__221;
				var __tmp__X1;
				var __tmp__Y1;
				var __tmp__Z1;
				__tmp__X1 = tf2._rotation00 * src11._positionX + tf2._rotation01 * src11._positionY + tf2._rotation02 * src11._positionZ;
				__tmp__Y1 = tf2._rotation10 * src11._positionX + tf2._rotation11 * src11._positionY + tf2._rotation12 * src11._positionZ;
				__tmp__Z1 = tf2._rotation20 * src11._positionX + tf2._rotation21 * src11._positionY + tf2._rotation22 * src11._positionZ;
				dst1._positionX = __tmp__X1;
				dst1._positionY = __tmp__Y1;
				dst1._positionZ = __tmp__Z1;
				dst1._positionX += tf2._positionX;
				dst1._positionY += tf2._positionY;
				dst1._positionZ += tf2._positionZ;
				var minX;
				var minY;
				var minZ;
				var maxX;
				var maxY;
				var maxZ;
				s._geom._computeAabb(s._aabb,s._ptransform);
				minX = s._aabb._minX;
				minY = s._aabb._minY;
				minZ = s._aabb._minZ;
				maxX = s._aabb._maxX;
				maxY = s._aabb._maxY;
				maxZ = s._aabb._maxZ;
				s._geom._computeAabb(s._aabb,s._transform);
				s._aabb._minX = minX < s._aabb._minX ? minX : s._aabb._minX;
				s._aabb._minY = minY < s._aabb._minY ? minY : s._aabb._minY;
				s._aabb._minZ = minZ < s._aabb._minZ ? minZ : s._aabb._minZ;
				s._aabb._maxX = maxX > s._aabb._maxX ? maxX : s._aabb._maxX;
				s._aabb._maxY = maxY > s._aabb._maxY ? maxY : s._aabb._maxY;
				s._aabb._maxZ = maxZ > s._aabb._maxZ ? maxZ : s._aabb._maxZ;
				if(s._proxy != null) {
					var dX;
					var dY;
					var dZ;
					dX = s._transform._positionX - s._ptransform._positionX;
					dY = s._transform._positionY - s._ptransform._positionY;
					dZ = s._transform._positionZ - s._ptransform._positionZ;
					var v = s.displacement;
					v.x = dX;
					v.y = dY;
					v.z = dZ;
					s._rigidBody._world._broadPhase.moveProxy(s._proxy,s._aabb,s.displacement);
				}
				s = n;
			}
		}
	}
	,getAabb: function() {
		return this._aabb.clone();
	}
	,getAabbTo: function(aabb) {
		aabb.copyFrom(this._aabb);
	}
	,getGeometry: function() {
		return this._geom;
	}
	,getRigidBody: function() {
		return this._rigidBody;
	}
	,getCollisionGroup: function() {
		return this._collisionGroup;
	}
	,setCollisionGroup: function(collisionGroup) {
		this._collisionGroup = collisionGroup;
	}
	,getCollisionMask: function() {
		return this._collisionMask;
	}
	,setCollisionMask: function(collisionMask) {
		this._collisionMask = collisionMask;
	}
	,getContactCallback: function() {
		return this._contactCallback;
	}
	,setContactCallback: function(callback) {
		this._contactCallback = callback;
	}
	,getPrev: function() {
		return this._prev;
	}
	,getNext: function() {
		return this._next;
	}
	,__class__: oimo_dynamics_rigidbody_Shape
};
var oimo_dynamics_rigidbody_ShapeConfig = function() {
	this.position = new oimo_common_Vec3();
	this.rotation = new oimo_common_Mat3();
	this.friction = oimo_common_Setting.defaultFriction;
	this.restitution = oimo_common_Setting.defaultRestitution;
	this.density = oimo_common_Setting.defaultDensity;
	this.collisionGroup = oimo_common_Setting.defaultCollisionGroup;
	this.collisionMask = oimo_common_Setting.defaultCollisionMask;
	this.geometry = null;
	this.contactCallback = null;
};
oimo_dynamics_rigidbody_ShapeConfig.__name__ = true;
oimo_dynamics_rigidbody_ShapeConfig.prototype = {
	__class__: oimo_dynamics_rigidbody_ShapeConfig
};
var oimo_m_M = function() { };
oimo_m_M.__name__ = true;
var $_;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
Date.prototype.__class__ = Date;
Date.__name__ = "Date";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
js_Boot.__toStr = ({ }).toString;
demo_common_UserInput.KEYBOARD_LENGTH = 256;
demo_common_UserInput.KEYCODE_LEFT = 37;
demo_common_UserInput.KEYCODE_UP = 38;
demo_common_UserInput.KEYCODE_RIGHT = 39;
demo_common_UserInput.KEYCODE_DOWN = 40;
demo_common_UserInput.KEYCODE_ENTER = 13;
demo_common_UserInput.KEYCODE_RETURN = 13;
demo_core_BroadPhaseStressDemo.RIGID_BODIES_STEP = 100;
demo_core_BroadPhaseStressDemo.FIELD_W = 50;
demo_core_BroadPhaseStressDemo.FIELD_H = 50;
demo_core_BroadPhaseStressDemo.FIELD_D = 50;
demo_core_CollisionFilteringDemo.G_FLOOR = 1;
demo_core_CollisionFilteringDemo.G_WALL = 2;
demo_core_CollisionFilteringDemo.G_BALL = 4;
demo_core_CollisionFilteringDemo.G_BOX = 8;
oimo_dynamics_common_DebugDraw.SPHERE_PHI_DIVISION = 8;
oimo_dynamics_common_DebugDraw.SPHERE_THETA_DIVISION = 4;
oimo_dynamics_common_DebugDraw.CIRCLE_THETA_DIVISION = 8;
oimo_collision_broadphase_BroadPhaseType._BRUTE_FORCE = 1;
oimo_collision_broadphase_BroadPhaseType._BVH = 2;
oimo_collision_broadphase_BroadPhaseType.BRUTE_FORCE = 1;
oimo_collision_broadphase_BroadPhaseType.BVH = 2;
oimo_collision_broadphase_bvh_BvhInsertionStrategy.SIMPLE = 0;
oimo_collision_broadphase_bvh_BvhInsertionStrategy.MINIMIZE_SURFACE_AREA = 1;
oimo_collision_geometry_GeometryType._SPHERE = 0;
oimo_collision_geometry_GeometryType._BOX = 1;
oimo_collision_geometry_GeometryType._CYLINDER = 2;
oimo_collision_geometry_GeometryType._CONE = 3;
oimo_collision_geometry_GeometryType._CAPSULE = 4;
oimo_collision_geometry_GeometryType._CONVEX_HULL = 5;
oimo_collision_geometry_GeometryType._CONVEX_MIN = 0;
oimo_collision_geometry_GeometryType._CONVEX_MAX = 5;
oimo_collision_geometry_GeometryType.SPHERE = 0;
oimo_collision_geometry_GeometryType.BOX = 1;
oimo_collision_geometry_GeometryType.CYLINDER = 2;
oimo_collision_geometry_GeometryType.CONE = 3;
oimo_collision_geometry_GeometryType.CAPSULE = 4;
oimo_collision_geometry_GeometryType.CONVEX_HULL = 5;
oimo_collision_narrowphase_detector_BoxBoxDetector.EDGE_BIAS_MULT = 1.0;
oimo_collision_narrowphase_detector_gjkepa_EpaPolyhedronState.OK = 0;
oimo_collision_narrowphase_detector_gjkepa_EpaPolyhedronState.INVALID_TRIANGLE = 1;
oimo_collision_narrowphase_detector_gjkepa_EpaPolyhedronState.NO_ADJACENT_PAIR_INDEX = 2;
oimo_collision_narrowphase_detector_gjkepa_EpaPolyhedronState.NO_ADJACENT_TRIANGLE = 3;
oimo_collision_narrowphase_detector_gjkepa_EpaPolyhedronState.EDGE_LOOP_BROKEN = 4;
oimo_collision_narrowphase_detector_gjkepa_EpaPolyhedronState.NO_OUTER_TRIANGLE = 5;
oimo_collision_narrowphase_detector_gjkepa_EpaPolyhedronState.TRIANGLE_INVISIBLE = 6;
oimo_collision_narrowphase_detector_gjkepa_EpaTriangle.count = 0;
oimo_common_Vec3.numCreations = 0;
oimo_common_Setting.defaultFriction = 0.2;
oimo_common_Setting.defaultRestitution = 0.2;
oimo_common_Setting.defaultDensity = 1;
oimo_common_Setting.defaultCollisionGroup = 1;
oimo_common_Setting.defaultCollisionMask = 1;
oimo_common_Setting.maxTranslationPerStep = 20;
oimo_common_Setting.maxRotationPerStep = 3.14159265358979;
oimo_common_Setting.bvhProxyPadding = 0.1;
oimo_common_Setting.bvhIncrementalCollisionThreshold = 0.45;
oimo_common_Setting.defaultGJKMargin = 0.05;
oimo_common_Setting.enableGJKCaching = true;
oimo_common_Setting.maxEPAVertices = 128;
oimo_common_Setting.maxEPAPolyhedronFaces = 128;
oimo_common_Setting.contactEnableBounceThreshold = 0.5;
oimo_common_Setting.velocityBaumgarte = 0.2;
oimo_common_Setting.positionSplitImpulseBaumgarte = 0.4;
oimo_common_Setting.positionNgsBaumgarte = 1.0;
oimo_common_Setting.contactUseAlternativePositionCorrectionAlgorithmDepthThreshold = 0.05;
oimo_common_Setting.defaultContactPositionCorrectionAlgorithm = 0;
oimo_common_Setting.alternativeContactPositionCorrectionAlgorithm = 1;
oimo_common_Setting.contactPersistenceThreshold = 0.05;
oimo_common_Setting.maxManifoldPoints = 4;
oimo_common_Setting.defaultJointConstraintSolverType = 0;
oimo_common_Setting.defaultJointPositionCorrectionAlgorithm = 0;
oimo_common_Setting.jointWarmStartingFactorForBaungarte = 0.8;
oimo_common_Setting.jointWarmStartingFactor = 0.95;
oimo_common_Setting.minSpringDamperDampingRatio = 1e-6;
oimo_common_Setting.minRagdollMaxSwingAngle = 1e-6;
oimo_common_Setting.maxJacobianRows = 6;
oimo_common_Setting.directMlcpSolverEps = 1e-9;
oimo_common_Setting.islandInitialRigidBodyArraySize = 128;
oimo_common_Setting.islandInitialConstraintArraySize = 128;
oimo_common_Setting.sleepingVelocityThreshold = 0.2;
oimo_common_Setting.sleepingAngularVelocityThreshold = 0.5;
oimo_common_Setting.sleepingTimeThreshold = 1.0;
oimo_common_Setting.disableSleeping = false;
oimo_common_Setting.linearSlop = 0.005;
oimo_common_Setting.angularSlop = 0.017453292519943278;
oimo_collision_narrowphase_detector_gjkepa_GjkEpa.instance = new oimo_collision_narrowphase_detector_gjkepa_GjkEpa();
oimo_collision_narrowphase_detector_gjkepa_GjkEpaResultState._SUCCEEDED = 0;
oimo_collision_narrowphase_detector_gjkepa_GjkEpaResultState._GJK_FAILED_TO_MAKE_TETRAHEDRON = 1;
oimo_collision_narrowphase_detector_gjkepa_GjkEpaResultState._GJK_DID_NOT_CONVERGE = 2;
oimo_collision_narrowphase_detector_gjkepa_GjkEpaResultState._EPA_FAILED_TO_INIT = 257;
oimo_collision_narrowphase_detector_gjkepa_GjkEpaResultState._EPA_FAILED_TO_ADD_VERTEX = 258;
oimo_collision_narrowphase_detector_gjkepa_GjkEpaResultState._EPA_DID_NOT_CONVERGE = 259;
oimo_collision_narrowphase_detector_gjkepa_GjkEpaResultState.SUCCEEDED = 0;
oimo_collision_narrowphase_detector_gjkepa_GjkEpaResultState.GJK_FAILED_TO_MAKE_TETRAHEDRON = 1;
oimo_collision_narrowphase_detector_gjkepa_GjkEpaResultState.GJK_DID_NOT_CONVERGE = 2;
oimo_collision_narrowphase_detector_gjkepa_GjkEpaResultState.EPA_FAILED_TO_INIT = 257;
oimo_collision_narrowphase_detector_gjkepa_GjkEpaResultState.EPA_FAILED_TO_ADD_VERTEX = 258;
oimo_collision_narrowphase_detector_gjkepa_GjkEpaResultState.EPA_DID_NOT_CONVERGE = 259;
oimo_common_Mat3.numCreations = 0;
oimo_common_Mat4.numCreations = 0;
oimo_common_MathUtil.POSITIVE_INFINITY = 1e65536;
oimo_common_MathUtil.NEGATIVE_INFINITY = -1e65536;
oimo_common_MathUtil.PI = 3.14159265358979;
oimo_common_MathUtil.TWO_PI = 6.28318530717958;
oimo_common_MathUtil.HALF_PI = 1.570796326794895;
oimo_common_MathUtil.TO_RADIANS = 0.017453292519943278;
oimo_common_MathUtil.TO_DEGREES = 57.29577951308238;
oimo_common_Quat.numCreations = 0;
oimo_dynamics_common_Performance.broadPhaseCollisionTime = 0;
oimo_dynamics_common_Performance.narrowPhaseCollisionTime = 0;
oimo_dynamics_common_Performance.dynamicsTime = 0;
oimo_dynamics_common_Performance.totalTime = 0;
oimo_dynamics_constraint_PositionCorrectionAlgorithm._BAUMGARTE = 0;
oimo_dynamics_constraint_PositionCorrectionAlgorithm._SPLIT_IMPULSE = 1;
oimo_dynamics_constraint_PositionCorrectionAlgorithm._NGS = 2;
oimo_dynamics_constraint_PositionCorrectionAlgorithm.BAUMGARTE = 0;
oimo_dynamics_constraint_PositionCorrectionAlgorithm.SPLIT_IMPULSE = 1;
oimo_dynamics_constraint_PositionCorrectionAlgorithm.NGS = 2;
oimo_dynamics_constraint_info_JacobianRow.BIT_LINEAR_SET = 1;
oimo_dynamics_constraint_info_JacobianRow.BIT_ANGULAR_SET = 2;
oimo_dynamics_constraint_joint_JointType._SPHERICAL = 0;
oimo_dynamics_constraint_joint_JointType._REVOLUTE = 1;
oimo_dynamics_constraint_joint_JointType._CYLINDRICAL = 2;
oimo_dynamics_constraint_joint_JointType._PRISMATIC = 3;
oimo_dynamics_constraint_joint_JointType._UNIVERSAL = 4;
oimo_dynamics_constraint_joint_JointType._RAGDOLL = 5;
oimo_dynamics_constraint_joint_JointType._GENERIC = 6;
oimo_dynamics_constraint_joint_JointType.SPHERICAL = 0;
oimo_dynamics_constraint_joint_JointType.REVOLUTE = 1;
oimo_dynamics_constraint_joint_JointType.CYLINDRICAL = 2;
oimo_dynamics_constraint_joint_JointType.PRISMATIC = 3;
oimo_dynamics_constraint_joint_JointType.UNIVERSAL = 4;
oimo_dynamics_constraint_joint_JointType.RAGDOLL = 5;
oimo_dynamics_constraint_joint_JointType.GENERIC = 6;
oimo_dynamics_constraint_solver_ConstraintSolverType._ITERATIVE = 0;
oimo_dynamics_constraint_solver_ConstraintSolverType._DIRECT = 1;
oimo_dynamics_constraint_solver_ConstraintSolverType.ITERATIVE = 0;
oimo_dynamics_constraint_solver_ConstraintSolverType.DIRECT = 1;
oimo_dynamics_rigidbody_RigidBodyType._DYNAMIC = 0;
oimo_dynamics_rigidbody_RigidBodyType._STATIC = 1;
oimo_dynamics_rigidbody_RigidBodyType._KINEMATIC = 2;
oimo_dynamics_rigidbody_RigidBodyType.DYNAMIC = 0;
oimo_dynamics_rigidbody_RigidBodyType.STATIC = 1;
oimo_dynamics_rigidbody_RigidBodyType.KINEMATIC = 2;
demo_js_DemoJS.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
